["```ts\ndescribe(\"short description about the test suite\", function() { \n}); \n```", "```ts\ndescribe(\"short description about the test suite\", function() { \n  it(\"a spec with single expectation\", function() { \n    expect(true).toBe(true); \n  }); \n}); \n```", "```ts\ndescribe(\"short description about the test suite\", function() { \nit(\"a spec with single expectation\", function() { \nexpect(afunction).toThrow(e); \nexpect(true).toBe(true); \nexpect(variable).toBeDefined(); \nexpect(variable).toBeFalsy(); \nexpect(number).toBeGreaterThan(number); \nexpect(number).toBeLessThan(number); \nexpect(variable).toBeNull(); \nexpect(variable).toBeTruthy(); \nexpect(value).toBeUndefined(); \nexpect(array).toContain(member); \nexpect(string).toContain(substring); \nexpect(variable).toEqual(variable); \nexpect(value).toMatch(pattern); \n  }); \n}); \n```", "```ts\nTodo class:\n```", "```ts\nexport class Todo { \n    title: string; \n    completed: boolean;\n    constructor(title: string) { \n        this.title = title; \n        this.completed = false; \n    } \n    set isCompleted(value: boolean) { \n        this.completed = value; \n    } \n} \n```", "```ts\nimport { Todo } from './todo' \nexport class TodoService { \n    todos: Array<Todo> \n    constructor() { \n        this.todos = [new Todo('First item'), \n        new Todo('Second item'), \n        new Todo('Third item')]; \n    } \n    getPending() { \n        return this.todos.filter((todo: Todo) => todo.completed === \n        false); \n    } \n    getCompleted() { \n        return this.todos.filter((todo: Todo) => todo.completed === \n        true); \n    } \n    remove(todo: Todo) { \n        this.todos.splice(this.todos.indexOf(todo), 1); \n    } \n    add(title: string) { \n        this.todos.push(new Todo(title)); \n    } \n    toggleCompletion(todo: Todo) { \n        todo.completed = !todo.completed; \n    } \n    removeCompleted() { \n        this.todos = this.getPending(); \n    } \n} \n```", "```ts\nimport { TodoService } from \"./todo.service\"; \n```", "```ts\ndescribe(\"TodoService Testing\",() => { \n}); \ndescribe function with beforeEach is given here:\n```", "```ts\ndescribe('TodoService Testing', () => { \n  let service: TodoService; \n  beforeEach(() => { service = new TodoService(); });   \n}); \n```", "```ts\nit('getPending length should return 3', () => { \n    expect(service.getPending().length).toBe(3); \n}); \nit('getCompleted length should return 0', () => { \n    expect(service.getCompleted().length).toBe(0); \n}); \n```", "```ts\ntodo.service.spec.ts is this:\n```", "```ts\nimport { TodoService } from \"./todo.service\";  \ndescribe('TodoService Testing', () => { \n  let service: TodoService; \n  beforeEach(() => { service = new TodoService(); }); \n  it('getPending length should return 3', () => { \n    expect(service.getPending().length).toBe(3); \n  }); \n  it('getCompleted length should return 0', () => { \n    expect(service.getCompleted().length).toBe(0); \n  }); \n}); \n```", "```ts\nnpm run build:watchkarma start karma.conf.js\n```", "```ts\nmodule.exports = function(config)   {    \n  var appBase    = 'src/';         // transpiled app JS and map files   \n  var appAssets  = '/base/app/';   // component assets fetched by  \n  Angular's compiler   \n  // Testing helpers (optional)   are conventionally in a folder called \n     `testing`   \n  var testingBase    = 'src/testing/';   // transpiled test JS and map  \n  files   \n  var testingSrcBase = 'src/testing/';   // test source TS    \n   files   \n  config.set({   \n    basePath: '',   \n    frameworks: ['jasmine'],   \n    plugins: [   \n      require('karma-jasmine'),   \n      require('karma-chrome-launcher'),   \n      require('karma-jasmine-html-reporter')   \n    ],   \n    client: \n  {   \n      builtPaths: [appBase,   testingBase], // add more \n      spec base paths \n      as needed   \n      clearContext: false //   leave Jasmine Spec Runner \n      output visible  \n      in browser   \n    },   \n    customLaunchers: {   \n      // From the CLI. Not used   here but interesting   \n      // chrome setup for travis   CI using chromium   \n      Chrome_travis_ci: {   \n        base: 'Chrome',   \n        flags: ['--no-sandbox']   \n      }   \n    },   \n    files: [   \n      // System.js for module   loading   \n      'node_modules/systemjs/dist/system.src.js',   \n      // Polyfills   \n      'node_modules/core-js/client/shim.js',   \n      // zone.js   \n      'node_modules/zone.js/dist/zone.js',   \n      'node_modules/zone.js/dist/long-stack-trace-\n       zone.js',   \n      'node_modules/zone.js/dist/proxy.js',   \n      'node_modules/zone.js/dist/sync-test.js',   \n      'node_modules/zone.js/dist/jasmine-patch.js',   \n      'node_modules/zone.js/dist/async-test.js',   \n      'node_modules/zone.js/dist/fake-async-test.js',   \n      // RxJs   \n      { pattern: 'node_modules/rxjs/**/*.js',   included: \n        false, \n        watched: false },   \n      { pattern: 'node_modules/rxjs/**/*.js.map',   \n        included: false, \n        watched: false },   \n      // Paths loaded via module   imports:   \n      // Angular itself   \n      { pattern: 'node_modules/@angular/**/*.js',   \n        included: false, \n        watched: false },   \n      { pattern: 'node_modules/@angular/**/*.js.map',   \n        included: \n        false, watched: false },   \n      { pattern: appBase + '/systemjs.config.js',   \n        included: false, \n         watched: false },   \n      { pattern: appBase + '/systemjs.config.extras.js',   \n        included: \n        false, watched: false },   \n      'karma-test-shim.js', //   optionally extend \n       SystemJS mapping \n       e.g., with barrels   \n      // transpiled application   & spec code paths loaded \n         via module \n         imports   \n      { pattern: appBase + '**/*.js',   included: false, \n        watched: true   \n  },   \n      { pattern: testingBase + '**/*.js',   included: \n        false, watched:  \n        true \n  },   \n      // Asset (HTML & CSS)   paths loaded via Angular's \n         component    \n         compiler   \n      // (these paths need to be   rewritten, see proxies \n          section)   \n      { pattern: appBase + '**/*.html',   included: false, \n        watched: \n        true \n  },   \n      { pattern: appBase + '**/*.css',   included: false, \n        watched: true        \n  },    \n      // Paths for debugging with   source maps in dev    \n         tools   \n      { pattern: appBase + '**/*.ts',   included: false, \n        watched: false   \n  },   \n      { pattern: appBase + '**/*.js.map',   included: \n        false, watched: \n        false \n  },   \n      { pattern: testingSrcBase +   '**/*.ts', included: \n        false, \n        watched: false },   \n      { pattern: testingBase + '**/*.js.map',   included: \n        false, \n        watched: false}   \n    ],   \n    // Proxied base paths for   loading assets   \n        proxies: \n  {   \n      // required for modules   fetched by SystemJS   \n      '/base/src/node_modules/': '/base/node_modules/'   \n  },   \n    exclude: [],   \n    preprocessors: {},   \n    reporters: ['progress', 'kjhtml'],   \n    port: 9876,   \n    colors: true,   \n    logLevel: config.LOG_INFO,   \n    autoWatch: true,   \n    browsers: ['Chrome'],   \n    singleRun: false   \n   })   \n }   \n```", "```ts\nC:\\Users\\rajesh.g\\Packt\\Chapter8\\mytodos>npm     \n            test> my-todo@1.0.0 pretest   \n          C:\\Users\\rajesh.g\\Packt\\Chapter8\\mytodos> npm run build> my-todo@1.0.0 build   \n          C:\\Users\\rajesh.g\\Packt\\Chapter8\\mytodos> tsc -p src/> my-todo@1.0.0 test   \n          C:\\Users\\rajesh.g\\Packt\\Chapter8\\mytodos> concurrently \"npm run   build:watch\" \"karma \n            start \n            karma.conf.js\"\n```", "```ts\n        import { Component } from '@angular/core'; \n        import { Todo } from './todo'; \n        import { TodoService } from './todo.service'; \n```", "```ts\n        export class AppComponent {} \n```", "```ts\n        @Component({ \n            selector: 'my-app', \n            templateUrl: './app.component.html', \n            providers: [TodoService] \n        }) \n        export class AppComponent {     \n        } \n```", "```ts\n        todos: Array<Todo>; \n        todoService: TodoService; \n        newTodoText = ''; \n        title = 'Test My Todo App'; \n```", "```ts\n        constructor(todoService: TodoService) \n        { \n              this.todoService = todoService; \n              this.todos = todoService.todos; \n        } \n```", "```ts\n        addTodo() \n        { \n              if (this.newTodoText.trim().length) \n              { \n                  this.todoService.add(this.newTodoText); \n                  this.newTodoText = ''; \n              } \n        }\n```", "```ts\n       remove(todo: Todo) \n       { \n              this.todoService.remove(todo); \n       } \n```", "```ts\n      removeCompleted() \n      { \n            this.todoService.removeCompleted(); \n      } \n```", "```ts\n      toggleCompletion(todo: Todo) \n      { \n             todo.completed = !todo.completed; \n      } \nAppComponent is this:\n```", "```ts\nimport { Component } from '@angular/core'; \nimport { Todo } from './todo'; \nimport { TodoService } from './todo.service'; \n@Component({ \n    selector: 'my-app', \n    templateUrl: './app.component.html', \n    providers: [TodoService] \n}) \nexport class AppComponent { \n    todos: Array<Todo>; \n    todoService: TodoService; \n    newTodoText = ''; \n    title = 'Test My Todo App'; \n    constructor(todoService: TodoService) { \n        this.todoService = todoService; \n        this.todos = todoService.todos; \n    } \n    removeCompleted() { \n        this.todoService.removeCompleted(); \n    } \n    toggleCompletion(todo: Todo) { \n        this.todoService.toggleCompletion(todo); \n    } \n    remove(todo: Todo) { \n        this.todoService.remove(todo); \n    } \n    addTodo() { \n        if (this.newTodoText.trim().length) { \n            this.todoService.add(this.newTodoText); \n            this.newTodoText = ''; \n        } \n    } \n} \n```", "```ts\n     describe('AppComponent (templateUrl)', () => {\n       let comp:    AppComponent; \n       let fixture: ComponentFixture<AppComponent>; \n       let de:      DebugElement; \n       let el:      HTMLElement; \n     });\n```", "```ts\n    // async beforeEach \n    beforeEach(async(() => { \n        TestBed.configureTestingModule({ \n          imports: [FormsModule], \n          declarations: [ AppComponent ], // declare the     \n    test component \n        }) \n        .compileComponents();  // compile template and css \n     })); \n     // synchronous beforeEach \n     beforeEach(() => { \n        fixture = TestBed.createComponent(AppComponent); \n        comp = fixture.componentInstance; // AppComponent     \n    test instance \n        // query for the title <h1> by CSS element    \n           selector \n        de = fixture.debugElement.query(By.css('h1')); \n        el = de.nativeElement; \n     }); \n```", "```ts\n    it('no title in the DOM until manually call     \n    `detectChanges`', () => { \n    expect(el.textContent).toEqual(''); \n    }); \n    it('should display original title', () => { \n        fixture.detectChanges(); \n        expect(el.textContent).toContain(comp.title); \n    });\n    it('should display a different test title', () => { \n        comp.title = 'Test My Todo'; \n        fixture.detectChanges(); \n        expect(el.textContent).toContain('Test My Todo'); \n    }); \napp.component.spec.ts is as follows:\n```", "```ts\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing'; \nimport { FormsModule } from '@angular/forms'; \nimport { By }              from '@angular/platform-browser'; \nimport { DebugElement }    from '@angular/core'; \nimport { AppComponent } from './app.component'; \ndescribe('AppComponent (templateUrl)', () => { \n  let comp:    AppComponent; \n  let fixture: ComponentFixture<AppComponent>; \n  let de:      DebugElement; \n  let el:      HTMLElement; \n  // async beforeEach \n  beforeEach(async(() => { \n    TestBed.configureTestingModule({ \n      imports: [FormsModule], \n      declarations: [ AppComponent ], // declare the test component \n    }) \n    .compileComponents();  // compile template and css \n  })); \n  // synchronous beforeEach \n  beforeEach(() => { \n    fixture = TestBed.createComponent(AppComponent); \n    comp = fixture.componentInstance; // AppComponent test instance \n    // query for the title <h1> by CSS element selector \n    de = fixture.debugElement.query(By.css('h1')); \n    el = de.nativeElement; \n  });\n  it('no title in the DOM until manually call `detectChanges`', () => { \n    expect(el.textContent).toEqual(''); \n  });\n  it('should display original title', () => { \n    fixture.detectChanges(); \n    expect(el.textContent).toContain(comp.title); \n  });\n  it('should display a different test title', () => { \n    comp.title = 'Test My Todo'; \n    fixture.detectChanges(); \n    expect(el.textContent).toContain('Test My Todo'); \n  }); \n}); \n```", "```ts\nclass MockTodoService extends TodoService   {   \n    getPending() {   \n        return [];   \n    }   \n}      \n```", "```ts\nbeforeEach(async(() => {   \n      TestBed.configureTestingModule({   \n        providers: [   \n        {   \n            provide: TodoService,   \n            useClass:   MockTodoService   \n        }   \n    ]})   \n    .compileComponents();   \n}));   \n```", "```ts\nit('should return empty array   when getPending method is fired', () => {   \n   let service =   fixture.debugElement.injector.get(TodoService);   \n   spyOn(service, 'getPending').and.returnValue([]);        \n});\n```"]