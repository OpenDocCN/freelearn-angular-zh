- en: Chapter 7. Creating an Application Using Angular, ASP.NET MVC, and Web API in
    Visual Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter guides you through the process of integrating an Angular application
    with ASP.NET MVC and the ASP.NET Web API. In the last chapter, we consumed ASP.NET
    Web API services using Angular applications. All the views are rendered by Angular.
    In this chapter, we will serve the views from ASP.NET MVC. So, it opens lots of
    opportunities, such as using Razor syntax, as the Angular view will be powered
    by ASP.NET MVC.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using ASP.NET MVC to serve views for Angular component templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining routing for ASP.NET MVC, the ASP.NET Web API, and Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ASP.NET MVC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET includes web stacks such as ASP.NET MVC, Razor, and Web APIs. The ASP.NET
    MVC framework was built on top of ASP.NET. The ASP.NET MVC web framework implements
    the **Model-View-Controller** (**MVC**) pattern to develop web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the MVC pattern, **Model** represents the state of the business object.
    **View** represents the user interface andÂ **Controller** handles the communication
    between the model and view. All requests will be handled by controllers and a
    response will be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The MVC architecture
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET MVC has its own view engine called the Razor engine.
  prefs: []
  type: TYPE_NORMAL
- en: Combining routing for ASP.NET MVC, the ASP.NET Web API, and Angular
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Routing** is the process of decomposing an endpoint to identify a module
    or controller and action that can handle a request. Routing makes the URL readable
    and meaningful. It also helps in hiding data from users.'
  prefs: []
  type: TYPE_NORMAL
- en: Routing in ASP.NET MVC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ASP.NET MVC routing maps the request to the controller actions. All routes will
    be defined in the route table and are used by the route engine to match the URL
    patterns of the requests with the controllers and actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add the routes to the route table in the configure method of the `Startup.cs`
    file. The following code snippet shows the default route registered on the route
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, a route is registered with a template and defaults. If there is no controller
    or action name provided in the URL, the request will be mapped to the `Index`
    action in the `HomeController` class; otherwise, it will be mapped to the respective
    controller action.
  prefs: []
  type: TYPE_NORMAL
- en: In our application, we have three MVC controllers, namely, `HomeController`,
    `UserController`, and `TodoController`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding ASP.NET MVC HomeController
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When a request is routed to the `Index` action, it will return the `Index`
    view. The source code of `Index.cshtml` is as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow the given steps to add the ASP.NET MVC `HomeController` and its corresponding
    view to ourÂ `My Todo` application created in the earlierÂ chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on theÂ `Controllers` folder and add a new controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the newly added controller as `HomeController`. Note that there is an `Index`
    action added to `HomeController` by default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's add a view for theÂ `Index` action. Right-click on theÂ `My Todo`Â application
    and add a new folder named `Views`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, add a folder named `Home` under theÂ `Views` folder we just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the `Home` folder and add a new view named `Index.cshtml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_07_002.png)'
  prefs: []
  type: TYPE_IMG
- en: ASP.NET MVC HomeController Index View
  prefs: []
  type: TYPE_NORMAL
- en: Routing for ASP.NET MVC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We just created an ASP.NET MVC controller and added a view for an `Index` action
    in the controller. Now we need to configure routing for the ASP.NET MVC application
    so that any request to the `Index` action is handled by the ASP.NET MVC router.
    Follow these steps to configure ASP.NET MVC routing:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Startup.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comment or remove the `app.UseDefaultFiles()` statement from theÂ `Configure`
    method as we will serve views using ASP.NET MVC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `app.UseMvc()` statement in theÂ `Configure` method with this one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have added the default routing for ASP.NET MVC. Any request to the
    Web API is mapped with the HTTP verbs or actions in the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the application by pressing *F5*, and you will get the illustrated
    screen rendered in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_003.png)'
  prefs: []
  type: TYPE_IMG
- en: ASP.NET MVC HomeController Index View rendered in browser
  prefs: []
  type: TYPE_NORMAL
- en: Moving the content from the default page to the ASP.NET MVC view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the preceding section, we were able to run the application and noticed that
    the default view is served is the ASP.NET MVC Index view of HomeController. Now,
    let''s update the `Index.cshtml` view with the content of theÂ `Index.html` file
    located under theÂ `wwwroot` folder. The updated `Index.cshtml` is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the application now by pressing *F5* and note that the `my-app` special
    tag has been replaced with the parsed template of `app.component.html` by Angular,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_004.png)'
  prefs: []
  type: TYPE_IMG
- en: Angular app loaded onto the ASP.NET MVC Index view
  prefs: []
  type: TYPE_NORMAL
- en: Routing in the ASP.NET Web API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Any request to the Web API is mapped with the HTTP verbs or actions in the
    controller using routing. Web API 2 introduced an attribute-based routing technique
    called **attribute routing**. Attribute routing can be added at the controller
    level and action level. We can decorate a Web API controller with a `Route` attribute
    by passing the template of the URL, as demonstrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, `TodosController` is decorated by Route with the `api/[controller]` URL
    template. This means that if the request is received with [http://www.programmerguide.net/api/todos](http://www.programmerguide.net/api/todos),
    it will be routed to `TodosController`, and the action will be selected based
    on the HTTP action applied.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `GetPendingOnly` action is decorated by `Route` with the `pending-only`
    URL template. This means that if there are more `GET` actions available in the
    controller and if the request URL is [http://www.programmerguide.net/api/todos/pending-only](http://www.programmerguide.net/api/todos/pending-only),
    it will be mapped to the `GetPendingOnly` action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete source code of the `TodosController` Web API controller is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Routing in Angular
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we saw in [Chapter 3](Learning%20Angular%20for%20.NET%20Developers_split_000.html#),
    *Angular Building Blocks - Part 2*, Angular introduced a component router that
    deep links the URL request, maps the component that is annotated for this route,
    and renders the template or view associated with the component. The Angular router
    is not part of the core Angular framework. It comes as part of the Angular router
    module. We need to add the reference to this library in `package.json`, as follows,
    under the dependencies section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The router decides the component and template by looking at `RouteDefinition`
    for the URL requested by the browser. So, we need to configure the route definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will have three hyperlinks on the index page, namely `todo`, `about`, and
    `contact`. Clicking onÂ `todo` will navigate the user to theÂ `todo` app, clicking
    onÂ `about` will navigate to `about` view, and finally, clicking onÂ `contact`
    will navigate the user to theÂ `contact` view. So, we need to add two more components,
    namely `AboutComponent` and `ContactComponent`, and their respective template
    files, namely `about.component.html` and `contact.component.html` respectively.
    Follow the mentioned steps to create these components and their templates:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on theÂ `app` folder and add two HTML templates:Â `about.component.html`
    and `contact.component.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML snippet as the content of `about.component.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this HTML snippet as the content of `contact.component.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Right-click on theÂ `app` folder and add two Angular components:Â `about.component.ts`
    and `contact.component.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code snippet to `about.component.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the next code snippet to `contact.component.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also create an Angular component,Â `todo.component.ts`, and move the
    properties and methods in `app.component.ts` to `todo.component.ts`. Also, update
    the import and annotations of `TodoComponent`. The complete code snippet ofÂ `TodoComponent`Â is
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create theÂ `todo.component.html` template and move the content of `app.component.html`.
    The updated `todo.component.html` is as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add a `app.routing.ts` file and update it with the following code snippet.
    Here, we configured three routings for `todo`, `about`, and `contact` respectively.
    Also, we assigned three components--`TodoComponent`, `AboutComponent` and `ContactComponent`--to
    export the metadata of theÂ `NgModule` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Update `app.module.ts` as follows to import `AppRoutingModule` that we created
    in the last step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, update the `app.component.html` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note that each hyperlink has the `routerLink` attribute and is assigned with
    the route path. Here, the `routerLinkActive` attribute is assigned with the `active`Â CSSÂ class,
    which will be added to the element when this route becomes active. In other words,
    when the user clicks on the `Todo`Â link, that link gets the `active`Â CSS class
    assigned to it.
  prefs: []
  type: TYPE_NORMAL
- en: TheÂ `routerLink`Â attribute enables the application to link to a specific part
    or component of the application. The next statement is the `<router-outlet/>`Â special
    tag for the component router, which is similar to the `<ng-view/>` tag in AngularJS
    1.x in that it is used to load the templates associated with the corresponding
    path of the route.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application by pressing *F5*, and the browser will load the application
    by navigating to the **`TodoÂ `**route as we have set up a redirect to `todo`
    if it is a root path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_07_005.png)'
  prefs: []
  type: TYPE_IMG
- en: The todo template is loaded and the URL has the \todo path
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on theÂ **`About`** link will navigate to theÂ `\about` path, and
    the parsed template view of `about` will be loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_07_006.png)'
  prefs: []
  type: TYPE_IMG
- en: The about template is loaded and the URL has the \about path
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the **`Contact`** link will navigate to theÂ `\contact` path, and
    the parsed template view of about will be loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_07_007.png)'
  prefs: []
  type: TYPE_IMG
- en: The contact template is loaded and the URL has the \contact path
  prefs: []
  type: TYPE_NORMAL
- en: Notice the address bar for the changes in route path in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Moving the Angular template to the ASP.NET MVC template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have almost completed the application. However, we have only used Angular
    views as templates for the Angular components. We need to serve the template via
    ASP.NET MVC. This will enable us to add Razor codes, if necessary, as these views
    are powered by ASP.NET MVC. Follow the given steps to add Razor views and update
    the `templateUrl` in each Angular component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add threeÂ actions in `HomeController`, namely `About`, `Contact`, and
    `Todo`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Add threeÂ views, namely `About`, `Contact`, and `Todo`, under theÂ `Views
    -> Home` folder, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_07_008.png)'
  prefs: []
  type: TYPE_IMG
- en: Razor views added under Home
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this HTML content to `About.cshtml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following HTML content to `Contact.cshtml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, move the content of `todo.component.html` to `Todo.cshtml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we need to update the metadata of theÂ `templateUrl` of `AboutComponent`,
    `ContactComponent`, and `TodoComponent`Â with the URLs of the respective actions
    in HomeController:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, run the application by pression *F5* and note that the views are served
    from ASP.NET MVC. You can add Razor syntax as well to the views as they are now
    powered by ASP.NET MVC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clicking on theÂ `About` link will navigate to theÂ `\about` path and instantiate
    the matching component. Here, it is `AboutComponent` and the appropriate Razor
    view of `about` will be rendered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_07_009.png)'
  prefs: []
  type: TYPE_IMG
- en: The About Razor template rendered
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on theÂ **`Contact`** link will navigate to theÂ `\contact` path and
    initiate the `ContactComponent`, which is responsible for rendering the `Contact`Â Razor
    view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_07_010.png)'
  prefs: []
  type: TYPE_IMG
- en: The Contact Razor template rendered
  prefs: []
  type: TYPE_NORMAL
- en: A click on logout will redirect you to the `login` view.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Hurray! We just created an Angular application powered by ASP.NET MVC with the
    backend Web API. We combined the routing of Angular and ASP.NET MVC and demonstrated
    how these routings are connected to each other.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the testing of an Angular application.
  prefs: []
  type: TYPE_NORMAL
