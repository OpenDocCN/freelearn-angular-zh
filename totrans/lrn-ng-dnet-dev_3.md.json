["```ts\n      {\n      \"name\":\"first-template-form\",\n      \"version\":\"1.0.0\",\n      \"private\":true,\n      \"description\":\"First template form\",\n      \"scripts\":{\n      \"test:once\":\"karma start karma.conf.js --single-\n       run\",\n      \"build\":\"tsc -p src/\",\n      \"serve\":\"lite-server -c=bs-config.json\",\n      \"prestart\":\"npm run build\",\n      \"start\":\"concurrently \\\"npm run build:watch\\\" \\\"npm  \n       run serve\\\"\",\n      \"pretest\":\"npm run build\",\n      \"test\":\"concurrently \\\"npm run build:watch\\\" \\\"karma \n       start \n      karma.conf.js\\\"\",\n      \"pretest:once\":\"npm run build\",\n      \"build:watch\":\"tsc -p src/ -w\",\n      \"build:upgrade\":\"tsc\",\n      \"serve:upgrade\":\"http-server\",\n      \"build:aot\":\"ngc -p tsconfig-aot.json && rollup -c  \n       rollup-\n      config.js\",\n      \"serve:aot\":\"lite-server -c bs-config.aot.json\",\n      \"build:babel\":\"babel src -d src --extensions \n      \\\".es6\\\" --source-\n      maps\",\n      \"copy-dist-files\":\"node ./copy-dist-files.js\",\n      \"i18n\":\"ng-xi18n\",\n      \"lint\":\"tslint ./src/**/*.ts -t verbose\"\n      },\n      \"keywords\":[\n      ],\n      \"author\":\"\",\n      \"license\":\"MIT\",\n      \"dependencies\":{\n      \"@angular/common\":\"~4.0.0\",\n      \"@angular/compiler\":\"~4.0.0\",\n      \"@angular/compiler-cli\":\"~4.0.0\",\n      \"@angular/core\":\"~4.0.0\",\n      \"@angular/forms\":\"~4.0.0\",\n      \"@angular/http\":\"~4.0.0\",\n      \"@angular/platform-browser\":\"~4.0.0\",\n      \"@angular/platform-browser-dynamic\":\"~4.0.0\",\n      \"@angular/platform-server\":\"~4.0.0\",\n      \"@angular/router\":\"~4.0.0\",\n      \"@angular/tsc-wrapped\":\"~4.0.0\",\n      \"@angular/upgrade\":\"~4.0.0\",\n      \"angular-in-memory-web-api\":\"~0.3.1\",\n      \"core-js\":\"^2.4.1\",\n      \"rxjs\":\"5.0.1\",\n      \"systemjs\":\"0.19.39\",\n      \"zone.js\":\"^0.8.4\"\n      },\n      \"devDependencies\":{\n      \"@types/angular\":\"^1.5.16\",\n      \"@types/angular-animate\":\"^1.5.5\",\n      \"@types/angular-cookies\":\"^1.4.2\",\n      \"@types/angular-mocks\":\"^1.5.5\",\n      \"@types/angular-resource\":\"^1.5.6\",\n      \"@types/angular-route\":\"^1.3.2\",\n      \"@types/angular-sanitize\":\"^1.3.3\",\n      \"@types/jasmine\":\"2.5.36\",\n      \"@types/node\":\"^6.0.45\",\n      \"babel-cli\":\"^6.16.0\",\n      \"babel-preset-angular2\":\"^0.0.2\",\n      \"babel-preset-es2015\":\"^6.16.0\",\n      \"canonical-path\":\"0.0.2\",\n      \"concurrently\":\"^3.0.0\",\n      \"http-server\":\"^0.9.0\",\n      \"jasmine\":\"~2.4.1\",\n      \"jasmine-core\":\"~2.4.1\",\n      \"karma\":\"^1.3.0\",\n      \"karma-chrome-launcher\":\"^2.0.0\",\n      \"karma-cli\":\"^1.0.1\",\n      \"karma-jasmine\":\"^1.0.2\",\n      \"karma-jasmine-html-reporter\":\"^0.2.2\",\n      \"karma-phantomjs-launcher\":\"^1.0.2\",\n      \"lite-server\":\"^2.2.2\",\n      \"lodash\":\"^4.16.2\",\n      \"phantomjs-prebuilt\":\"^2.1.7\",\n      \"protractor\":\"~4.0.14\",\n      \"rollup\":\"^0.41.6\",\n      \"rollup-plugin-commonjs\":\"^8.0.2\",\n      \"rollup-plugin-node-resolve\":\"2.0.0\",\n      \"rollup-plugin-uglify\":\"^1.0.1\",\n      \"source-map-explorer\":\"^1.3.2\",\n      \"tslint\":\"^3.15.1\",\n      \"typescript\":\"~2.2.0\"\n      },\n      \"repository\":{\n      }\n      }\n```", "```ts\n      export class Book {\n      constructor(\n      public id: number,\n      public name: string,\n      public author: string,\n      public publication?: string\n      ) { }\n      }\n```", "```ts\n      import { Component } from '@angular/core';\n      @Component({\n      selector: 'first-template-form',\n      template: '<book-form></book-form>'\n      })\n      export class AppComponent { }\n```", "```ts\n      import { Component } from '@angular/core';\n      import { Book } from './book';\n      @Component({selector: 'book-form',\n      templateUrl: './book-form.component.html'\n      })\n      export class BookFormComponent {\n      model = new Book(1, 'book name','author \n      name','publication name \n      is optional');\n      onSubmit() {\n      // code to post the data\n      }\n      newBook() {\n      this.model = new Book(0,'','','');\n      }\n      }\n```", "```ts\n      <div class=\"container\">\n      <h1>New Book Form</h1>\n      <form (ngSubmit)=\"onSubmit()\" #bookForm=\"ngForm\">\n      <div class=\"form-group\">\n      <label for=\"name\">Name</label>\n      <input type=\"text\" class=\"form-control\" id=\"name\"\n      required\n      [(ngModel)]=\"model.name\" name=\"name\"\n      #name=\"ngModel\">\n      <div [hidden]=\"name.valid || name.pristine\"\n      class=\"alert alert-danger\">\n      Name is required\n      </div>\n      </div>\n      <div class=\"form-group\">\n      <label for=\"author\">Author</label>\n      <input type=\"text\" class=\"form-control\" id=\"author\"\n      required\n      [(ngModel)]=\"model.author\" name=\"author\"\n      #author=\"ngModel\">\n      <div [hidden]=\"author.valid || author.pristine\"\n      class=\"alert alert-danger\">\n      Author is required\n      </div>\n      </div>\n      <div class=\"form-group\">\n      <label for=\"publication\">Publication</label>\n      <input type=\"text\" class=\"form-control\" \n      id=\"publication\"\n      [(ngModel)]=\"model.publication\" name=\"publication\"\n      #publication=\"ngModel\">\n      </div>\n      <button type=\"submit\" class=\"btn btn-success\"       \n      [disabled]=\"!bookForm.form.valid\">Submit</button>\n      &nbsp;&nbsp;\n      <button type=\"button\" class=\"btn btn-default\"        \n      (click)=\"newBook()\">Clear</button>\n      </form>\n      </div>\n      <style>\n      .no-style .ng-valid {\n      border-left: 1px solid #CCC\n      }\n      .no-style .ng-invalid {\n      border-left: 1px solid #CCC\n      }\n      </style>\n```", "```ts\n      import { NgModule } from '@angular/core';\n      import { BrowserModule } from '@angular/platform-\n      browser';\n      import { FormsModule } from '@angular/forms';\n      import { AppComponent } from './app.component';\n      import { BookFormComponent } from './book-\n      form.component';\n      @NgModule({\n        imports: [\n        BrowserModule,\n        FormsModule\n        ],\n        declarations: [\n        AppComponent,\n        BookFormComponent\n        ],\n        bootstrap: [ AppComponent ]\n      })\n      export class AppModule { }\n```", "```ts\n      import { platformBrowserDynamic } from \n      '@angular/platform-\n      browser-dynamic';\n      import { AppModule } from './app/app.module';\n      platformBrowserDynamic().bootstrapModule(AppModule)\n```", "```ts\n      <!DOCTYPE html>\n      <html>\n      <head>\n      <title>Book Form</title>\n      <base href=\"/\">\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, \n      initial-\n      scale=1\">\n      <link rel=\"stylesheet\"\n      href=\"https://unpkg.com/bootstrap@3.3.7/\n      dist/css/bootstra p.min.cs\n      s\">\n      <link rel=\"stylesheet\" href=\"styles.css\">\n      <link rel=\"stylesheet\" href=\"forms.css\">\n      <!-- Polyfills -->\n      <script src=\"node_modules/core-\n      js/client/shim.min.js\"></script>\n      <script src=\"img/zone.js\">\n      </script>\n      <script \n      src=\"img/system.src.js\">\n      </script>\n      <script src=\"img/systemjs.config.js\"></script>\n      <script>\n      System.import('main.js').catch(function(err){   \n      console.error(err); \n      });\n      </script>\n      </head>\n      <body>\n      <first-template-form>Loading...</first-template-\n      form>\n      </body>\n      </html>\n```", "```ts\n/**\n* System configuration for Angular samples\n* Adjust as necessary for your application needs.\n*/\n(function (global) {\nSystem.config({\npaths: {\n  // paths serve as alias\n  'npm:': 'node_modules/'\n},\n// map tells the System loader where to look for things\nmap: {// our app is within the app folder\n'app': 'app',\n// angular bundles\n'@angular/animations': 'npm:@angular/animations/bundles/animations.umd.js',\n'@angular/animations/browser': 'npm:@angular/animations/bundles/animations-browser.umd.js',\n'@angular/core': 'npm:@angular/core/bundles/core.umd.js',\n'@angular/common': 'npm:@angular/common/bundles/common.umd.js',\n'@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js',\n'@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',\n'@angular/platform-browser/animations': 'npm:@angular/platform-browser/bundles/platform-browser-animations.umd.js',\n'@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n'@angular/http': 'npm:@angular/http/bundles/http.umd.js',\n'@angular/router': 'npm:@angular/router/bundles/router.umd.js',\n'@angular/router/upgrade': 'npm:@angular/router/bundles/router-upgrade.umd.js',\n'@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js',\n'@angular/upgrade': 'npm:@angular/upgrade/bundles/upgrade.umd.js',\n'@angular/upgrade/static': 'npm:@angular/upgrade/bundles/upgrade-static.umd.js',\n// other libraries\n'rxjs': 'npm:rxjs',\n'angular-in-memory-web-api': 'npm:angular-in-memory-web-api/bundles/in-memory-web-api.umd.js'\n},\n// packages tells the System loader how to load when no filename and/or no extension\npackages: {\napp: {\n  main: './main.js',\n  defaultExtension: 'js',\nmeta: {\n'./*.js': {\n  loader: 'systemjs-angular-loader.js'\n}\n}\n},\nrxjs: {\n  defaultExtension: 'js'\n}\n}\n});\n})(this);\n```", "```ts\n<input type=\"text\" formControlName=\"name\" />\n```", "```ts\nthis.bookForm = new FormGroup({\n  name: new FormControl('book name', Validators.required),\n  author: new FormControl('author name', Validators.required),\n  publication: new FormControl('publication name is optional')\n});\n```", "```ts\n      {\n      \"name\":\"model-driven-form\",\n      \"version\":\"1.0.0\",\n      \"private\":true,\n      \"description\":\"Model driven form\",\n      \"scripts\":{\n      \"test:once\":\"karma start karma.conf.js --single-\n       run\",\n      \"build\":\"tsc -p src/\",\n      \"serve\":\"lite-server -c=bs-config.json\",\n      \"prestart\":\"npm run build\",\n      \"start\":\"concurrently \\\"npm run build:watch\\\" \\\"npm \n      run serve\\\"\",\n      \"pretest\":\"npm run build\",\n      \"test\":\"concurrently \\\"npm run build:watch\\\" \\\"karma \n       start \n      karma.conf.js\\\"\",\n      \"pretest:once\":\"npm run build\",\n      \"build:watch\":\"tsc -p src/ -w\",\n      \"build:upgrade\":\"tsc\",\n      \"serve:upgrade\":\"http-server\",\n      \"build:aot\":\"ngc -p tsconfig-aot.json && rollup -c \n       rollup-\n      config.js\",\n      \"serve:aot\":\"lite-server -c bs-config.aot.json\",\n      \"build:babel\":\"babel src -d src --extensions \n      \\\".es6\\\" --source-\n      maps\",\n      \"copy-dist-files\":\"node ./copy-dist-files.js\",\n      \"i18n\":\"ng-xi18n\",\n      \"lint\":\"tslint ./src/**/*.ts -t verbose\"\n      },\n      \"keywords\":[\n      ],\n      \"author\":\"\",\n      \"license\":\"MIT\",\n      \"dependencies\":{\n      \"@angular/common\":\"~4.0.0\",\n      \"@angular/compiler\":\"~4.0.0\",\n      \"@angular/compiler-cli\":\"~4.0.0\",\n      \"@angular/core\":\"~4.0.0\",\n      \"@angular/forms\":\"~4.0.0\",\"@angular/http\":\"~4.0.0\",\n      \"@angular/platform-browser\":\"~4.0.0\",\n      \"@angular/platform-browser-dynamic\":\"~4.0.0\",\n      \"@angular/platform-server\":\"~4.0.0\",\n      \"@angular/router\":\"~4.0.0\",\n      \"@angular/tsc-wrapped\":\"~4.0.0\",\n      \"@angular/upgrade\":\"~4.0.0\n      \",\n      \"angular-in-memory-web-api\":\"~0.3.1\",\n      \"core-js\":\"^2.4.1\",\n      \"rxjs\":\"5.0.1\",\n      \"systemjs\":\"0.19.39\",\n      \"zone.js\":\"^0.8.4\"\n      },\n      \"devDependencies\":{\n      \"@types/angular\":\"^1.5.16\",\n      \"@types/angular-animate\":\"^1.5.5\",\n      \"@types/angular-cookies\":\"^1.4.2\",\n      \"@types/angular-mocks\":\"^1.5.5\",\n      \"@types/angular-resource\":\"^1.5.6\",\n      \"@types/angular-route\":\"^1.3.2\",\n      \"@types/angular-sanitize\":\"^1.3.3\",\n      \"@types/jasmine\":\"2.5.36\",\n      \"@types/node\":\"^6.0.45\",\n      \"babel-cli\":\"^6.16.0\",\n      \"babel-preset-angular2\":\"^0.0.2\",\n      \"babel-preset-es2015\":\"^6.16.0\",\n      \"canonical-path\":\"0.0.2\",\n      \"concurrently\":\"^3.0.0\",\n      \"http-server\":\"^0.9.0\",\n      \"jasmine\":\"~2.4.1\",\n      \"jasmine-core\":\"~2.4.1\",\n      \"karma\":\"^1.3.0\",\n      \"karma-chrome-launcher\":\"^2.0.0\",\n      \"karma-cli\":\"^1.0.1\",\n      \"karma-jasmine\":\"^1.0.2\",\n      \"karma-jasmine-html-reporter\":\"^0.2.2\",\n      \"karma-phantomjs-launcher\":\"^1.0.2\",\n      \"lite-server\":\"^2.2.2\",\n      \"lodash\":\"^4.16.2\",\n      \"phantomjs-prebuilt\":\"^2.1.7\",\n      \"protractor\":\"~4.0.14\",\n      \"rollup\":\"^0.41.6\",\n      \"rollup-plugin-commonjs\":\"^8.0.2\",\n      \"rollup-plugin-node-resolve\":\"2.0.0\",\n      \"rollup-plugin-uglify\":\"^1.0.1\",\n      \"source-map-explorer\":\"^1.3.2\",\n      \"tslint\":\"^3.15.1\",\n      \"typescript\":\"~2.2.0\"\n      },\n      \"repository\":{\n      }\n      }\n```", "```ts\n      export class Book {\n      constructor(\n      public id: number,\n      public name: string,\n      public author: string,\n      public publication?: string\n      ) { }\n      }\n```", "```ts\n      import { Component } from '@angular/core';\n      @Component({\n      selector: 'first-model-form',\n      template: '<book-form></book-form>'\n      })\n      export class AppComponent { }\n```", "```ts\n      import { Component, OnInit } from '@angular/core';\n      import { FormControl, FormGroup, Validators } from \n      '@angular/forms';\n      import { Book } from './book';\n      @Component({\n      selector: 'book-form',\n      templateUrl: './book-form.component.html'\n      })\n      export class BookFormComponent implements OnInit {\n      bookForm: FormGroup;\n      public submitted: boolean;\n      constructor() { }\n      ngOnInit() {\n      this.bookForm = new FormGroup({\n      name: new FormControl('book name', \n      Validators.required),\n      author: new FormControl('author name', \n      Validators.required),\n      publication: new FormControl('publication name is \n      optional')\n      });\n      }\n      onSubmit(model: Book, isValid: boolean) {\n      this.submitted = true;\n      console.log(model, isValid);\n      // code to post the data\n      }\n      }\n```", "```ts\n      <div class=\"container\">\n      <h1>New Book Form</h1>\n      <form [formGroup]=\"bookForm\" novalidate       \n      (ngSubmit)=\"onSubmit(bookForm.value, \n       bookForm.valid)\">\n      <div class=\"form-group\">\n      <label for=\"name\">Name</label>\n      <input type=\"text\" class=\"form-control\" \n       formControlName=\"name\">\n      <small [hidden]=\"bookForm.controls.name.valid ||       \n      (bookForm.controls.name.pristine && !submitted)\" \n      class=\"text-\n      danger\">\n      Name is required.\n      </small>\n      </div>\n      <div class=\"form-group\">\n      <label for=\"author\">Author</label>\n      <input type=\"text\" class=\"form-control\" \n      formControlName=\"author\">\n      <small [hidden]=\"bookForm.controls.author.valid ||       \n      (bookForm.controls.author.pristine && !submitted)\" \n      class=\"text-\n      danger\">\n      Author is required.\n      </small>\n      </div>\n      <div class=\"form-group\">\n      <label for=\"publication\">Publication</label>\n      <input type=\"text\" class=\"form-control\" \n      formControlName=\"publication\">\n      </div>\n      <button type=\"submit\" class=\"btn btn-\n      success\">Submit</button>\n      </form>\n      </div>\n      <style>\n      .no-style .ng-valid {\n      border-left: 1px solid #CCC\n      }\n      .no-style .ng-invalid {\n      border-left: 1px solid #CCC\n      }\n      </style>\n```", "```ts\n      import { NgModule } from '@angular/core';\n      import { BrowserModule } from '@angular/platform-\n      browser';\n      import { FormsModule, ReactiveFormsModule } from \n      '@angular/forms';\n      import { AppComponent } from './app.component';\n      import { BookFormComponent } from './book-\n      form.component';\n      @NgModule({\n      imports: [\n      BrowserModule,\n      ReactiveFormsModule\n      ],\n      declarations: [\n      AppComponent,\n      BookFormComponent\n      ],\n      bootstrap: [ AppComponent ]\n      })\n      export class AppModule { }\n```", "```ts\n      import { platformBrowserDynamic } from \n      '@angular/platform-\n      browser-dynamic';\n      import { AppModule } from './app/app.module';\n      platformBrowserDynamic().bootstrapModule(AppModule)\n```", "```ts\n      <!DOCTYPE html>\n      <html>\n      <head>\n      <title>Hero Form</title>\n      <base href=\"/\">\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, \n      initial-\n      scale=1\">\n      <link rel=\"stylesheet\"\n      href=\"https://unpkg.com/bootstrap@3.3.7\n      /dist/css/bootstra   p.min.css\">\n      <link rel=\"stylesheet\" href=\"styles.css\">\n      <link rel=\"stylesheet\" href=\"forms.css\">\n      <!-- Polyfills -->\n      <script src=\"node_modules/core-   \n      js/client/shim.min.js\"></script>\n      <script src=\"img/zone.js\">\n      </script>\n      <script \n      src=\"img/system.src.js\">\n      </script>\n      <script src=\"img/systemjs.config.js\"></script>\n      <script>\n      System.import('main.js').catch(function(err){ \n      console.error(err); \n      });\n      </script>\n      </head>\n      <body>\n      <first-model-form>Loading...</first-model-form>\n      </body>\n      </html>\n```", "```ts\n/**\n* System configuration for Angular samples\n* Adjust as necessary for your application needs.\n*/\n(function (global) {\nSystem.config({\npaths: {\n// paths serve as alias\n'npm:': 'node_modules/'\n},\n// map tells the System loader where to look for things\nmap: {\n// our app is within the app folder\n'app': 'app',\n// angular bundles\n'@angular/animations': 'npm:@angular/animations/bundles/animations.umd.js',\n'@angular/animations/browser': 'npm:@angular/animations/bundles/animations-browser.umd.js',\n'@angular/core': 'npm:@angular/core/bundles/core.umd.js',\n'@angular/common': 'npm:@angular/common/bundles/common.umd.js',\n'@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js',\n'@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',\n'@angular/platform-browser/animations': 'npm:@angular/platform-browser/bundles/platform-browser-animations.umd.js',\n'@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n'@angular/http': 'npm:@angular/http/bundles/http.umd.js',\n'@angular/router': 'npm:@angular/router/bundles/router.umd.js',\n'@angular/router/upgrade': 'npm:@angular/router/bundles/router-upgrade.umd.js',\n'@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js',\n'@angular/upgrade': 'npm:@angular/upgrade/bundles/upgrade.umd.js',\n'@angular/upgrade/static': 'npm:@angular/upgrade/bundles/upgrade-static.umd.js',\n// other libraries\n'rxjs': 'npm:rxjs',\n'angular-in-memory-web-api': 'npm:angular-in-memory-web-api/bundles/in-memory-web-api.umd.js'\n},\n// packages tells the System loader how to load when no filename and/or no extension\npackages: {\napp: {\nmain: './main.js',\ndefaultExtension: 'js',\nmeta: {\n'./*.js': {\nloader: 'systemjs-angular-loader.js'\n}\n},\nrxjs: {\ndefaultExtension: 'js'\n}\n}\n});\n})(this);\n```", "```ts\n<p>Price of the book is {{ price | currency:'USD' }} </p>\n```", "```ts\n<li *ngFor=\"let book of books | slice:1:3\">{{i}}</li>\n```", "```ts\nPublishing Date: {{ pubDate | date | uppercase}}\n```", "```ts\nexpression | currency[:currencyCode[:symbolDisplay[:digitInfo]]] \n```", "```ts\nexpression | date[:format] \n```", "```ts\nimport { Component } from '@angular/core'; \n\n@Component({ \n  selector: 'pipe-page', \n  templateUrl: 'app/app.component.html' \n}) \nexport class AppComponent { \n    numberData : number; \n    currencyData : number; \n    dateData : number; \n    authorName : string; \n    object: Object = {autherName: 'Rajesh Gunasundaram',   \n    pubName: 'Packt Publishing'} \n    constructor() { \n        this.numberData = 123.456789; \n        this.currencyData = 50; \n        this.dateData = Date.now(); \n        this.authorName = 'rAjEsH gUnAsUnDaRaM'; \n    } \n} \n```", "```ts\n<base> tag with the href attribute that is to be added to the head tag in the index file, considering that the app folder is the root of the application. This is required when you run your application in HTML5 mode. It helps resolve all the relative URLs in the application:\n```", "```ts\n<base href=\"/\"> \n```", "```ts\napp.module.ts:\n```", "```ts\nimport { RouterModule } from '@angular/router';\nRouterModule.forRoot([\n{\n  path: 'about',\n  component: AboutComponent\n},\n{\n  path: 'contact',\n  component: ContactComponent\n}\n])\n```", "```ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { AboutComponent } from './heroes.component';\n@NgModule({\n  imports: [\n  BrowserModule,\n  FormsModule,\n  RouterModule.forRoot([\n{\n  path: 'about',\n  component: AboutComponent\n}\n])\n],\ndeclarations: [\nAppComponent,\nAboutComponent\n],\nbootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n```", "```ts\n<a [routerLink]=\"['/about']\">About</a>\n```", "```ts\nTodoService is shown here. TodoService has a property named todos of the type array that can hold a collection of Todo items and is hardcoded with the Todo items in the constructor:\n```", "```ts\nimport {Injectable} from '@angular/core'; \nimport { Todo } from './todo'; \n\n@Injectable()  \nexport class TodoService { \n    todos: Array<Todo>; \n    constructor() { \n        this.todos = [ \n    {\"title\": \"First Todo\", \"completed\":  false}, \n    {\"title\": \"Second Todo\", \"completed\": false}, \n    {\"title\": \"Third Todo\", \"completed\": false} \n            ] \n    } \n\n    getTodos() { \n        return this.todos; \n    } \n} \n```", "```ts\nimport { Component } from '@angular/core'; \nimport { Todo } from './Todo'; \nimport { TodoService } from './TodoService'; \n@Component({ \n  selector: 'my-service', \n  templateUrl: 'app/app.component.html' \n}) \nexport class AppComponent { \n    todos: Array<Todo>; \n    constructor(todoService: TodoService) { \n        this.todos = todoService.getTodos(); \n    } \n} \n```", "```ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { TodoService } from './TodoService';\n@NgModule({\nimports: [\nBrowserModule,\n],\ndeclarations: [\nAppComponent,\n],\nproviders: [ TodoService ],\nbootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n```", "```ts\n<h2>My Todo List</h2> \n<ul> \n    <li *ngFor=\"let todo of todos\"> \n        {{ todo.title }} - {{ todo.completed }} \n    </li> \n</ul> \n```", "```ts\n <body> \n        <my-service>Loading...</my-service> \n </body> \n```", "```ts\nimport {Injectable} from '@angular/core';\nimport {Http} from '@angular/http';\nimport 'rxjs/add/operator/toPromise';\n@Injectable()\nexport class TodoService {\nconstructor(private http: Http) {\nthis.http = http;\n}\ngetTodos() {\n  return this.http.get('/app/todos.json')\n  .toPromise()\n  .then(response => response.json().data)\n  .catch(this.handleError);\n}\n}\n```", "```ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\nimport { AppComponent } from './app.component';\nimport { TodoComponent } from './todo.component';\nimport { TodoService } from './hero.service';\n@NgModule({\n  imports: [\n  BrowserModule,\n  HttpModule,\n  AppRoutingModule\n  ],\n  declarations: [\n  AppComponent,\n  TodoComponent\n  ],\n  providers: [ TodoService ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n```", "```ts\nimport {HTTP_PROVIDERS} from '@angular/http'; \nimport 'rxjs/add/operator/map'; \nimport {AppComponent} from './app.component'; \nimport {TodoService} from './TodoService';\nbootstrap(AppComponent, [HTTP_PROVIDERS, TodoService]); \n```"]