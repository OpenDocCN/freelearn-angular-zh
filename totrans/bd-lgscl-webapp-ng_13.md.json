["```ts\nDockerfile\nFROM duluca/minimal-node-web-server:8.11.1\nWORKDIR /usr/src/app\nCOPY dist public\n```", "```ts\n\"scripts\": {\n  \"build:prod\": \"ng build --prod\",\n}\n```", "```ts\nDockerfile.integration\nFROM duluca/minimal-node-build-env:8.9.4 as builder\n\n# project variables\nENV SRC_DIR /usr/src\nENV GIT_REPO https://github.com/duluca/lemon-mart.git\nENV SRC_CODE_LOCATION .\nENV BUILD_SCRIPT build:prod\n\n# get source code\nRUN mkdir -p $SRC_DIR\nWORKDIR $SRC_DIR\n# if necessary, do SSH setup here or copy source code from local or CI environment\nRUN git clone $GIT_REPO .\n# COPY $SRC_CODE_LOCATION .\n\nRUN npm install\nRUN npm run $BUILD_SCRIPT\n```", "```ts\n$ docker run -it duluca/minimal-node-build-env:8.9.4 /bin/bash\n```", "```ts\nsrc/karma.conf.js\n...\nbrowsers: ['Chrome', 'ChromiumHeadless', 'ChromiumNoSandbox'],\ncustomLaunchers: {\n  ChromiumHeadless: {\n        base: 'Chrome',\n        flags: [\n          '--headless',\n          '--disable-gpu',\n          // Without a remote debugging port, Google Chrome exits immediately.\n          '--remote-debugging-port=9222',\n        ],\n        debug: true,\n      },\n      ChromiumNoSandbox: {\n        base: 'ChromiumHeadless',\n        flags: ['--no-sandbox', '--disable-translate', '--disable-extensions']\n      }\n    },\n```", "```ts\ne2e/protractor.conf.js\n...\n  capabilities: {\n    browserName: 'chrome',\n    chromeOptions: {\n      args: [\n        '--headless',\n        '--disable-gpu',\n        '--no-sandbox',\n        '--disable-translate',\n        '--disable-extensions',\n        '--window-size=800,600',\n      ],\n    },\n  },\n...\n```", "```ts\npackage.json\n\"scripts\": {\n  ...\n  \"test:prod\": \"npm test -- --watch=false\"\n  ...\n}\n```", "```ts\nDocker.integration\n...\nFROM slapers/alpine-node-chromium as tester\nENV BUILDER_SRC_DIR /usr/src\nENV SRC_DIR /usr/src\nENV TEST_SCRIPT test:prod\n\nRUN mkdir -p $SRC_DIR\nWORKDIR $SRC_DIR\n\nCOPY --from=builder $BUILDER_SRC_DIR $SRC_DIR\n\nCMD 'npm run $TEST_SCRIPT'\n```", "```ts\nDocker.integration\n...\nFROM duluca/minimal-nginx-web-server:1.13.8-alpine\nENV BUILDER_SRC_DIR /usr/src\nCOPY --from=builder $BUILDER_SRC_DIR/dist /var/www\nCMD 'nginx'\n```", "```ts\n$ docker build -f Dockerfile.integration .\n```", "```ts\npackage.json\n\"scripts\": {\n  ...\n  \"build:ci\": \"docker build -f Dockerfile.integration . -t $npm_package_config_imageRepo:latest\",\n  ...\n}\n```", "```ts\n.circleci/config.yml\nversion: 2\njobs:\n  build:\n    docker:\n      - image: docker:17.12.0-ce-git\n    working_directory: /usr/src\n    steps:\n      - checkout\n      - setup_remote_docker:\n          docker_layer_caching: false\n      - run:\n          name: Build Docker Image\n          command: |\n            npm run build:ci\n```", "```ts\n$ npx ng test --browsers ChromiumNoSandbox --watch=false --code-coverage\n```", "```ts\n$ npx http-server -c-1 -o -p 9875 ./coverage\n```", "```ts\nswagger.oas3.yaml\nopenapi: 3.0.0\ninfo:\n  title: LemonMart\n  description: LemonMart API\n  version: \"1.0.0\"\n\nservers:\n  - url: http://localhost:3000\n    description: Local environment\n  - url: https://mystagingserver.com/v1\n    description: Staging environment\n  - url: https://myprodserver.com/v1\n    description: Production environment\n```", "```ts\nswagger.oas3.yaml\n...\ncomponents:\n  schemas: \n    Role:\n      type: string\n      enum: [clerk, cashier, manager]\n    Name:\n      type: object\n      properties:\n        first:\n          type: string\n        middle:\n          type: string\n        last:\n          type: string\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n        email:\n          type: string\n        name:\n          $ref: '#/components/schemas/Name'\n        picture:\n          type: string\n        role:\n          $ref: '#/components/schemas/Role'\n        userStatus:\n          type: boolean\n        lastModified:\n          type: string\n          format: date\n        lastModifiedBy:\n          type: string\n    Users:\n      type: object\n      properties:\n        total:\n          type: number\n          format: int32\n      items:\n        $ref: '#/components/schemas/ArrayOfUser'\n    ArrayOfUser:\n      type: array\n      items:\n            $ref: '#/components/schemas/User'\n```", "```ts\nswagger.oas3.yaml\n...\n  parameters:\n    offsetParam: # <-- Arbitrary name for the definition that will be used to refer to it.\n                  # Not necessarily the same as the parameter name.\n      in: query\n      name: offset\n      required: false\n      schema:\n        type: integer\n        minimum: 0\n      description: The number of items to skip before starting to collect the result set.\n    limitParam:\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 50\n        default: 20\n      description: The numbers of items to return.\n```", "```ts\n...\npaths:\n  /users:\n    get:\n      description: |\n        Searches and returns `User` objects.\n        Optional query params determines values of returned array\n      parameters:\n        - in: query\n          name: search\n          required: false\n          schema:\n            type: string\n          description: Search text\n        - $ref: '#/components/parameters/offsetParam'\n        - $ref: '#/components/parameters/limitParam'\n      responses:\n        '200': # Response\n          description: OK\n          content: # Response body\n            application/json: # Media type\n              schema:\n                $ref: '#/components/schemas/Users'\n```", "```ts\nswagger.oas3.yaml\n...\n  /user/{id}:\n    get:\n      description: Gets a `User` object by id\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: string\n          description: User's unique id\n      responses:\n         '200': # Response\n            description: OK\n            content: # Response body\n              application/json: # Media type\n                schema:\n                  $ref: '#/components/schemas/User'\n    put:\n      description: Updates a `User` object given id\n      parameters:\n        - in: query\n          name: id\n          required: true\n          schema:\n            type: string\n          description: User's unique id\n        - in: body\n          name: userData\n          schema:\n            $ref: '#/components/schemas/User'\n          style: form\n          explode: false\n          description: Updated user object\n      responses:\n        '200':\n          description: OK\n          content: # Response body\n              application/json: # Media type\n                schema:\n                  $ref: '#/components/schemas/User'\n```", "```ts\n$ npx swagger-node-codegen swagger.oas3.yaml -o ./server\n...\nDone! \nCheck out your shiny new API at C:\\dev\\lemon-mart-swagger-server\\server.\n```", "```ts\n$ cd server\n$ npm install\n```", "```ts\nhttps://raw.githubusercontent.com/duluca/lemon-mart-swagger-server/master/swagger.2.yaml\n```", "```ts\n$ docker run --rm -v ${PWD}:/local swaggerapi/swagger-codegen-cli \n$ generate -i <uri> -l nodejs-server -o /local/server\n```", "```ts\nindex.js\nvar options = {\n  swaggerUi: path.join(__dirname, '/swagger.json'),\n  // controllers: path.join(__dirname, './controllers'),\n  useStubs: true,\n}\n```", "```ts\n$ npm i cors\n```", "```ts\nserver/index.js\n...\nvar cors = require('cors')\n...\napp.use(cors())\n\n// Initialize the Swagger middleware\nswaggerTools.initializeMiddleware(swaggerDoc, function(middleware) {\n...\n```", "```ts\nDockerfile\nFROM duluca/minimal-node-build-env:8.11.2\n\nRUN mkdir -p /usr/src\nWORKDIR /usr/src\n\nCOPY server .\n\nRUN npm ci\n\nCMD [\"node\", \"index\"]\n```"]