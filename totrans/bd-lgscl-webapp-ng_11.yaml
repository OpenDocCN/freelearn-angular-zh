- en: Enhance Angular App with Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 10](4628e6f3-23d6-4aa7-a842-d1df666718de.xhtml)*, Prepare Angular
    App for Production Release*, we mentioned the need to deliver a high-quality application.
    Currently, the app has a terrible look and feel to it, which is only fit for a
    website created in the late 1990s. The first impression a user or a client will
    get about your product or your work is very important, so we must be able to create
    a great looking application that also delivers a great user experience across
    mobile and desktop browsers.
  prefs: []
  type: TYPE_NORMAL
- en: As full-stack developers, it is difficult to focus on the polish of your application.
    This gets worse, as the feature set of an application rapidly grows. It is no
    fun to write great and modular code backing your views, but then revert to CSS
    hacks and inline styles in a rush to improve your application.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Material is an amazing library that is developed in close coordination
    with Angular. If you learn how to leverage Angular Material effectively, the features
    you create will look and work great from the get-go, whether you're working on
    small or large applications. Angular Material will make you a far more effective
    web developer because it ships with a wide variety of user controls that you can
    leverage, and you won't have to worry about browser compatibility. As an added
    bonus, writing custom CSS will become a rarity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to configure Angular Material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade the UX with Angular Material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Material Components to your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have all the various dependencies installed, we can start modifying
    our Angular app to add Material components. We will add a toolbar, material design
    card element, and cover accessibility and typography concerns alongside basic
    layout techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Material schematics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Angular 6 and the introduction of schematics, libraries like Material can
    provide their own code generators. At time of publication, Angular Material ships
    with three rudimentary generators to create Angular components with a side navigation,
    a dashboard layout, or a data table. You can read more about generator schematics
    at [https://material.angular.io/guide/schematics](https://material.angular.io/guide/schematics).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can create a side navigation layout by executing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command updates `app.module.ts`, directly importing Material modules into
    that file, breaking my suggested `material.module.ts` pattern from earlier. Further,
    a new `SideNavComponent` is added to the app as a separate component, but as mentioned
    in the *Side Navigation* section in [Chapter 14](c1386d03-1f04-49e0-a623-bc5c64be089c.xhtml),
    *Design Authentication and Authorization*, such a navigation experience needs
    to be implemented at the very root of your application.
  prefs: []
  type: TYPE_NORMAL
- en: In short, Angular Material Schematics hold a promise of making it a lot less
    cumbersome to add various Material modules and components to your Angular app;
    however, as provided, these schematics are not suitable for the purposes of creating
    a flexible, scalable, and well-architected code base, as pursued by this book.
  prefs: []
  type: TYPE_NORMAL
- en: For the time being, I would recommend using these schematics for rapid prototyping
    or experimentation purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's start manually adding some components to LocalCast Weather.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying landing page with Material Toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start making further changes to `app.component.ts`, let's switch the
    component to use inline templates and inline styles, so we don't have to switch
    back and forth between file for a relatively simple component.
  prefs: []
  type: TYPE_NORMAL
- en: Update `app.component.ts` to use an inline template
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove `app.component.html` and `app.component.css`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start improving our app by implementing an app-wide toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the `h1` tag in `app.component.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `h1` tag with `mat-toolbar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the result; you should see a toolbar, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d828cd15-3717-4b09-8402-8a13e428257f.png)'
  prefs: []
  type: TYPE_IMG
- en: LocalCast Weather Toolbar
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `mat-toolbar` with a more attention-grabbing color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For a more native feeling, it is important that the toolbar touches the edges
    of the browser. This works well both on large- and small-screen formats. In addition,
    when you place clickable elements such as a hamburger menu or a help button on
    the far-left or far-right side of the toolbar, you''ll avoid the potential that
    the user will click on empty space. This is why Material buttons actually have
    a larger hit-area than visually represented. This makes a big difference in crafting
    frustration-free user experiences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This won''t be applicable to this app, however, if you''re building a dense
    application; you''ll note that your content will go all the way to the edges of
    the application, which is not a desirable outcome. Consider wrapping your content
    area in a div and apply the appropriate margins using css, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next screenshot, you can see the edge-to-edge toolbar with the primary
    color applied to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e2075cc-752b-48b4-bccb-c1870d9d1ff1.png)'
  prefs: []
  type: TYPE_IMG
- en: LocalCast Weather with Improved Toolbar
  prefs: []
  type: TYPE_NORMAL
- en: Representing weather in Material Card
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material card is a great container to represent the current weather information.
    The card element is surrounded by a drop-shadow that delineates the content from
    its surroundings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `MatCardModule` in `material.module`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In `app.component`, surround `<app-current-weather>` with `<mat-card>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the barely distinguishable card element, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7c7d644c-53ee-4076-8ce8-cff3ed4a939b.png)'
  prefs: []
  type: TYPE_IMG
- en: LocalCast Weather with Indistinguishable Card
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to lay out the screen better, we need to switch to the Flex Layout
    engine. Start by removing the training-wheels from the component template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove `style="text-align:center"` from the surrounding `<div>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To center an element in a page, we need to create row, assign a width to the
    center element, and create two additional columns on either side that can flex
    to take the empty space, such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Surround `<mat-card>` with the preceding HTML
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Observe that the card element is properly centered, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/34bc57e0-cd3f-4551-914d-f526896d8bd4.png)'
  prefs: []
  type: TYPE_IMG
- en: LocalCast Weather with Centered Card
  prefs: []
  type: TYPE_NORMAL
- en: Reading through the Card documentation and looking through the examples on Material's
    documentation site at [https://material.angular.io/components/card/overview](https://material.angular.io/components/card/overview),
    you'll note that `mat-card` provides elements to house title and content. We will
    implement this in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: On [material.angular.io](https://material.angular.io), you can view the source
    code of any example by clicking on  the brackets icons or launch a working example
    in Plunker by clicking on the arrow icon.
  prefs: []
  type: TYPE_NORMAL
- en: Accessibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Leveraging such Material features may feel unnecessary; however, you must consider
    responsiveness, styling, spacing, and accessibility concerns when designing your
    app. The Material team has put in a lot of effort so that your code works correctly
    under most circumstances and can serve the largest possible user base with a high-quality
    user experience. This can include visually-impaired or keyboard-primary users,
    who must rely on specialized software or keyboard features such as tabs to navigate
    your app. Leveraging Material elements provides crucial metadata for these users
    to be able to navigate your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Material claims support for the following screen reader software:'
  prefs: []
  type: TYPE_NORMAL
- en: NVDA and JAWS with IE / FF / Chrome (on Windows)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VoiceOver with Safari on iOS and Safari / Chrome on OSX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TalkBack with Chrome on Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Card header and content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s implement the title and content elements of `mat-card`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: With Material, less is always more. You'll note that we were able to remove
    the center `div` and directly apply the `fxFlex` on the center card. All material
    elements have native support for the Flex Layout engine, and this has tremendous
    positive maintainability implications in complicated UIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we apply `mat-card-header`, you can see this result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/043fdc09-4523-4514-b191-1819972288e5.png)'
  prefs: []
  type: TYPE_IMG
- en: LocalCast Weather Card with Title and Content
  prefs: []
  type: TYPE_NORMAL
- en: Note that fonts within the card now match Material's Roboto font. However, Current
    Weather is no longer attention grabbing, like before. If you add back in the `h2`
    tag inside `mat-card-title`, Current Weather will visually look bigger; however,
    the font won't match the rest of your application. To fix this issue, you must
    understand Material's typography features.
  prefs: []
  type: TYPE_NORMAL
- en: Material typography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material''s documentation aptly puts it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Typography is a way of arranging type to make text legible, readable, and appealing
    when displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Material offers a different level of typography that has different font-size,
    line-height, and font-weight characteristics that you can apply to any HTML element,
    not just the components provided out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following table are CSS classes that you can use to apply Material''s
    typography, such as `<div class="mat-display-4">Hello, Material world!</div>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Class Name** | **Usage** |'
  prefs: []
  type: TYPE_TB
- en: '| `display-4`, `display-3`, `display-2` and `display-1` | Large, one-off headers,
    usually at the top of the page (for example, a hero header) |'
  prefs: []
  type: TYPE_TB
- en: '| `headline ` | Section heading corresponding to the `<h1>` tag |'
  prefs: []
  type: TYPE_TB
- en: '| `title ` | Section heading corresponding to the `<h2>` tag |'
  prefs: []
  type: TYPE_TB
- en: '| `subheading-2` | Section heading corresponding to the `<h3>` tag |'
  prefs: []
  type: TYPE_TB
- en: '| `subheading-1` | Section heading corresponding to the `<h4>` tag |'
  prefs: []
  type: TYPE_TB
- en: '| `body-1` | Base body text |'
  prefs: []
  type: TYPE_TB
- en: '| `body-2` | Bolder body text |'
  prefs: []
  type: TYPE_TB
- en: '| `caption ` | Smaller body and hint text |'
  prefs: []
  type: TYPE_TB
- en: '| `button` | Buttons and anchors |'
  prefs: []
  type: TYPE_TB
- en: You can read more about Material Typography at [https://material.angular.io/guide/typography](https://material.angular.io/guide/typography).
  prefs: []
  type: TYPE_NORMAL
- en: Applying typography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are multiple ways to apply typography. One way is to leverage the `mat-typography`
    class and use the corresponding HTML tag like `<h2>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way is to apply the specific typography directly on an element, like
    `class="mat-title"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that `class="mat-title"` can be applied to `div`, `span` or an `h2` with
    the same results.
  prefs: []
  type: TYPE_NORMAL
- en: As a general rule of thumb, it is usually a better idea to implement the more
    specific and localized option, which is the second implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the tagline as center-aligned caption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can center the tagline of the application using `fxLayoutAlign` and give
    it a subdued `mat-caption` typography, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement the layout changes and caption typography:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the results, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/61aca5fe-b2cc-47e9-b988-0ea5d1d1fe48.png)'
  prefs: []
  type: TYPE_IMG
- en: LocalCast Weather Centered Tagline
  prefs: []
  type: TYPE_NORMAL
- en: Updating Current Weather card layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There''s still more work to do to make the UI look like the design, particularly
    the contents of the Current Weather card, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73911aa2-c33c-4fba-80da-fe4594b53b64.png)'
  prefs: []
  type: TYPE_IMG
- en: To design the layout, we'll leverage Angular Flex.
  prefs: []
  type: TYPE_NORMAL
- en: You'll be editing `current-weather.component.html`, which uses the `<div>` and
    `<span>` tags to establish elements that live on separate lines or on the same
    line, respectively. With the switch over to Angular Flex, we need switch all elements
    to `<div>` and specify rows and columns using `fxLayout`.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Layout Scaffolding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to start by implementing the rough scaffolding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the current state of the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go through the file step by step and update it:'
  prefs: []
  type: TYPE_NORMAL
- en: Update `<span>` elements to `<div>` on lines 3, 4, and 8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wrap the `<img>` element with a `<div>`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `fxLayout="row"` property to the `<div>` element that has multiple child
    elements on lines 2 and 6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The City and Country column takes roughly 2/3rds of the screen, so add `fxFlex="66%"`
    to the `<div>` element on line 3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `fxFlex` to the next `<div>` element on line 4 to ensure that it takes up
    the rest of the horizontal space
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `fxFlex="66%"` to the new `<div>` element, surrounding the `<img>` element
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `fxFlex` to the next `<div>` element on line 4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final state of the template should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can be more verbose in adding Angular Flex attributes; however, the more
    code you write, the more you'll need to maintain, making future changes more difficult.
    For example, the `<div>` element on line 12 doesn't need `fxLayout="row"`, since
    a `<div>` implicitly gets a new line. Similarly, on line 4 and line 7, the right-hand
    side column doesn't need an explicit `fxFlex` attribute, since it'll automatically
    be squeezed by the left-hand side element.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a grid placement perspective, all your elements are now in the correct *cell,* as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e654723-bc0e-46b4-84ee-58aea4c84fe9.png)'
  prefs: []
  type: TYPE_IMG
- en: LocalCast Weather with layout scaffolding
  prefs: []
  type: TYPE_NORMAL
- en: Aligning elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to align and style each individual cell to match the design. The
    date and temperature needs to be right aligned and the description centered:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To right align the date and temperature, create a new css class named `.right`
    in `current-weather.component.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Add `class="right"` to the `<div>` elements on lines 4 and 10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Center the `<div>` element for description in the same way you centered the
    app's tagline earlier in the chapter
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Observe that the elements are aligned correctly, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7fe6ea79-5fcb-43bf-bea3-be0aa44eb4b8.png)'
  prefs: []
  type: TYPE_IMG
- en: LocalCast Weather with correct alignments
  prefs: []
  type: TYPE_NORMAL
- en: Styling elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finalizing the styling of elements is usually the most time-consuming part
    of frontend development. I recommend doing multiple passes to achieve a close
    enough version of the design with minimal effort first and then have your client
    or team decide whether it''s worth the extra resources to spend more time to polish
    the design:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new css property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For the city name, on line 3, add `class="mat-title no-margin"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the date, on line 4, add `"mat-subheading-2 no-margin"` to `class="right"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the format of the date from `'fullDate'` to `'EEEE MMM d'` to match the
    design
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `<img>,` on line 8 to add `style="zoom: 175%"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the temperature, on line 10, append `"mat-display-3 no-margin"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the description, on line 12, add `class="mat-caption"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the final state of the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe that the styled output of your code changes, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fea27c51-414f-4bf1-89c1-8e413c625610.png)'
  prefs: []
  type: TYPE_IMG
- en: LocalCast Weather with styling
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tuning styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tagline can benefit from some top and bottom margins. This is common CSS
    that we''re likely to use across the application, so let''s put it in `styles.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement `vertical-margin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply `vertical-margin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Current Weather has the same style as the City Name; we need to distinguish
    between the two.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app.component.ts`, update Current Weather with a `mat-headline` typography:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The image and the temperature aren''t centered, so add `fxLayoutAlign="center
    center"` to the row surrounding those elements on line 6:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the final design of your app, which should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4a8d03d-3a72-42bd-8e7b-76e3588061a8.png)'
  prefs: []
  type: TYPE_IMG
- en: LocalCast Weather final design
  prefs: []
  type: TYPE_NORMAL
- en: Tweaking to match design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is an area where you may spend a significant amount of time. If we were
    following the 80-20 principal, pixel-perfect tweaks usually end up being the last
    20% that takes 80% of the time to complete. Let''s examine the differences between
    our implementation and the design and what it would take to bridge the gap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/752fe2d4-5f42-4db7-bf34-0f3e84dfd4b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The date needs further customization. The numeric ordinal *th* is missing;
    to accomplish this, we will need to bring in a third-party library such as moment
    or implement our own solution and bind it next to the date on the template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `current.date` to append an ordinal to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement a `getOrdinal` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that the implementation of `getOrdinal` boils down to a complicated one-liner
    that isn't very readable and is very difficult to maintain. Such functions, if
    critical to your business logic, should be heavily unit tested.
  prefs: []
  type: TYPE_NORMAL
- en: Angular 6, at the time of writing, doesn't support new line breaks in the date
    template; ideally, we should be able to specify the date format as `'EEEE\nMMM
    d'` to ensure that the line break is always consistent.
  prefs: []
  type: TYPE_NORMAL
- en: The temperature implementation needs to separate the digits from the unit with
    a `<span>` element, surrounded with a `<p>`, so the superscript style can be applied
    to the unit, such as `<span class="unit">℉</span>`, where unit is a CSS class
    to make it look like a superscript element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement a `unit` CSS class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply `unit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to experiment with how much of space the forecast image should have,
    by tweaking the `fxFlex` value on line 7\. Otherwise, the temperature overflows
    to the next line and your setting can further be affected by the size of your
    browser window. For example, `60%` works well with a small browser window, but
    when maximized, it forces an overflow. However, `55%` seems to satisfy both conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90504375-02fa-479b-b7fe-cd6f267d516f.png)'
  prefs: []
  type: TYPE_IMG
- en: LocalCast Weather after tweaks
  prefs: []
  type: TYPE_NORMAL
- en: As always, it is possible to further tweak margins and paddings to further customize
    the design. However, each deviation from the library will have maintainability
    consequences down the line. Unless you're truly building a business around displaying
    weather data, you should defer any further optimizations to the end of the project,
    as time permits, and if experience is any guide, you will not be making this optimization.
  prefs: []
  type: TYPE_NORMAL
- en: 'With two negative margin-bottom hacks, you can attain a design fairly close
    to the original, but I will not include those hacks here and leave it as an exercise
    for the reader to discover on the GitHub repository. Such hacks are sometimes
    necessary evils, but in general, they point to a disconnect between design and
    implementation realities. The solution leading up to the tweaks section is the
    sweet spot, where Angular Material thrives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/181ade0b-f684-4c00-975c-83d7f4f31da4.png)'
  prefs: []
  type: TYPE_IMG
- en: LocalCast Weather after tweaks and hacks
  prefs: []
  type: TYPE_NORMAL
- en: Updating unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to keep your unit tests running, you will need to import `MaterialModule`
    to any component''s `spec` file that uses Angular material:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You will also need to update any test, including e2e tests, that search for
    a particular HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, since the app''s title, LocalCast Weather, is not in an `h1` tag
    anymore, you must update the `spec` file to look for it in a `span` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, in e2e tests, you will need to update your page object function
    to retrieve the text from the correct location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Updating Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use `ng update` for a quick and painless upgrade experience, which
    should look like below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, I have discovered the `material-update-tool` published by the
    Angular team at [https://github.com/angular/material-update-tool](https://github.com/angular/material-update-tool).
    In its current form this tool is advertised as a specific Angular Material 5.x
    to 6.0 updater tool, so it may perhaps become part of `ng update` like the `rxjs-tslint`
    tool in the future. You may run the tool as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: If you're lucky and everything goes well, feel free to skip the rest of this
    section. For the rest of the section I will go over a specific scenario involving
    release candidates and beta versions that I ran into during the development of
    this example, which highlights the need for a manual update. First, we will establish
    awareness of the current versions, then discover latest available versions, and,
    finally, update and test the upgrade, like we did while updating Angular manually.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know what version to upgrade to, let''s go ahead and do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to update Material and its related components
    to their target versions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Verify your `package.json` to ensure that the versions match the expected version
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Address any NPM Warnings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this specific instance, we receive impossible-to-meet peer dependency warnings
    from the `@angular/flex-layout` package. Further investigation on GitHub ([https://github.com/angular/flex-layout/issues/508](https://github.com/angular/flex-layout/issues/508))
    reveals that this is a known issue and in general to be expected from a Beta or
    RC package. This means it is safe to ignore these warnings.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned to apply specific Angular Material components to
    your application. You became aware of the pitfalls of overly-optimizing UI design.
    We also went over how you can keep Angular Material up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will update the weather app to respond to user input
    with reactive forms and keep our components decoupled, while also enabling data
    exchange between them using `BehaviorSubject`. After the next chapter, we will
    be done with the weather app and shift our focus on building larger, line-of-business
    applications.
  prefs: []
  type: TYPE_NORMAL
