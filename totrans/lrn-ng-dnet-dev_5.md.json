["```ts\n      app.Run(async (context) =>   \n      {   \n            await   context.Response.WriteAsync(\"Hello  \n            World!\");   \n      });   \n```", "```ts\n        \"version\": \"1.0.0\",   \n        \"name\": \"my-todo\",   \n        \"private\": true,   \n        \"dependencies\":\n        {   \n          \"@angular/common\": \"~4.0.0\",   \n          \"@angular/compiler\": \"~4.0.0\",   \n          \"@angular/core\": \"~4.0.0\",   \n          \"@angular/forms\": \"~4.0.0\",   \n          \"@angular/platform-browser\": \"~4.0.0\",   \n          \"@angular/platform-browser-dynamic\":   \"~4.0.0\",   \n\n          \"systemjs\": \"0.19.40\",   \n          \"core-js\": \"^2.4.1\",   \n          \"rxjs\": \"5.0.1\",   \n          \"zone.js\": \"^0.8.4\"   \n        },   \n          \"devDependencies\": \n        {   \n          \"@types/node\": \"^6.0.46\",   \n          \"typescript\": \"~2.1.0\"   \n        }   \n      }   \n```", "```ts\n      {   \n            \"version\": \"1.0.0\",   \n            \"name\": \"my-todo\",   \n            \"private\": true,   \n            \"dependencies\": {   \n            \"@angular/common\": \"~4.0.0\",   \n            \"@angular/compiler\": \"~4.0.0\",   \n            \"@angular/core\": \"~4.0.0\",   \n            \"@angular/forms\": \"~4.0.0\",   \n            \"@angular/platform-browser\": \"~4.0.0\",   \n            \"@angular/platform-browser-dynamic\":   \n            \"~4.0.0\",   \n            \"systemjs\": \"0.19.40\",   \n            \"core-js\": \"^2.4.1\",   \n            \"rxjs\": \"5.0.1\",   \n            \"zone.js\": \"^0.8.4\"   \n      },   \n      \"devDependencies\": {   \n      \"@types/node\": \"^6.0.46\",   \n      \"gulp\": \"^3.9.1\",   \n      \"typescript\": \"~2.1.0\"   \n      }   \n    }   \n```", "```ts\n      var paths = {   \n          sourcePath: \"./node_modules\",   \n          targetPath: \"./wwwroot/libs\"   \n      }   \n          var librariesToMove = [   \n          paths.sourcePath + '/core-\n          js/client/shim.min.js',   \n          paths.sourcePath + '/zone.js/dist/zone.min.js',   \n          paths.sourcePath +   \n         '/systemjs/dist/system.src.js',   \n      ];   \n          var gulp = require('gulp');   \n          gulp.task('librariesToMove',   function () {   \n          return           \n          gulp.src(librariesToMove).pipe      \n          (gulp.dest(paths.targetPath));   \n      });\n```", "```ts\n      <!DOCTYPE html>   \n      <html>   \n      <head>   \n          <title>My   Todo</title>   \n          <script>document.write('<base   href=\"' + \n          document.location + \n          '\" />');</script>   \n          <meta charset=\"UTF-8\">   \n          <!-- Polyfills -->   \n          <script src=\"img/shim.min.js\"></script>   \n          <script src=\"img/zone.min.js\"></script>   \n          <script src=\"img/system.src.js\"></script>   \n          <script src=\"img/systemjs.config.js\"></script>   \n          <script>   \n            System.import('main.js').catch(function(err){          \n            console.error(err); });   \n          </script>   \n      </head>   \n      <body>   \n          <my-app>Loading My Todo   App...</my-app>   \n      </body>   \n      </html>\n```", "```ts\n      (function (global) {\n      System.config({\n      paths: {\n      'npm:': 'node_modules/'\n      },\n      map: {\n      'app': 'app',\n      '@angular/common': \n      'npm:@angular/common/bundles/common.umd.js',\n      '@angular/compiler':       \n      'npm:@angular/compiler/bundles/compiler.umd.js',\n      '@angular/core': \n      'npm:@angular/core/bundles/core.umd.js',\n      '@angular/forms': \n      'npm:@angular/forms/bundles/forms.umd.js',\n      '@angular/platform-browser': 'npm:@angular/platform-\n      browser/bundles/platform-browser.umd.js',\n      '@angular/platform-browser-dynamic': \n      'npm:@angular/platform-\n      browser-dynamic/bundles/platform-browser-\n      dynamic.umd.js',\n      'rxjs': 'npm:rxjs'\n      },\n      packages: \n      {app: {\n      main: './main.js',\n      defaultExtension: 'js'\n      },\n      rxjs: {\n      defaultExtension: 'js'\n      }\n      }\n      });\n      })(this);\n```", "```ts\n      {   \n            \"compilerOptions\": \n            {   \n            \"diagnostics\": true,   \n            \"emitDecoratorMetadata\":   true,   \n            \"experimentalDecorators\":   true,   \n            \"lib\": [\"es2015\", \"dom\"],   \n            \"listFiles\": true,   \n            \"module\": \"commonjs\",   \n            \"moduleResolution\": \"node\",   \n            \"noImplicitAny\": true,   \n            \"outDir\": \"wwwroot\",   \n            \"removeComments\": false,   \n            \"rootDir\": \"wwwroot\",   \n            \"sourceMap\": true,   \n            \"suppressImplicitAnyIndexErrors\":   true,   \n            \"target\": \"es5\"   \n            },   \n            \"exclude\": [   \n            \"node_modules\"   \n          ]   \n      }\n```", "```ts\n      import { Component } from '@angular/core';   \n      @Component({   \n          selector: 'my-app',   \n          template: `<h1>Hello   {{name}}</h1>`   \n      })   \n      export class AppComponent { name   = 'My Todo App';  \n      }\n```", "```ts\n      import { NgModule } from '@angular/core';\n      import { BrowserModule } from '@angular/platform-\n      browser';\n      import { FormsModule } from '@angular/forms';\n      import { AppComponent } from './app.component';\n      @NgModule({\n      imports: [\n      BrowserModule,\n      FormsModule\n      ],\n      declarations: [AppComponent],\n      bootstrap: [AppComponent]\n      })\n      export class AppModule { }\n```", "```ts\n      import { platformBrowserDynamic }   from \n      '@angular/platform-\n      browser-dynamic';   \n      import { AppModule } from './app/app.module';   \n      platformBrowserDynamic().bootstrapModule(AppModule);\n```", "```ts\nexport class Todo {   \n    title: string;   \n    completed: boolean;   \n    constructor(title: string) {   \n        this.title = title;   \n        this.completed = false;   \n    }   \n    set isCompleted(value:   boolean) {   \n        this.completed = value;   \n    }   \n}   \n```", "```ts\ntodo.service.ts file:\n```", "```ts\nimport { Todo } from './todo'    \nexport class TodoService {   \n    todos: Array<Todo>   \n    constructor() {   \n        this.todos = [new Todo('First   item'),   \n        new Todo('Second item'),   \n        new Todo('Third item')];   \n    }   \n    getPending() {   \n        return   this.todos.filter((todo: Todo) => todo.completed === \n        false);   \n    }   \n    getCompleted() {   \n        return   this.todos.filter((todo: Todo) => todo.completed === \n        true);   \n    }   \n    remove(todo: Todo) {   \n          this.todos.splice(this.todos.indexOf(todo), 1);   \n    }   \n\n    add(title: string) {   \n        this.todos.push(new   Todo(title));   \n    }   \n    toggleCompletion(todo: Todo)   {   \n        todo.completed =   !todo.completed;   \n    }   \n    removeCompleted() {   \n        this.todos =   this.getPending();   \n    }   \n}\n```", "```ts\nimport { Component } from '@angular/core';   \nimport { Todo } from './todo'   \nimport { TodoService } from './todo.service'     \n@Component({   \n    selector: 'my-app',   \n    templateUrl: './app/app.component.html'   \n})   \nexport class AppComponent {   \n    todos: Array<Todo>;   \n    todoService: TodoService;   \n    newTodoText = '';   \n    constructor(todoService:   TodoService) {   \n        this.todoService =   todoService;   \n        this.todos =   todoService.todos;   \n    }   \n    removeCompleted() {   \n        this.todoService.removeCompleted();   \n    }   \n    toggleCompletion(todo: Todo)   {   \n          this.todoService.toggleCompletion(todo);   \n    }   \n    remove(todo: Todo) {   \n          this.todoService.remove(todo);   \n    }  \n    addTodo() {   \n        if   (this.newTodoText.trim().length) {   \n              this.todoService.add(this.newTodoText);   \n            this.newTodoText = '';   \n        }   \n    }   \n}   \n```", "```ts\napp.module.ts file:\n```", "```ts\nimport { NgModule } from '@angular/core';   \nimport { BrowserModule } from '@angular/platform-browser';   \nimport { FormsModule } from '@angular/forms';   \nimport { AppComponent } from './app.component';   \nimport { TodoService } from './todo.service'   \n@NgModule({   \n    imports: [   \n        BrowserModule,   \n        FormsModule   \n    ],   \n    declarations: [AppComponent],   \n    providers: [TodoService],   \n    bootstrap: [AppComponent]   \n})   \nexport class AppModule { }\n```", "```ts\nAppComponent with all the mentioned features:\n```", "```ts\n<section>   \n    <header>   \n          <h1>todos</h1>   \n        <input placeholder=\"Add   new todo\" autofocus=\"\" [(ngModel)]=\"newTodoText\">   \n        <button type=\"button\"   (click)=\"addTodo()\">Add</button>   \n    </header>   \n    <section *ngIf=\"todoService.todos.length   > 0\">   \n        <ul>   \n            <li *ngFor=\"let   todo of todoService.todos\">   \n                <input type=\"checkbox\"   (click)=\"toggleCompletion(todo)\" [checked]=\"todo.completed\">   \n                  <label>{{todo.title}}</label>   \n                <button   (click)=\"remove(todo)\">X</button>   \n            </li>   \n        </ul>   \n    </section>   \n    <footer *ngIf=\"todoService.todos.length   > 0\">   \n          <span><strong>{{todoService.getPending().length}}</strong>   {{todoService.getPending().length == 1 ? 'item' : 'items'}} left</span>   \n        <button *ngIf=\"todoService.getCompleted().length   > 0\" (click)=\"removeCompleted()\">Clear completed</button>   \n    </footer>   \n</section>   \n```"]