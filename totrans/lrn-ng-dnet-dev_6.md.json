["```ts\n    public void   ConfigureServices(IServiceCollection   \n    services)   \n        {   \n            services.AddMvc();   \n        }   \n```", "```ts\n    app.UseMvc();\n```", "```ts\n    <ItemGroup>   \n     <DotNetCliToolReference    \n     Include=\"Microsoft.VisualStudio.Web.CodeGeneration.  \n     Tools\"  Version=\"1.0.0\" />   \n    </ItemGroup>   \n```", "```ts\n    2.1 Add a constructor:   \n        public IConfigurationRoot   Configuration { get; }   \n        public Startup(IHostingEnvironment   env)   \n        {   \n            var builder = new   ConfigurationBuilder()   \n                .SetBasePath(env.ContentRootPath)   \n                .AddJsonFile(\"appsettings.json\",     \n                 optional: true, \n                    reloadOnChange: true)   \n                .AddJsonFile($\"appsettings.\n                 {env.EnvironmentName}.json\",   optional: \n                  true)   \n                .AddEnvironmentVariables();   \n            Configuration =   builder.Build();   \n        }   \n    2.2 Add MVC services:   \n        public void   ConfigureServices(IServiceCollection  \n        services)   \n        {   \n            // Add framework   services.   \n            services.AddMvc();   \n       }   \n    2.3 Configure web app to use   use Configuration and \n        use MVC routing:  \n        public void   Configure(IApplicationBuilder app, \n        IHostingEnvironment env, ILoggerFactory   \n        loggerFactory)   \n        {      \n        loggerFactory.AddConsole(Configuration.GetSection       \n        (\"Logging\"));   \n              loggerFactory.AddDebug();  \n            if (env.IsDevelopment())   \n            {   \n                  app.UseDeveloperExceptionPage();   \n            }   \n            else   \n            {   \n                  app.UseExceptionHandler(\"/Home/Error\");   \n            }   \n            app.UseStaticFiles();   \n\n            app.UseMvc(routes   =>   \n            {   \n                routes.MapRoute(   \n                    name: \"default\",   \n                    template: \" \n            {controller=Home}/{action=Index}\n                     /{id?}\");   \n            });   \n        }\n```", "```ts\n<ItemGroup>   \n          <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\"   Version=\"1.0.1\" />   \n</ItemGroup>   \n```", "```ts\n[Produces(\"application/json\")]   \n    [Route(\"api/Todos\")]   \n    public class TodosController   : Controller   \n    {   \n        // GET: api/Todos   \n        [HttpGet]   \n        public   IEnumerable<string> Get()   \n        {   \n            return new string[] {   \"value1\", \"value2\" };   \n        }  \n        // GET: api/Todos/5   \n        [HttpGet(\"{id}\", Name = \"Get\")]   \n        public string Get(int id)   \n        {   \n            return \"value\";   \n        }    \n        // POST: api/Todos   \n        [HttpPost]   \n        public void   Post([FromBody]string value)   \n        {   \n        }   \n        // PUT: api/Todos/5   \n        [HttpPut(\"{id}\")]   \n        public void Put(int id,   [FromBody]string value)   \n        {   \n        }   \n        // DELETE:   api/ApiWithActions/5   \n        [HttpDelete(\"{id}\")]   \n        public void Delete(int   id)   \n        {   \n        }   \n    }   \n```", "```ts\n   namespace My_Todo.Models\n   {\n   public class Todo\n   {\n   public int Id { get; set;\n    }\n   public string Title { get; set;\n    }\n   public bool Completed { get; set;\n    }\n   }  \n  }\n```", "```ts\n   public class TodoContext : DbContext\n   {\n     public TodoContext(DbContextOptions<TodoContext>       \n     options)\n     : base(options)\n    {\n    }\n    public DbSet<Todo> Todos { get; set; }\n  }\n```", "```ts\n    services.AddEntityFrameworkSqlServer()   \n    .AddDbContext<TodoContext>(options =>   \n    options.UseSqlServer(Configuration.GetConnectionString\n    (\"DefaultConnection\")));   \n    services.AddMvc();   \n```", "```ts\n {   \n   \"ConnectionStrings\": \n    {   \n     \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;\n         Database=aspnet-CloudInsights-f2d509d5-468f-4bc9-  \n         9c47-\n         0593d0907063;Trusted_Connection=True;\n         MultipleActiveResultSets=true\"   \n    },   \n   \"Logging\": \n    {\n     \"IncludeScopes\": false,   \n     \"LogLevel\": {   \n      \"Default\": \"Warning\"   \n     }   \n   }   \n }   \n```", "```ts\nStartup.cs file is as follows:\n```", "```ts\npublic class Startup   \n    {   \n        public Startup(IHostingEnvironment   env)   \n        {   \n            var builder = new   ConfigurationBuilder()   \n                  .SetBasePath(env.ContentRootPath)   \n                .AddJsonFile(\"appsettings.json\",   optional: true, reloadOnChange: true)   \n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\",   optional: true)   \n                  .AddEnvironmentVariables();   \n            Configuration =   builder.Build();   \n        }   \n        public IConfigurationRoot   Configuration { get; }   \n\n        // This method gets   called by the runtime. Use this method to add services to the container.   \n        // For more information   on how to configure your application, visit   https://go.microsoft.com/fwlink/?LinkID=398940   \n        public void ConfigureServices(IServiceCollection   services)   \n        {   \n              services.AddEntityFrameworkSqlServer()   \n              .AddDbContext<TodoContext>(options =>   \n                  options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));   \n            // Add framework   services.   \n            services.AddMvc();   \n        }   \n        // This method gets   called by the runtime. Use this method to configure the HTTP request   pipeline.   \n        public void   Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory   loggerFactory)   \n        {   \n              loggerFactory.AddConsole();   \n\n            if   (env.IsDevelopment())   \n            {   \n                  app.UseDeveloperExceptionPage();   \n            }   \n              app.UseDefaultFiles();   \n            app.UseStaticFiles();   \n              app.UseStaticFiles(new StaticFileOptions   \n            {   \n                FileProvider =   new PhysicalFileProvider(   \n                      Path.Combine(env.ContentRootPath, \"node_modules\")   \n                ),   \n                RequestPath = \"/\"   + \"node_modules\"   \n            });   \n            app.UseMvc();   \n        }   \n    }   \n```", "```ts\n  <ItemGroup>   \n    <DotNetCliToolReference    \n    Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\"  \n    Version=\"1.0.0\" />   \n  </ItemGroup>   \n```", "```ts\nprivate TodoContext _db; \n```", "```ts\n        public TodosController(TodoContext context) \n        { \n            _db = context; \n        } \n```", "```ts\n        // GET: api/todos \n        [HttpGet] \n        public IEnumerable<Todo> Get() \n        { \n            return _db.Todos.ToList(); \n        } \n```", "```ts\n        // GET: api/todos/pending-only \n        [HttpGet] \n        [Route(\"pending-only\")] \n        public IEnumerable<Todo> GetPendingOnly() \n        { \n            _db.Todos.RemoveRange(_db.Todos.Where(x =>   \n            x.Completed == true)); \n            _db.SaveChanges(); \n            return _db.Todos.ToList(); \n        }\n```", "```ts\n        // POST api/todos \n        [HttpPost] \n        public Todo Post([FromBody]Todo value) \n        { \n            _db.Todos.Add(value); \n            _db.SaveChanges(); \n            return value; \n        } \n```", "```ts\n        // PUT api/todos/id \n        [HttpPut(\"{id}\")] \n        public Todo Put(int id, [FromBody]Todo value) \n        { \n            var todo = _db.Todos.FirstOrDefault(x => x.Id  \n            == id); \n            todo.Title = value.Title; \n            todo.Completed = value.Completed; \n            _db.Entry(todo).State = \n            Microsoft.Data.Entity.EntityState.Modified; \n            _db.SaveChanges(); \n            return value; \n        } \n```", "```ts\n        // DELETE api/todos/id \n        [HttpDelete(\"{id}\")] \n        public void Delete(int id) \n        { \n            var todo = _db.Todos.FirstOrDefault(x => x.Id \n            == id); \n            _db.Entry(todo).State = \n            Microsoft.Data.Entity.EntityState.Deleted; \n            _db.SaveChanges(); \n        }     \nTodosController is this:\n```", "```ts\n[Produces(\"application/json\")]   \n    [Route(\"api/Todos\")]   \n    public class TodosController   : Controller   \n    {   \n        private TodoContext _db;   \n        public   TodosController(TodoContext context)   \n        {   \n            _db = context;   \n        }   \n        // GET: api/todos   \n        [HttpGet]   \n        public   IEnumerable<Todo> Get()   \n        {   \n            return   \n            _db.Todos.ToList();   \n        }   \n        // GET: api/todos/pending-only   \n        [HttpGet]   \n        [Route(\"pending-only\")]   \n        public   IEnumerable<Todo> GetPendingOnly()   \n        {   \n            _db.Todos.RemoveRange(_db.Todos.Where(x => \n            x.Completed == true));   \n            _db.SaveChanges();   \n            return   _db.Todos.ToList();   \n        }   \n        // POST api/todos   \n        [HttpPost]   \n        public Todo   Post([FromBody]Todo value)   \n        {   \n            _db.Todos.Add(value);   \n            _db.SaveChanges();   \n            return value;   \n        }   \n        // PUT api/todos/id   \n        [HttpPut(\"{id}\")]   \n        public Todo Put(int id,   [FromBody]Todo value)   \n        {   \n            var todo =   _db.Todos.FirstOrDefault(x => \n            x.Id == id);   \n            todo.Title =   value.Title;   \n            todo.Completed =   value.Completed;   \n            _db.Entry(todo).State   = \n            EntityState.Modified;   \n            _db.SaveChanges();   \n            return value;   \n        }   \n        // DELETE api/todos/id   \n        [HttpDelete(\"{id}\")]   \n        public void Delete(int   id)   \n        {   \n            var todo =   _db.Todos.FirstOrDefault(x => \n            x.Id == id);   \n            _db.Entry(todo).State   = EntityState.Deleted;   \n            _db.SaveChanges();   \n        }   \n    }   \n```", "```ts\nexport class Todo { \n    id: number; \n    title: string; \n    completed: boolean; \n    constructor(id: number, title: string, completed: \n    boolean) { \n        this.id = id; \n        this.title = title; \n        this.completed = completed; \n    } \n    set isCompleted(value: boolean) { \n        this.completed = value; \n    }  \n}  \n```", "```ts\n {   \n   \"version\": \"1.0.0\",   \n   \"name\": \"my-todo\",   \n   \"private\": true,   \n   \"dependencies\": {   \n     \"@angular/common\": \"~4.0.0\",   \n     \"@angular/compiler\": \"~4.0.0\",   \n     \"@angular/core\": \"~4.0.0\",   \n     \"@angular/forms\": \"~4.0.0\",   \n     \"@angular/http\": \"~4.0.0\",   \n     \"@angular/platform-browser\": \"~4.0.0\",   \n     \"@angular/platform-browser-dynamic\":   \"~4.0.0\",   \n     \"systemjs\": \"0.19.40\",   \n     \"core-js\": \"^2.4.1\",   \n     \"rxjs\": \"5.0.1\",   \n     \"zone.js\": \"^0.8.4\"   \n   },   \n   \"devDependencies\": {   \n     \"@types/node\": \"^6.0.46\",   \n     \"gulp\": \"^3.9.1\",   \n     \"typescript\": \"~2.1.0\"   \n   }   \n }\n```", "```ts\n  (function (global) {   \n      System.config({           \n          paths: {               \n             'npm:': 'node_modules/'   \n        },   \n        map: {   \n            'app': 'app',   \n            '@angular/common':   \n   'npm:@angular/common/bundles/common.umd.js',   \n            '@angular/compiler': \n   'npm:@angular/compiler/bundles/compiler.umd.js',   \n            '@angular/core': \n   'npm:@angular/core/bundles/core.umd.js',   \n            '@angular/forms': \n   'npm:@angular/forms/bundles/forms.umd.js',   \n            '@angular/http': \n   'npm:@angular/http/bundles/http.umd.js',   \n            '@angular/platform-browser':   \n   'npm:@angular/platform-browser/bundles/platform-\n    browser.umd.js',   \n            '@angular/platform-browser-dynamic':   \n   'npm:@angular/platform-browser-\n    dynamic/bundles/platform-browser-dynamic.umd.js',   \n            'rxjs': 'npm:rxjs'   \n          },   \n           packages: {   \n              app: {   \n                  main: './main.js',   \n                  defaultExtension:   'js'   \n              },   \n              rxjs: {   \n                  defaultExtension:   'js'   \n              }   \n          }   \n      });   \n   })(this);   \n```", "```ts\n   import { NgModule } from '@angular/core';   \n   import { BrowserModule } from '@angular/platform-   \n   browser';   \n   import { FormsModule } from '@angular/forms';   \n   import { HttpModule } from '@angular/http';   \n   import { AppComponent } from './app.component';   \n   import { TodoService } from './todo.service'   \n   @NgModule({   \n   imports: [   \n        BrowserModule,   \n        FormsModule,   \n        HttpModule   \n    ],   \n       declarations: [AppComponent],   \n       providers: [TodoService],   \n       bootstrap: [AppComponent]   \n   })   \n   export class AppModule { }   \n```", "```ts\nexport class Todo {   \n    id: number;   \n    title: string;   \n    completed: boolean;   \n    constructor(id: number,   title: string, completed: boolean) {   \n        this.id = id;   \n        this.title = title;   \n        this.completed =   completed;   \n    }  \n    set isCompleted(value:   boolean) {   \n        this.completed = value;   \n    }   \n}   \n```", "```ts\n   import { Injectable } from '@angular/core'; \n   import { Http, Headers } from '@angular/http'; \n   import 'rxjs/add/operator/toPromise';\n   import { Todo } from './todo'\n```", "```ts\n  constructor (private http: Http) { ... } \n```", "```ts\n     getTodos(): Promise<Array<Todo>> { \n        return this.http.get('/api/todos') \n            .toPromise() \n            .then(response => response.json() as   \n             Array<Todo>) \n            .catch(this.handleError); \n     }\n```", "```ts\n    getPendingTodos() { \n    this.http.get('http://localhost:2524/api/todos/    \n    pending-only') \n         .subscribe( \n         err => console.log(err), \n         () => console.log('getTodos Complete') \n         ); \n    } \napp.component.ts:\n```", "```ts\n       getPending() { \n       return this.todos.filter((todo: Todo) =>   \n       todo.completed === false); \n   } \n```", "```ts\nimport { Injectable } from '@angular/core'; \nimport { Http, Headers } from '@angular/http'; \nimport 'rxjs/add/operator/toPromise';\nimport { Todo } from './todo' \n@Injectable() \nexport class TodoService { \n    constructor(private http: Http) {    } \n    getTodos(): Promise<Array<Todo>> { \n        return this.http.get('/api/todos') \n            .toPromise() \n            .then(response => response.json() as Array<Todo>) \n            .catch(this.handleError); \n    } \n    getPendingTodos() { \n        this.http.get('/api/todos/pending-only') \n            .subscribe( \n            err => console.log(err), \n            () => console.log('getTodos Complete') \n            ); \n    }    \n    removeCompleted() { \n        this.getPendingTodos();         \n    } \n    private handleError(error: any): Promise<any> { \n        console.error('An error occurred', error);  \n        return Promise.reject(error.message || error); \n    } \n} \n```", "```ts\n     postTodo(todo: Todo): Promise<Todo> { \n             var headers = new Headers(); \n             headers.append('Content-Type',  \n     'application/json'); \n        return this.http.post('/api/todos',  \n     JSON.stringify(todo), { headers: headers }) \n            .toPromise() \n            .then(response => response.json() as Todo) \n            .catch(this.handleError); \n     } \n```", "```ts\n     putTodo(todo: Todo) {\n       var headers = new Headers(); \n       headers.append('Content-Type', 'application/json'); \n       this.http.put('/api/todos/' + todo.id,  \n     JSON.stringify(todo), { headers: headers }) \n            .toPromise() \n            .then(() => todo) \n            .catch(this.handleError); \n     } \n```", "```ts\n      deleteTodo(todo: Todo) { \n        this.http.delete('/api/todos/' + todo.id) \n            .subscribe(err => console.log(err), \n            () => console.log('getTodos Complete') \n            ); \n         } \n```", "```ts\n    remove(todo: Todo) { \n        this.deleteTodo(todo);         \n    } \n    add(title: string): Promise<Todo> { \n        var todo = new Todo(0, title, false); \n        return this.postTodo(todo); \n    } \n    toggleCompletion(todo: Todo) { \n        todo.completed = !todo.completed; \n        this.putTodo(todo); \n    } \n    removeCompleted() { \n        this.getPendingTodos();         \n    } \ntodo.service.ts after all the updates is this:\n```", "```ts\nimport { Injectable } from '@angular/core'; \nimport { Http, Headers } from '@angular/http'; \nimport 'rxjs/add/operator/toPromise'; \nimport { Todo } from './todo' \n@Injectable() \nexport class TodoService { \n    constructor(private http: Http) {    } \n    getTodos(): Promise<Array<Todo>> { \n        return this.http.get('/api/todos') \n            .toPromise() \n            .then(response => response.json() as Array<Todo>) \n            .catch(this.handleError); \n    } \n    getPendingTodos() { \n        this.http.get('/api/todos/pending-only') \n            .subscribe( \n            err => console.log(err), \n            () => console.log('getTodos Complete') \n            ); \n    }    \n    postTodo(todo: Todo): Promise<Todo> { \n        var headers = new Headers(); \n        headers.append('Content-Type', 'application/json'); \n        return this.http.post('/api/todos', JSON.stringify(todo), { headers: headers }) \n            .toPromise() \n            .then(response => response.json() as Todo) \n            .catch(this.handleError); \n    } \n    putTodo(todo: Todo) { \n        var headers = new Headers(); \n        headers.append('Content-Type', 'application/json'); \n        this.http.put('/api/todos/' + todo.id, JSON.stringify(todo), { headers: headers }) \n            .toPromise() \n            .then(() => todo) \n            .catch(this.handleError); \n    } \n    deleteTodo(todo: Todo) { \n        this.http.delete('/api/todos/' + todo.id) \n            .subscribe(err => console.log(err), \n            () => console.log('getTodos Complete') \n            ); \n    }     \n    remove(todo: Todo) { \n        this.deleteTodo(todo);         \n    } \n    add(title: string): Promise<Todo> { \n        var todo = new Todo(0, title, false); \n        return this.postTodo(todo); \n    } \n    toggleCompletion(todo: Todo) { \n        todo.completed = !todo.completed; \n        this.putTodo(todo); \n    } \n    removeCompleted() { \n        this.getPendingTodos();         \n    } \n    private handleError(error: any): Promise<any> { \n        console.error('An error occurred', error);  \n        return Promise.reject(error.message || error); \n    } \n} \n```", "```ts\napp.component.ts is as shown:\n```", "```ts\nimport { Component, OnInit } from '@angular/core'; \nimport { Todo } from './todo' \nimport { TodoService } from './todo.service' \n@Component({ \n    selector: 'my-app', \n    templateUrl: './app/app.component.html', \n    providers: [TodoService] \n}) \nexport class AppComponent implements OnInit { \n    todos: Array<Todo>; \n    newTodoText = ''; \n    constructor(private todoService: TodoService) { \n        this.todos = new Array(); \n    } \n    getTodos(): void { \n        this.todoService \n            .getTodos() \n            .then(todos => this.todos = todos); \n    } \n    ngOnInit(): void { \n        this.getTodos(); \n    } \n    removeCompleted() { \n        this.todoService.removeCompleted(); \n        this.todos = this.getPending(); \n    } \n    toggleCompletion(todo: Todo) { \n        this.todoService.toggleCompletion(todo); \n    } \n    remove(todo: Todo) { \n        this.todoService.remove(todo); \n        this.todos.splice(this.todos.indexOf(todo), 1); \n    } \n    addTodo() { \n        if (this.newTodoText.trim().length) { \n        this.todoService.add(this.newTodoText).then(res =>    \n   { \n            this.getTodos(); \n            }); \n            this.newTodoText = ''; \n            this.getTodos(); \n        } \n    } \n    getPending() { \n        return this.todos.filter((todo: Todo) => todo.completed === false); \n    } \n    getCompleted() { \n        return this.todos.filter((todo: Todo) => todo.completed === true); \n    } \n} \n```", "```ts\n<section> \n    <header> \n        <h1>todos</h1> \n        <input placeholder=\"Add new todo\" autofocus=\"\" [(ngModel)]=\"newTodoText\"> \n        <button type=\"button\" (click)=\"addTodo()\">Add</button> \n    </header> \n    <section> \n        <ul> \n            <li *ngFor=\"let todo of todos\"> \n                <input type=\"checkbox\" (click)=\"toggleCompletion(todo)\" [checked]=\"todo.completed\"> \n                <label>{{todo.title}}</label> \n                <button (click)=\"remove(todo)\">X</button> \n            </li> \n        </ul> \n    </section> \n    <footer *ngIf=\"todos.length > 0\"> \n        <span><strong>{{getPending().length}}</strong> {{getPending().length == 1 ? 'item' : 'items'}} left</span> \n        <button *ngIf=\"getCompleted().length > 0\" (click)=\"removeCompleted()\">Clear completed</button> \n    </footer> \n</section> \n```", "```ts\nindex.html:\n```", "```ts\n<!DOCTYPE html> \n<html> \n<head> \n    <title>My Todo</title> \n    <script>document.write('<base href=\"' +   \n    document.location + '\" />');</script> \n    <meta charset=\"UTF-8\"> \n    <!-- Polyfills --> \n    <script src=\"img/shim.min.js\"></script> \n    <script src=\"img/zone.min.js\"></script> \n    <script src=\"img/system.src.js\"></script> \n    <script src=\"img/systemjs.config.js\"></script> \n    <script> \n      System.import('main.js').catch(function(err){ console.error(err); }); \n    </script> \n</head> \n<body> \n    <my-app>Loading My Todo App...</my-app> \n</body> \n</html> \n```"]