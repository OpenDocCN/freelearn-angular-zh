- en: Chapter 8. Testing Angular Applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter discusses testing Angular components and services using the Jasmine
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Jasmine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Angular services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Angular components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Jasmine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Jasmine is an open source framework that is used to test JavaScript code without
    any dependency on DOM. As Angular is loosely coupled, we can use the Jasmine framework
    to test Angular components, services, and so on. Independent of each other, the
    clean syntax of Jasmine enables you to write tests very easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'A global function named describe is the starting point of the Jasmine function.
    This global function takes a function and two parameters of type string. The string
    parameter describes the tests, and the function will have the actual implementation
    of testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The actual test methods are defined by a global function called theÂ `it` function,
    which takes two arguments. The first argument is the title of the test or spec,
    and the second argument is the function that tests the expectations by verifying
    the state of the code. Expectations are similar to assert in the Microsoft unit
    test framework. If any one of the defined expectations fails in the spec, it is
    called the failing spec. The following code illustrates the preceding statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The test or spec method will have one or more expect statements, as illustrated,
    that compare the actual value with the expected value using the matcher functions
    that are chained to the expect function; various default matcher functions are
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We have only seen the basics of the Jasmine framework, and there are more features
    available. You can learn about them by visiting the official website atÂ [http://jasmine.github.io/](http://jasmine.github.io/).
    This introduction is enough for us to learn to test Angular services and components.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Angular services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create aÂ service `todo.service.ts` that constructs the list of `Todo`
    items in the constructor. The complete code of `todo.service.ts` is as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We have the service that interacts with the data source in place. Now, let's
    write tests using the Jasmine framework to test the `TodoService`. We will test
    two methods, namely `getPending()` and `getCompleted()`. Create a file named `todo.service.spec.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `TodoService` application-specific service, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `describe` method: a global function that is the starting point
    of the Jasmine function that takes two parameters, a string that describes the
    tests and a function that has the actual implementation of testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `beforeEach`Â function will be executed before running each test method,
    and it serves an instance of `TodoService` for each test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s define the `it` test methods, as demonstrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are verifying that the expectations of the length of the returned values
    of `getPending()` and `getCompleted()` match.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We have the spec or tests ready to run; let''s run them by executing the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `npm run build:watch`Â command will build your application and transpile
    the TypeScript files into JavaScript. Then, the `karma start karma.config`Â command
    is executed to start the test runner for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Karma is a test runner that can be used to run tests for any JavaScript application.
    The `karma.config.js` file is a configuration file for karma that provides information
    about our application to karma in order for it to understand and test the application.
    The karma configuration file has details of the path of JavaScript libraries and
    frameworks that the application is consuming, and also, it provides details about
    the plugins used by karma.
  prefs: []
  type: TYPE_NORMAL
- en: 'Karma config file has the configuration details for basePath, frameworks, plugins,
    client, and custom launcher in our application. We have configured Jasmine as
    our test framework in karma, we have added the list of required modules under
    plugins to load when running the test. We also configured the client with `buildPaths`
    and `clearContext`. The `buildPaths` will have path details to look for the transpiled
    app JS and map files. The following is the complete karma configuration file for
    your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The command, `karma start`, takes the karma config file path as argument and
    will start the karma test runner. The `npm run build` command is configured in
    `pretest` so that it will be executed before a test is run. It executes the `tsc
    -p src`Â command, a TypeScript compiler that transpiles the code in theÂ `src`
    folder. The following screenshot illustrates the command window that executes
    these commands as per the configuration in `package.json` under theÂ `scripts`
    item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Karma launches the application in a browser and runs all the tests in the specs.
    The `http-server` command will start the development server to host the `mytodo`Â Angular
    application. The result of the test execution is as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_001.png)'
  prefs: []
  type: TYPE_IMG
- en: The test results of TodoService
  prefs: []
  type: TYPE_NORMAL
- en: Testing Angular components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have just seen how to test a service in Angular application. Now, let''s
    discuss testing an Angular component. Perform the following steps to create `AppComponent`
    for the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `app.component.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import modules such as `Component`, `TodoService`, and `Todo`Â that are necessary
    for the `AppComponent`, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `AppComponent` class, as demonstrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Decorate the `AppComponent` class by theÂ `@Component` attribute with the `selector`,
    `providers` and `templateUrl`Â metadata:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare the `todos`, `todoService`, `newTodoText`, and `title`Â variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the constructor with `todoService` injected, as follows. Note that the
    constructor updates the `todos` with the `todos` returned from `todoService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Introduce theÂ `addTodo()` function that calls the `add()` method of `TodoService`
    by passing the description of new `todo`, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Introduce theÂ `remove()` function that calls the `remove()` method of `TodoService`
    by passing a `todo` object to remove, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Introduce theÂ `removeCompleted()` function that calls the `removeCompleted()`
    method of `TodoService` to remove all the completed todo items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Introduce theÂ `toggleCompletion()` function that calls the `toggleCompletion()`
    method of `TodoService` that toggles the value of the completed status of a `todo`
    item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We have the `AppComponent` in place now. The template for this `AppComponent`
    is defined in a template file, `app.component.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Writing Specs for AppComponent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s write specs using Jasmine to test `AppComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `app.component.spec.ts` file to write specs or tests for `AppComponent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import modules such as `async`, `ComponentFixture`, `TestBed`, `FormsModule`,
    `By`, `DebugElement`, and `AppComponent` from Angular core.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the followingÂ `describe` global function and declare the necessary variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create two `beforeEach` functions: one to compile the template and CSS,
    and the other to get the instance of the component. The code snippet is given
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: For each test, we may end up repeating the same code to initialize or to clear
    some objects. To ease the work of the developer, Jasmine provides theÂ `beforeEach`
    and `afterEach` global functionalities that run before and after executing each
    test method respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add the `it` test or specs functions to verify the expectations, as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Running the specs or tests of AppComponent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Execute the `npm test` command in the command-line window, and the application
    will start and the tests will be run for you. The following screenshot shows the
    result of tests or specs that ran against `AppComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_002.png)'
  prefs: []
  type: TYPE_IMG
- en: Test result of AppComponent
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing a mock service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping the components lean by injecting the services into it enables us to
    write unit tests with a mock service. We can mock the injected service by mimicking
    the service behavior using its interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Here, we created a mock of an existing todo service by extending and overriding
    the `getPending` method to return an empty array.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can test this using `testBed`, instructingÂ how to use the mock service,
    `MockTodoService` instead of the actual service, `TodoService`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we instructedÂ how to use `MockTodoService` instead of `TodoService`,
    and we can sky the outcome of testing, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Here, it gets the mock service,Â `MockTodoService`, from fixture and adds a
    spyOn override to pretend that there are no pending `todo` items in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Hurray! We learned the basics of writing automated testing for Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: We started this chapter with an introduction to the Jasmine framework and learned
    how to write effective tests and run them automatically.Â Then, we learned how
    to test components and services using the Jasmine framework and assert the behavior
    of the application. Finally, we discussed mocking a service and testing it using
    spyOn.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss some of the new topics in Angular and .NET
    Core.
  prefs: []
  type: TYPE_NORMAL
