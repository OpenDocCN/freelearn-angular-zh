["```ts\nAppModule class:\n```", "```ts\nimport { NgModule }      from '@angular/core'; \nimport { BrowserModule } from '@angular/platform-browser'; \n@NgModule({ \n  imports:      [ BrowserModule ], \n  providers:    [ Logger ], \n  declarations: [ AppComponent ], \n  exports:      [ AppComponent ], \n  bootstrap:    [ AppComponent ] \n}) \nexport class AppModule { } \n```", "```ts\nexport class AppComponent { } \n```", "```ts\nimport {AppComponent} from './app.component';\n```", "```ts\nimport {Component} from '@angular/core'; \n```", "```ts\nClass FirstComponent { \n} \n```", "```ts\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'first-component',\n  template: `<h1>{{getGreetingPhrase()}} {{name}}</h1>`,\n})\nexport class FirstComponent {\n  name: string;\n  constructor() {\n  this.name = 'Rajesh Gunasundaram';\n}\ngetGreetingPhrase() {\n  return 'Hello Author,';\n}\n}\ngetGreetingPhrase() function to fetch and display the phrase to greet, and it will also access the name property to display the name. The @Component()Â preceding the FirstComponent class is the annotation that denotes this class is a Component, and the markup identifier first component for this component is assigned to the metadata of @Component named selector.\n```", "```ts\n@Component({...})\nexport class FirstComponent {...}\nFirstComponent class has been decorated as a component.\n```", "```ts\n@Component({ \n   selector: 'first-component', \n   templateUrl: 'app/first.component.html' \n}) \nexport class FirstComponent {...} \n```", "```ts\n<first-controller></first-controller> \n```", "```ts\n<div> \n  The Name of the book is {{bookName}} and is published by {{pubName}}. \n</div> \n```", "```ts\n@Component({ \n  selector: 'first-component', \n  template: \"<div>{{getGreetingPhrase()}} {{name}}</div>\" \n}) \n```", "```ts\n@Component({ \n  selector: 'first-component', \n  templateUrl: FirstPage.html' \n}) \n```", "```ts\n<div *ngFor=\"let todo of todos\"> \n  <todo-item [todo]=\"todo\"></todo-item> \n</div> \n```", "```ts\n<!-- author refers to input element and passes its `value`to the event handler --> \n<input #author placeholder=\"Author Name\"> \n<button (click)=\"updateAuthor(author.value)\">Update</button> \n```", "```ts\n<div>Hello, {{authorName}}!</div>\n```", "```ts\n<div [hidden]=\"hidePubName>Packt Publishing</div> \nhidePubName component property to the div property hidden. This is also a one-way binding where the data flows from a component property to a template.\n```", "```ts\n<button (click)=\"doSomething()\">Do Something</button>\n```", "```ts\n<input [(ngModel)]=\"authorName\">\nngModel is wrapped with parentheses and then with square brackets. The parentheses indicate that the component property is tied up with the ngChange event, and the square brackets indicate that the component property is assigned to a value property of the input element. So, when the value of the input element changes, it fires up the change event that eventually updates authorName with the new value from the event object. ngModel in the markup is the built-in directive in Angular that unifies property and event binding.\n```", "```ts\n<div *ngFor=\"#todo of todos\"></div> \n<todo-item *ngIf=\"selectedTodo\"></todo-item> \n```", "```ts\n<input [(ngModel)]=\"author.name\">\n```", "```ts\nCamera and Internet areÂ created in the constructor of the MobileÂ class. These are the features of Mobile. Instead of requesting for the feature, the Mobile class created the feature by itself. This means that the Mobile class is bound to a certain version of features, such as a 2 MP camera and 2G Internet. Later, if we want to upgrade the camera to 20 MP and Internet to 3G or 4G, we need to rewrite the code of the Mobile class.\n```", "```ts\nconstructor(public camera: Camera, public internet: Internet) { } \n```", "```ts\n// Simple mobile with 2MP camera and 2G internet. \nvar mobile = new Mobile(new Camera2MP(), new Internet2G()); \n```", "```ts\n// an advanced mobile with 20MP camera and 4G internet. \nvar mobile = new Mobile(new Camera20MP(), new Internet4G()); \n```", "```ts\nvar mobile = injector.get(Mobile); \n```", "```ts\nimport { Component } from '@angular/core';\nimport { TodoListComponent } from './todo-list.component';\n@Component({\n  selector: 'my-todos',\n  template: '<h2>Todolist</h2><todo-list></todo-list>',\n  providers: [TodoService],\n  directives: [TodoListComponent]\n})\nexport class TodosComponent { }\n```"]