- en: Asynchronous Programming Using Observables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we think about it, nothing is instantaneous. Real time is not a thing. Did
    I lose my mind for a second there? Now, you can push a button and feel like it's
    instantaneous, but, the programmer in you knows that it's not. Information has
    been transferred, code executed, databases fetched, and so on. During this time,
    as short or as long as it might be, you have waited. More precisely, your code
    has made your users wait. Wouldn't you rather have a code base built around this
    very notion of asynchronism and which can execute other things while it waits,
    or, at least, warn your users that we are waiting for something to happen? This
    is the idea on which this chapter is based. This chapter helps you to understand
    the concept of asynchronous programming and implementing the same using Observable
    in Angular.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Observer patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asynchronous programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subscribing to Observables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Promises
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observer patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Observable pattern is one that allows an object, called **subject**, to
    keep track of other objects, called **observers**, interested in the subject state.
    When the subject state changes, it notifies its observers about it. The mechanics
    behind this are really simple.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript Observable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at the following `Observer`/`Subject` implementation in pure
    TypeScript (that is no Angular or framework of any kind, just TypeScript).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, I defined an `Observer` interface that any concrete implementation will
    have to implement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This interface only defines the `notify()` method. This method will be called
    by the subject (that is the `Object` being observed by `Observer`) when its state
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, I have an implementation of this interface, named `HumanObserver`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This implementation leverages the `typescript` property constructor, where
    you can define the property of your class inside the constructor. This notation
    is one hundred percent equivalent to the following, while being shorter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Following the definitions of the `Observer` interface and `HumanObserver`,
    we can move on to the subject. I defined a `Subject` class that manages `observers`.
    This class has three methods: `attachObserver`, `detachObserver`, and `notifyObservers`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `attachObserver` method pushes new observers into the observer's property,
    while the `detachObserver` removes them.
  prefs: []
  type: TYPE_NORMAL
- en: Subject implementations are often found with attach/detach, subscribe/unsubscribe,
    or add/delete prefixes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last method is `notifyObservers`, which iterates over the observers and
    invokes their `notify()` method. The last class allowing us to showcase the `Observable`
    mechanic is `IMDB`, which extends `Subject`. It will notify observers when a movie
    gets added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To make the pieces communicate with each other, we have to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Subject`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an `Observer`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attach the `Observer` to the `Subject`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the state of the `Subject` via the `addMovie` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More concretely, here''s an implementation of the previous list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To speed up our development process, we will install `ts-node`. This node package
    will transpile `typescript` files into JavaScript and resolve the dependencies
    between those files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To quickly compile and execute `typescript` application, I recommend the excellent
    `ts-node` package. This package will transpile the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is `Mathieu Notified`. We can test to detach `mathieu` and add another
    movie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The output is still `Mathieu Notified`, which happens after we add the Jaws
    movie. The second movie addition (that is Die Hard) doesn't trigger a `Mathieu
    Notified` print to the console, as it has been detached.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript Observable with parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, this is a basic implementation of the observer pattern. Nevertheless, it
    is not full-fledged, as `HumanObserver` only knows that something has changed
    in one of the subjects it observes. Consequently, it has to iterate over all of
    the subjects it observes and check their previous state against their current
    state to identify what has changed and where. A better way to go about this would
    be to modify the notify of `Observer`, so it contains more information. For example,
    we could add optional parameters, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `notify()` method now accepts an optional value parameter which characterizes
    the new state of the `Subject` object. We can also receive a reference to the
    `Subject` object itself. This is useful in case the observer observes many subjects.
    In such a case, we need to be able to differentiate them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Accordingly, we have to change `Subject` and `IMDB` a bit, so they use the
    new `notify`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is way more expressive than `Mathieu Notified`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we are used to the `Observer` patterns for asynchronous programming,
    what we really mean is that we ask for something, and we do not want to wait to
    do anything during its processing. Instead, what we do is subscribe to the response
    event to be notified when the response comes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we will use the same pattern and mechanisms with Angular2.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this observer implementation is at [http://bit.ly/mastering-angular2-chap7-part1](http://bit.ly/mastering-angular2-chap7-part1).
  prefs: []
  type: TYPE_NORMAL
- en: Observing HTTP responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will build a JSON API returning movies according to search
    parameters. Instead of simply waiting for the HTTP query to complete, we will
    leverage the power of the observer design pattern to let the user know we are
    waiting and, if need be, execute other processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First things first: we need a data source for our IMDB--like application. Building
    and deploying a server-side application able to interpret an HTTP query and send
    the result accordingly is relatively simple nowadays. However, this falls outside
    the scope of this book. Instead, what we will do is fetch a static JSON file hosted
    at [http://bit.ly/mastering-angular2-marvel](http://bit.ly/mastering-angular2-marvel).
    This file contains some of the latest movies of the Marvel Cinematic Universe.
    It contains a JSON array describing fourteen movies as JSON objects. Here is the
    first movie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can find classical information that an IMDB-like application would provide,
    such as release year, running time, and so on. Our goal is to design an asynchronous
    JSON API, making each one of these fields searchable.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we are fetching a static JSON file (that is we will not insert, update,
    or delete any elements), acceptable API calls would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The first call simply fetches the movie with `movie_id: 1`; the second call
    is a more generic one that works in any field. To prevent API consumer from requesting
    fields that don''t exist in our movie, we restrict the `field` values using an
    enumerator defined inside a `Movie` class.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the important part here is the actual return of these calls. Indeed, they
    will trigger an `Observable` mechanism where the caller will attach himself to
    an `Observable` HTTP call. Then, when the HTTP call is complete and the results
    have been filtered according to the query parameter, then, the callee will notify
    the caller about the response. Consequently, the caller does not have to wait
    for the callee (`IMDBAPI`); it will be notified when the request is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s dive into the implementation. First, we will need to create a new Angular2
    project using the Angular CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to make sure everything went well, you can browse to `localhost:4200`
    and see if you got something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a704954-e45e-4d7f-bfc9-f7c42a93c132.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will need a model to represent the movie concept. We will generate
    this class using the `ng g class` models/`Movie` command-line. Then, we can add
    a constructor defining all the private fields of the `Movie` models as the same
    as the getters and setters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, each field of the movie JSON definition is mapped into a private member
    of the Movie class using the constructor property declaration of `typescript`.
    Also, we override the `toString` method, so it prints every field. In the `toString`
    method, we take advantage of the multi-line string provided by the back tick ([PRE15]
  prefs: []
  type: TYPE_NORMAL
- en: IMDBAPI.fetchOneById(1);
  prefs: []
  type: TYPE_NORMAL
- en: IMDBAPI.fetchByFields(MovieFields.release_date, 2015);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: import { Injectable } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { Http }  from '@angular/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { Movie, MovieFields } from '../models/movie';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable } from 'rxjs/Rx';
  prefs: []
  type: TYPE_NORMAL
- en: import 'rxjs/Rx';
  prefs: []
  type: TYPE_NORMAL
- en: '@Injectable()'
  prefs: []
  type: TYPE_NORMAL
- en: export class IMDBAPIService {
  prefs: []
  type: TYPE_NORMAL
- en: private moviesUrl:string = "assets/marvel-cinematic-universe.json";
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private http: Http) { }'
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Return an Observable to a Movie matching id'
  prefs: []
  type: TYPE_NORMAL
- en: '* @param  {number}            id'
  prefs: []
  type: TYPE_NORMAL
- en: '* @return {Observable<Movie>}'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: public fetchOneById(id:number):Observable<Movie>{
  prefs: []
  type: TYPE_NORMAL
- en: console.log('fetchOneById', id);
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get(this.moviesUrl)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: /**
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '* Transforms the result of the http get, which is observable'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '* into one observable by item.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*/'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .flatMap(res => res.json().movies)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /**
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '* Filters movies by their movie_id'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*/'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .filter((movie:any)=>{
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("filter", movie);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return (movie.movie_id === id)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: /**
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '* Map the JSON movie item to the Movie Model'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*/'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .map((movie:any) => {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("map", movie);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return new Movie(
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.movie_id,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.title,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.phase,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.category_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.release_year,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.running_time,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.rating_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.disc_format_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.number_discs,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.viewing_format_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.aspect_ratio_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.status,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.release_date,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.budget,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.gross,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.time_stamp
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: );
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: import { Injectable } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { Http }  from '@angular/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { Movie, MovieFields } from '../models/movie';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable } from 'rxjs/Rx';
  prefs: []
  type: TYPE_NORMAL
- en: import 'rxjs/Rx';
  prefs: []
  type: TYPE_NORMAL
- en: '@Injectable()'
  prefs: []
  type: TYPE_NORMAL
- en: export class IMDBAPIService {
  prefs: []
  type: TYPE_NORMAL
- en: private moviesUrl:string = "app/marvel-cinematic-universe.json";
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private http: Http) { }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: movie:Movie = JSON.parse(`{
  prefs: []
  type: TYPE_NORMAL
- en: '"movie_id" : 1,'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"title" : "Iron Man",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"phase" : "Phase One: Avengers Assembled",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"category_name" : "Action",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"release_year" : 2015,'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"running_time" : 126,'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"rating_name" : "PG-13",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"disc_format_name" : "Blu-ray",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"number_discs" : 1,'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"viewing_format_name" : "Widescreen",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"aspect_ratio_name" : " 2.35:1",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"status" : 1,'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"release_date" : "May 2, 2008",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"budget" : "140,000,000",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"gross" : "318,298,180",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"time_stamp" : "2015-05-03"'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}`);'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Console.log(movie.movie_id(25));
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: import { BrowserModule } from '@angular/platform-browser';
  prefs: []
  type: TYPE_NORMAL
- en: import { NgModule } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { FormsModule } from '@angular/forms';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpModule } from '@angular/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { IMDBAPIService } from './services/imdbapi.service';
  prefs: []
  type: TYPE_NORMAL
- en: import { AppComponent } from './app.component';
  prefs: []
  type: TYPE_NORMAL
- en: '@NgModule({'
  prefs: []
  type: TYPE_NORMAL
- en: 'declarations: ['
  prefs: []
  type: TYPE_NORMAL
- en: AppComponent
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: 'imports: ['
  prefs: []
  type: TYPE_NORMAL
- en: BrowserModule,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: FormsModule,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: HttpModule
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: 'providers: [IMDBAPIService],'
  prefs: []
  type: TYPE_NORMAL
- en: 'bootstrap: [AppComponent]'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export class AppModule { }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: import { Component } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { IMDBAPIService } from './services/imdbapi.service';
  prefs: []
  type: TYPE_NORMAL
- en: import { Movie } from './models/movie';
  prefs: []
  type: TYPE_NORMAL
- en: '@Component({'
  prefs: []
  type: TYPE_NORMAL
- en: 'selector: ''app-root'','
  prefs: []
  type: TYPE_NORMAL
- en: 'templateUrl: ''./app.component.html'','
  prefs: []
  type: TYPE_NORMAL
- en: 'styleUrls: [''./app.component.css'']'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export class AngularObservableAppComponent {
  prefs: []
  type: TYPE_NORMAL
- en: title = 'angular-observable works!';
  prefs: []
  type: TYPE_NORMAL
- en: private movies:Movie[] = []; private error:boolean = false; private finished:boolean
    = false;
  prefs: []
  type: TYPE_NORMAL
- en: constructor(private IMDBAPI:IMDBAPIService){
  prefs: []
  type: TYPE_NORMAL
- en: this.IMDBAPI.fetchOneById(1).subscribe( value => {this.movies.push(value); console.log("Component",
  prefs: []
  type: TYPE_NORMAL
- en: value)}, error => this.error = true, () => this.finished = true )  }
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: <h1>
  prefs: []
  type: TYPE_NORMAL
- en: '{{title}}'
  prefs: []
  type: TYPE_NORMAL
- en: </h1>
  prefs: []
  type: TYPE_NORMAL
- en: <ul>
  prefs: []
  type: TYPE_NORMAL
- en: <li *ngFor="let movie of movies">{{movie}}</li>
  prefs: []
  type: TYPE_NORMAL
- en: </ul>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: fetchOneById 1
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:34 map Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/angular-observable.component.js:21 Component
  prefs: []
  type: TYPE_NORMAL
- en: 'Movie_aspect_ratio_name: " 2.35:1"_budget:'
  prefs: []
  type: TYPE_NORMAL
- en: '"140,000,000"_category_name: "Action"_disc_format_name: "Blu-'
  prefs: []
  type: TYPE_NORMAL
- en: 'ray"_gross: "318,298,180"_movie_id: 1_number_discs: 1_phase: "Phase'
  prefs: []
  type: TYPE_NORMAL
- en: 'One: Avengers Assembled"_rating_name: "PG-13"_release_date: "May 2,'
  prefs: []
  type: TYPE_NORMAL
- en: '2008"_release_year: 2015_running_time: 126_status: 1_time_stamp:'
  prefs: []
  type: TYPE_NORMAL
- en: '"2015-05-03"_title: "Iron Man"_viewing_format_name:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Widescreen"aspect_ratio_name: (...)budget: (...)category_name:'
  prefs: []
  type: TYPE_NORMAL
- en: '(...)disc_format_name: (...)gross: (...)movie_id: (...)number_discs:'
  prefs: []
  type: TYPE_NORMAL
- en: '(...)phase: (...)rating_name: (...)release_date: (...)release_year:'
  prefs: []
  type: TYPE_NORMAL
- en: '(...)running_time: (...)status: (...)time_stamp: (...)title:'
  prefs: []
  type: TYPE_NORMAL
- en: '(...)toString: ()viewing_format_name: (...)__proto__: Object'
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: :4200/app/services/imdbapi.service.js:30 filter Object
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: public fetchByField(field:MovieFields, value:any){
  prefs: []
  type: TYPE_NORMAL
- en: console.log('fetchByField', field, value);
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get(this.moviesUrl)
  prefs: []
  type: TYPE_NORMAL
- en: .flatMap(res => res.json().movies)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: /**
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '* Filters movies by their field'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*/'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .filter((movie:any)=>{
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("filter", movie);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return (movie[MovieFields[field]] === value)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: /**
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '* Map the JSON movie item to the Movie Model'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*/'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .map((movie:any) => {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("map", movie);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return new Movie(
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.movie_id,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.title,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.phase,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.category_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.release_year,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.running_time,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.rating_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.disc_format_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.number_discs,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.viewing_format_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.aspect_ratio_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.status,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.release_date,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.budget,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.gross,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.time_stamp
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: );
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: (function (MovieFields) {
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["movie_id"] = 0] = "movie_id";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["title"] = 1] = "title";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["phase"] = 2] = "phase";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["category_name"] = 3] = "category_name";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["release_year"] = 4] = "release_year";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["running_time"] = 5] = "running_time";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["rating_name"] = 6] = "rating_name";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["disc_format_name"] = 7] =
  prefs: []
  type: TYPE_NORMAL
- en: '"disc_format_name";'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["number_discs"] = 8] = "number_discs";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["viewing_format_name"] = 9] =
  prefs: []
  type: TYPE_NORMAL
- en: '"viewing_format_name";'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["aspect_ratio_name"] = 10] =
  prefs: []
  type: TYPE_NORMAL
- en: '"aspect_ratio_name";'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["status"] = 11] = "status";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["release_date"] = 12] = "release_date";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["budget"] = 13] = "budget";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["gross"] = 14] = "gross";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["time_stamp"] = 15] = "time_stamp";
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: (exports.MovieFields || (exports.MovieFields = {}));
  prefs: []
  type: TYPE_NORMAL
- en: var MovieFields = exports.MovieFields;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: constructor(private IMDBAPI:IMDBAPIService){
  prefs: []
  type: TYPE_NORMAL
- en: this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).subscribe(
  prefs: []
  type: TYPE_NORMAL
- en: value => {this.movies.push(value); console.log("Component",
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: value)},
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: error => this.error = true,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: () => this.finished = true
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: fetchByField 4 2015
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 1, title: "Iron Man",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:47 map Object {movie_id: 1, title: "Iron Man",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '_title: "Iron Man", _phase: "Phase One: Avengers Assembled",'
  prefs: []
  type: TYPE_NORMAL
- en: '_category_name: "Action", _release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 2, title: "The'
  prefs: []
  type: TYPE_NORMAL
- en: 'Incredible Hulk", phase: "Phase One: Avengers Assembled",'
  prefs: []
  type: TYPE_NORMAL
- en: 'category_name: "Action", release_year: 2008...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 3, title: "Iron Man 2",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:47 map Object {movie_id: 3, title: "Iron Man 2",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 3,'
  prefs: []
  type: TYPE_NORMAL
- en: '_title: "Iron Man 2", _phase: "Phase One: Avengers Assembled",'
  prefs: []
  type: TYPE_NORMAL
- en: '_category_name: "Action", _release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 4, title: "Thor", phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2011...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 5, title: "Captain'
  prefs: []
  type: TYPE_NORMAL
- en: 'America", phase: "Phase One: Avengers Assembled", category_name:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Action", release_year: 2011...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 6, title: "Avengers,'
  prefs: []
  type: TYPE_NORMAL
- en: 'The", phase: "Phase One: Avengers Assembled", category_name: "Science'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fiction", release_year: 2012...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 7, title: "Iron Man 3",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase Two", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:47 map Object {movie_id: 7, title: "Iron Man 3",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase Two", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 7,'
  prefs: []
  type: TYPE_NORMAL
- en: '_title: "Iron Man 3", _phase: "Phase Two", _category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: '_release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 8, title: "Thor: The'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dark World", phase: "Phase Two", category_name: "Science Fiction",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2013...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 9, title: "Captain'
  prefs: []
  type: TYPE_NORMAL
- en: 'America: The Winter Soldier", phase: "Phase Two", category_name:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Action", release_year: 2014...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 10, title: "Guardians of'
  prefs: []
  type: TYPE_NORMAL
- en: 'the Galaxy", phase: "Phase Two", category_name: "Science Fiction",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2014...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 11, title: "Avengers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Age of Ultron", phase: "Phase Two", category_name: "Science Fiction",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:47 map Object {movie_id: 11, title: "Avengers: Age'
  prefs: []
  type: TYPE_NORMAL
- en: 'of Ultron", phase: "Phase Two", category_name: "Science Fiction",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 11,'
  prefs: []
  type: TYPE_NORMAL
- en: '_title: "Avengers: Age of Ultron", _phase: "Phase Two",'
  prefs: []
  type: TYPE_NORMAL
- en: '_category_name: "Science Fiction", _release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 12, title: "Ant-Man",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase Two", category_name: "Science Fiction", release_year:'
  prefs: []
  type: TYPE_NORMAL
- en: 2015...}
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:47 map Object {movie_id: 12, title: "Ant-Man",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase Two", category_name: "Science Fiction", release_year:'
  prefs: []
  type: TYPE_NORMAL
- en: 2015...}
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 12,'
  prefs: []
  type: TYPE_NORMAL
- en: '_title: "Ant-Man", _phase: "Phase Two", _category_name: "Science'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fiction", _release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 13, title: "Captain'
  prefs: []
  type: TYPE_NORMAL
- en: 'America: Civil War", phase: "Phase Three", category_name: "Science'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fiction", release_year: 2016...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 14, title: "Doctor'
  prefs: []
  type: TYPE_NORMAL
- en: 'Strange", phase: "Phase Two", category_name: "Science Fiction",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2016...}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: constructor(private IMDBAPI:IMDBAPIService){
  prefs: []
  type: TYPE_NORMAL
- en: let imdbSubscription =
  prefs: []
  type: TYPE_NORMAL
- en: this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: subscribe(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: value => {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: this.movies.push(value);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Component", value)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: if(this.movies.length > 2){
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: imdbSubscription.unsubscribe();
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: error => this.error = true,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: () => this.finished = true
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: );
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: fetchByField 4 2015
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43filter Object {movie_id: 1, title: "Iron Man",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:49 map Object {movie_id: 1, title: "Iron Man",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:24 Component Movie {_movie_id: 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '_title: "Iron Man", _phase: "Phase One: Avengers Assembled",'
  prefs: []
  type: TYPE_NORMAL
- en: '_category_name: "Action", _release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 2, title: "The'
  prefs: []
  type: TYPE_NORMAL
- en: 'Incredible Hulk", phase: "Phase One: Avengers Assembled",'
  prefs: []
  type: TYPE_NORMAL
- en: 'category_name: "Action", release_year: 2008...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 3, title: "Iron Man 2",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:49 map Object {movie_id: 3, title: "Iron Man 2",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:24 Component Movie {_movie_id: 3,'
  prefs: []
  type: TYPE_NORMAL
- en: '_title: "Iron Man 2", _phase: "Phase One: Avengers Assembled",'
  prefs: []
  type: TYPE_NORMAL
- en: '_category_name: "Action", _release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 4, title: "Thor", phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2011...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 5, title: "Captain'
  prefs: []
  type: TYPE_NORMAL
- en: 'America", phase: "Phase One: Avengers Assembled", category_name:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Action", release_year: 2011...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 6, title: "Avengers,'
  prefs: []
  type: TYPE_NORMAL
- en: 'The", phase: "Phase One: Avengers Assembled", category_name: "Science'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fiction", release_year: 2012...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 7, title: "Iron Man 3",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase Two", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:49 map Object {movie_id: 7, title: "Iron Man 3",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase Two", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:24 Component Movie {_movie_id: 7,'
  prefs: []
  type: TYPE_NORMAL
- en: '_title: "Iron Man 3", _phase: "Phase Two", _category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: '_release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: /** ,
  prefs: []
  type: TYPE_NORMAL
- en: '* Return a Promise to a Movie matching id'
  prefs: []
  type: TYPE_NORMAL
- en: '* @param  {number}            id'
  prefs: []
  type: TYPE_NORMAL
- en: '* @return {Promise<Movie>}'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: public fetchOneById(id:number):Promise<Movie>{
  prefs: []
  type: TYPE_NORMAL
- en: console.log('fecthOneById', id);
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get(this.moviesUrl)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: /**
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '* Transforms the result of the http get, which is observable'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '* into one observable by item.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*/'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .flatMap(res => res.json().movies)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: /**
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '* Filters movies by their movie_id'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*/'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .filter((movie:any)=>{
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("filter", movie);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return (movie.movie_id === id)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .toPromise()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: /**
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '* Map the JSON movie item to the Movie Model'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*/'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .then((movie:any) => {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("map", movie);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return new Movie(
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.movie_id,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.title,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.phase,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.category_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.release_year,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.running_time,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.rating_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.disc_format_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.number_discs,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.viewing_format_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.aspect_ratio_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.status,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.release_date,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.budget,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.gross,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movie.time_stamp
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: this.IMDBAPI.fetchOneById(1).then(
  prefs: []
  type: TYPE_NORMAL
- en: value => {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: this.movies.push(value);
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Component", value)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: error => this.error = true
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'imdbapi.service.js:30 filter Object {movie_id: 2, title: "The'
  prefs: []
  type: TYPE_NORMAL
- en: 'Incredible Hulk", phase: "Phase One: Avengers Assembled",'
  prefs: []
  type: TYPE_NORMAL
- en: 'category_name: "Action", release_year: 2008...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 3, title: "Iron Man 2",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 4, title: "Thor", phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2011...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 5, title: "Captain'
  prefs: []
  type: TYPE_NORMAL
- en: 'America", phase: "Phase One: Avengers Assembled", category_name:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Action", release_year: 2011...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 6, title: "Avengers,'
  prefs: []
  type: TYPE_NORMAL
- en: 'The", phase: "Phase One: Avengers Assembled", category_name: "Science'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fiction", release_year: 2012...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 7, title: "Iron Man 3",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase Two", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 8, title: "Thor: The'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dark World", phase: "Phase Two", category_name: "Science Fiction",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2013...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 9, title: "Captain'
  prefs: []
  type: TYPE_NORMAL
- en: 'America: The Winter Soldier", phase: "Phase Two", category_name:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Action", release_year: 2014...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 10, title: "Guardians of'
  prefs: []
  type: TYPE_NORMAL
- en: 'the Galaxy", phase: "Phase Two", category_name: "Science Fiction",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2014...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 11, title: "Avengers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Age of Ultron", phase: "Phase Two", category_name: "Science Fiction",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 12, title: "Ant-Man",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase Two", category_name: "Science Fiction", release_year:'
  prefs: []
  type: TYPE_NORMAL
- en: 2015...}
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 13, title: "Captain'
  prefs: []
  type: TYPE_NORMAL
- en: 'America: Civil War", phase: "Phase Three", category_name: "Science'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fiction", release_year: 2016...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 14, title: "Doctor'
  prefs: []
  type: TYPE_NORMAL
- en: 'Strange", phase: "Phase Two", category_name: "Science Fiction",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2016...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:35 map Object {movie_id: 1, title: "Iron Man",'
  prefs: []
  type: TYPE_NORMAL
- en: 'phase: "Phase One: Avengers Assembled", category_name: "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: 'release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:23 Component Movie {_movie_id: 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '_title: "Iron Man", _phase: "Phase One: Avengers Assembled",'
  prefs: []
  type: TYPE_NORMAL
- en: '_category_name: "Action", _release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: public fetchByField(field:MovieFields, value:any):Promise<Movie[]>{
  prefs: []
  type: TYPE_NORMAL
- en: console.log('fetchByField', field, value);
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get(this.moviesUrl)
  prefs: []
  type: TYPE_NORMAL
- en: .map(res => res.json().movies.filter(
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: (movie)=>{
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return (movie[MovieFields[field]] === value)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .toPromise()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /**
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '* Map the JSON movie items to the Movie Model'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*/'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .then((jsonMovies:any[]) => {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("map", jsonMovies);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: let movies:Movie[] = [];
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: for (var i = 0; i < jsonMovies.length; i++) {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: movies.push(
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: new Movie(
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].movie_id,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].title,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].phase,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].category_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].release_year,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].running_time,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].rating_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].disc_format_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].number_discs,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].viewing_format_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].aspect_ratio_name,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].status,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].release_date,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].budget,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].gross,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: jsonMovies[i].time_stamp
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return movies;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).then(
  prefs: []
  type: TYPE_NORMAL
- en: value => {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: this.movies = value;
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Component", value)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: error => this.error = true
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Private member storing pending promises'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: private promises:Promise<Movie[]>[] = [];
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Register one promise for field/value. Returns this'
  prefs: []
  type: TYPE_NORMAL
- en: '* for chaining that is'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '*  byField(Y, X)'
  prefs: []
  type: TYPE_NORMAL
- en: '* .or(...)'
  prefs: []
  type: TYPE_NORMAL
- en: '* .fetch()'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* @param  {MovieFields} field'
  prefs: []
  type: TYPE_NORMAL
- en: '* @param  {any}         value'
  prefs: []
  type: TYPE_NORMAL
- en: '* @return {IMDBAPIService}'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: public byField(field:MovieFields, value:any):IMDBAPIService{
  prefs: []
  type: TYPE_NORMAL
- en: this.promises.push(this.fetchByField(field, value));
  prefs: []
  type: TYPE_NORMAL
- en: return this;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Convenient method to make the calls more readable, that is'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '*  byField(Y, X)'
  prefs: []
  type: TYPE_NORMAL
- en: '* .or(...)'
  prefs: []
  type: TYPE_NORMAL
- en: '* .fetch()'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* instead of'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '*  byField(Y, X)'
  prefs: []
  type: TYPE_NORMAL
- en: '* .byField(...)'
  prefs: []
  type: TYPE_NORMAL
- en: '* .fetch()'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* @param  {MovieFields} field'
  prefs: []
  type: TYPE_NORMAL
- en: '* @param  {any}         value'
  prefs: []
  type: TYPE_NORMAL
- en: '* @return {IMDBAPIService}'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: public or(field:MovieFields, value:any):IMDBAPIService{
  prefs: []
  type: TYPE_NORMAL
- en: return this.byField(field, value);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Join all the promises and return the aggregated result.'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* @return {Promise<Movie[]>}'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: public fetch():Promise<Movie[]>{
  prefs: []
  type: TYPE_NORMAL
- en: return Promise.all(this.promises).then((results:any) => {
  prefs: []
  type: TYPE_NORMAL
- en: //result is an array of movie arrays. One array per
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: //promise. We need to flatten it.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return [].concat.apply([], results);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: this.IMDBAPI.byField(MovieFields.release_year, 2015)
  prefs: []
  type: TYPE_NORMAL
- en: .or(MovieFields.release_year, 2014)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .or(MovieFields.phase, "Phase Two")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .fetch()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .then(
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: value => {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: this.movies = value;
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Component", value)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: error => this.error = true
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: );
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: This is very simple to read and understand while keeping all the asynchronism
    capability of Angular.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the promises is available here: [http://bit.ly/mastering-angular2-chap7-part3](http://bit.ly/mastering-angular2-chap7-part3).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took advantage of asynchronous programming with Angular
    by using `Observable` and `Promise`.
  prefs: []
  type: TYPE_NORMAL
- en: More specifically, we learned how to implement the `Observable` pattern in `typescript`,
    and then took advantage of the Angular framework, while still using the `Observable`
    characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we saw how to take advantage of `Promises` in Angular and built a basic,
    yet extensible JSON API for querying the Marvel Cinematic Universe.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build upon this example to create advanced forms.
    Indeed, we will create what's required to add, remove, and update movies of the
    Marvel Cinematic Universe. In addition, we will also learn about FormBuilder,
    control groups, and custom validations.
  prefs: []
  type: TYPE_NORMAL
