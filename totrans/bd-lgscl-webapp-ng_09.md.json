["```ts\nsrc/app/app.component.html\n<div style=\"text-align:center\">\n  <h1>\n  LocalCast Weather\n  </h1>\n  <div>Your city, your forecast, right now!</div>\n  <h2>Current Weather</h2>\n  <div>current weather</div>\n</div>\n```", "```ts\nsrc/app\n├── app.component.css\n├── app.component.html\n├── app.component.spec.ts\n├── app.component.ts\n├── app.module.ts\n├── current-weather\n  ├── current-weather.component.css\n  ├── current-weather.component.html\n  ├── current-weather.component.spec.ts\n  └── current-weather.component.ts\n```", "```ts\nsrc/app/current-weather/current-weather.component.ts\nimport { Component, OnInit } from '@angular/core'\n@Component({\n  selector: 'app-current-weather',\n  templateUrl: './current-weather.component.html',\n  styleUrls: ['./current-weather.component.css'],\n})\nexport class CurrentWeatherComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n```", "```ts\nsrc/app/current-weather/current-weather.component.ts import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'app-current-weather',\n  template: `\n  <p>\n    current-weather works!\n  </p>\n  `,\n  styles: ['']\n})\nexport class CurrentWeatherComponent implements OnInit {\nconstructor() {}\n\nngOnInit() {}\n}\n```", "```ts\nsrc/app/app.module.ts ...\nimport { CurrentWeatherComponent } from './current-weather/current-weather.component'\n...\n@NgModule({\ndeclarations: [AppComponent, CurrentWeatherComponent],\n...\n```", "```ts\nsrc/app/app.component.html\n<div style=\"text-align:center\">\n<h1>\n LocalCast Weather\n </h1>\n <div>Your city, your forecast, right now!</div>\n <h2>Current Weather</h2>\n <app-current-weather></app-current-weather>\n</div>\n```", "```ts\nsrc/app/icurrent-weather.ts\nexport interface ICurrentWeather {\n}\n```", "```ts\nsrc/app/interfaces.ts\nexport interface ICurrentWeather {\n  city: string\n  country: string\n  date: Date\n  image: string\n  temperature: number\n  description: string\n}\n```", "```ts\nsrc/app/current-weather/current-weather.component.ts import { Component, OnInit } from '@angular/core'\nimport { ICurrentWeather } from '../interfaces'\n\n@Component({\n  selector: 'app-current-weather',\n  templateUrl: './current-weather.component.html',\n  styleUrls: ['./current-weather.component.css'],\n})\nexport class CurrentWeatherComponent implements OnInit {\n  current: ICurrentWeather\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n```", "```ts\nsrc/app/current-weather/current-weather.component.ts\n...\nconstructor() {\n  this.current = {\n    city: 'Bethesda',\n    country: 'US',\n    date: new Date(),\n    image: 'assets/img/sunny.svg',\n    temperature: 72,\n    description: 'sunny',\n  } as ICurrentWeather\n}\n...\n```", "```ts\nsrc/app/current-weather/current-weather.component.html <div>\n  <div>\n    <span>{{current.city}}, {{current.country}}</span>\n    <span>{{current.date | date:'fullDate'}}</span>\n  </div>\n  <div>\n    <img [src]='current.image'>\n    <span>{{current.temperature | number:'1.0-0'}}℉</span>\n  </div>\n  <div>\n    {{current.description}}\n  </div>\n</div>\n```", "```ts\nsrc/app\n...\n└── weather\n   ├── weather.service.spec.ts\n   └── weather.service.ts\n```", "```ts\nsrc/app/app.module.ts\n...\nimport { WeatherService } from './weather/weather.service'\n...\n@NgModule({\n  ...\n  providers: [WeatherService],\n  ...\n```", "```ts\nsrc/app/app.module.ts\n...\nimport { HttpClientModule } from '@angular/common/http'\n...\n@NgModule({\n  ...\n  imports: [\n    ...\n    HttpClientModule,\n    ...\n```", "```ts\nsrc/app/weather/weather.service.ts\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\n\n@Injectable()\nexport class WeatherService {\n  constructor(private httpClient: HttpClient) {}\n}\n```", "```ts\napi.openweathermap.org/data/2.5/weather?q={city name},{country code}\n```", "```ts\nhttp://samples.openweathermap.org/data/2.5/weather?q=London,uk&appid=b1b15e88fa797225412429c1c50c122a1\n{\n  \"coord\": {\n    \"lon\": -0.13,\n    \"lat\": 51.51\n  },\n  \"weather\": [\n    {\n      \"id\": 300,\n      \"main\": \"Drizzle\",\n      \"description\": \"light intensity drizzle\",\n      \"icon\": \"09d\"\n    }\n  ],\n  \"base\": \"stations\",\n  \"main\": {\n    \"temp\": 280.32,\n    \"pressure\": 1012,\n    \"humidity\": 81,\n    \"temp_min\": 279.15,\n    \"temp_max\": 281.15\n  },\n  \"visibility\": 10000,\n  \"wind\": {\n    \"speed\": 4.1,\n    \"deg\": 80\n  },\n  \"clouds\": {\n    \"all\": 90\n  },\n  \"dt\": 1485789600,\n  \"sys\": {\n    \"type\": 1,\n    \"id\": 5091,\n    \"message\": 0.0103,\n    \"country\": \"GB\",\n    \"sunrise\": 1485762037,\n    \"sunset\": 1485794875\n  },\n  \"id\": 2643743,\n  \"name\": \"London\",\n  \"cod\": 200\n}\n```", "```ts\nsrc/app/weather/weather.service.ts\ninterface ICurrentWeatherData {\n  weather: [{\n    description: string,\n    icon: string\n  }],\n  main: {\n    temp: number\n  },\n  sys: {\n    country: string\n  },\n  dt: number,\n  name: string\n}\n```", "```ts\nsrc/environments/environment.ts\nexport const environment = {\n  production: false,\n  appId: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n  baseUrl: 'http://',\n}\n```", "```ts\nsrc/app/weather/weather.service.ts\nimport { environment } from '../../environments/environment'\n...\nexport class WeatherService {\n  constructor(private httpClient: HttpClient) { }\n\n  getCurrentWeather(city: string, country: string) {\n    return this.httpClient.get<ICurrentWeatherData>(\n        `${environment.baseUrl}api.openweathermap.org/data/2.5/weather?` +\n          `q=${city},${country}&appid=${environment.appId}`\n    )\n  }\n}\n```", "```ts\nsrc/app/current-weather/current-weather.component.ts\nconstructor(private weatherService: WeatherService) { }\n```", "```ts\nsrc/app/current-weather/current-weather.component.ts\nngOnInit() {\n  this.weatherService.getCurrentWeather('Bethesda', 'US')\n    .subscribe((data) => this.current = data)\n}\n```", "```ts\nsrc/app/weather/weather.service.ts\nimport { Observable } from 'rxjs'\nimport { ICurrentWeather } from '../interfaces'\n...\n\nexport class WeatherService {\n  ...\n  getCurrentWeather(city: string, country: string): Observable<ICurrentWeather> {\n  }\n  ...\n}\n```", "```ts\nsrc/app/weather/weather.service.ts export class WeatherService {...\n  private transformToICurrentWeather(data: ICurrentWeatherData): ICurrentWeather {\n    return {\n      city: data.name,\n      country: data.sys.country,\n      date: data.dt * 1000,\n      image: `http://openweathermap.org/img/w/${data.weather[0].icon}.png`,\n      temperature: this.convertKelvinToFahrenheit(data.main.temp),\n      description: data.weather[0].description\n    }\n  }\n\n  private convertKelvinToFahrenheit(kelvin: number): number {\n    return kelvin * 9 / 5 - 459.67\n  }\n}\n```", "```ts\nsrc/app/weather/weather.service.ts\nimport { map } from 'rxjs/operators'\n```", "```ts\nsrc/app/weather/weather.service.ts\n...\nreturn this.httpClient\n  .get<ICurrentWeatherData>(\n    `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${environment.appId}`\n  ).pipe(\n    map(data => \n      this.transformToICurrentWeather(data)\n    )\n  )\n...\n```"]