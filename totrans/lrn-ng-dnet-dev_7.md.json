["```ts\npublic void Configure(IApplicationBuilder app) \n{ \n    app.UseIISPlatformHandler(); \n    app.UseDefaultFiles(); \n    app.UseStaticFiles(); \n    app.UseMvc(config => \n    { \n        config.MapRoute( \n            name: \"Default\", \n            template: \"{controller}/{action}/{id?}\", \n            defaults: new { controller = \"Home\", action = \"Index\" } \n            ); \n    });             \n} \n```", "```ts\nIndex action:\n```", "```ts\npublic IActionResult Index() \n{ \n    return View(); \n} \n```", "```ts\n @{ \n    Layout = null; \n} \n<!DOCTYPE html> \n<html> \n<head> \n    <meta name=\"viewport\" content=\"width=device-width\" /> \n    <title>Index</title> \n</head> \n<body> \n    <h1>index view</h1> \n</body> \n</html> \n```", "```ts\n     app.UseMvc(config =>   \n            {   \n              config.MapRoute(   \n              name: \"Default\",   \n              template: \"{controller}/{action}/{id?}\",   \n     defaults: new   { controller = \"Home\", action =    \n     \"Index\" }   \n               );   \n            });\n```", "```ts\n@{   \n    Layout = null;   \n}   \n<!DOCTYPE html>   \n<html>   \n<head>   \n    <title>My   Todo</title>   \n    <script>document.write('<base   href=\"' + \n    document.location + '\" />');</script>   \n    <meta charset=\"UTF-8\">   \n    <!-- Polyfills -->   \n    <script src=\"img/shim.min.js\"></script>   \n    <script src=\"img/zone.min.js\"></script>   \n    <script src=\"img/system.src.js\"></script>   \n    <script src=\"img/systemjs.config.js\"></script>   \n    <script>   \n    System.import('main.js').catch(function(err){   \n    console.error(err); });   \n    </script>   \n</head>   \n<body>   \n    <h1>My Todo   App</h1>   \n    <my-app>Loading My Todo   App...</my-app>   \n</body>   \n</html>   \n```", "```ts\n[Route(\"api/[controller]\")] \npublic class TodosController : Controller \n{    \n    // GET: api/todos/pending-only \n    [HttpGet] \n    [Route(\"pending-only\")] \n    public IEnumerable<Todo> GetPendingOnly() \n    { \n    } \n} \n```", "```ts\n[Produces(\"application/json\")] \n    [Route(\"api/Todos\")] \n    public class TodosController : Controller \n    { \n        private TodoContext _db; \n        public TodosController(TodoContext context) \n        { \n            _db = context; \n        } \n        // GET: api/todos \n        [HttpGet] \n        public IEnumerable<Todo> Get() \n        { \n            return _db.Todos.ToList(); \n        } \n        // GET: api/todos/pending-only \n        [HttpGet] \n        [Route(\"pending-only\")] \n        public IEnumerable<Todo> GetPendingOnly() \n        { \n            _db.Todos.RemoveRange(_db.Todos.Where(x => \n            x.Completed == true)); \n            _db.SaveChanges(); \n            return _db.Todos.ToList(); \n        } \n        // POST api/todos \n        [HttpPost] \n        public Todo Post([FromBody]Todo value) \n        { \n            _db.Todos.Add(value); \n            _db.SaveChanges(); \n            return value; \n        } \n        // PUT api/todos/id \n        [HttpPut(\"{id}\")] \n        public Todo Put(int id, [FromBody]Todo value) \n        { \n            var todo = _db.Todos.FirstOrDefault(x => x.Id  \n            == id); \n            todo.Title = value.Title; \n            todo.Completed = value.Completed; \n            _db.Entry(todo).State = EntityState.Modified; \n            _db.SaveChanges(); \n            return value; \n        } \n        // DELETE api/todos/id \n        [HttpDelete(\"{id}\")] \n        public void Delete(int id) \n        { \n            var todo = _db.Todos.FirstOrDefault(x => x.Id \n            == id); \n            _db.Entry(todo).State = EntityState.Deleted; \n            _db.SaveChanges(); \n        } \n  } \n```", "```ts\n\"dependencies\": {\n\"@angular/router\": \"~4.0.0\",\n}\n<base> tag with the href attribute that should be added to the head tag in the index file, considering that the app folder is the root of the application:\n```", "```ts\n<base href=\"/\">\n```", "```ts\n      <h1>This is the About   View</h1>   \n```", "```ts\n      <h1>This is the Contact   View</h1>   \n```", "```ts\n    import { Component } from '@angular/core';   \n    @Component({   \n        selector: 'about-me',   \n        templateUrl: './app/about.component.html',   \n    })   \n    export class AboutComponent { }   \n```", "```ts\n    import { Component } from '@angular/core';    \n    @Component({   \n        selector: 'contact-us',   \n        templateUrl: './app/contact.component.html',   \n    })     \n      export class ContactComponent { }\n```", "```ts\n     import { Component, OnInit } from   '@angular/core';   \n     import { Todo } from './todo'   \n     import { TodoService } from './todo.service'     \n     @Component({   \n         selector: 'my-app',   \n         templateUrl: './app/todo.component.html',   \n         providers: [TodoService]   \n     })   \n       export class TodoComponent   implements OnInit {   \n         todos: Array<Todo>;   \n         newTodoText = '';   \n       constructor(private   todoService: TodoService) {   \n          this.todos = new Array();   \n       }   \n           getTodos(): void {   \n           this.todoService   \n           .getTodos()   \n           .then(todos =>   this.todos = todos);   \n       }   \n       ngOnInit(): void {   \n        this.getTodos();   \n       }   \n        removeCompleted() {   \n        this.todoService.removeCompleted();   \n        this.todos =   this.getPending();   \n       }   \n       toggleCompletion(todo: Todo)   {   \n          this.todoService.toggleCompletion(todo);   \n       }   \n       remove(todo: Todo) {   \n          this.todoService.remove(todo);   \n          this.todos.splice(this.todos.indexOf(todo), 1);   \n       }   \n       addTodo() {   \n           if (this.newTodoText.trim().length)   {   \n           this.todoService.add(this.newTodoText).then(res      \n           => {   \n           this.getTodos();   \n           });   \n           this.newTodoText = '';   \n           this.getTodos();   \n           }   \n       }   \n       getPending() {   \n           return this.todos.filter((todo:   Todo) =>   \n     todo.completed === false);   \n       }   \n\n        getCompleted() {   \n        return   this.todos.filter((todo: Todo) =>   \n        todo.completed === true);   \n       }   \n     }   \n```", "```ts\n    <section>   \n       <header>   \n          <h1>todos</h1>   \n        <input placeholder=\"Add   new todo\" autofocus=\"\"   \n        [(ngModel)]=\"newTodoText\">   \n        <button type=\"button\"   \n        (click)=\"addTodo()\">Add</button>   \n     </header>   \n    <section>   \n        <ul>   \n            <li *ngFor=\"let   todo of todos\">   \n            <input type=\"checkbox\"    \n            (click)=\"toggleCompletion(todo)\"  \n            [checked]=\"todo.completed\">   \n            <label>{{todo.title}}</label>   \n            <button   (click)=\"remove(todo)\">X</button>   \n            </li>   \n        </ul>   \n    </section>   \n          <footer *ngIf=\"todos.length   > 0\">   \n          <span><strong>{{getPending().length}}</strong>     \n          {{getPending().length == 1 ? 'item' : 'items'}}   \n          left</span>   \n          <button *ngIf=\"getCompleted().length   > 0\"    \n          (click)=\"removeCompleted()\">Clear     \n          completed</button>   \n          </footer>   \n    </section>\n```", "```ts\n    import { NgModule } from '@angular/core';   \n    import { Routes, RouterModule }   from  \n    '@angular/router';   \n    import { TodoComponent } from './todo.component';   \n    import { AboutComponent } from './about.component';   \n    import { ContactComponent } from   \n    './contact.component';   \n    export const appRoutes: Routes =   [   \n        {   \n            path: '',   \n            redirectTo: 'todo',   \n            pathMatch: 'full',   \n        },       \n        { path: 'todo', component:   TodoComponent, data:    \n          { title: 'Todo' } },   \n        { path: 'about', component:  AboutComponent, data:   \n          { title: 'About' } },   \n        { path: 'contact', component: ContactComponent,   \n           data: { title: 'Contact' } }   \n    ];     \n    export const routedComponents = [   \n        TodoComponent,   \n        AboutComponent,   \n        ContactComponent   \n    ];   \n    @NgModule({   \n        imports:   [RouterModule.forRoot(appRoutes)],   \n        exports: [RouterModule]   \n    })   \n     export class AppRoutingModule { }   \n```", "```ts\n    import { NgModule } from '@angular/core';   \n    import { BrowserModule } from '@angular/platform-  \n    browser';   \n    import { FormsModule } from '@angular/forms';   \n    import { HttpModule } from '@angular/http';   \n    import { AppComponent } from './app.component';   \n    import { TodoComponent } from './todo.component';   \n    import { AboutComponent } from './about.component';   \n    import { ContactComponent } from   \n    './contact.component';   \n    import { AppRoutingModule } from './app.routing';   \n    import { TodoService } from './todo.service'     \n    @NgModule({   \n        imports: [   \n            BrowserModule,   \n            FormsModule,   \n            HttpModule,   \n            AppRoutingModule   \n        ],   \n        declarations: [   \n            AppComponent,    \n            TodoComponent,   \n            AboutComponent,   \n            ContactComponent   \n        ],   \n        providers: [TodoService],   \n        bootstrap: [AppComponent]   \n    })   \n    export class AppModule { }   \n```", "```ts\n    <a routerLinkActive=\"active\"   [routerLink]=\"   \n    ['/todo']\">Todo</a>   \n    <a routerLinkActive=\"active\"   [routerLink]=\"\n    ['/about']\">About</a>   \n    <a routerLinkActive=\"active\"   [routerLink]=\"\n    ['/contact']\">Contact</a>   \n    <router-outlet></router-outlet>   \n```", "```ts\n        public IActionResult   About()   \n        {   \n            return View();   \n        }   \n        public IActionResult   Contact()   \n        {   \n            return View();\n        }      \n        public IActionResult   Todo()   \n        {   \n            return View();   \n        }   \n```", "```ts\n    <h1>This is the About Razor   View</h1>   \n```", "```ts\n    <h1>This is the Contact Razor View</h1>\n```", "```ts\n     TodoComponent:   \n           templateUrl: '/Home/Todo'   \n     AboutComponent:   \n           templateUrl: '/Home/About'   \n     ContactComponent:   \n           templateUrl: '/Home/Contact',   \n```"]