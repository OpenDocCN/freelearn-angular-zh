["```ts\nimport { HttpClientModule } from '@angular/common/http';\n. . . \n@NgModule({ \n  imports: [ \n    BrowserModule,\n    HttpClientModule, \n. . . \n})\n```", "```ts\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { catchError } from 'rxjs/operators';\n```", "```ts\nworkout: WorkoutPlan; \ncollectionsUrl = \"https://api.mongolab.com/api/1/ databases/<dbname>/collections\"; \napiKey = <key> \nparams = '?apiKey=' + this._apiKey; \n```", "```ts\nconstructor(public http: HttpClient) {\n}\n```", "```ts\ngetExercises() {\n    return this.http.get<ExercisePlan>(this.collectionsUrl + '/exercises' + this.params)\n        .pipe(catchError(WorkoutService.handleError));\n}\n```", "```ts\nstatic handleError (error: Response) { \n    console.error(error); \n    return Observable.throw(error || 'Server error');\n}\n```", "```ts\ngetWorkouts() {\n    return this.http.get<WorkoutPlan[]>(this.collectionsUrl + '/workouts' + this.params)\n        .pipe(catchError(WorkoutService.handleError));\n}\n```", "```ts\n  ngOnInit() {\n    this.workoutService.getExercises()\n    .subscribe(\n        exercises => this.exerciseList = exercises,\n        (err: any) => console.error\n    );\n```", "```ts\n    getWorkouts(): Observable<WorkoutPlan[]> {\n        return this.http.get<WorkoutPlan[]>(this.collectionsUrl + '/workouts' + this.params)\n            .pipe(\n                map((workouts: Array<any>) => {\n                  const result: Array<WorkoutPlan> = [];\n                  if (workouts) {\n                      workouts.forEach((workout) => {\n                          result.push(\n                              new WorkoutPlan(\n                                  workout.name,\n                                  workout.title,\n                                  workout.restBetweenExercise,\n                                  workout.exercises,\n                                  workout.description\n                              ));\n                      });\n                  }\n                  return result;\n                }),\n                catchError(this.handleError<WorkoutPlan[]>('getWorkouts', []))\n            );\n    }\n```", "```ts\nimport { forkJoin } from 'rxjs/observable/forkJoin';\n```", "```ts\n    getWorkout(workoutName: string): Observable<WorkoutPlan> {\n      return forkJoin (\n          this.http.get(this.collectionsUrl + '/exercises' + this.params),\n          this.http.get(this.collectionsUrl + '/workouts/' + workoutName + this.params))\n          .pipe(\n               map(\n                  (data: any) => {\n                      const allExercises = data[0];\n                      const workout = new WorkoutPlan(\n                          data[1].name,\n                          data[1].title,\n                          data[1].restBetweenExercise,\n                          data[1].exercises,\n                          data[1].description\n                      );\n                      workout.exercises.forEach(\n                          (exercisePlan: any) => exercisePlan.exercise = allExercises.find(\n                              (x: any) => x.name === exercisePlan.name\n                          )\n                      );\n                      return workout;\n                  }\n              ),\n              catchError(this.handleError<WorkoutPlan>(`getWorkout id=${workoutName}`))\n        );\n      }\n```", "```ts\n    startBuildingNew() {\n      const exerciseArray: ExercisePlan[] = [];\n      this.buildingWorkout = new WorkoutPlan('', '', 30, exerciseArray);\n      this.newWorkout = true;\n      return this.buildingWorkout;\n    }\n```", "```ts\n    startBuildingExisting(name: string) {\n      this.newWorkout = false;\n      return this.workoutService.getWorkout(name);\n    }\n```", "```ts\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { map, catchError } from 'rxjs/operators';\n```", "```ts\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<WorkoutPlan> {\n    const workoutName = route.paramMap.get('id');\n\n    if (!workoutName) {\n        return this.workoutBuilderService.startBuildingNew();\n    } else {\n        return this.workoutBuilderService.startBuildingExisting(workoutName)\n        .pipe(\n          map(workout => {\n            if (workout) {\n              this.workoutBuilderService.buildingWorkout = workout;\n              return workout;\n            } else {\n              this.router.navigate(['/builder/workouts']);\n              return null;\n            }\n          }),\n          catchError(error => {\n            console.log('An error occurred!');\n            this.router.navigate(['/builder/workouts']);\n            return of(null);\n          })\n        );\n    }\n```", "```ts\n  ngOnInit() {\n      this.sub = this.route.data\n          .subscribe(\n            (data: { workout: WorkoutPlan }) => {\n              this.workout = data.workout;\n            }\n          );\n  }\n```", "```ts\n  onSelect(workout: WorkoutPlan) {\n      this.router.navigate( ['./builder/workout', workout.name] );\n  }\n```", "```ts\n    addWorkout(workout: WorkoutPlan) {\n      const workoutExercises: any = [];\n      workout.exercises.forEach(\n          (exercisePlan: any) => {\n              workoutExercises.push({name: exercisePlan.exercise.name, duration: exercisePlan.duration});\n          }\n      );\n\n      const body = {\n          '_id': workout.name,\n          'exercises': workoutExercises,\n          'name': workout.name,\n          'title': workout.title,\n          'description': workout.description,\n          'restBetweenExercise': workout.restBetweenExercise\n      };\n\n      return this.http.post(this.collectionsUrl + '/workouts' + this.params, body)\n        .pipe(\n          catchError(this.handleError<WorkoutPlan>())\n        );\n    }\n```", "```ts\n    updateWorkout(workout: WorkoutPlan) {\n      const workoutExercises: any = [];\n      workout.exercises.forEach(\n          (exercisePlan: any) => {\n              workoutExercises.push({name: exercisePlan.exercise.name, duration: exercisePlan.duration});\n          }\n      );\n\n      const body = {\n          '_id': workout.name,\n          'exercises': workoutExercises,\n          'name': workout.name,\n          'title': workout.title,\n          'description': workout.description,\n          'restBetweenExercise': workout.restBetweenExercise\n      };\n\n      return this.http.put(this.collectionsUrl + '/workouts/' + workout.name + this.params, body)\n        .pipe(\n          catchError(this.handleError<WorkoutPlan>())\n        );\n    }\n```", "```ts\n    deleteWorkout(workoutName: string) {\n        return this.http.delete(this.collectionsUrl + '/workouts/' + workoutName + this.params)\n          .pipe(\n            catchError(this.handleError<WorkoutPlan>())\n          );\n    }\n```", "```ts\n    save() {\n      const workout = this.newWorkout ?\n          this.workoutService.addWorkout(this.buildingWorkout) :\n          this.workoutService.updateWorkout(this.buildingWorkout);\n      this.newWorkout = false;\n      return workout;\n   }\n```", "```ts\n  save(formWorkout: any) {\n    this.submitted = true;\n    if (!formWorkout.valid) { return; }\n    this.workoutBuilderService.save().subscribe(\n      success => this.router.navigate(['/builder/workouts']),\n      err => console.error(err)\n    );\n  }\n```", "```ts\n    getExercises(): Promise<Exercise[]> {\n        return this.http.get<Exercise[]>(this.collectionsUrl + '/exercises' + this.params)\n        .toPromise()\n        .then(res => res)\n        .catch(err => {\n            return Promise.reject(this.handleError('getExercises', []));\n        });\n    }\n```", "```ts\nerrorMessage: any;\n```", "```ts\n  ngOnInit() {\n    this.workoutService.getExercises()\n .then(exerciseList => this.exerciseList = exerciseList,\n error => this.errorMessage = <any>error\n    );\n  }  \n```", "```ts\nimport { Observable } from 'rxjs/Observable';\n```", "```ts\npublic exerciseList:Observable<Exercise[]>;\n```", "```ts\nthis.exerciseList = this.workoutService.getExercises();\n```", "```ts\n<div *ngFor=\"let exercise of exerciseList|async|orderBy:'title'\">\n```", "```ts\n. . . \nimport { HttpClientModule, HttpClientJsonpModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n. . . \n@NgModule({\n. . . \n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n HttpClientJsonpModule\n  ],\n. . . \n}) \n```", "```ts\nimport { Component }from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\n```", "```ts\nconstructor(public http: HttpClient) {}\n```", "```ts\n   symbol: string;\n   quote: Observable<string>;\n   url: string = 'https://api.iextrading.com/1.0/stock/';\n```", "```ts\n   getQuote (){ \n      let searchUrl = `${this.url}${this.symbol}/quote`;\n      this.quote = this.http.jsonp(searchUrl, 'callback')\n          .pipe(\n          map( (res: string) => res)\n        ); \n    }; \n```", "```ts\nhttps://api.iextrading.com/1.0/stock/MSFT/quote?callback=ng_jsonp_callback_0\n```", "```ts\ntypeof ng_jsonp_callback_0 === 'function' && ng_jsonp_callback_0({\"quote\"::{\"symbol\":\"MSFT\"..});\n```", "```ts\nchildren: [ \n  {path: '', pathMatch: 'full', redirectTo: 'workouts'}, \n {path: 'workouts/workout-not-found', component: WorkoutsComponent'}, \n  {path: 'workouts', component: 'WorkoutsComponent'}, \n   *** other child routes *** \n  }, \n]\n```", "```ts\nresolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<WorkoutPlan> {\n    const workoutName = route.paramMap.get('id');\n\n    if (!workoutName) {\n        return this.workoutBuilderService.startBuildingNew();\n    } else {\n        this.isExistingWorkout = true;\n        return this.workoutBuilderService.startBuildingExisting(workoutName)\n        .pipe(\n          map(workout => {\n            if (workout) {\n              this.workoutBuilderService.buildingWorkout = workout;\n              return workout;\n            } else {\n              this.router.navigate(['/builder/workouts/workout-not-found']);\n              return null;\n            }\n          }),\n          catchError(error => {\n            console.log('An error occurred!');\n            this.router.navigate(['/builder/workouts']);\n            return of(null);\n          })\n        );\n    }\n```", "```ts\n  workoutList: Array<WorkoutPlan> = [];\n  public notFound = false;\n```", "```ts\nngOnInit() {\n  if(this.route.snapshot.url[1] && this.route.snapshot.url[1].path === \n  'workout-not-found') this.notFound = true; \n  this.subscription = this.workoutService.getWorkouts() \n  .subscribe( \n    workoutList => this.workoutList = workoutList, \n    (err:any) => console.error(err) \n  ); \n}\n```", "```ts\n<div *ngIf=\"notFound\" class=\"not-found-msgbox\">Could not load the specific workout!</div>\n```"]