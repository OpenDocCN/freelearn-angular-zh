["```ts\n\"@angular/platform-browser-dynamic\": \"2.0.0\", \n**\"@angular/router\": \"3.0.0\",**\n\n```", "```ts\n**npm install**\n\n```", "```ts\nvar ngPackageNames = [ \n... \n **'router',** \n...];\n\n```", "```ts\n <link rel=\"stylesheet\" href=\"static/css/app.css\" /> \n **<base href=\"/\">**\n\n```", "```ts\n connect.server({ \n    ... \n **fallback: 'index.html'** \n  }); \n\n```", "```ts\nimport { ModuleWithProviders } from '@angular/core'; \nimport { Routes, RouterModule } from '@angular/router'; \nimport {WorkoutRunnerComponent} from '../workout-runner/workout-runner.component'; \nimport {StartComponent} from '../start/start.component'; \nimport {FinishComponent} from '../finish/finish.component'; \n\nexport const routes: Routes= [ \n  { path: 'start', component: StartComponent }, \n  { path: 'workout', component: WorkoutRunnerComponent }, \n  { path: 'finish', component: FinishComponent }, \n  { path: '**', redirectTo:'/start'} \n]; \nexport const routing: ModuleWithProviders = RouterModule.forRoot(routes); \n\n```", "```ts\nimport {StartModule} from '../start/start.module'; \nimport {FinishModule} from '../finish/finish.module'; \nimport {routing} from './app.routes'; \n@NgModule({ \n  imports: [..., StartModule, FinishModule, routing], \n\n```", "```ts\n<workout-runner></workout-runner>\n\n```", "```ts\n<router-outlet></router-outlet>\n\n```", "```ts\n<a [routerLink]=\"['/workout']\">\n\n```", "```ts\n<a href=\"/workout\">\n\n```", "```ts\n['routePath', param1, param2, {prop1:val1, prop2:val2} ....] \n\n```", "```ts\n@RouteConfig([ \n **{ path: '/users/:id', component: UserDetail },** \n  { path: '/users', component: UserList}, \n])\n\n```", "```ts\n<a [routerLink]=\"['/users', 2]  // generates /users/2\n\n```", "```ts\n<a [routerLink]=\"['/users', {id:2}]  // generates /users;id=2\n\n```", "```ts\nimport {Router} from '@angular/router'; \nconstructor(private router: Router) {\n\n```", "```ts\nthis.router.navigate( ['/finish'] );\n\n```", "```ts\n{ path: '/users/:id', component: UserDetail },\n\n```", "```ts\nexport class UsersComponent { \n  constructor( private route: ActivatedRoute ... \n\n```", "```ts\nthis.route.params.forEach((params: Params) => { \n     let id = +params['id']; // (+) converts string 'id' to a number \n     var currentUser=this.getUser(id) \n});  \n\n```", "```ts\nclass Tracker() { \n  logger:Logger; \n  constructor() { \n    this.logger = new Logger();    \n  } \n}\n\n```", "```ts\nclass Tracker { \n  logger:Logger; \n  constructor(logger:Logger) { \n    this.logger = logger;    \n  } \n}\n\n```", "```ts\n            var trackerWithDBLog=new Tracker(new DBLogger()); \n            var trackerWithMemoryLog=new Tracker(new MemoryLogger()); \n\n    ```", "```ts\nconstructor(private router: Router) { \n\n```", "```ts\nimports: [..., routing];\n\n```", "```ts\nexport const routing: ModuleWithProviders = RouterModule.forRoot(routes);\n\n```", "```ts\nimport {ExercisePlan} from '../components/workout-runner/model'; \nexport class WorkoutHistoryTracker { \n  private maxHistoryItems: number = 20;   //Tracking last 20 exercises \n  private currentWorkoutLog: WorkoutLogEntry = null; \n  private workoutHistory: Array<WorkoutLogEntry> = []; \n  private  workoutTracked: boolean; \n\n  constructor() { } \n\n  get tracking(): boolean { \n    return this. workoutTracked; \n  } \n}\n\nexport class WorkoutLogEntry { \n  constructor( \n    public startedOn: Date, \n    public completed: boolean = false, \n    public exercisesDone: number = 0, \n    public lastExercise?: string, \n    public endedOn?: Date) { } \n}\n\n```", "```ts\nstartTracking() { \n  this.workoutTracked = true; \n  this.currentWorkoutLog = new WorkoutLogEntry(new Date()); \n  if (this.workoutHistory.length >= this.maxHistoryItems) { \n    this.workoutHistory.shift(); \n  } \n    this.workoutHistory.push(this.currentWorkoutLog); \n} \n\nexerciseComplete(exercise: ExercisePlan) { \n  this.currentWorkoutLog.lastExercise = exercise.exercise.title; \n  ++this.currentWorkoutLog.exercisesDone; \n} \n\nendTracking(completed: boolean) { \n  this.currentWorkoutLog.completed = completed; \n  this.currentWorkoutLog.endedOn = new Date(); \n  this.currentWorkoutLog = null; \n  this.workoutTracked = false; \n};\n\n```", "```ts\ngetHistory(): Array<WorkoutLogEntry> { \n  return this.workoutHistory; \n}\n\n```", "```ts\n@NgModule({...**providers: [WorkoutHistoryTracker],**})\n\n```", "```ts\nproviders: [WorkoutHistoryTracker],\n\n```", "```ts\nproviders:({ provide: WorkoutHistoryTracker, useClass: WorkoutHistoryTracker })\n\n```", "```ts\n{provide: WorkoutHistoryTracker, useValue: new WorkoutHistoryTracker()};\n\n```", "```ts\n{provide: WorkoutHistoryTracker, useValue: new WorkoutHistoryTracker(new LocalStorage())});\n\n```", "```ts\n{provide: AppConfig, {useValue: {name:'Test App', gridSetting: {...} ...}}\n\n```", "```ts\n{provide:WorkoutHistoryTracker, {useValue: new MockWorkoutHistoryTracker()}\n\n```", "```ts\n{provide: AppConfig, useFactory: () => { \n  if(PRODUCTION) { \n    return {name:'My App', gridSetting: {...} ...} \n  } \n  else { \n    return {name:'Test App', gridSetting: {...} ...} \n  }\n}\n\n```", "```ts\n{provide: WorkoutHistoryTracker, useFactory: (environment:Environment) => { \n  if(Environment.isTest) { \n    return new MockWorkoutHistoryTracker(); \n  } \n  else { \n    return new WorkoutHistoryTracker(); \n  }, \n    deps:[Environment]\n}\n\n```", "```ts\nimport {WorkoutHistoryTracker} from  \n'../../services/workout-history-tracker'; \n... \nconstructor(private router: Router,   \n**) {**\n\n```", "```ts\nconstructor(private router: Router, private injector:Injector) {\n  this.tracker=injector.get(WorkoutHistoryTracker);\n```", "```ts\n{ provide: WorkoutHistoryTracker, useClass: WorkoutHistoryTracker }\n\n```", "```ts\nconstructor(tracker: WorkoutHistoryTracker)\n\n```", "```ts\n{provide:\"MyHistoryTracker\", useClass: WorkoutHistoryTracker })\n\n```", "```ts\nconstructor(private tracker: WorkoutHistoryTracker)\n\n```", "```ts\nconstructor(@Inject(\"MyHistoryTracker\")  \n  private tracker: WorkoutHistoryTracker) \n\n```", "```ts\n{ provide: \"AppConfiguration\", useValue: {name:'Test App', gridSetting: {...} ...});\n\n```", "```ts\nconstructor(@Inject(\"AppConfiguration\") config:any)\n\n```", "```ts\nthis.tracker.startTracking();\n\n```", "```ts\nclearInterval(this.exerciseTrackingInterval); \n**if (this.currentExercise !== this.restExercise) {** \n**this.tracker.exerciseComplete(this.workoutPlan**\n**.exercises[this.currentExerciseIndex]);**\n**}**\n\n```", "```ts\n**this.tracker.endTracking(true);** \nthis.router.navigate(['/finish']); \n\n```", "```ts\nngOnDestroy() { \n  this.tracker.endTracking(false); \n} \n\n```", "```ts\n**import {WorkoutHistoryComponent}** \n**from '../workout-history/workout-history.component';** \n... \nexport const routes: Routes = [ \n  ..., \n **{ path: 'history', component: WorkoutHistoryComponent }** \n  { path: '**', redirectTo: '/start' } \n]) \n\n```", "```ts\n<div class=\"navbar navbar-default navbar-fixed-top top-navbar\"> \n<div class=\"container app-container\"> \n**<header></header>** \n</div> \n</div> \n\n```", "```ts\nimport {HeaderComponent} from './header.component'; \n... \ndeclarations: [TrainerAppComponent, HeaderComponent], \n\n```", "```ts\nngOnInit() { \n  this.history = this.tracker.getHistory(); \n}\n\n```", "```ts\ngoBack() { \n  this.location.back(); \n}\n\n```", "```ts\n*ngFor=\"let item of items| orderBy:fieldName\"\n\n```", "```ts\n*ngFor=\"let item of items| orderBy:-fieldName\"\n\n```", "```ts\n@Pipe({ name: 'orderBy' }) \nexport class OrderByPipe {\n  transform(value: Array<any>, field:string): any { \n   ... \n  } \n}\n\n```", "```ts\n<tr *ngFor=\"let historyItem of history|orderBy:'-startedOn'; let i = index\"> \n\n```", "```ts\n<label><input type=\"radio\" name=\"searchFilter\" value=\"\"  \n(change)=\"completed = null\" checked=\"\">All </label> \n<label><input type=\"radio\" name=\"searchFilter\" value=\"true\"  \n(change)=\"completed = $event.target.value=='true'\"> \nCompleted </label> \n<label><input type=\"radio\" name=\"searchFilter\" value=\"false\"  \n(change)=\"completed = $event.target.value=='true'\"> \nIncomplete </label> \n\n```", "```ts\n<tr *ngFor=\"let historyItem of history \n**|search:'completed':completed** \n|orderBy:'-startedOn';  \nlet i = index\">\n\n```", "```ts\nif (searchTerm == null) return [...value];\n\n```", "```ts\nif (searchTerm == null) return [value];\n\n```", "```ts\n<button (click)=\"addLog()\">Add Log</button>\n\n```", "```ts\naddLog() { \n  this.history.push(Object.assign({}, \n  this.history[this.history.length-1])); \n}\n\n```", "```ts\nthis.history = [...this.history,  \nObject.assign({}, this.history[0])];\n\n```", "```ts\n@Pipe({ \n  name: 'search', \n **pure:false** \n}) \n\n```", "```ts\nif (searchTerm == null) return value;\n\n```", "```ts\nif (searchTerm == null) return [...value];\n\n```", "```ts\n@Component({ \n  selector: 'workout-runner', \n  providers: [WorkoutRunnerComponent] \n})\n\n```", "```ts\nconsole.log(\"WorkoutHistoryTracker instance created.\")\n\n```", "```ts\nproviders: [WorkoutHistoryTracker]\n\n```", "```ts\n@Component({ \n  selector: 'trainer-app', \n **providers:[WorkoutHistoryTracker]** \n} \nexport class TrainerAppComponent { \n\n```", "```ts\nexport class LocalStorage { \n  getItem<T>(key: string): T { \n    if (localStorage[key]) { \n      return <T>JSON.parse(localStorage[key]); \n    } \n    return null; \n  }\n  setItem(key: string, item: any) { \n    localStorage[key] = JSON.stringify(item); \n  }\n}\n\n```", "```ts\nimport {LocalStorage} from './local-storage'; \n... \nconstructor(private storage: LocalStorage) {\n\n```", "```ts\nCannot resolve all parameters for WorkoutHistoryTracker(?). Make sure they all have valid type or annotations. \n\n```", "```ts\nimport {Injectable} from '@angular/core';\n\n```", "```ts\nconstructor(private storage: LocalStorage) { \n  this.workoutHistory = (storage.getItem<Array<WorkoutLogEntry>>(this.storageKey) || [])\n  .map((item: WorkoutLogEntry) => { \n    item.startedOn = new Date(item.startedOn.toString()); \n    item.endedOn = item.endedOn == null ? null  \n    : new Date(item.endedOn.toString()); \n    return item; \n  }); \n} \n\n```", "```ts\nprivate storageKey: string = \"workouts\";\n\n```", "```ts\nthis.storage.setItem(this.storageKey, this.workoutHistory);\n\n```", "```ts\nimport {Router, Event } from '@angular/router'; \n... \nexport class HeaderComponent { \n  showHistoryLink: boolean = true; \n  private subscription: any; \n  constructor(private router: Router) { \n    this.router.events.subscribe((data: Event) => { \n      this.showHistoryLink=!this.router.url.startsWith('/workout'); \n    }); \n  } \n\n```", "```ts\n<li *ngIf=\"showHistoryLink\"><a [routerLink]=\"['History']\" ...>...</a></li>\n\n```", "```ts\n<div *ngFor=\"let video of videos\" class=\"row video-image\"> \n  <div class=\"col-sm-12\"> \n    <div id=\"play-video-overlay\"> \n      <span class=\"glyphicon glyphicon-play-circle video absolute-center\">\n      </span> \n    </div> \n    <img height=\"220\" [src]=\"'//i.ytimg.com/vi/'+video+'/hqdefault.jpg'\" /> \n  </div> \n</div> \n\n```", "```ts\n**npm i angular2-modal@2.0.0-beta.13 --save**\n\n```", "```ts\n        import {Component, **ViewContainerRef} from '@angular/core';** \n        ... \n        import { Overlay } from 'angular2-modal'; \n        ... \n        export class TrainerAppComponent { \n **constructor(overlay: Overlay,** \n**viewContainer: ViewContainerRef) {** \n**overlay.defaultViewContainer = viewContainer;** \n          } \n        }\n\n```", "```ts\n        import { ModalModule } from 'angular2-modal'; \n        import { BootstrapModalModule }  \n          from 'angular2-modal/plugins/bootstrap'; \n        ... \n        imports: [..., ModalModule.forRoot(), BootstrapModalModule] \n\n```", "```ts\n**import {VideoDialogComponent} from './video-player/video-dialog.component';** ...\ndeclarations: [..., VideoDialogComponent], \n   **entryComponents:[VideoDialogComponent]** \n\n```", "```ts\n    <div *ngFor=\"let video of videos\" (click)=\"playVideo(video)\" \n    class=\"row video-image\"> \n\n```", "```ts\n **import {Modal} from 'angular2-modal';** \n **import { overlayConfigFactory } from 'angular2-modal'** \n **import {VideoDialogComponent, VideoDialogContext}\n    from './video-dialog.component';** \n    ... \n    export class VideoPlayerComponent { \n      @Input() videos: Array<string>;   \n **constructor(private modal: Modal) { }**\n **playVideo(videoId: string) {** \n**this.modal.open(VideoDialogComponent,** \n **overlayConfigFactory(new VideoDialogContext(videoId)));** \n**};** \n    }\n\n```", "```ts\n    import {Directive, ElementRef} from '@angular/core'; \n\n    @Directive({ \n      selector: 'audio', \n      exportAs: 'MyAudio' \n    }) \n    export class MyAudioDirective { \n      private audioPlayer: HTMLAudioElement; \n      constructor(element: ElementRef) { \n        this.audioPlayer = element.nativeElement; \n      } \n    } \n\n```", "```ts\n    stop() { \n      this.audioPlayer.pause(); \n    }\n\n    start() { \n      this.audioPlayer.play();\n    }\n    get currentTime(): number { \n      return this.audioPlayer.currentTime; \n    }\n\n    get duration(): number { \n      return this.audioPlayer.duration; \n    }\n\n    get playbackComplete() { \n      return this.duration == this.currentTime; \n    }\n\n```", "```ts\n    <audio #ticks=\"MyAudio\" loop src=\"/static/audio/tick10s.mp3\"></audio> \n    <audio #nextUp=\"MyAudio\" src=\"/static/audio/nextup.mp3\"></audio> \n    <audio #nextUpExercise=\"MyAudio\" [src]= \"'/static/audio/'\n    + nextupSound\">\n    </audio> \n    <audio #halfway=\"MyAudio\" src=\"/static/audio/15seconds.wav\"></audio> \n    <audio #aboutToComplete=\"MyAudio\" src=\"/static/audio/321.wav\"></audio> \n\n```", "```ts\n#ticks=\"MyAudio\"\n\n```", "```ts\n    import {Component, ViewChild} from '@angular/core'; \n    import {MyAudioDirective} from './my-audio.directive' \n    import {WorkoutPlan, ExercisePlan, ExerciseProgressEvent, \n    ExerciseChangedEvent} from '../model'; \n\n    @Component({ \n      selector: 'workout-audio', \n      templateUrl: '/src/components/workout-runner/workout-audio/\n      workout-audio.html' \n    }) \n    export class WorkoutAudioComponent { \n      @ViewChild('ticks') private ticks: MyAudioDirective; \n      @ViewChild('nextUp') private nextUp: MyAudioDirective; \n      @ViewChild('nextUpExercise')private nextUpExercise: MyAudioDirective; \n      @ViewChild('halfway') private halfway: MyAudioDirective; \n      @ViewChild('aboutToComplete') private aboutToComplete: \n      MyAudioDirective; \n      private nextupSound: string; \n    } \n\n```", "```ts\n    stop() { \n      this.ticks.stop(); \n      this.nextUp.stop(); \n      this.halfway.stop(); \n      this.aboutToComplete.stop(); \n      this.nextUpExercise.stop(); \n    }\n\n    resume() { \n      this.ticks.start(); \n      if (this.nextUp.currentTime > 0 && !this.nextUp.playbackComplete)\n        this.nextUp.start(); \n      else if (this.nextUpExercise.currentTime > 0 &&  \n        !this.nextUpExercise.playbackComplete)  \n        this.nextUpExercise.start(); \n      else if (this.halfway.currentTime > 0 &&  \n        !this.halfway.playbackComplete) this.halfway.start(); \n      else if (this.aboutToComplete.currentTime > 0 &&  \n        !this.aboutToComplete.playbackComplete)  \n        this.aboutToComplete.start(); \n    } \n\n    onExerciseProgress(progress: ExerciseProgressEvent) { \n      if (progress.runningFor == Math.floor(progress.exercise.duration / 2)\n      && progress.exercise.exercise.name != \"rest\") {\n        this.halfway.start(); \n      } \n      else if (progress.timeRemaining == 3) { \n        this.aboutToComplete.start(); \n      } \n    } \n\n    onExerciseChanged(state: ExerciseChangedEvent) { \n      if (state.current.exercise.name == \"rest\") { \n        this.nextupSound = state.next.exercise.nameSound; \n        setTimeout(() => this.nextUp.start(), 2000); \n        setTimeout(() => this.nextUpExercise.start(), 3000); \n      } \n    } \n\n```", "```ts\n    export class ExerciseProgressEvent { \n      constructor( \n      public exercise: ExercisePlan, \n      public runningFor: number, \n      public timeRemaining: number, \n      public workoutTimeRemaining: number) { } \n    } \n\n    export class ExerciseChangedEvent { \n      constructor( \n      public current: ExercisePlan, \n      public next: ExercisePlan) { } \n    } \n\n```", "```ts\n    <input #emailId type=\"email\">Email to {{emailId.value}} \n    <button (click)= \"MailUser(emaild.value)\">Send</button> \n\n```", "```ts\n    <trainer-app> \n     <workout-runner #runner></workout-runner> \n     <button (click)= \"runner.start()\">Start Workout</button> \n    </trainer-app> \n\n```", "```ts\n    <audio #ticks=\"MyAudio\" loop src=\"/static/audio/tick10s.mp3\"></audio> \n    <input #emailId type=\"email\">Email to {{emailId.value}}\n    <workout-runner #runner></workout-runner> \n\n```", "```ts\n    <audio #ticks=\"MyAudio\" loop src=\"/static/audio/tick10s.mp3\"></audio> \n\n```", "```ts\n    @ViewChild(MyAudioDirective) private ticks: MyAudioDirective; \n\n```", "```ts\n    @ViewChildren(MyAudioDirective) allAudios: QueryList<MyAudioDirective>; \n\n```", "```ts\n    <audio *ngFor=\"let clip of clips\" src=\"/static/audio/ \"\n     +{{clip}}></audio> \n\n```", "```ts\n    @ViewChild(WorkoutAudioComponent) workoutAudioPlayer: \n    WorkoutAudioComponent; \n\n```", "```ts\n    pause() { \n      clearInterval(this.exerciseTrackingInterval); \n      this.workoutPaused = true; \n **this.workoutAudioPlay.stop();** \n    }\n\n```", "```ts\n    this.startExercise(next); \n    **this.workoutAudioPlayer.onExerciseChanged(\n    new ExerciseChangedEvent(next, this.getNextExercise()));**\n\n```", "```ts\n    workoutPaused: boolean; \n    **@Output() exercisePaused: EventEmitter<number>** **=     new EventEmitter<number>();**\n **@Output() exerciseResumed: EventEmitter<number>** **=     new EventEmitter<number>();** \n**@Output() exerciseProgress:EventEmitter<ExerciseProgressEvent>** **=     new EventEmitter<ExerciseProgressEvent>();** \n**@Output() exerciseChanged: EventEmitter<ExerciseChangedEvent>** **=     new EventEmitter<ExerciseChangedEvent>();** \n**@Output() workoutStarted: EventEmitter<WorkoutPlan>** \n**=     new EventEmitter<WorkoutPlan>();** \n**@Output() workoutComplete: EventEmitter<WorkoutPlan>** \n**=     new EventEmitter<WorkoutPlan>();**\n\n```", "```ts\n    @Output() exercisePaused: EventEmitter<number> = \n    new EventEmitter<number>(); \n\n```", "```ts\n    <workout-runner (exercisePaused)=\"onExercisePaused($event)\">\n    </workout-runner> \n\n```", "```ts\n    <div id=\"pause-overlay\" (click)=\"pauseResumeToggle()\" \n    (window:keyup)=\"onKeyPressed($event)\"> \n\n```", "```ts\n    this.workoutStarted.emit(this.workoutPlan);\n\n```", "```ts\n    this.exercisePaused.emit(this.currentExerciseIndex); \n\n```", "```ts\n    this.exerciseResumed.emit(this.currentExerciseIndex); \n\n```", "```ts\n    this.startExercise(next); \n    **this.exerciseChanged.emit(new ExerciseChangedEvent(\n                              next, this.getNextExercise()));**\n\n```", "```ts\n    this.tracker.endTracking(true); \n    **this.workoutComplete.emit(this.workoutPlan);** \n    this.router.navigate(['finish']); \n\n```", "```ts\n    --this.workoutTimeRemaining; \n     **this.exerciseProgress.emit(new ExerciseProgressEvent(** \n **this.currentExercise,**\n **this.exerciseRunningDuration,**\n **this.currentExercise.duration -**\n**this.exerciseRunningDuration,**\n **this.workoutTimeRemaining**\n**));**\n\n```", "```ts\n            <workout-audio [stopped]=\"workoutPaused\"></workout-audio> \n\n    ```", "```ts\n    <workout-audio></workout-audio> \n\n```", "```ts\n    private subscriptions: Array<any>; \n\n    constructor( @Inject(forwardRef(() => WorkoutRunnerComponent)) \n    private runner: WorkoutRunnerComponent) { \n      this.subscriptions = [ \n      this.runner.exercisePaused.subscribe((exercise: ExercisePlan) => \n      this.stop()), \n      this.runner.workoutComplete.subscribe((exercise: ExercisePlan) => \n      this.stop()), \n      this.runner.exerciseResumed.subscribe((exercise: ExercisePlan) => \n      this.resume()), \n      this.runner.exerciseProgress.subscribe((\n      progress: ExerciseProgressEvent) => \n      this.onExerciseProgress(progress)), \n      this.runner.exerciseChanged.subscribe((\n      state: ExerciseChangedEvent) =>  \n      this.onExerciseChanged(state))] \n    } \n\n```", "```ts\n    import {Component, ViewChild, Inject, forwardRef} from '@angular/core'; \n    import {WorkoutRunnerComponent} from '../workout-runner.component' \n\n```", "```ts\n    subscribe(generatorOrNext?: any, error?: any, complete?: any) : any \n\n```", "```ts\n    @ViewChild('ticks') private ticks: MyAudioDirective; \n\n```", "```ts\n    import {..., AfterViewInit} from '@angular/core'; \n    ... \n      export class WorkoutAudioComponent implements AfterViewInit { \n        ngAfterViewInit() { \n          this.ticks.start(); \n        }\n\n```", "```ts\n    ngOnDestroy() { \n      this.subscriptions.forEach((s) => s.unsubscribe()); \n    }\n\n```", "```ts\n    <workout-runner></workout-runner> \n    <workout-audio></workout-audio> \n\n```", "```ts\n    <workout-runner (exercisePaused)=\"wa.stop()\" \n    (exerciseResumed)=\"wa.resume()\" (exerciseProgress)=\n    \"wa.onExerciseProgress($event)\" (exerciseChanged)=\n    \"wa.onExerciseChanged($event)\" (workoutComplete)=\"wa.stop()\" \n    (workoutStarted)=\"wa.resume()\"> \n    </workout-runner> \n    <workout-audio #wa></workout-audio> \n\n```", "```ts\n    <workout-runner></workout-runner> \n\n```", "```ts\n    import {Component, Input} from '@angular/core'; \n    @Component({ \n      selector: 'workout-container',\n      templateUrl: '/src/components/workout-runner/workout-container.html' \n    }) \n    export class WorkoutContainerComponent { } \n\n```", "```ts\n    import {WorkoutContainerComponent} from '../workout-runner/\n            workout-container/workout-container.component'; \n    ..\n    **{ path: '/workout', component: WorkoutContainerComponent },**\n\n```"]