["```ts\nimport {provide, Directive, Input} from '@angular/core'; \nimport { NG_ASYNC_VALIDATORS, Validators, Validator, FormControl }  \nfrom '@angular/forms'; \n\n@Directive({ \nselector: `[a2beRemoteValidator][ngModel]`,   \n   providers:[{ provide: NG_ASYNC_VALIDATORS, \n useExisting: RemoteValidatorDirective,  \n multi: true }] \n  ] \n}) \n\nexport class RemoteValidatorDirective implements Validator { \n  @Input(\"a2beRemoteValidator\") validationKey: string; \n  @Input(\"validateFunction\")  \nexecute: (value: string) => Promise<boolean>;  \n\n  validate(control: FormControl): { [key: string]: any } { \n    let value: string = control.value; \n    return this.execute(value).then((result: boolean) => { \n      if (result) { return null; } \n      else { \n        let error: any = {}; \n        error[this.validationKey] = true; \n        return error; \n      }}); \n  } \n} \n\n```", "```ts\n    providers:[{ provide: NG_ASYNC_VALIDATORS, \n useExisting: RemoteValidatorDirective,  \n multi: true }] \n\n```", "```ts\n<input type=\"text\" name=\"workoutName\" ... \n **a2beRemoteValidator=\"workoutname\"** \n **[validateFunction]=\"validateWorkoutName\">**\n\n```", "```ts\nimport { RemoteValidatorDirective } from \"./shared/remote-validator.directive\"; \n... \ndeclarations: [WorkoutBuilderComponent,...  \nRemoteValidatorDirective], \n\n```", "```ts\n<label *ngIf=\"name.control.hasError('workoutname')\" class=\"alert alert-danger\">A workout with this name already exists.</label> \n\n```", "```ts\nvalidateWorkoutName = (name: string): Promise<boolean> => { \nif (this.workoutName === name) return Promise.resolve(true); \nreturn this.workoutService.getWorkout(name) \n          .toPromise() \n          .then((workout: WorkoutPlan) => { \n             return !workout; \n           }, error => { \n                return true; \n           }); \n}  \n\n```", "```ts\nimport { WorkoutService }  from \"../../../services/workout-service\"; \n... \nconstructor(... private workoutService: WorkoutService) { \n\n```", "```ts\nprivate workoutName: string; \n\n```", "```ts\nthis.workoutName = params['id']; \n\n```", "```ts\n    return this.execute(value).then((result: boolean) => { ... }); \n\n```", "```ts\nfunction WorkoutComponent(...) { \n **var _this = this;** \n  ... \n  this.validateWorkoutName = function (name) { \n **if (_this.workoutName === name)** \n      return Promise.resolve(true); \n\n```", "```ts\n<input type=\"text\" name=\"workoutName\" #name=\"ngModel\"  class=\"form-control\" id=\"workout-name\" ... [(ngModel)]=\"workout.name\" required> \n... \n<label *ngIf=\"name.control.hasError('required') && (name.touched || submitted)\" class=\"alert alert-danger\">Name is required</label>  \n\n```", "```ts\nimport {Directive} from '@angular/core'; \nimport {NgModel} from '@angular/form; \n\n@Directive({ \n  selector: '[a2beBusyIndicator]', \n}) \nexport class BusyIndicatorDirective { \n  constructor(private model: NgModel) { } \n} \n\n```", "```ts\n**<input... name=\"workoutName\" #name=\"ngModel\" [(ngModel)]=\"workout.name\" ...>**\n\n```", "```ts\n<input type=\"text\" name=\"workoutName\" ... a2beBusyIndicator> \n\n```", "```ts\n<div a2beBusyIndicator></div> \n<input type=\"text\" a2beBusyIndicator> \n\n```", "```ts\n<input type=\"text\" name=\"workoutName1\" a2beBusyIndicator> \n\n```", "```ts\n**EXCEPTION: No provider for NgModel! (BusyIndicatorDirective -> NgModel)**\n\n```", "```ts\n  constructor(@Optional() private model: NgModel) { } \n\n```", "```ts\nselector: `[a2beBusyIndicator][ngModel]` \n\n```", "```ts\nprivate subscriptions: Array<any> = []; \nngAfterViewInit() { \nthis.subscriptions.push( \nthis.model \n          .control.statusChanges \n          .subscribe((status: any) => { \n              if (this.model.control.pending) { \n                this.renderer.setElementStyle( \n                  this.element.nativeElement,  \n\"border-width\", \"3px\"); \n                this.renderer.setElementStyle( \n                  this.element.nativeElement,  \n\"border-color\", \"gray\"); \n              } \n              else { \n                this.renderer.setElementStyle( \n                  this.element.nativeElement,  \n\"border-width\", null); \nthis.renderer.setElementStyle( \n                     this.element.nativeElement,  \n\"border-color\", null); \n              } \n        })); \n    }  \n\n```", "```ts\nconstructor(private model: NgControl,  \n **private element: ElementRef,** \n **private renderer: Renderer) { }**\n\n```", "```ts\nngOnDestroy() { \n    this.subscriptions.forEach((s) => s.unsubscribe()); \n} \n\n```", "```ts\nthis.element.nativeElement.style.borderWidth=\"3px\"; \n\n```", "```ts\nthis.renderer.setElementStyle( \n             this.element.nativeElement, \"border-width\", \"3px\"); \n\n```", "```ts\n@HostBinding(\"readOnly\") get busy() {return this.isbusy}; \n\n```", "```ts\n@HostBinding(\"attr.disabled\") get canEdit(): string  \n  { return !this.isAdmin ? \"disabled\" : null }; \n\n```", "```ts\n@HostBinding('class.valid')  \n   get valid { return this.control.valid; } \n\n```", "```ts\n@HostBinding(\"style.borderWidth\")  \n   get focus(): string { return this.focus?\"3px\": \"1px\"}; \n\n```", "```ts\n@Directive({ selector: 'button, div, span, input' }) \nclass ClickTracker { \n  @HostListener('click', ['$event.target']) \n  onClick(element: any) { \n    console.log(\"button\", element, \"was clicked\"); \n  } \n} \n\n```", "```ts\n@Directive({ selector: 'workout-runner' }) \nclass WorkoutTracker { \n  @HostListener('workoutStarted', ['$event']) \n  onWorkoutStarted(workout: any) { \n    console.log(\"Workout has started!\"); \n  } \n} \n\n```", "```ts\nimport {Directive, HostBinding} from '@angular/core'; \nimport {NgModel} from '@angular/forms'; \n\n@Directive({ selector: `[a2beBusyIndicator][ngModel]`}) \nexport class BusyIndicatorDirective { \n  private get validating(): boolean {  \n   return this.model.control != null &&  \n            this.model.control.pending; }; \n\n  @HostBinding(\"style.borderWidth\") get controlBorderWidth():  \n      string { return this.validating ? \"3px\" : null; }; \n  @HostBinding(\"style.borderColor\") get controlBorderColor(): \n      string { return this.validating ? \"gray\" : null }; \n\n  constructor(private model: NgModel) { } \n} \n\n```", "```ts\n<input type=\"text\" name=\"workoutName\" ... \n**[style.borderColor]=\"name.control.pending ? 'gray' : null\"**\n**[style.borderWidth]=\"name.control.pending ? '3px' : null\">**\n\n```", "```ts\nconstructor(private model: NgModel ...) { } \n\n```", "```ts\n<div relation=\"grand-parent\" acquaintance=\"jack\"> \n    <div relation=\"parent\"> \n **<div relation=\"me\" consumer>** \n        <div relation=\"child-1\"> \n          <div relation=\"grandchild-1\"></div> \n        </div> \n        <div relation=\"child-2\"></div> \n      </div> \n    </div> \n</div> \n\n```", "```ts\nvariable:DirectiveType \n\n```", "```ts\nconstructor(private me:Relation ... \n\n```", "```ts\nconstructor(..., @Host() private myAcquaintance:Acquaintance  \n\n```", "```ts\n@SkipSelf() private myParent:Relation \n\n```", "```ts\n@ContentChildren(Relation) private children:QueryList<Relation>; \n\n```", "```ts\n**@ContentChildren(Relation, {descendants: true}) private \n    allDescendents:QueryList<Relation>;** \n\n```", "```ts\nimport {Component, Input } from '@angular/core'; \n\n@Component({ \n  selector: 'ajax-button', \n  template: `<button [attr.disabled]=\"busy\"  \n                  class=\"btn btn-primary\"> \n                <span [hidden]=\"!busy\"> \n                <span class=\"glyphicon  \n                     glyphicon-refresh spin\"></span> \n                </span>  \n                <span>Save</span> \n            </button>` \n}) \nexport class AjaxButtonComponent { \n  busy: boolean = null; \n  @Input() execute: any; \n  @Input() parameter: any; \n} \n\n```", "```ts\n@HostListener('click', ['$event']) \nonClick(event: any) { \n    let result: any = this.execute(this.parameter); \n    if (result instanceof Promise) { \n      this.busy = true; \n      result.then( \n        () => { this.busy = null;},  \n  (error:any) => { this.busy = null; }); \n    } \n} \n\n```", "```ts\n    let result: any = this.execute(this.parameter); \n\n```", "```ts\n<ajax-button [execute]=\"save\" [parameter]=\"f\"></ajax-button> \n\n```", "```ts\nsave = (formWorkout: any): Promise<any> => { \n         this.submitted = true; \n         if (!formWorkout.valid) return; \n         let savePromise =  \n         this.workoutBuilderService.save().toPromise(); \n         savePromise.then( \n            (data) => this.router.navigate(['/builder/workouts']), \n            (err) => console.error(err) \n         ); \n            return savePromise; \n} \n\n```", "```ts\n<ajax-button [execute]=\"save\" [parameter]=\"f\"></ajax-button> \n\n```", "```ts\n<ajax-button [execute]=\"save\" [parameter]=\"f\">Save Me!</ajax-button> \n\n```", "```ts\n`<button [attr.disabled]=\"busy\" class=\"btn btn-primary\"> \n<span [hidden]=\"!busy\"> \n<ng-content select=\"[data-animator]\"></ng-content> \n   </span> \n   <ng-content select=\"[data-content]\"></ng-content> \n </button>` \n\n```", "```ts\n<ajax-button [execute]=\"save\" [parameter]=\"f\"> \n **<span class=\"glyphicon glyphicon-refresh spin\" data-animator>\n   </span>****<span data-content>Save</span>** \n</ajax-button> \n\n```", "```ts\n<audio #ticks=\"MyAudio\" loop  \n  src=\"/static/audio/tick10s.mp3\"></audio> \n<audio #nextUp=\"MyAudio\"  \n  src=\"/static/audio/nextup.mp3\"></audio> \n<audio #nextUpExercise=\"MyAudio\"  \n  [src]=\"'/static/audio/' + _nextupSound\"></audio> \n// Some other audio elements \n\n```", "```ts\n@ViewChild('ticks') private _ticks: MyAudioDirective; \n@ViewChild('nextUp') private _nextUp: MyAudioDirective; \n@ViewChild('nextUpExercise') private _nextUpExercise: MyAudioDirective; \n\n```", "```ts\n@Component({ \n  selector: 'my-audio', \n  template: '<audio ...></audio>', \n}) \nexport class MyAudioComponent { \n  ... \n} \n\n```", "```ts\n<my-audio #ticks loop  \n  src=\"/static/audio/tick10s.mp3\"></my-audio> \n\n```", "```ts\n@ViewChildren(directiveType) children: QueryList<directiveType>; \n\n```", "```ts\n@ViewChildren(MyAudioDirectives) private all: QueryList<MyAudioDirectives>; \n\n```", "```ts\n @ViewChildren('ticks, nextUp, nextUpExercise, halfway, aboutToComplete') private all: QueryList<MyAudioDirective>; \n\n```", "```ts\n@ViewChildren(MyAudioDirective) private all: QueryList<MyAudioDirective>; \n\n```", "```ts\n<div *ngFor=\"let audioData of allAudios\"> \n  <audio [src]=\" audioData.url\"></audio> \n</div> \n\n```", "```ts\n@ContentChild('spinner') spinner:ElementRef; \n@ContentChild('text') text:ElementRef; \n\n```", "```ts\n<span class=\"glyphicon glyphicon-refresh spin\"  \n**data-animator #spinner></span>**\n**<span data-content #text>Save</span>**\n\n```", "```ts\n<ajax-button> \n<busy-spinner></busy-spinner> \n... \n</ajax-button> \n\n```", "```ts\n@ContentChild(BusySpinner) spinner: BusySpinner; \n\n```", "```ts\nproviders:[WorkoutHistoryTracker, LocalStorage] \n\n```", "```ts\nproviders: [ExerciseBuilderService, ...  \n **WorkoutBuilderService]);**\n\n```", "```ts\n@Component({ \n    template: `...` \n **providers:[ WorkoutBuilderService ]** \n}) \nexport class WorkoutBuilderComponent { \n\n```", "```ts\n@Directive({ \n  selector: '[myDirective]', \n}) \nexport class MyDirective { \n  constructor(service:MyService) { } \n  ... \n} \n\n```", "```ts\n@Component({ \n  selector: 'ajax-button', \n  template:` <button [attr.disabled]=\"busy\" ... \n **myDirective>** \n                ... \n             <button>` \n **providers:[MyService],** \n... \n\n```", "```ts\n<span class=\"glyphicon glyphicon-refresh spin\"  \n  data-animator #spinner myDirective></span> \n\n```", "```ts\n**viewProviders:[MyService]**\n\n```", "```ts\n@Directive({selector: '[ngIf]', inputs: ['ngIf']}) \nexport class NgIf { \n  private _prevCondition: boolean = null; \n\n  constructor(private _viewContainer: ViewContainerRef,  \n              private _templateRef: TemplateRef) {} \n\n  set ngIf(newCondition /* boolean */) { \n    if (newCondition && (isBlank(this._prevCondition)  \n                     || !this._prevCondition)) { \n      this._prevCondition = true; \n      this._viewContainer \n          .createEmbeddedView(this._templateRef); \n    }  \n    else if (!newCondition && (isBlank(this._prevCondition)  \n                               || this._prevCondition)) { \n      this._prevCondition = false; \n      this._viewContainer.clear(); \n    } \n  } \n} \n\n```", "```ts\n<h3 *ngIf=\"currentExercise.exercise.name=='rest'\"> \n  ... \n</h3> \n\n```", "```ts\n<template [ngIf]=\"currentExercise.exercise.name=='rest'\"> \n  <h3> ... </h3> \n</template> \n\n```", "```ts\n<button *forRoles=\"admin\">Admin Save</button> \n\n```", "```ts\nif(this.loggedInUser.roles.indexOf(this.forRole) >=0){ \n      this.viewContainer.createEmbeddedView(this.templateRef); \n} \nelse { \n      this.viewContainer.clear(); \n}  \n\n```", "```ts\n<button *ngIf=\"loggedInUser.roles.indexOf('admin')>=0\">Admin Save</button> \n\n```", "```ts\nngOnInit() {       \n this.viewContainer.createEmbeddedView(this._templateRef);        \n this.viewContainer.createEmbeddedView(this._templateRef); \n}  \n\n```", "```ts\n<audio src=\"/static/audio/nextup.mp3\" controls></audio> \n\n```", "```ts\n@Component({ \n  ... \n  styles:[` \n    button { \n      background: green; \n    }`] \n}) \n\n```"]