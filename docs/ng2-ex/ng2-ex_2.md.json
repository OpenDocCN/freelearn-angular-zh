["```ts\n    **git checkout base**\n\n    ```", "```ts\n    **npm i -g gulp typings**\n    **npm install**\n\n    ```", "```ts\n    **gulp play**\n\n    ```", "```ts\n**npm install -g typescript**\n\n```", "```ts\nexport class Exercise { \n  constructor( \n    public name: string, \n    public title: string, \n    public description: string, \n    public image: string, \n    public nameSound?: string, \n    public procedure?: string, \n    public videos?: Array<string>) { } \n} \n\n```", "```ts\nexport class WorkoutPlan { \n  constructor( \n    public name: string, \n    public title: string, \n    public restBetweenExercise: number, \n **public exercises: ExercisePlan[],** \n    public description?: string) { } \n\n  totalWorkoutDuration(): number { ... } \n} \n\n```", "```ts\nexport class ExercisePlan { \n  constructor( \n    public exercise: Exercise, \n    public duration: number) { } \n} \n\n```", "```ts\nplatformBrowserDynamic().bootstrapModule(AppModule); \n\n```", "```ts\nSystem.import('app').catch(console.log.bind(console)); \n\n```", "```ts\n<script src=\"systemjs.config.js\"></script> \n\n```", "```ts\nvar map = { \n **'app': 'dist',** \n    ... \n } \n\n```", "```ts\nvar packages = { \n **'app': { main: 'bootstrap.js',  defaultExtension: 'js' },** \n    ... \n}; \n\n```", "```ts\nreturn tsResult.js \n    .pipe(sourcemaps.write()) \n **.pipe(gulp.dest('dist'))**\n\n```", "```ts\nnoImplicitAny: true, \n**module: 'system',** \ntarget: 'ES5', \n\n```", "```ts\nimport {WorkoutPlan, ExercisePlan, Exercise, ExerciseProgressEvent, ExerciseChangedEvent} from '../../services/model';\nexport class WorkoutRunnerComponent { } \n\n```", "```ts\nworkoutPlan: WorkoutPlan; \nrestExercise: ExercisePlan; \nconstructor() { \n   this.workoutPlan = this.buildWorkout(); \n   this.restExercise = new ExercisePlan( \n     new Exercise(\"rest\", \"Relax!\", \"Relax a bit\", \"rest.png\"),  \n     this.workoutPlan.restBetweenExercise);   \n} \n\n```", "```ts\nbuildWorkout(): WorkoutPlan { \nlet workout = new WorkoutPlan(\"7MinWorkout\",  \n\"7 Minute Workout\", 10, []); \n   workout.exercises.push( \n      new ExercisePlan( \n        new Exercise( \n          \"jumpingJacks\", \n          \"Jumping Jacks\", \n          \"A jumping jack or star jump, also called side-straddle hop\n           is a physical jumping exercise.\", \n          \"JumpingJacks.png\", \n          \"jumpingjacks.wav\", \n          `Assume an erect position, with feet together and \n           arms at your side. ...`, \n          [\"dmYwZH_BNd0\", \"BABOdJ-2Z6o\", \"c4DAnQ6DtF8\"]), \n        30)); \n   // (TRUNCATED) Other 11 workout exercise data. \n   return workout; \n} \n\n```", "```ts\nstart() { \n   this.workoutTimeRemaining =  \n   this.workoutPlan.totalWorkoutDuration(); \n   this.currentExerciseIndex = 0;  \n   this.startExercise(this.workoutPlan.exercises[this.currentExerciseIndex]); \n} \n\n```", "```ts\nworkoutTimeRemaining: number; \ncurrentExerciseIndex: number; \n\n```", "```ts\nstartExercise(exercisePlan: ExercisePlan) { \n    this.currentExercise = exercisePlan; \n    this.exerciseRunningDuration = 0; \n    let intervalId = setInterval(() => { \n      if (this.exerciseRunningDuration >=  \n        this.currentExercise.duration) { \n          clearInterval(intervalId);  \n      } \n      else { this.exerciseRunningDuration++;    } \n    }, 1000); \n} \n\n```", "```ts\ncurrentExercise: ExercisePlan; \nexerciseRunningDuration: number; \n\n```", "```ts\nimport {WorkoutPlan, ExercisePlan, Exercise} from './model'\n**import {Component} from '@angular/core';**\n**@Component({**\n **selector: 'workout-runner',**\n **template: `**\n **<pre>Current Exercise: {{currentExercise | json}}</pre>\n    <pre>Time Left: {{currentExercise?.duration-exerciseRunningDuration}}</pre>`**\n**})** \nexport class WorkoutRunnerComponent { \n\n```", "```ts\n**import {WorkoutRunnerComponent} from '../workout-runner/workout-runner.component';** \n@NgModule({ \n  imports: [BrowserModule], \n **declarations: [TrainerAppComponent, WorkoutRunnerComponent],**\n\n```", "```ts\n@Component({ \n... \n    template: `  \n<div class=\"navbar ...> ... \n</div> \n<div class=\"container ...> \n**<workout-runner></workout-runner>** \n</div>` \n}) \n\n```", "```ts\nclass WorkoutRunnerComponent implements OnInit { \n\u00a0 ngOnInit (){ \n\u00a0 \u00a0 ... \n} \n...\u00a0\n\n```", "```ts\nngOnInit() { \n    this.start(); \n} \n\n```", "```ts\nimport {Component,**OnInit**} from '@angular/core'; \n... \nexport class WorkoutRunnerComponent **implements OnInit** { \n\n```", "```ts\n**gulp play**\n\n```", "```ts\nif (this.exerciseRunningDuration >=  \nthis.currentExercise.duration) { \n   clearInterval(intervalId); \n **let next: ExercisePlan = this.getNextExercise();**\n **if (next) {** \n **if (next !== this.restExercise) {** \n **this.currentExerciseIndex++;** \n **}** \n **this.startExercise(next);**\n**}** \n **else { console.log(\"Workout complete!\"); }** \n} \n\n```", "```ts\ngetNextExercise(): ExercisePlan { \n    let nextExercise: ExercisePlan = null; \n    if (this.currentExercise === this.restExercise) { \n      nextExercise =  \nthis.workoutPlan.exercises[this.currentExerciseIndex + 1]; \n    } \n    else if (this.currentExerciseIndex <  \n    this.workoutPlan.exercises.length - 1) { \n      nextExercise = this.restExercise; \n    } \n    return nextExercise; \n} \n\n```", "```ts\n<div class=\"row\"> \n  <div id=\"exercise-pane\" class=\"col-sm-8 col-sm-offset-2\"> \n    <div class=\"row workout-content\"> \n      <div class=\"workout-display-div\"> \n        <h1>{{currentExercise.exercise.title}}</h1> \n        <img class=\"img-responsive\" [src]=\"'/static/images/' + \n         currentExercise.exercise.image\" /> \n        <div class=\"progress time-progress\"> \n          <div class=\"progress-bar\" role=\"progressbar\" \n          [attr.aria-valuenow]=\"exerciseRunningDuration\"  \n          aria-valuemin=\"0\"  \n          [attr.aria-valuemax]=\"currentExercise.duration\"  \n          [ngStyle] = \"{'width':(exerciseRunningDuration/\n                      currentExercise.duration) * 100 + '%'}\"></div> \n        </div> \n        <h1>Time Remaining:{{currentExercise.duration - \n            exerciseRunningDuration}}</h1> \n      </div> \n    </div> \n  </div> \n</div> \n\n```", "```ts\ntemplateUrl: '/src/components/workout-runner/workout-runner.html' \n\n```", "```ts\n<h1>{{currentExercise.exercise.title}}</h1> \n<h1>Time Remaining: {{currentExercise.duration?-exerciseRunningDuration}}</h1> \n\n```", "```ts\n<img class=\"img-responsive\" [src]=\"'/static/images/' + currentExercise.exercise.image\" /> \n\n```", "```ts\n<input type=\"text\" value=\"Awesome Angular2\"> \n\n```", "```ts\ninput.value // value property \n\n```", "```ts\ninput.getAttribute('value')  // value attribute \n\n```", "```ts\n<img class=\"img-responsive\" [src]=\"'/static/images/' + currentExercise.exercise.image\" /> \n\n```", "```ts\n[target]=\"sourceExpression\"; \n\n```", "```ts\n<workout-runner [exerciseRestDuration]=\"restDuration\"></workout-runner> \n\n```", "```ts\n<div>{{doLotsOfWork()}}</div> \n\n```", "```ts\n<div [innerHTML]=\"getContent()\"></div> \n\n```", "```ts\ngetContent() { \n  var content=buildContent(); \n  this.timesContentRequested +=1; \n  return content; \n} \n\n```", "```ts\n<div>{{timesContentRequested}}</div> \n\n```", "```ts\nExpression '{{getContent()}}' in AppComponent@0:4' has changed after it was checked. Previous value: '1'. Current value: '2' \n\n```", "```ts\n<div class=\"progress-bar\" role=\"progressbar\"  \n[ngStyle] = \"{'width':(exerciseRunningDuration/\ncurrentExercise.duration) * 100 + '%'}\"></div>  \n\n```", "```ts\n<div [ngStyle]='expression'></div> \n\n```", "```ts\n<div class=\"progress-bar\" role=\"progressbar\"  \n**aria-valuenow = \"{{exerciseRunningDuration}}\"**  \naria-valuemin=\"0\"  \n**aria-valuemax= \"{{currentExercise.duration}}\"**  \n[ngStyle]= \"{'width':(exerciseRunningDuration/currentExercise.duration) *  \n100 + '%'}\"> </div> \n\n```", "```ts\nCan't bind to 'ariaValuenow' since it isn't a known native property in WorkoutRunnerComponent ... \n\n```", "```ts\n[attr.attribute-name]=\"expression\" \n\n```", "```ts\n<div ... [attr.aria-valuenow]=\"exerciseRunningDuration\" [attr.aria-valuemax]=\"currentExercise.duration\" ...> \n\n```", "```ts\n[class.class-name]=\"expression\" \n\n```", "```ts\n<div [class.highlight]=\"isPreferred\">Jim</div> // Toggles the highlight class \n\n```", "```ts\n[style.style-name]=\"expression\";\n```", "```ts\n[style.width.%]=\"(exerciseRunningDuration/currentExercise.duration) * 100\" \n\n```", "```ts\n<div class=\"progress-bar\" role=\"progressbar\" ... [ngStyle]=\"{'width':(exerciseRunningDuration/currentExercise.duration) * 100 + '%'}\"> </div> \n\n```", "```ts\n<div [ngStyle]= \"{ \n'width':componentWidth,  \n'height':componentHeight,  \n'font-size': 'larger',  \n'font-weight': ifRequired ? 'bold': 'normal' }\"></div> \n\n```", "```ts\n<div [ngStyle]= \"getStyles()\"></div> \n\n```", "```ts\ngetStyles () { \n    return { \n      'width':componentWidth, \n      ... \n    } \n} \n\n```", "```ts\n<div [ngClass]= \"{'required':inputRequired, 'email':whenEmail}\"></div> \n\n```", "```ts\nimport { NgModule }      from '@angular/core'; \nimport { BrowserModule } from '@angular/platform-browser'; \nimport { WorkoutRunnerComponent }  from './workout-runner.component'; \n\n@NgModule({ \n    imports: [BrowserModule], \n    declarations: [WorkoutRunnerComponent], \n    exports: [WorkoutRunnerComponent], \n}) \nexport class WorkoutRunnerModule { } \n\n```", "```ts\n**import {WorkoutRunnerModule}** \n**from '../workout-runner/workout-runner.module';** \n@NgModule({ \n **imports: [BrowserModule, WorkoutRunnerModule],**\n\n```", "```ts\n<trainer-app> \n   <workout-runner></workout-runner> \n</trainer-app> \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \n\n@Component({ \n  selector: 'exercise-description', \n  templateUrl: '/src/components/workout-runner/\n  exercise-description/exercise-description.html', \n}) \nexport class ExerciseDescriptionComponent { \n  @Input() description: string; \n  @Input() steps: string; \n} \n\n```", "```ts\n  <div class=\"panel-body\"> \n **{{description}}** \n  </div> \n   ...  \n   <div class=\"panel-body\"> \n **{{steps}}** \n   </div> \n\n```", "```ts\n**import {ExerciseDescriptionComponent} from './exercise-description/exercise-description.component';** \n... \ndeclarations: [WorkoutRunnerComponent, \n **ExerciseDescriptionComponent],**\n\n```", "```ts\n<div class=\"row\"> \n **<div id=\"description-panel\" class=\"col-sm-2\">**\n **<exercise-description** \n**[description]=\"currentExercise.exercise.description\" [steps]=\"currentExercise.exercise.procedure\">**\n**</exercise-description>**\n **</div>** \n  <div id=\"exercise-pane\" class=\"col-sm-7\">  \n... \n\n```", "```ts\nexport class VideoPlayerComponent implements OnChanges { \n  private youtubeUrlPrefix = '//www.youtube.com/embed/'; \n\n  @Input() videos: Array<string>; \n  safeVideoUrls: Array<SafeResourceUrl>; \n\n  constructor(private sanitizer: DomSanitizationService) { } \n\n  ngOnChanges() { \n    this.safeVideoUrls = this.videos ? \n    this.videos \n    .map(v => this.sanitizer.bypassSecurityTrustResourceUrl(\n    this.youtubeUrlPrefix + v)) \n    : this.videos; \n  } \n} \n\n```", "```ts\n<div *ngFor=\"let video of safeVideoUrls\"> \n   <iframe width=\"330\" height=\"220\" [src]=\"video\"  \nframeborder=\"0\" allowfullscreen></iframe> \n</div> \n\n```", "```ts\n<div id=\"video-panel\" class=\"col-sm-3\"> \n    <video-player  \n[videos]=\"currentExercise.exercise.videos\"> \n</video-player> \n</div> \n\n```", "```ts\n<div *ngFor=\"let video of videos; let i=index\"> \n     <div>This is video - {{i}}</div> \n</div> \n\n```", "```ts\n<div *ngFor=\"let video of videos; let i=index; let f=first\"> \n     <div [class.special]=\"f\">This is video - {{i}}</div> \n</div> \n\n```", "```ts\n<user-profile *ngFor=\"let userDetail of users\"  \n[user]= \"userDetail\"></user-profile> \n\n```", "```ts\ntrackByUserId(index: number, hero: User) { return user.id; } \n\n```", "```ts\n<div *ngFor=\"let user of users;  \ntrackBy: trackByUserId\">{{user.name}}</div> \n\n```", "```ts\n<div *ngFor=\"let video of videos\"> \n<iframe width=\"330\" height=\"220\"  \n[src]=\"'//www.youtube.com/embed/' + video\"  \nframeborder=\"0\" allowfullscreen></iframe> \n</div> \n\n```", "```ts\nthis.sanitizer.bypassSecurityTrustResourceUrl(this.youtubeUrlPrefix + v) \n\n```", "```ts\n`Assume an erect position, with feet together and arms at your side. <br> \n Slightly bend your knees, and propel yourself a few inches into the air. <br> \n While in air, bring your legs out to the side about shoulder width or slightly wider. <br> \n ... \n\n```", "```ts\n<div class=\"panel-body\" [innerHTML]=\"steps\"> </div> \n\n```", "```ts\n{{expression | pipeName:inputParam1}} \n\n```", "```ts\n{{fullName | slice:0:20}} //renders first 20 characters  \n\n```", "```ts\n{{fullName | slice:0:truncateAt}} //renders based on value truncateAt \n\n```", "```ts\n{{ dateObj | date }}               // output is 'Jun 15, 2015' \n{{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM' \n{{ dateObj | date:'shortTime' }}   // output is '9:43 PM' \n{{ dateObj | date:'mmss' }}        // output is '43:11' \n\n```", "```ts\n **{{14.22|currency:\"USD\" }} <!-Renders USD 14.22 -->** \n        {{14.22|currency:\"USD\":true}}  <!-Renders $14.22 --> \n\n```", "```ts\n{{fullName | slice:0:20 | uppercase}} \n\n```", "```ts\nexport class SecondsToTimePipe implements PipeTransform { \n  transform(value: number): any { \n    if (!isNaN(value)) { \n      var hours = Math.floor(value / 3600); \n      var minutes = Math.floor((value - (hours * 3600)) / 60); \n      var seconds = value - (hours * 3600) - (minutes * 60); \n\n      return (\"0\" + hours).substr(-2) + ':' \n        + (\"0\" + minutes).substr(-2) + ':' \n        + (\"0\" + seconds).substr(-2); \n    } \n    return; \n  } \n} \n\n```", "```ts\nimport {Pipe, PipeTransform} from '@angular/core'; \n\n```", "```ts\n@Pipe({ \n  name: 'secondsToTime' \n}) \n\n```", "```ts\nimport {VideoPlayerComponent} from  \n'./video-player/video-player.component'; \n**import {SecondsToTimePipe} from './seconds-to-time.pipe';** \n\n... \n    declarations: [WorkoutRunnerComponent, ...  \n**SecondsToTimePipe],**\n\n```", "```ts\n<div class=\"workout-display-div\"> \n **<h4>Workout Remaining - {{workoutTimeRemaining | secondsToTime}}</h4>** \n  <h1>{{currentExercise.exercise.title}}</h1> \n\n```", "```ts\nstart() { \nthis.workoutTimeRemaining = this.workoutPlan.totalWorkoutDuration(); \n... \n} \n\n```", "```ts\nstartExerciseTimeTracking() { \n    this.exerciseTrackingInterval = setInterval(() => { \n      if (this.exerciseRunningDuration >=  \n          this.currentExercise.duration) { \n        clearInterval(this.exerciseTrackingInterval); \n        let next: ExercisePlan = this.getNextExercise(); \n        if (next) { \n          if (next !== this.restExercise) { \n            this.currentExerciseIndex++; \n          } \n          this.startExercise(next); \n        } \n        else { \n          console.log(\"Workout complete!\"); \n        } \n        return; \n      } \n      ++this.exerciseRunningDuration; \n      --this.workoutTimeRemaining;     \n    }, 1000); \n  } \n\n```", "```ts\n<div class=\"workout-display-div\"> \n<!-- Exiting html --> \n   <div class=\"progress time-progress\"> \n   <!-- Exiting html --> \n   </div> \n **<div class=\"row\">**\n **<h3 class=\"col-sm-6 text-left\">Time Remaining:** \n **<strong>{{currentExercise.duration-exerciseRunningDuration}}</strong>** \n **</h3>**\n**<h3 class=\"col-sm-6 text-right\" *ngIf=** \n**\"currentExercise.exercise\n   .name=='rest'\">Next up:**\n **<strong>{{workoutPlan.exercises[\n   currentExerciseIndex + 1].exercise.title}}</strong>**\n**</h3>**\n **</div>** \n</div> \n\n```", "```ts\nngIf=\"currentExercise.details.name=='rest'\" \n\n```", "```ts\n<div [style.display]=\"isAdmin\" ? 'block' : 'none'\">Welcome Admin</div> \n\n```", "```ts\n<div *ngIf=\"isAdmin\" ? 'block' : 'none'\">Welcome Admin</div> \n\n```", "```ts\n<div id=\"parent\" [ngSwitch] =\"userType\"> \n<div *ngSwitchCase=\"'admin'\">I am the Admin!</div> \n<div *ngSwitchCase=\"'powerUser'\">I am the Power User!</div> \n<div *ngSwitchDefault>I am a normal user!</div> \n</div> \n\n```", "```ts\nworkoutPaused: boolean; \npause() { \n    clearInterval(this.exerciseTrackingInterval); \n    this.workoutPaused = true; \n  } \n\nresume() { \n    this.startExerciseTimeTracking(); \n    this.workoutPaused = false; \n  } \n\npauseResumeToggle() { \n    if (this.workoutPaused) { this.resume();    } \n    else {      this.pause();    } \n  } \n\n```", "```ts\n<div id=\"exercise-pane\" class=\"col-sm-7\"> \n **<div id=\"pause-overlay\" (click)=\"pauseResumeToggle()\">**\n **<span class=\"glyphicon pause absolute-center\"** \n **[ngClass]=\"{'glyphicon-pause' : !workoutPaused,** \n**'glyphicon-play' : workoutPaused}\"></span>**\n **</div>** \n    <div class=\"row workout-content\"> \n\n```", "```ts\n <div id=\"pause-overlay\" (keyup)= \"onKeyPressed($event)\"> \n\n```", "```ts\n<div id=\"pause-overlay\" (window:keyup)= \"onKeyPressed($event)\"> \n\n```", "```ts\nonKeyPressed = function(event:KeyboardEvent) { \n    if (event.which == 80 || event.which == 112) { \n      this.pauseResumeToggle(); \n    } \n} \n\n```", "```ts\n<div id=\"pause-overlay\" (click)=\"pauseResumeToggle()\"> \n\n```", "```ts\n<workout-runner (paused)= \"stopAudio()\"></workout-runner> \n\n```", "```ts\n<div id=\"parent \" (click)=\"doWork($event)\"> Try \n  <div id=\"child \">me!</div> \n</div> \n\n```", "```ts\n<div id=\"parent\" (click)=\"doWork($event) || true\"> \n\n```", "```ts\n<input [(ngModel)]=\"workout.name\"> \n\n```", "```ts\n<input [value]=\"workout.name\"  \n(input)=\"workout.name=$event.target.value\" > \n\n```"]