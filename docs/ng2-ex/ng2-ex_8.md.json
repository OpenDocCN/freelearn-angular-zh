["```ts\n**npm install -g angular-cli**\n\n```", "```ts\n**ng new PROJECT_NAME**\n**cd PROJECT_NAME**\n**ng serve**\n\n```", "```ts\n**ng generate component home**\n\n```", "```ts\nlet zone = new NgZone({ enableLongStackTrace: false });     \nlet doWork = function () { \n  console.log('Working'); \n}; \n\nzone.onMicrotaskEmpty.subscribe((data:any) => { \n  console.log(\"Done!\"); \n}); \n\nzone.run(() => { \n  doWork(); \n    setTimeout(() => { \n        console.log('Hard'); \n        doWork(); \n    }, 200); \n    doWork(); \n}); \n\n```", "```ts\nWorking  // sync call \nWorking  // sync call \n**Done!   // main execution complete**  \nHard     // timeout callback \nWorking  // async call \n**Done!   // async execution complete**\n\n```", "```ts\nclass ApplicationRef_ { \n\n  private _changeDetectorRefs:ChangeDetectorRef[] = []; \n\n  constructor(private zone: NgZone) { \n    this.zone.onMicrotaskEmpty \n      .subscribe(() => this.zone.run(() => this.tick()); \n  } \n\n  tick() { \n\n    this._changeDetectorRefs.forEach((detector) => { \n      detector.detectChanges(); \n    }); \n  } \n} \n\n```", "```ts\n            doWork() { \n               this.firstName=\"David\"; \n               this.lastName=\"Ruiz\"; \n            } \n\n    ```", "```ts\n                    <div class=\"col-sm-3\"> \n                    Change detection done {{changeDetectionDone()}}\n                    </div> \n\n        ```", "```ts\n                    times: number = 0; \n                    changeDetectionDone(): number { \n                        this.times++; \n                        return this.times; \n                    } \n\n        ```", "```ts\n                EXCEPTION: Expression has changed after it was checked.\n                Previous value: 'Change \n                detection done 1'. Current value: 'Change detection done 2' ... \n\n        ```", "```ts\n<Employee> \n<summary [model]=\"employee\"></employee> \n<personal [model]=\"employee.personal\"></personal> \n<professional  \n[model]=\"employee.professional\"></professional> \n<address [model]=\"employee.home\"></address> \n   <address [model]=\"employee.work\"></address> \n</Employee> \n\n```", "```ts\npersonalInfo = Immutable.Map({ name: 'David', 'age': '40' }); \n\n```", "```ts\nnewPersonalInfo = personalInfo.set('name', 'Dan'); \n\n```", "```ts\n @Component({ \n  selector:'personal', \n  template: ` \n    <h2>{{model.name}}</h2> \n    <span>{{model.age}}</span>`, \n **changeDetection: ChangeDetectionStrategy.OnPush** \n}) \nclass PersonalInfo { \n  @Input() model; \n} \n\n```", "```ts\nconstructor(private ref: ChangeDetectorRef) { \n    ref.detach(); \n} \n\n```", "```ts\n        this._userService.getUserDetails() \n        .subscribe((user)=>  \n        { this.user = user; ref.markForCheck();} \n\n```", "```ts\nthis.httpService.get(url,{withCredentials:true}); \n\n```", "```ts\nthis._http.get('/api/employees') \n.map(response => response.json()) \n   .catch((error:Response)=>{ \n      if(error.status == 401) { \n         this.router.navigate(['/login']); \n} \n}); \n\n```", "```ts\n@const routes: Routes = [ \n    { path: 'home', component: HomeComponent }, \n    { path: 'login', component: LoginComponent } \n]; \n\n```", "```ts\nexport class AuthGuard implements CanActivate { \n  canActivate() { \n    // Check if there is auth token and return true. \n    return true; \n  } \n} \n\n```", "```ts\n{ path: 'home', component: HomeComponent,  \n**canActivate:[AuthGuard] },**\n\n```", "```ts\nexport class AuthService { \n  authenticate(username: string, password: string) { \n    return this.http.post('/login',  \n          JSON.stringify({ u: username, p: password })) \n      .map((token: Response) => {  \n        localstorage.setItem('token',token); \n        return true; \n      }); \n  } \n} \n\n```", "```ts\nthis.http.get('secured/api/users',{ \nheaders:{  \n'Accept': 'application/json',  \n**'Authorization': 'Bearer ' + localStorage.getItem('token')** \n}); \n\n```", "```ts\nclass MyOptions extends BaseRequestOptions { \n header:Headers=new Header({ \n'Authorization': 'Bearer ' + localStorage.getItem('token') \n }); \n} \n\nbootstrap(App, [HTTP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})]); \n\n```", "```ts\npublic get(url: string, options?: RequestOptionsArgs)  \n:Rx.Observable<Response> { \n  return this._request(RequestMethod.Get, url, null,  \n  options); \n    } \n\npublic post(url: string, body: string, options?:  \nRequestOptionsArgs) :Rx.Observable<Response> { \n  return this._request(RequestMethod.Post, url, body,  \n  options); \n} \n\n```", "```ts\nprivate _request(method: RequestMethod, url: string,  \n body?: string, options?: RequestOptionsArgs):  \n Rx.Observable<Response> { \nlet requestOptions = new RequestOptions(Object.assign({ \n            method: method, \n            url: url, \n            body: body \n    }, options)); \n\n   if(!requestOptions.headers) { \n      requestOptions.headers = new Headers(); \n   } \n\nrequestOptions.headers.set(\"Authorization\" \n,this._buildAuthHeader()) \n\nreturn Rx.Observable.create((observer) => { \nthis.process.next(Action.QueryStart); \nthis._http.request(new Request(requestOptions)) \n.map(res=> res.json()) \n.finally(() => {  \nthis.process.next(Action.QueryStop);}) \n            .subscribe( \n            (res) => { \n            observer.next(res); \n            observer.complete();}, \n            (err) => { \n               switch (err.status) { \n               case 401: \n                  //intercept 401 \n                  this.authFailed.next(err); \n                  observer.error(err); \n                  break; \n               default: \n                  observer.error(err); \n                  break; \n} \n           }) \n        }) \n    } \n\n```", "```ts\nauthFailed: EventEmitter<any> = new EventEmitter<any>(); \n\n```", "```ts\nprivate _buildAuthHeader(): string { \n    return localStorage.getItem(\"authToken\"); \n} \n\n```", "```ts\nthis.authHttp.get('/api/employees') \n\n```", "```ts\nngOnInit() { \n    this._authHttp.authFailed.subscribe((error)=>{ \n      this._router.navigate(['/login']); \n      // or \n      // this.showLoginDialog(); \n    }); \n} \n\n```", "```ts\nclass SessionContext { \n  currentUser():User { ... }; \n  isUserInRole(roles:Array<string>):boolean { ...}; \n  isAuthenticated:boolean; \n} \n\n```", "```ts\nexport class AuthGuard implements CanActivate { \n  constructor(private session:SessionContext) { } \n  canActivate() { \n    return this.session.isAuthenticated &&  \n      session.isUserInRole(['Contributor', 'Admin']); \n  } \n} \n\n```", "```ts\n<div id='header'> \n<div> Welcome, {{userName}}</div> \n<div><a href='#/setting/my'>Settings</a></div> \n**<div *a2beRolesAllowed='[\"admin\"])'>** \n<a href='#/setting/site'>Site Settings</a> \n</div> \n</div> \n\n```", "```ts\n@Directive({ selector: '[a2beRolesAllowed]' }) \nexport class RolesAllowedDirective { \n  private _prevCondition: boolean = null; \n  constructor(private _viewContainer: ViewContainerRef, \n    private _templateRef: TemplateRef, private SessionContext _session) { } \n\n  @Input() set a2beRolesAllowed(roles: Array<string>) { \n    if (this._session.isUserInRole(roles)) { \n      this._viewContainer \n        .createEmbeddedView(this._templateRef); \n    } \n    else { \n      this._viewContainer.clear(); \n    } \n  } \n} \n\n```", "```ts\nangular.module('7minWorkout') \n  .controller('WorkoutController',[...]) \n\nangular.module('app') \n.directive('remoteValidator', [...]) \n\nangular.module('7minWorkout') \n.filter('secondsToTime', function () { ... } \n\nangular.module('7minWorkout') \n.factory('workoutHistoryTracker', [...]) \n\n```", "```ts\nfunction WorkoutController($scope, ...) { ... } \nWorkoutController.$inject = ['$scope', ...]; \n\nfunction remoteValidator($parse) {...} \nremoteValidator.$inject=[$parse]; \n\nfunction secondsToTime() {...} \n\nfunction workoutHistoryTracker($rootScope, ...) { ...} \nworkoutHistoryTracker.$inject = ['$rootScope',...]; \n\n```", "```ts\n(function() { \nfunction WorkoutController($scope, ...) { ... } \nWorkoutController.$inject = ['$scope', ...]; \n\n   angular \n        .module('7minWorkout') \n        .controller('WorkoutController', WorkoutController); \n\n})(); \n\n```", "```ts\n**<div ng-controller=\"WorkoutListController as workoutList\">** \n   <a ng-repeat=\"workout in workoutList.workouts\"  \n      href=\"#/workout/{{workout.name}}\"> \n</div> \n\n```", "```ts\nfunction WorkoutListController($scope, ...) { \n  this.workouts=[]; \n} \n\n```", "```ts\n$routeProvider.when('/builder/workouts', { \n... \n   controller: 'WorkoutListController', \n **controllerAs: 'workoutList'** \n }); \n\n```", "```ts\n<div id=\"exercise-pane\" class=\"col-sm-7\"> \n... \n  <span ng-controller=\"WorkoutAudioController\"> \n    <audio media-player=\"ticksAudio\" loop autoplay  \n     src=\"content/tick10s.mp3\"></audio> \n    <audio media-player=\"nextUpAudio\"  \n     src=\"content/nextup.mp3\"></audio> \n    ... \n  </span> \n\n```", "```ts\n<div id=\"exercise-pane\" class=\"col-sm-7\"> \n... \n<workout-audio-component></workout-audio-component> \n\n```", "```ts\nbindToController: { \n   name: '=', \n   title: '&' \n} \n\n```", "```ts\n    **git clone https://github.com/chandermani/angularjsbyexample.git**\n\n    ```", "```ts\n    **cd angularjsbyexample**\n    **git checkout ng2-base**\n\n    ```", "```ts\n            ApiKeyAppenderInterceptorProvider \n            .setApiKey(\"<yourapikey>\"); \n\n    ```", "```ts\n    **cd trainer/app**\n    **npm install**\n\n    ```", "```ts\n    **npm i http-server -g**\n\n    ```", "```ts\n**http-server -c-1**\n\n```", "```ts\n**npm i systemjs --save**\n\n```", "```ts\n<script src=\"js/vendor/angular-local-storage.js\"</script> \n**<script src=\"node_modules/systemjs/dist/system.src.js\">**\n**</script>**\n**<script>**\n **System.config({ packages: {'js': {defaultExtension: 'js'}}});**\n **System.import('js/app.js');**\n**</script>**\n\n```", "```ts\n<body ng-controller=\"RootController\"> \n\n```", "```ts\n**import  './app.module.js';** \nimport  './config.js'; \nimport  './root.js'; \nimport './shared/directives.js'; \nimport './shared/model.js'; \nimport './shared/services.js'; \nimport './7MinWorkout/services.js'; \nimport './7MinWorkout/directives.js'; \nimport './7MinWorkout/filters.js'; \nimport './7MinWorkout/workout.js'; \nimport './7MinWorkout/workoutvideos.js'; \nimport './WorkoutBuilder/services.js'; \nimport './WorkoutBuilder/directives.js'; \nimport './WorkoutBuilder/exercise.js'; \nimport './WorkoutBuilder/workout.js'; \n\nangular.element(document).ready(function() { \n  angular.bootstrap(document.body, ['app'],  \n{ strictDi: true }); \n}); \n\n```", "```ts\n**npm i typescript -g**\n\n```", "```ts\n**npm i typings --save-dev**\n\n```", "```ts\n\"scripts\": { \n    \"test\": \"echo \"Error: no test specified\" && exit 1\" \n **\"tsc\": \"tsc -p . -w\",** \n **\"typings\": \"typings\"** \n  } \n\n```", "```ts\n**npm run typings install dt~jquery dt~angular dt~angular-route dt~angular-resource dt~angular-mocks dt~core-js dt~angular-ui-bootstrap -- --save --global** \n\n```", "```ts\nnpm show typings version\n```", "```ts\n**npm run tsc**\n\n```", "```ts\n  angular.bootstrap(document.body, ['app'],  \n**{ strictDi: true });**\n\n```", "```ts\n**npm install**\n\n```", "```ts\n**<script src=\"/node_modules/core-js/client/shim.min.js\"></script>**\n**<script src=\"/node_modules/zone.js/dist/zone.js\"></script>**\n**<script src=\"/node_modules/reflect-metadata/Reflect.js\"></script>**<script src=\"/node_modules/systemjs/dist/system.src.js\"></script> \n\n```", "```ts\n<script src=\"systemjs.config.js\"></script> \n\n```", "```ts\n<script>System.import('app');</script> \n\n```", "```ts\n  \"removeComments\": false, \n **\"moduleResolution\": \"node\"**\n\n```", "```ts\nimport  './app-ng1.module.js'; \n\n```", "```ts\nimport {UpgradeAdapter} from '@angular/upgrade'; \nimport {AppModule} from './app.module'; \nexport const upgradeAdapter = new UpgradeAdapter(AppModule); \n\n```", "```ts\nimport {upgradeAdapter} from './upgrade-adapter'; \n\n```", "```ts\nangular.element(document).ready(function() {     \n    upgradeAdapter.bootstrap(document.body, ['app'], { strictDi: true }); \n}); \n\n```", "```ts\ntemplate: `<div id=\"left-nav-exercises\"> \n           <h4>Exercises</h4> \n           <div *ngFor=\"let exercise of exercises\" class=\"row\"> \n           ... \n\n           </div>` \n\n```", "```ts\nconstructor(  \n@Inject('WorkoutService') private workoutService: any,  \n@Inject('WorkoutBuilderService') private workoutBuilderService: any) \n\n```", "```ts\nupgradeAdapter.upgradeNg1Provider('WorkoutService'); \nupgradeAdapter.upgradeNg1Provider('WorkoutBuilderService'); \n\n```", "```ts\n**import {ExercisesNavComponent}** \n**from './WorkoutBuilder/exercise-nav-component'** \nimport {upgradeAdapter} from './upgrade-adapter'; \n**angular.module('WorkoutBuilder').directive('exerciseNav', upgradeAdapter.downgradeNg2Component(ExercisesNavComponent) as angular.IDirectiveFactory);**\n\n```", "```ts\nimport './WorkoutBuilder/exercise-nav-component'; \n\n```", "```ts\n<exercise-nav></exercise-nav> \n\n```", "```ts\n<exercise-nav [exercises]='vm.exercises'></exercise-nav> \n\n```", "```ts\n<exercise-nav (onExerciseClicked)='vm.add(exercise)'></exercise-nav> \n\n```", "```ts\n<exercise-nav></exercise-nav> \n\n```", "```ts\n<exercise-nav ng-if='showNav'></exercise-nav> \n<exercise-nav ng-repeat='item in items'></exercise-nav> \n\n```", "```ts\nUpdateAdapter.upgradeNg1Provider(name:string,  \n  options?: {asToken: any;})) \n\n```", "```ts\nupgradeAdapter.upgradeNg1Provider('WorkoutService'); \n\n```", "```ts\nconstructor(  \n  @Inject('WorkoutService') private workoutService: any,  \n\n```", "```ts\nupgradeAdapter.upgradeNg1Provider('WorkoutService', \n  {asToken:WorkoutService}); \n\n```", "```ts\nconstructor(private workoutService: WorkoutService,  \n\n```", "```ts\nUpgradeAdapter.downgradeNg2Provider(token:any):Function\n\n```", "```ts\nangular.module('app').factory('MyService',  \n  UpgradeAdapter.downgradeNg2Provider(MyService)) \n\n```", "```ts\n$routeProvider.when('/finish', { template: '<finish></finish>' }); \n\n```", "```ts\n**npm i ng2-translate --save**\n\n```", "```ts\nvar map = {... \n **'ng2-translate': '/node_modules/ng2-translate/bundles'** \nvar packages = { ... \n **'ng2-translate': { defaultExtension: 'js' }**\n\n```", "```ts\n@NgModule({\n **imports: [BrowserModule, ...,**\n **HttpModule, TranslateModule.forRoot(),],**\n **providers: [TranslateService,**\n **{**\n **provide: TranslateLoader,**\n **useFactory: (http: Http) => new TranslateStaticLoader(http, 'i18n', '.json'),**\n **deps: [Http]**\n **}]**\n})\n\n```", "```ts\nimport {TranslateModule, TranslateService,                TranslateLoader, TranslateStaticLoader} from 'ng2-translate/ng2-translate';  \n\n```", "```ts\nupgradeAdapter.bootstrap(document.body, ['app'],  \n { strictDi: true }) \n .ready((updateApp: UpgradeAdapterRef) => { \n    var translateService =  \n      updateApp.ng2Injector.get(TranslateService); \n\n    var userLang = navigator.language.split('-')[0];  \n    userLang = /(fr|en)/gi.test(userLang) ? userLang : 'en'; \n\n    translateService.setDefaultLang('en'); \n\n    translateService.use(userLang); \n  }); \n\n```", "```ts\nimport {TranslateService} from 'ng2-translate/ng2-translate'; \n\n```", "```ts\nimport {StartComponent} from './start/start-component'; \nangular.module('start').directive('start', upgradeAdapter.downgradeNg2Component(StartComponent) as angular.IDirectiveFactory); \n\n```", "```ts\n<a *ngFor=\"#workout of workouts|search:'name':searchContent|orderBy:'name'\" href=\"#/workout/{{workout.name}}\"> \n\n```", "```ts\nimport './start/start-component'; \nimport './finish/finish-component'; \n\n```", "```ts\n$routeProvider.when('/start',  \n**{ template: '<start></start>' });** \n$routeProvider.when('/finish',  \n**{ template: '<finish></finish>' });**\n\n```", "```ts\nangular.module('app', ['ngRoute', ... ,  \n**'start', 'finish']);** \n... \n**angular.module('start', []);angular.module('finish', []);**\n\n```", "```ts\nimport {TranslateService} from 'ng2-translate'; \n\nexport function ng2Translate(ng2TranslateService: TranslateService) { \n   function translate(input) { \n    if (input && ng2TranslateService.currentLang) { \n      return ng2TranslateService.instant(input); \n    } \n  } \n  translate['$stateful'] = true; \n  return translate; \n} \n\nng2Translate.$inject = ['ng2TranslateService']; \nangular.module('app').filter(\"ng2Translate\", ng2Translate); \n\n```", "```ts\n            <h3 class=\"panel-title\" translate>RUNNER.STEPS</h3> \n\n    ```", "```ts\n            <h3 class=\"panel-title\">{{'RUNNER.STEPS'|ng2Translate}}</h3> \n\n    ```", "```ts\n            import './shared/filters' \n\n    ```", "```ts\n            angular.module('app').factory('ng2TranslateService', \n            upgradeAdapter.downgradeNg2Provider(TranslateService)); \n\n    ```", "```ts\n@Component({ \n  selector: 'ng2-root', \n **template: `<ng-content></ng-content>`** \n}) \n\n```", "```ts\n<ng2-root> \n      <ng1-root></ng1-root> \n</ng2-root> \n\n```"]