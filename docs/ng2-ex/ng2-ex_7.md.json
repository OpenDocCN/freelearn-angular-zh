["```ts\nnpm install karma --save-dev \n\n```", "```ts\nnpm install -g karma-cli \n\n```", "```ts\nkarma init \n\n```", "```ts\nnpm install jasmine-core --save-dev --save-exact \n\n```", "```ts\nbasePath: '../', \n\n```", "```ts\nframeworks: ['jasmine'], \n\n```", "```ts\n{pattern: 'tests/karma-test-shim.js', included: true, watched: true}, \n\n```", "```ts\n{pattern: 'dist/**/*.js', included: false, watched: true}, \n\n```", "```ts\n__karma__.loaded = function() {}; \n\n```", "```ts\nSystem.config({ \n    baseURL: '/base' \n}); \n\nSystem.config( \n    { \n        paths: { \n            // paths serve as alias \n            'npm:': 'node_modules/' \n        }, \n        map: { \n            'app': 'dist', \n            '@angular/core': 'npm:@angular/core/bundles/core.umd.js', \n...[other Angular modules] ... \n            // angular testing umd bundles \n            '@angular/core/testing': 'npm:@angular/core/bundles/core-testing.umd.js', \n...[other Angular testing modules] ... \n            // other libraries \n            'rxjs': 'npm:rxjs', \n            'angular2-modal': 'npm:angular2-modal', \n        }, \n        packages: { \n            'app': { \n                defaultExtension: 'js' \n            }, \n            'rxjs': { \n                defaultExtension: 'js' \n            } \n        } \n    }); \n\n```", "```ts\nPromise.all([ \n    System.import('@angular/core/testing'), \n    System.import('@angular/platform-browser-dynamic/testing') \n]).then(function (providers) { \n    var testing = providers[0]; \n    var testingBrowser = providers[1]; \n    testing.TestBed.initTestEnvironment(testingBrowser.BrowserDynamicTestingModule, \n        testingBrowser.platformBrowserDynamicTesting()); \n\n}).then(function() { \n    // Finally, load all spec files. \n    // This will run the tests directly. \n    return Promise.all( \n        allSpecFiles.map(function (moduleName) { \n            return System.import(moduleName); \n        })); \n}).then(__karma__.start, __karma__.error); \n\n```", "```ts\nimport {SecondsToTimePipe} from \"./seconds-to-time.pipe\"; \ndescribe('SecondsToTime pipe', () => { \n    let pipe:SecondsToTimePipe; \n    beforeEach(() => { \n        pipe = new SecondsToTimePipe(); \n    }); \n    it('should convert integer to time format', () => { \n        expect(pipe.transform(5)).toEqual('00:00:05'); \n        expect(pipe.transform(65)).toEqual('00:01:05'); \n        expect(pipe.transform(3610)).toEqual('01:00:10'); \n    }); \n}); \n\n```", "```ts\ngulp play \n\n```", "```ts\nkarma start tests/karma.conf.js \n\n```", "```ts\nexpect(pipe.transform(5, [])).toEqual('00:00:06'); \n\n```", "```ts\nimport { inject, fakeAsync, async, tick, TestBed, ComponentFixture} from '@angular/core/testing'; \nimport { NO_ERRORS_SCHEMA }          from '@angular/core'; \nimport {Router} from '@angular/router'; \nimport {Observable} from \"rxjs/Rx\"; \n\nimport {WorkoutHistoryTracker} from '../../services/workout-history-tracker'; \nimport {WorkoutRunnerComponent} from './workout-runner.component'; \nimport {WorkoutService} from '../../services/workout-service'; \nimport {Exercise, WorkoutPlan, ExercisePlan} from \"../../services/model\"; \nimport {SecondsToTimePipe} from \"../shared/seconds-to-time.pipe\"; \n\n```", "```ts\nclass MockWorkoutHistoryTracker { \n    startTracking() {} \n    endTracking() {} \n    exerciseComplete() {} \n} \n\n```", "```ts\nclass MockWorkoutService { \n    sampleWorkout = new WorkoutPlan( \n         \"testworkout\", \n         \"Test Workout\", \n          40, \n          [ \n              new ExercisePlan(new Exercise( \"exercise1\", \"Exercise 1\", \n              \"Exercise 1 description\",  \"/image1/path\", \n             \"audio1/path\"), 50), \n              new ExercisePlan(new Exercise( \"exercise1\", \"Exercise 2\", \n             \"Exercise 2 description\",  \"/image2/path\", \n             \"audio2/path\"), 30), \n              new ExercisePlan(new Exercise( \"exercise1\", \"Exercise 3\", \n             \"Exercise 3 description\",  \"/image3/path\", \n             \"audio3/path\"), 20) \n          ], \n          \"This is a test workout\" \n    ); \n    getWorkout(name: string) { \n        return Observable.of(this.sampleWorkout); \n    } \n    totalWorkoutDuration(){ \n        return 180; \n    }; \n    export class MockRouter {\n    navigate = jasmine.createSpy('navigate');\n    }\n} \n\n```", "```ts\ndescribe('Workout Runner', () =>{ \n    let fixture:any; \n    let runner:any; \n\n```", "```ts\nbeforeEach( async(() =>{ \n    TestBed \n        .configureTestingModule({ \n            declarations: [ WorkoutRunnerComponent, SecondsToTimePipe ], \n            providers: [ \n                {provide: Router, useClass: MockRouter}, \n                {provide: WorkoutHistoryTracker ,useClass: \n                MockWorkoutHistoryTracker}, \n                {provide: WorkoutService ,useClass: MockWorkoutService} \n            ], \n            schemas: [ NO_ERRORS_SCHEMA ] \n        }) \n        .compileComponents() \n        .then(() => { \n            fixture = TestBed.createComponent(WorkoutRunnerComponent); \n            runner = fixture.componentInstance; \n        }); \n}));  \n\n```", "```ts\ndeclarations: [ WorkoutRunnerComponent, SecondsToTimePipe ], \n\n```", "```ts\nproviders: [ \n{provide: Router, useClass: MockRouter}, \n{provide: WorkoutHistoryTracker ,useClass: MockWorkoutHistoryTracker}, \n{provide: WorkoutService ,useClass: MockWorkoutService} \n], \n\n```", "```ts\nschemas: [ NO_ERRORS_SCHEMA ] \n\n```", "```ts\n.compileComponents() \n.then(() => { \n    fixture = TestBed.createComponent(WorkoutRunnerComponent); \n    runner = fixture.componentInstance; \n}); \n\n```", "```ts\nit('should start the workout', () => { \n    expect(runner.workoutTimeRemaining).toEqual(runner.workoutPlan.totalWorkoutDuration()); \n    expect(runner.workoutPaused).toBeFalsy(); \n});  \n\n```", "```ts\n            it('should start the workout', () => { \n     **runner.ngOnInit();**\n     **runner.ngDoCheck();** \n                expect(runner.workoutTimeRemaining).toEqual(\n                       runner.workoutPlan.totalWorkoutDuration()); \n                expect(runner.workoutPaused).toBeFalsy(); \n            }); \n\n    ```", "```ts\nit('should start the first exercise', () => { \n    spyOn(runner, 'startExercise').and.callThrough(); \n    runner.ngOnInit(); \n    runner.ngDoCheck(); \n    expect(runner.currentExerciseIndex).toEqual(0); \n    expect(runner.startExercise).toHaveBeenCalledWith(\n    runner.workoutPlan.exercises[runner.currentExerciseIndex]); \n    expect(runner.currentExercise).toEqual(\n    runner.workoutPlan.exercises[0]); \n}); \n\n```", "```ts\nit(\"should start history tracking\", inject([WorkoutHistoryTracker], (tracker: WorkoutHistoryTracker) => { \n     spyOn(tracker, 'startTracking'); \n     runner.ngOnInit(); \n     runner.ngDoCheck(); \n     expect(tracker.startTracking).toHaveBeenCalled(); \n })); \n\n```", "```ts\n@Output() workoutStarted: EventEmitter<WorkoutPlan> = new EventEmitter<WorkoutPlan>(); \n\n```", "```ts\nit('should start the workout', () => { \n **runner.workoutStarted.subscribe((w: any) => {\n      expect(w).toEqual(runner.workoutPlan);**\n **});** \n    runner.ngOnInit(); \n    runner.ngDoCheck(); \n    expect(runner.workoutTimeRemaining).toEqual(\n    runner.workoutPlan.totalWorkoutDuration()); \n    expect(runner.workoutPaused).toBeFalsy(); \n}); \n\n```", "```ts\nit('should increase current exercise duration with time', fakeAsync(() => { \n    runner.ngOnInit(); \n    runner.ngDoCheck(); \n    expect(runner.exerciseRunningDuration).toBe(0); \n    tick(1000); \n    expect(runner.exerciseRunningDuration).toBe(1); \n    tick(1000); \n    expect(runner.exerciseRunningDuration).toBe(2); \n    TestHelper.advanceWorkout(7); \n    expect(runner.exerciseRunningDuration).toBe(10); \n    runner.ngOnDestroy(); \n})); \n\n```", "```ts\nit(\"should transition to next exercise on one exercise complete\", fakeAsync(() => { \n    runner.ngOnInit(); \n    runner.ngDoCheck(); \n    let exerciseDuration = runner.workoutPlan.exercises[0].duration; \n    TestHelper.advanceWorkout(exerciseDuration); \n    expect(runner.currentExercise.exercise.name).toBe('rest'); \n    expect(runner.currentExercise.duration).toBe(\n    runner.workoutPlan.restBetweenExercise); \n    runner.ngOnDestroy();\n})); \n\n```", "```ts\nit(\"should not update workoutTimeRemaining for paused workout on \n    interval lapse\", fakeAsync(() => { \n    runner.ngOnInit(); \n    runner.ngDoCheck(); \n    expect(runner.workoutPaused).toBeFalsy(); \n    tick(1000); \n    expect(runner.workoutTimeRemaining).toBe(\n    runner.workoutPlan.totalWorkoutDuration() - 1); \n    runner.pause(); \n    expect(runner.workoutPaused).toBe(true); \n    tick(1000); \n    expect(runner.workoutTimeRemaining).toBe(\n    runner.workoutPlan.totalWorkoutDuration() - 1); \n    runner.ngOnDestroy(); \n})); \n\n```", "```ts\nimport {addProviders, fakeAsync, inject, tick} from '@angular/core/testing'; \nimport {BaseRequestOptions, Http, Response, ResponseOptions} from '@angular/http'; \nimport {MockBackend, MockConnection} from '@angular/http/testing'; \nimport {WorkoutService} from './workout-service'; \nimport {WorkoutPlan} from \"./model\"; \n\n```", "```ts\ndescribe('Workout Service', () => { \n    let collectionUrl:string = \"...[mongo connnection url]...\"; \n    let apiKey:string = \"...[mongo key]...\"; \n    let params:string = '?apiKey=' + apiKey; \n    let workoutService:WorkoutService; \n    let mockBackend:MockBackend; \n\n```", "```ts\nbeforeEach(() => { \n    addProviders([ \n        MockBackend, \n        BaseRequestOptions, \n        { \n            provide: Http, \n            useFactory: (backend:MockBackend, \n            options:BaseRequestOptions) => { \n                return new Http(backend, options); \n            }, \n            deps: [MockBackend, BaseRequestOptions] \n        }, \n        WorkoutService \n    ]) \n}); \n\n```", "```ts\nbeforeEach(inject([WorkoutService, MockBackend], (service:WorkoutService, backend:MockBackend) => { \n    workoutService = service; \n    mockBackend = backend \n})); \n\n```", "```ts\nit(\"should load Workout service\", () => { \n    expect(workoutService).toBeDefined(); \n}); \n\n```", "```ts\nit(\"should return all workout plans\", fakeAsync(() => { \n    let result:any; \n    mockBackend.connections.subscribe((connection:MockConnection) => { \n      expect(connection.request.url).toBe(collectionUrl + \"/workouts\" + \n      params); \n      let response = new ResponseOptions({body: '[{ \"name\": \"Workout1\", \n      \"title\": \"workout1\" }, { \"name\": \"Workout1\", \"title\": \"workout1\" \n      }]'}); \n        connection.mockRespond(new Response(response)); \n    }); \n    workoutService.getWorkouts().subscribe((response:Response) => { \n        result = response; \n    }); \n    expect(result.length).toBe(2); \n    expect(result[0] instanceof WorkoutPlan).toBe(true); \n})); \n\n```", "```ts\nif (connection.request.url === collectionUrl + \"/workouts/Workout1\" + params) { \n    let response = new ResponseOptions({ \n        body: '{ \"name\" : \"Workout1\" , \"title\" : \"Workout 1\" , \"exercises\" : [ { \"name\" : \"exercise1\" , \"duration\" : 30}]}' \n    }); \n    connection.mockRespond(new Response(response)); \n} else { \n    connection.mockRespond(new Response( \n        new ResponseOptions({ \n            body: [{name: \"exercise1\", title: \"exercise 1\"}] \n        }))); \n} \n\n```", "```ts\n@Component({ \n  template: ` \n  <form> \n  <input type=\"text\" name=\"workoutName\" id=\"workout-name\" \n  [(ngModel)]=\"workoutName\" a2beBusyIndicator \n  a2beRemoteValidator=\"workoutname\" \n  [validateFunction]=\"validateWorkoutName\"> \n  </form> \n  ` \n}) \nexport class TestComponent { \n    workoutName: string; \n\n    constructor() { \n        this.workoutName = '7MinWorkout'; \n    } \n    validateWorkoutName = (name: string): Promise<boolean> => { \n        return Promise.resolve(false); \n    } \n} \n\n```", "```ts\ndescribe('RemoteValidator', () => { \n    let fixture: any; \n    let comp: any; \n    let debug: any; \n    let input: any; \n\n    beforeEach(async(() => { \n        TestBed.configureTestingModule({ \n            imports: [ FormsModule ], \n            declarations: [ TestComponent, RemoteValidatorDirective ] \n        }); \n        fixture = TestBed.createComponent(TestComponent); \n        comp = fixture.componentInstance; \n        debug = fixture.debugElement; \n        input = debug.query(By.css('[name=workoutName]')); \n    }));  \n\n```", "```ts\nit(\"should load the directive without error\", fakeAsync(() => {\n    expect(input.attributes.a2beRemoteValidator).toBe('workoutname',  'remote validator directive should be loaded.')\n}));\n```", "```ts\nit('should create error if remote validation fails', fakeAsync(() => {\n    spyOn(comp, 'validateWorkoutName').and.callThrough();\n    fixture.detectChanges();\n    input.nativeElement.value = '6MinWorkout';\n    tick();\n    let form: NgForm = debug.children[0].injector.get(NgForm);\n    let control = form.control.get('workoutName');\n    expect(comp.validateWorkoutName).toHaveBeenCalled();\n    expect(control.hasError('workoutname')).toBe(true);\n    expect(control.valid).toBe(false);\n    expect(form.valid).toEqual(false);\n    expect(form.control.valid).toEqual(false);\n    expect(form.control.hasError('workoutname', \n    ['workoutName'])).toEqual(true);\n}));\n```", "```ts\nit('should not create error if remote validation succeeds', fakeAsync(() => {\n    spyOn(comp,' validateWorkoutName').and.returnValue(\n    Promise.resolve(true));\n    fixture.detectChanges();\n    input.nativeElement.value = '6MinWorkout';\n    tick();\n    let form: NgForm = debug.children[0].injector.get(NgForm);\n    let control = form.control.get('workoutName');\n    expect(comp.validateWorkoutName).toHaveBeenCalled();\n    expect(control.hasError('workoutname')).toBe(false);\n    expect(control.valid).toBe(true);\n    expect(form.control.valid).toEqual(true);\n    expect(form.valid).toEqual(true);\n    expect(form.control.hasError('workoutname',    ['workoutName'])).toEqual(false);\n}));\n```", "```ts\nexpect(element(by.id(\"start\")).getText()).toBe(\"Select Workout\"); \n\n```", "```ts\nnpm install -g protractor \n\n```", "```ts\nprotractor --version \n\n```", "```ts\nwebdriver-manager update \n\n```", "```ts\nwebdriver-manager start \n\n```", "```ts\n{ \n  \"globalDependencies\": { \n    \"core-js\": \"registry:dt/core-js#0.0.0+20160602141332\", \n    \"jasmine\": \"registry:dt/jasmine#2.2.0+20160621224255\", \n **\"angular-protractor\": \"registry:dt/angular-\n     protractor#1.5.0+20160425143459\",**\n **\"selenium-webdriver\":\n     \"registry:dt/selenium-webdriver#2.44.0+20160317120654\"** \n  } \n} \n\n```", "```ts\ntypings install \n\n```", "```ts\n/// <reference path=\"../../typings/index.d.ts\"/> \n\n```", "```ts\ndescribe(\"Workout Runner\", () => { \ndescribe(\"Start Page\", () => { \n    beforeEach(() => {t \n        browser.get(\"\"); \n    }); \n    it(\"should load the start page.\", () => { \n        expect(browser.getTitle()).toBe(\"Personal Trainer\"); \n        expect(element(by.id(\"start\")).getText()).toBe(\"Select Workout\"); \n    }); \n}); \n}); \n\n```", "```ts\ntsc workout-runner.e2e.ts -w \n\n```", "```ts\nmessage TS6042: Compilation complete. Watching for file changes. \n\n```", "```ts\nprotractor tests/protractor.conf.js \n\n```", "```ts\nit(\"should search workout with specific name.\", () => { \n    var filteredWorkouts = element.all(by.css(\".workout.tile\")); \n    expect(filteredWorkouts.count()).toEqual(2); \n    var searchInput = element(by.css(\".form-control\")); \n    searchInput.sendKeys(\"1 Minute Workout\"); \n    expect(filteredWorkouts.count()).toEqual(1); \n    expect(filteredWorkouts.first().element(by.css(\".title\")).getText()).toBe(\"1 Minute Workout\"); \n}); \n\n```", "```ts\nit(\"should navigate to workout runner.\", () => { \n    var filteredWorkouts = element.all(by.css(\".workout.tile\")); \n    filteredWorkouts.first().click(); \n    expect(browser.getCurrentUrl()).toContain(\"/workout/1minworkout\"); \n}); \n\n```", "```ts\nclass WorkoutRunnerPage{ \n    pauseResume: any; \n    playButton: any; \n    pauseButton: any; \n    exerciseTitle: any; \n    exerciseDescription: any; \n    exerciseTimeRemaining; any; \n\n    constructor(){ \n        this.pauseResume =  element.all(by.id('pause-overlay')); \n        this.playButton = element.all(by.css('.glyphicon-play')); \n        this.pauseButton = element.all(by.css('.glyphicon-pause')); \n        this.exerciseTitle = element.all(by.css(\n        '.workout-display-div h1')).getAttribute('value'); \n        this.exerciseDescription = element.all(by.id(\n        'description-panel')).getAttribute('value'); \n        this.exerciseTimeRemaining = element.all(by.css(\n        '.workout-display-div h4')).getAttribute('value'); \n    } \n}; \n\n```", "```ts\ndescribe(\"Workout Runner page\", () => { \n    beforeEach(() => { \n        browser.get(\"#/workout/1minworkout\"); \n    }); \n    it(\"should load workout data\", () => { \n        var page = new WorkoutRunnerPage(); \n        page.pauseResume.click(); \n        expect(page.exerciseTitle).toBe['Jumping Jacks']; \n        expect(page.exerciseDescription).toBe[\"A jumping jack or \n        star jump, also called side-straddle hop is a physical \n        jumping exercise.\"]; \n    }); \n}); \n\n```", "```ts\nit(\"should pause workout when paused button clicked\", () => { \n    let page = new WorkoutRunnerPage(), \n        timeRemaining; \n    page.pauseResume.click(); \n    expect(page.playButton.count()).toBe(1); \n    expect(page.pauseButton.count()).toBe(0); \n    page.exerciseTimeRemaining.then((time)=> { \n        timeRemaining = time; \n        browser.sleep(3000); \n    }); \n    page.exerciseTimeRemaining.then((time)=> { \n        expect(page.exerciseTimeRemaining).toBe(timeRemaining); \n    }); \n}); \n\n```", "```ts\nit(\"should transition exercise when time lapses.\", () => { \n    var page = new WorkoutRunnerPage(); \n    browser.sleep(15000); \n    page.pauseResume.click(); \n    expect(page.exerciseTitle).toBe[\"Relax!\"]; \n    expect(page.exerciseDescription).toBe[\"Relax a bit!\"]; \n    //expect(page.videos.count()).toBe(0); \n }); \n\n```"]