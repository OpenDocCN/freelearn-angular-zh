["```ts\nimport { HttpModule } from '@angular/http'; \n. . . \n@NgModule({ \n  imports: [ \n. . . \n    HttpModule, \n. . . \n})\n\n```", "```ts\nimport { Http, Response } from '@angular/http'; \nimport { Observable } from 'rxjs/Observable'; \nimport 'rxjs/add/operator/map'; \nimport 'rxjs/add/operator/catch';\n\n```", "```ts\nworkout: WorkoutPlan; \ncollectionsUrl = \"https://api.mongolab.com/api/1/databases/<dbname>/collections\"; \napiKey = <key> \nparams = '?apiKey=' + this._apiKey; \n\n```", "```ts\nconstructor(public http: Http) {\n}\n\n```", "```ts\ngetExercises(){ \n    return this.http.get(this.collectionsUrl + '/exercises' + this.params)\n        .map((res: Response) => <Exercise[]>res.json()) \n        .catch(WorkoutService.handleError); \n}\n\n```", "```ts\nstatic handleError (error: Response) { \n    console.error(error); \n    return Observable.throw(error.json().error || 'Server error'); \n}\n\n```", "```ts\ngetWorkouts(){ \n    return this.http.get(this.collectionsUrl + '/workouts' + this.params) \n        .map((res:Response) => <WorkoutPlan[]>res.json()) \n        .catch(WorkoutService.handleError); \n}\n\n```", "```ts\nngOnInit() { \n    this.workoutService.getExercises() \n        .subscribe( \n            exerciseList=> { \n                this.exerciseList = exerciseList; \n            }, \n            (err: any) => console.error(err) \n        ); \n}\n\n```", "```ts\ngetWorkouts() { \n    return this.http.get(this.collectionsUrl + '/workouts' + this.params) \n        .map((res:Response) => <WorkoutPlan[]>res.json()) \n        .map((workouts:Array<any>) => { \n            let result:Array<WorkoutPlan> = []; \n            if (workouts) { \n                workouts.forEach((workout) => { \n                    result.push( \n                        new WorkoutPlan( \n                            workout.name, \n                            workout.title, \n                            workout.restBetweenExercise, \n                            workout.exercises, \n                            workout.description \n                        )); \n                }); \n            } \n\n            return result; \n        }) \n        .catch(WorkoutService.handleError); \n}\n\n```", "```ts\nimport 'rxjs/add/observable/forkJoin';\n\n```", "```ts\ngetWorkout(workoutName:string) { \n    return Observable.forkJoin( \n        this.http.get(this.collectionsUrl + '/exercises' + \n        this.params).map((res:Response) => <Exercise[]>res.json()), \n        this.http.get(this.collectionsUrl + '/workouts/' + \n        workoutName + this.params).map((res:Response) => \n       <WorkoutPlan>res.json()) \n    ).map( \n        (data:any) => { \n            let allExercises = data[0]; \n            let workout = new WorkoutPlan( \n                data[1].name, \n                data[1].title, \n                data[1].restBetweenExercise, \n                data[1].exercises, \n                data[1].description \n            ) \n            workout.exercises.forEach( \n                (exercisePlan:any) => exercisePlan.exercise = \n                 allExercises.find( \n                    (x:any) => x.name === exercisePlan.name \n                ) \n            ) \n            return workout; \n        } \n    ) \n    .catch(WorkoutService.handleError); \n}\n\n```", "```ts\nstartBuildingNew(name: string){ \n    let exerciseArray : ExercisePlan[] = []; \n    this.buildingWorkout = new WorkoutPlan(\"\", \"\", 30, exerciseArray); \n    this.newWorkout = true; \n    return this.buildingWorkout; \n}\n\n```", "```ts\nstartBuildingExisting(name: string){ \n    this.newWorkout = false; \n    return this._workoutService.getWorkout(name); \n\n} \n\n```", "```ts\nngOnInit() { \n    this.sub = this.route.params.subscribe(params => { \n        if (!params['id']) { \n            this.workout = this.workoutBuilderService.startBuildingNew(); \n        } else { \n            let workoutName = params['id']; \n            this.workoutBuilderService.startBuildingExisting(workoutName) \n                .subscribe( \n                    (data:WorkoutPlan) => { \n                        this.workout = <WorkoutPlan>data; \n                        if (!this.workout) { \n                            this.router.navigate(['/builder/workouts']); \n                        } else { \n                            this.workoutBuilderService.buildingWorkout = \n                            this.workout; \n                        } \n                    }, \n                    (err:any) => { \n                        if (err.status === 404) { \n                            this.router.navigate(['/builder/workouts']) \n                        } else { \n                            console.error(err) \n                        } \n                    } \n                ); \n        } \n    }); \n}\n\n```", "```ts\nimport {Observable} from \"rxjs/Rx\";\n\n```", "```ts\ncanActivate(route:ActivatedRouteSnapshot, \n            state:RouterStateSnapshot):Observable<boolean> { \n    let workoutName = route.params['id']; \n    return this.workoutService.getWorkout(workoutName) \n        .take(1) \n        .map(workout => !!workout) \n        .do(workoutExists => { \n            if (!workoutExists) \n            this.router.navigate(['/builder/workouts']); \n        }) \n        .catch(error => { \n                if (error.status === 404) { \n                    this.router.navigate(['/builder/workouts']); \n                    return Observable.of(false) \n                } else { \n                    return Observable.throw(error); \n                } \n            } \n        )\n\n```", "```ts\naddWorkout(workout:any) { \n  let workoutExercises:any = []; \n  workout.exercises.forEach((exercisePlan:any) => { \n    workoutExercises.push({name: exercisePlan.exercise.name, duration:exercisePlan.duration}) \n  }); \n  let body = { \n    \"_id\": workout.name, \n    \"exercises\": workoutExercises, \n    \"name\": workout.name, \n    \"title\": workout.title, \n    \"description\": workout.description, \n    \"restBetweenExercise\": workout.restBetweenExercise\n  }; \n  return this.http.post(this.collectionsUrl + '/workouts' + this.params, body) \n  .map((res:Response) => res.json())\n  .catch(WorkoutService.handleError)\n}\n\n```", "```ts\nupdateWorkout(workout:WorkoutPlan) { \n  let workoutExercises:any = []; \n  workout.exercises.forEach((exercisePlan:any) => { \n    workoutExercises.push({name: exercisePlan.exercise.name, \n    duration:exercisePlan.duration}) \n  }); \n  let body = { \n    \"_id\": workout.name, \n    \"exercises\": workoutExercises, \n    \"name\": workout.name, \n    \"title\": workout.title, \n    \"description\": workout.description, \n    \"restBetweenExercise\": workout.restBetweenExercise \n  }; \n  return this.http.put(this.collectionsUrl + '/workouts/' + \n  workout.name + this.params, body) \n  .map((res:Response) => res.json()) \n  .catch(WorkoutService.handleError); \n}\n\n```", "```ts\ndeleteWorkout(workoutName:string) { \n  return this.http.delete(this.collectionsUrl + '/workouts/' + \n  workoutName + this.params) \n  .map((res:Response) => res.json()) \n  .catch(WorkoutService.handleError) \n}\n\n```", "```ts\nsave(){ \n  let workout = this.newWorkout ? this.workoutService.addWorkout(this.buildingWorkout) :         this.workoutService.updateWorkout(this.buildingWorkout); \n  this.newWorkout = false; \n  return workout; \n}\n\n```", "```ts\nsave(formWorkout:any) { \n  this.submitted = true; \n  if (!formWorkout.valid) return; \n  this.workoutBuilderService.save().subscribe( \n    success => this.router.navigate(['/builder/workouts']), \n    err => console.error(err) \n  ); \n} \n\n```", "```ts\nimport 'rxjs/add/operator/toPromise';\n\n```", "```ts\ngetExercises() { \n  return this.http.get(this.collectionsUrl + '/exercises' + this.params) \n **.toPromise().then((res:Response) => <Exercise[]>res.json())** \n  .catch(WorkoutService.handleError); \n}\n\n```", "```ts\nerrorMessage: any;\n\n```", "```ts\nngOnInit() {\n  this.workoutService.getExercises() \n **.then(exerciseList => this.exerciseList = exerciseList,** \n**error => this.errorMessage = <any>error** \n);\n}  \n\n```", "```ts\npublic exerciseList:Observable<Exercise[]>;\n\n```", "```ts\nthis.exerciseList = this.workoutService.getExercises();\n\n```", "```ts\n<div *ngFor=\"let exercise of exerciseList|async|orderBy:'title'\">\n\n```", "```ts\n. . . \nimport { JsonpModule }  from '@angular/http'; \n. . . \n@NgModule({ \n  imports: [  \n    BrowserModule, \n    FormsModule, \n **JsonpModule** \n  ], \n. . . \n}) \n\n```", "```ts\nimport { Jsonp, URLSearchParams } from '@angular/http'; \nimport {Observable} from 'rxjs/Observable'; \nimport {Subject} from 'rxjs/Subject'; \nimport 'rxjs/Rx';\n```", "```ts\nconstructor(public jsonp: Jsonp) {} \n\n```", "```ts\ngetQuote (){ \n  let url = \"https://query.yahooapis.com/v1/public/yql\"; \n  let searchTerm ='select * from yahoo.finance.quote where symbol in \n  (\"' + this.symbol + '\")'; \n  let env = 'store://datatables.org/alltableswithkeys'; \n  let params = new URLSearchParams(); \n  params.set('q', searchTerm); // the user's search value \n  params.set('format', 'json'); \n  params.set('env', env); \n  params.set('callback', 'JSONP_CALLBACK'); \n  this.quote = this.jsonp.get(url, { search: params }) \n  .map(( res: Response) => res.json()); \n};  \n\n```", "```ts\nhttps://query.yahooapis.com/... & &callback=__ng_jsonp__.__req1.finished\n\n```", "```ts\n__ng_jsonp__.__req1.finished({\"query\"  ...});\n\n```", "```ts\nchildren: [ \n  {path: '', pathMatch: 'full', redirectTo: 'workouts'}, \n **{path: 'workouts/workout-not-found', component: WorkoutsComponent'},** \n  {path: 'workouts', component: 'WorkoutsComponent'}, \n   *** other child routes *** \n  }, \n]\n\n```", "```ts\n.do(workoutExists => {\n  **if (!workoutExists)  this.router.navigate(['/builder/workouts/\n  workout-not-found']);** \n}) \n\n```", "```ts\npublic workoutList:Array<WorkoutPlan> = []; \n**public notFound:boolean = false;** \nprivate subscription:any;\n\n```", "```ts\nngOnInit() {\n  **if(this.route.snapshot.url[1] && this.route.snapshot.url[1].path === \n  'workout-not-found') this.notFound = true;** \n  this.subscription = this.workoutService.getWorkouts() \n  .subscribe( \n    workoutList => this.workoutList = workoutList, \n    (err:any) => console.error(err) \n  ); \n}\n\n```", "```ts\n<div *ngIf=\"notFound\" class=\"not-found-msgbox\">Could not load the specific workout!</div>\n\n```"]