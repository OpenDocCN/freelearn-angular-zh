["```ts\nexport const routes: Routes = [ \n  ... \n{ path: 'builder', component: WorkoutBuilderComponent }, \n  ... \n]; \n\n```", "```ts\n<a [routerLink]=\"['/builder']\"> \n  <span>Create a Workout</span> \n  <span class=\"glyphicon glyphicon-plus\"></span> \n</a> \n\n```", "```ts\n<div class=\"row\"> \n    <div class=\"col-sm-3\"></div> \n    <div class=\"col-sm-6\"> \n        <h1 class=\"text-center\">Workout Builder</h1> \n    </div> \n    <div class=\"col-sm-3\"></div> \n</div> \n\n```", "```ts\n<div class=\"container body-content app-container\"> \n    <router-outlet></router-outlet> \n</div>` \n\n```", "```ts\nimport { NgModule }      from '@angular/core'; \nimport { CommonModule } from '@angular/common'; \n\nimport { WorkoutBuilderComponent } from \"./workout-builder.component\"; \n\n@NgModule({ \n    imports: [CommonModule], \n    declarations: [ \n        WorkoutBuilderComponent, \n    ], \n    exports: [WorkoutBuilderComponent], \n}) \nexport class WorkoutBuilderModule { }\n\n```", "```ts\n  ... \n@NgModule({ \n  imports: [ \n  ... \n **WorkoutBuilderModule],** \n  ... \n\n```", "```ts\nimport { ModuleWithProviders } from '@angular/core'; \nimport { Routes, RouterModule } from '@angular/router'; \n\nimport { WorkoutBuilderComponent}  from \"./workout-builder.component\"; \nimport { ExerciseComponent} from './exercise/exercise.component'; \nimport { ExercisesComponent} from './exercises/exercises.component'; \nimport { WorkoutComponent} from './workout/workout.component'; \nimport { WorkoutsComponent} from './workouts/workouts.component'; \n\n```", "```ts\nexport const workoutBuilderRoutes: Routes = [ \n    { \n        path: 'builder', \n        component: WorkoutBuilderComponent, \n        children: [ \n             {path:'', pathMatch: 'full', redirectTo: 'workouts'}, \n             {path:'workouts', component: WorkoutsComponent }, \n             {path:'workout/new',  component: WorkoutComponent }, \n             {path:'workout/:id', component: WorkoutComponent }, \n             {path:'exercises', component: ExercisesComponent}, \n             {path:'exercise/new', component: ExerciseComponent }, \n             {path:'exercise/:id', component: ExerciseComponent } \n        ] \n    } \n]; \n\n```", "```ts\n{path:'', pathMatch: 'full', redirectTo: 'workouts'}, \n\n```", "```ts\nexport const workoutBuilderRouting: ModuleWithProviders = RouterModule.forChild(workoutBuilderRoutes);\n\n```", "```ts\n        @Component({ \n            template: `<div class=\"navbar navbar-default \n                       navbar-fixed-top second-top-nav\"> \n                  <sub-nav></sub-nav> \n               </div> \n               <div class=\"container body-content app-container\"> \n                  <router-outlet></router-outlet> \n               </div>` \n        }) \n\n```", "```ts\nimport { workoutBuilderRouting } from './workout-builder.routes'; \n\n```", "```ts\n@NgModule({ \n    imports: [ \n        CommonModule, \n **workoutBuilderRouting** \n    ], \n    declarations: [ \n       WorkoutBuilderComponent,\n       **WorkoutComponent,**\n **WorkoutsComponent,**\n **ExerciseComponent,**\n **ExercisesComponent,**\n **SubNavComponent,**\n **LeftNavExercisesComponent,**\n **LeftNavMainComponent**\n       ],\n    exports: [WorkoutBuilderComponent], \n}) \n\n```", "```ts\nconst workoutBuilderRoutes: Routes = [ \n  { \n    path: 'builder', \n    loadChildren: 'dist/components/workout-builder/workout-builder.module#Workout-BuilderModule' \n  } \n]; \n\n```", "```ts\ncomponent:  file path + # + component name \n\n```", "```ts\nexport const routes: Routes = [ \n  { path: 'start', component: StartComponent }, \n  { path: 'workout', component: WorkoutContainerCompnent }, \n  { path: 'finish', component: FinishComponent }, \n  { path: 'history', component: WorkoutHistoryComponent }, \n **...workoutBuilderRoutes,** \n  { path: '**', redirectTo: '/start' } \n]; \n\n```", "```ts\nexport const workoutBuilderRoutes: Routes = [ \n    { \n **path: '',** \n. . . \n    } \n]; \n\n```", "```ts\n<div> \n    <a [routerLink]=\"['/builder/workouts']\" class=\"btn btn-primary\"> \n        <span class=\"glyphicon glyphicon-home\"></span> Home \n    </a> \n    <a [routerLink]=\"['/builder/workout/new']\" class=\"btn btn-primary\"> \n        <span class=\"glyphicon glyphicon-plus\"></span> New Workout \n    </a> \n    <a [routerLink]=\"['/builder/exercise/new']\" class=\"btn btn-primary\"> \n        <span class=\"glyphicon glyphicon-plus\"></span> New Exercise \n    </a> \n</div> \n\n```", "```ts\ndiv class=\"container-fluid\"> \n    <div id=\"content-container\" class=\"row\"> \n **<left-nav-main></left-nav-main>** \n        <h1 class=\"text-center\">Workouts</h1> \n    </div> \n</div> \n\n```", "```ts\n<div class=\"col-sm-2 left-nav-bar\"> \n    <div class=\"list-group\"> \n        <a [routerLink]=\"['/builder/workouts']\" class=\"list-group-item list-group-item-info\">Workouts</a> \n        <a [routerLink]=\"['/builder/exercises']\" class=\"list-group-item list-group-item-info\">Exercises</a> \n    </div> \n</div> \n\n```", "```ts\n<div class=\"col-sm-2 left-nav-bar\"> \n    <h3>Exercises</h3> \n</div> \n\n```", "```ts\nimport {Injectable} from '@angular/core'; \nimport {ExercisePlan} from './model'; \nimport {WorkoutPlan} from './model'; \nimport {Exercise} from \"./model\"; \n\n@Injectable() \nexport class WorkoutService { \n    workouts: Array<WorkoutPlan> = []; \n    exercises: Array<Exercise> = []; \n\n    constructor() { \n        this.setupInitialExercises(); \n        this.setupInitialWorkouts(); \n    } \n\n    getExercises(){ \n        return this.exercises; \n    } \n\n    getWorkouts(){ \n        return this.workouts; \n    } \n    setupInitialExercises(){ \n     // implementation of in-memory store. \n    } \n\n    setupInitialWorkouts(){ \n     // implementation of in-memory store. \n    } \n}} \n\n```", "```ts\n---- other imports ---- \n**import { WorkoutService } from \"./workout-service\";** \n\n@NgModule({ \n    imports: [], \n    declarations: [], \n    providers: [ \n        LocalStorage, \n        WorkoutHistoryTracker, \n **WorkoutService],** \n}) \n\n```", "```ts\nimport { Component, OnInit} from '@angular/core'; \nimport { Router } from '@angular/router'; \n\nimport { WorkoutPlan } from \"../../../services/model\"; \nimport { WorkoutService } from \"../../../services/workout-service\"; \n\n```", "```ts\nexport class WorkoutsComponent implements OnInit { \n    workoutList:Array<WorkoutPlan> = []; \n\n    constructor( \n        public router:Router, \n        public workoutService:WorkoutService) {} \n\n    ngOnInit() { \n        this.workoutList = this.workoutService.getWorkouts(); \n    } \n\n    onSelect(workout: WorkoutPlan) { \n        this.router.navigate( ['./builder/workout', workout.name] ); \n    } \n} \n\n```", "```ts\n<div class=\"container-fluid\">\n\u00a0\u00a0<div id=\"content-container\" class=\"row\">\n\u00a0\u00a0\u00a0 <left-nav-main></left-nav-main>\n\u00a0\u00a0\u00a0\u00a0<h1 class=\"text-center\">Workouts</h1>\n\u00a0\u00a0\u00a0\u00a0**<div class=\"workouts-container\">\n\u00a0\u00a0\u00a0\u00a0\u00a0 <div *ngFor=\"let workout of workoutList|orderBy:'title'\"\n       class=\"workout tile\" (click)=\"onSelect(workout)\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"title\">{{workout.title}}</div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"stats\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  <span class=\"duration\" >\n           <span class=\"glyphicon glyphicon-time\"></span> - \n           {{workout.totalWorkoutDuration()|secondsToTime}}</span>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span class=\"length pull-right\" >\n           <span class=\"glyphicon glyphicon-th-list\">\n           </span> - {{workout.exercises.length}}</span>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 </div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 </div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 </div>\n\u00a0\u00a0\u00a0 </div>** </div>\n\n```", "```ts\n onSelect(workout: WorkoutPlan) { \n     this.router.navigate( ['./builder/workout', workout.name] ); \n }  \n\n```", "```ts\nproviders: [ \n **WorkoutBuilderService,** \n    . . . \n] \n\n```", "```ts\nimport { WorkoutPlan, Exercise } from '../../../services/model'; \nimport { WorkoutService } from \"../../../services/workout-service\"; \n\n```", "```ts\nconstructor(public workoutService:WorkoutService){} \n\n```", "```ts\nstartBuilding(name: string){ \n    if(name){ \n        this.buildingWorkout = this.workoutService.getWorkout(name) \n        this.newWorkout = false; \n    }else{ \n        this.buildingWorkout = new WorkoutPlan(\"\", \"\", 30, []); \n        this.newWorkout = true; \n    } \n    return this.buildingWorkout; \n} \n\n```", "```ts\nconstructor( \n    public workoutService:WorkoutService, \n **public workoutBuilderService:WorkoutBuilderService) {}** \n. . . \naddExercise(exercise:Exercise) { \n **this.workoutBuilderService.addExercise(new ExercisePlan(exercise, 30));** \n} \n\n```", "```ts\n onSelect(workout: WorkoutPlan) { \n     this.router.navigate( ['./builder/workout', workout.name] ); \n }  \n\n```", "```ts\nimport { Injectable } from '@angular/core'; \nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router'; \n\nimport { WorkoutPlan } from \"../../../services/model\"; \nimport { WorkoutService } from \"../../../services/workout-service\"; \n\n@Injectable() \nexport class WorkoutGuard implements CanActivate { \n    publicworkout: WorkoutPlan; \n\n    constructor( \n        public workoutService: WorkoutService, \n        public router: Router) {} \n\n    canActivate( \n        route: ActivatedRouteSnapshot, \n        state: RouterStateSnapshot \n    ) { \n        this.workout = this.workoutService.getWorkout(route.params['id']); \n        if(this.workout){ return true; } \n        this.router.navigate(['/builder/workouts']); \n        return false; \n    } \n}  \n\n```", "```ts\nexport const workoutBuilderRoutes: Routes = [ \n    { \n        path: '', \n        component: WorkoutBuilderComponent, \n        children: [ \n             {path:'', pathMatch: 'full', redirectTo: 'workouts'}, \n             {path:'workouts', component: WorkoutsComponent }, \n             {path:'workout/new',  component: WorkoutComponent }, \n **{path:'workout/:id', component: WorkoutComponent, \n              canActivate: [WorkoutGuard] },** \n             {path:'exercises', component: ExercisesComponent}, \n             {path:'exercise/new', component: ExerciseComponent }, \n             {path:'exercise/:id', component: ExerciseComponent } \n        ] \n    } \n]; \n\n```", "```ts\n    constructor( \n    public route: ActivatedRoute, \n    public workoutBuilderService:WorkoutBuilderService){ } \n\n```", "```ts\nngOnInit() { \n    this.sub = this.route.params.subscribe(params => { \n        let workoutName = params['id']; \n        if (!workoutName) { \n            workoutName = \"\"; \n        } \n        this.workout = this.workoutBuilderService.startBuilding(\n        workoutName); \n    }); \n} \n\n```", "```ts\n<div *ngFor=\"let exercisePlan of workout.exercises; let i=index\" class=\"exercise-item\"> \n\n```", "```ts\n  var ngPackageNames = [ \n    'common', \n    'compiler', \n    'core', \n **'forms',** \n    'http', \n    'platform-browser', \n    'platform-browser-dynamic', \n    'router', \n    'testing' \n  ]; \n\n```", "```ts\n@NgModule({ \n    imports: [ \n        CommonModule, \n **FormsModule,** \n        SharedModule, \n        workoutBuilderRouting \n    ], \n\n```", "```ts\n<form #f=\"ngForm\" class=\"row\" name=\"formWorkout\" (ngSubmit)=\"save(f.form)\" novalidate>. . . \n</form> \n\n```", "```ts\n@Injectable() \nexport class WorkoutPlan { \n  constructor( \n    public name: string, \n    public title: string, \n    public restBetweenExercise: number, \n    public exercises: ExercisePlan[], \n    public description?: string) { \n  } \ntotalWorkoutDuration(): number{ \n . . . . . . \n} \n\n```", "```ts\n@Injectable() \nexport class ExercisePlan { \n  constructor(public exercise: Exercise, public duration: any) { \n  } \n} \n\n```", "```ts\n<input type=\"text\" name=\"workoutName\" class=\"form-control\" id=\"workout-name\" placeholder=\"Enter workout name. Must be unique.\" [(ngModel)]=\"workout.name\"> \n\n```", "```ts\n<div class=\"pull-right\" (click)=\"removeExercise(exercisePlan)\"><span class=\"glyphicon glyphicon-trash\"></span></div> \n\n```", "```ts\n<textarea name=\"description\" . . . [(ngModel)]=\"workout.description\"></textarea> \n\n```", "```ts\n<input type=\"text\". . . [(ngModel)]=\"workout.name\">{{workout.name}} \n\n```", "```ts\n<select . . . name=\"duration\" [(ngModel)]=\"exercisePlan.duration\"> \n    <option *ngFor=\"let duration of durations\" [value]=\"duration.value\">{{duration.title}}</option> \n</select> \n\n```", "```ts\n [{ title: \"15 seconds\", value: 15 }, \n  { title: \"30 seconds\", value: 30 }, ...] \n\n```", "```ts\n<input type=\"text\" name=\"workoutName\" #name=\"ngModel\" class=\"form-control\" id=\"workout-name\" placeholder=\"Enter workout name. Must be unique.\" [(ngModel)]=\"workout.name\" required> \n\n```", "```ts\n<input type=\"text\" name=\"workoutName\" #name=\"ngModel\" class=\"form-control\" id=\"workout-name\" placeholder=\"Enter workout name. Must be unique.\" [(ngModel)]=\"workout.name\" required #spy> \n\n```", "```ts\n<label>{{spy.className}}</label> \n\n```", "```ts\ninput.ng-invalid {  border:2px solid red; } \n\n```", "```ts\n<input type=\"text\" name=\"workoutName\" #name=\"ngModel\" class=\"form-control\" id=\"workout-name\" placeholder=\"Enter workout name. Must be unique.\" [(ngModel)]=\"workout.name\" required> \n\n```", "```ts\n<label *ngIf=\"name.control.hasError('required') && (name.touched)\" class=\"alert alert-danger validation-message\">Name is required</label>  \n\n```", "```ts\n<input type=\"text\" . . . minlength=\"5\" maxlength=\"20\" required> \n\n```", "```ts\n<label *ngIf=\"(title.control.hasError('minlength') || title.control.hasError('maxlength')) && workout.title.length > 0\" class=\"alert alert-danger validation-message\">Title should be between 5 and 20 characters long.</label>  \n\n```", "```ts\n<label *ngIf=\"title.control.hasError('required')\" class=\"alert alert-danger validation-message\">Title is required.</label>\n\n```", "```ts\n<div *ngIf=\"title.touched\"> \n  . . . [the two validators] . . . \n</div> \n\n```", "```ts\n<input type=\"hidden\" name=\"exerciseCount\" #exerciseCount=\"ngModel\" ngControl=\"exerciseCount\" class=\"form-control\" id=\"exercise-count\" [(ngModel)]=\"workout.exercises.length\" pattern=\"[1-9][0-9]*\"> \n\n```", "```ts\n<label *ngIf=\"exerciseCount.control.hasError('pattern')\" class=\"alert alert-danger extended-validation-message\">The workout should have at least one exercise!</label>  \n\n```", "```ts\nremoveTouched: boolean = false; \n\n```", "```ts\nremoveExercise(exercisePlan: ExercisePlan) { \n    this.removeTouched = true; \n    this.workoutBuilderService.removeExercise(exercisePlan); \n} \n\n```", "```ts\n<label *ngIf=\"exerciseCount.control.hasError('pattern') && (removeTouched)\" \n\n```", "```ts\naddWorkout(workout: WorkoutPlan){ \n    if (workout.name){ \n        this.workouts.push(workout); \n        return workout; \n    } \n} \n\nupdateWorkout(workout: WorkoutPlan){ \n    for (var i = 0; i < this.workouts.length; i++) { \n        if (this.workouts[i].name === workout.name) { \n            this.workouts[i] = workout; \n            break; \n        } \n    } \n} \n\n```", "```ts\nsave(){ \n    let workout = this.newWorkout ? \n        this._workoutService.addWorkout(this.buildingWorkout) : \n        this._workoutService.updateWorkout(this.buildingWorkout); \n    this.newWorkout = false; \n    return workout; \n} \n\n```", "```ts\nsave(formWorkout:any){ \n    if (!formWorkout.valid) return; \n    this.workoutBuilderService.save(); \n    this.router.navigate(['/builder/workouts']); \n}  \n\n```", "```ts\n*ngIf=\"name.control?.hasError('required') && name.touched\"\n```", "```ts\nsubmitted: boolean = false;\n```", "```ts\nsave(formWorkout){ \n **this.submitted = true;** \n    if (!formWorkout.valid) return; \n    this._workoutBuilderService.save(); \n    this.router.navigate(['/builder/workouts']); \n} \n\n```", "```ts\n*ngIf=\"name.control.hasError('required') && (name.touched || submitted)\"   \n\n```", "```ts\nimport { FormsModule, ReactiveFormsModule }   from '@angular/forms'; \n ... \n@NgModule({ \n    imports: [ \n        CommonModule, \n        FormsModule, \n **ReactiveFormsModule,** \n        SharedModule, \n        workoutBuilderRouting \n    ], \n\n```", "```ts\nimport { ExerciseBuilderService } from \"./builder-services/exercise-builder-service\"; \n\n```", "```ts\n@NgModule({ \n   . . . \n    providers: [ \n **ExerciseBuilderService,** \n        ExerciseGuard, \n        WorkoutBuilderService, \n        WorkoutGuard \n    ] \n}) \n\n```", "```ts\nimport { Validators, FormArray, FormGroup, FormControl, FormBuilder } from '@angular/forms'; \n\n```", "```ts\nconstructor( \n    public route: ActivatedRoute, \n    public router: Router, \n    public exerciseBuilderService:ExerciseBuilderService, \n    public formBuilder: FormBuilder \n){} \n\n```", "```ts\nngOnInit():any{ \n    this.sub = this.route.params.subscribe(params => { \n        let exerciseName = params['id']; \n        if (exerciseName === 'new') { \n            exerciseName = \"\"; \n        } \n        this.exercise = this.exerciseBuilderService.startBuilding(exerciseName); \n    }); \n    this.buildExerciseForm(); \n} \n\n```", "```ts\nbuildExerciseForm(){ \n    this.exerciseForm = this.formBuilder.group({ \n        'name': [this.exercise.name, [Validators.required, AlphaNumericValidator.invalidAlphaNumeric]], \n        'title': [this.exercise.title, Validators.required], \n        'description': [this.exercise.description, Validators.required], \n        'image': [this.exercise.image, Validators.required], \n        'nameSound': [this.exercise.nameSound], \n        'procedure': [this.exercise.procedure], \n        'videos': this.addVideoArray() \n    }) \n}  \n\n```", "```ts\n'name': [this.exercise.name, Validators.required], \n\n```", "```ts\n'videos': this.addVideoArray() \n\n```", "```ts\naddVideoArray(){ \n    if(this.exercise.videos){ \n        this.exercise.videos.forEach((video : any) => { \n            this.videoArray.push(new FormControl(video, Validators.required)); \n        }); \n    } \n    return this.videoArray; \n} \n\n```", "```ts\n<form [formGroup]=\"exerciseForm\" (ngSubmit)=\"onSubmit(exerciseForm)\" novalidate>  \n\n```", "```ts\n<input name=\"name\" formControlName=\"name\" class=\"form-control\" id=\"name\" placeholder=\"Enter exercise name. Must be unique.\">  \n\n```", "```ts\n<label *ngIf=\"exerciseForm.controls.name.hasError('required') && (exerciseForm.controls.name.touched || submitted)\" class=\"alert alert-danger validation-message\">Name is required</label>  \n\n```", "```ts\n'name': [this.exercise.name, Validators.required], \n\n```", "```ts\n<div *ngFor=\"let video of videoArray.controls; let i=index\" class=\"form-group\">\n```", "```ts\n<button type=\"button\" (click)=\"deleteVideo(i)\"  class=\"btn alert-danger pull-right\"> \n    <span class=\"glyphicon glyphicon-trash text-danger\"></span> \n</button>  \n\n```", "```ts\n<input type=\"text\" class=\"form-control\" [formControlName]=\"i\" placeholder=\"Add a related youtube video identified.\"/> \n\n```", "```ts\n<label *ngIf=\"exerciseForm.controls['videos'].controls[i].hasError('required') && (exerciseForm.controls['videos'].controls[i].touched || submitted)\" class=\"alert alert-danger validation-message\">Video identifier is required</label>  \n\n```", "```ts\nonSubmit(formExercise:FormGroup){ \n    this.submitted = true; \n    if (!formExercise.valid) return; \n    this.mapFormValues(formExercise); \n    this.exerciseBuilderService.save(); \n    this.router.navigate(['/builder/exercises']); \n} \n\n```", "```ts\nmapFormValues(form: FormGroup){ \n    this.exercise.name = form.controls['name'].value; \n    this.exercise.title = form.controls['title'].value; \n    this.exercise.description = form.controls['description'].value; \n    this.exercise.image = form.controls['image'].value; \n    this.exercise.nameSound = form.controls['nameSound'].value; \n    this.exercise.procedure = form.controls['procedure'].value; \n    this.exercise.videos = form.controls['videos'].value; \n} \n\n```", "```ts\nexport class AlphaNumericValidator { \n    static invalidAlphaNumeric(control: FormControl):{ [key:string]:boolean } { \n        if ( control.value.length && !control.value.match(/^[a-z0-9]+$/i) ){ \n            return {invalidAlphaNumeric: true }; \n        } \n        return null; \n    } \n} \n\n```", "```ts\nimport {AlphaNumericValidator} from \"./alphanumeric-validator\"; \n\n```", "```ts\nbuildExerciseForm(){ \n    this.exerciseForm = this._formBuilder.group({ \n'name': [this.exercise.name, [Validators.required, AlphaNumericValidator.invalidAlphaNumeric]], \n  . . . [other form controls] . . . \n    }); \n} \n\n```", "```ts\n<label *ngIf=\"exerciseForm.controls.name.hasError('invalidAlphaNumeric') && (exerciseForm.controls.name.touched || submitted)\" class=\"alert alert-danger validation-message\">Name must be alphanumeric</label>  \n\n```"]