["```ts\nsrc/app/user/user/user.ts\nimport { Role } from '../../auth/role.enum'\n\nexport interface IUser {\n  id: string\n  email: string\n  name: {\n    first: string\n    middle: string\n    last: string\n  }\n  picture: string\n  role: Role\n  userStatus: boolean\n  dateOfBirth: Date\n  address: {\n    line1: string\n    line2: string\n    city: string\n    state: string\n    zip: string\n  }\n  phones: IPhone[]\n}\n\nexport interface IPhone {\n  type: string\n  number: string\n  id: number\n}\n\n```", "```ts\nexport class User implements IUser {\n  constructor(\n    public id = '',\n    public email = '',\n    public name = { first: '', middle: '', last: '' },\n    public picture = '',\n    public role = Role.None,\n    public dateOfBirth = null,\n    public userStatus = false,\n    public address = {\n      line1: '',\n      line2: '',\n      city: '',\n      state: '',\n      zip: '',\n    },\n    public phones = []\n  ) {}\n\n  static BuildUser(user: IUser) {\n    return new User(\n      user.id,\n      user.email,\n      user.name,\n      user.picture,\n      user.role,\n      user.dateOfBirth,\n      user.userStatus,\n      user.address,\n      user.phones\n    )\n  }\n}\n```", "```ts\nsrc/app/user/user/user.ts  \nget fullName() {\n  return `${this.name.first} ${this.name.middle} ${this.name.last}`\n}\n```", "```ts\npackage.json\n\"mock:standalone\": \"docker run -p 3000:3000 -t duluca/lemon-mart-swagger-server\",\n```", "```ts\nsrc/environments/environment.ts\nexport const environment = {\n  production: false,\n  baseUrl: 'http://localhost:3000'\n}\n```", "```ts\nsrc/app/user/user/user.service.ts\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService extends CacheService {\n  currentUser = new BehaviorSubject<IUser>(this.getItem('user') || new User())\n  private currentAuthStatus: IAuthStatus\n  constructor(private httpClient: HttpClient, private authService: AuthService) {\n    super()\n    this.currentUser.subscribe(user => this.setItem('user', user))\n    this.authService.authStatus.subscribe(\n      authStatus => (this.currentAuthStatus = authStatus)\n    )\n  }\n\n  getCurrentUser(): Observable<IUser> {\n    const userObservable = this.getUser(this.currentAuthStatus.userId).pipe(\n      catchError(transformError)\n    )\n    userObservable.subscribe(\n      user => this.currentUser.next(user),\n      err => Observable.throw(err)\n    )\n    return userObservable\n  }\n\n```", "```ts\n  getUser(id): Observable<IUser> {\n    return this.httpClient.get<IUser>(`${environment.baseUrl}/v1/user/${id}`)\n  }\n\n  updateUser(user: IUser): Observable<IUser> {\n    this.setItem('draft-user', user) // cache user data in case of errors\n    const updateResponse = this.httpClient\n      .put<IUser>(`${environment.baseUrl}/v1/user/${user.id || 0}`, user)\n      .pipe(catchError(transformError))\n\n    updateResponse.subscribe(\n      res => {\n        this.currentUser.next(res)\n        this.removeItem('draft-user')\n      },\n      err => Observable.throw(err)\n    )\n\n    return updateResponse\n  }\n}\n```", "```ts\nsrc/app/user/profile/data.ts\nexport interface IUSState {\n  code: string\n  name: string\n}\n\nexport function USStateFilter(value: string): IUSState[] {\n  return USStates.filter(state => {\n    return (\n      (state.code.length === 2 && state.code.toLowerCase() === value.toLowerCase()) ||\n      state.name.toLowerCase().indexOf(value.toLowerCase()) === 0\n    )\n  })\n}\n\nexport enum PhoneType {\n  Mobile,\n  Home,\n  Work,\n}\n\nconst USStates = [\n  { code: 'AK', name: 'Alaska' },\n  { code: 'AL', name: 'Alabama' },\n  { code: 'AR', name: 'Arkansas' },\n  { code: 'AS', name: 'American Samoa' },\n  { code: 'AZ', name: 'Arizona' },\n  { code: 'CA', name: 'California' },\n  { code: 'CO', name: 'Colorado' },\n  { code: 'CT', name: 'Connecticut' },\n  { code: 'DC', name: 'District of Columbia' },\n  { code: 'DE', name: 'Delaware' },\n  { code: 'FL', name: 'Florida' },\n  { code: 'GA', name: 'Georgia' },\n  { code: 'GU', name: 'Guam' },\n  { code: 'HI', name: 'Hawaii' },\n  { code: 'IA', name: 'Iowa' },\n  { code: 'ID', name: 'Idaho' },\n  { code: 'IL', name: 'Illinois' },\n  { code: 'IN', name: 'Indiana' },\n  { code: 'KS', name: 'Kansas' },\n  { code: 'KY', name: 'Kentucky' },\n  { code: 'LA', name: 'Louisiana' },\n  { code: 'MA', name: 'Massachusetts' },\n  { code: 'MD', name: 'Maryland' },\n  { code: 'ME', name: 'Maine' },\n  { code: 'MI', name: 'Michigan' },\n  { code: 'MN', name: 'Minnesota' },\n  { code: 'MO', name: 'Missouri' },\n  { code: 'MS', name: 'Mississippi' },\n  { code: 'MT', name: 'Montana' },\n  { code: 'NC', name: 'North Carolina' },\n  { code: 'ND', name: 'North Dakota' },\n  { code: 'NE', name: 'Nebraska' },\n  { code: 'NH', name: 'New Hampshire' },\n  { code: 'NJ', name: 'New Jersey' },\n  { code: 'NM', name: 'New Mexico' },\n  { code: 'NV', name: 'Nevada' },\n  { code: 'NY', name: 'New York' },\n  { code: 'OH', name: 'Ohio' },\n  { code: 'OK', name: 'Oklahoma' },\n  { code: 'OR', name: 'Oregon' },\n  { code: 'PA', name: 'Pennsylvania' },\n  { code: 'PR', name: 'Puerto Rico' },\n  { code: 'RI', name: 'Rhode Island' },\n  { code: 'SC', name: 'South Carolina' },\n  { code: 'SD', name: 'South Dakota' },\n  { code: 'TN', name: 'Tennessee' },\n  { code: 'TX', name: 'Texas' },\n  { code: 'UT', name: 'Utah' },\n  { code: 'VA', name: 'Virginia' },\n  { code: 'VI', name: 'Virgin Islands' },\n  { code: 'VT', name: 'Vermont' },\n  { code: 'WA', name: 'Washington' },\n  { code: 'WI', name: 'Wisconsin' },\n  { code: 'WV', name: 'West Virginia' },\n  { code: 'WY', name: 'Wyoming' },\n]\n\n```", "```ts\n$ npm i ts-enum-util\n```", "```ts\nsrc/app/common/validations.ts\n...\n\nexport const OptionalTextValidation = [Validators.minLength(2), Validators.maxLength(50)]\nexport const RequiredTextValidation = OptionalTextValidation.concat([Validators.required])\nexport const OneCharValidation = [Validators.minLength(1), Validators.maxLength(1)]\nexport const BirthDateValidation = [\n  Validators.required,\n  Validators.min(new Date().getFullYear() - 100),\n  Validators.max(new Date().getFullYear()),\n]\nexport const USAZipCodeValidation = [\n  Validators.required,\n  Validators.pattern(/^\\d{5}(?:[-\\s]\\d{4})?$/),\n]\nexport const USAPhoneNumberValidation = [\n  Validators.required,\n  Validators.pattern(/^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$/),\n]\n```", "```ts\nsrc/app/user/profile/profile.component.ts\nimport { Role as UserRole } from '../../auth/role.enum'\nimport { $enum } from 'ts-enum-util'\n...\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css'],\n})\nexport class ProfileComponent implements OnInit {\n  Role = UserRole\n  PhoneTypes = $enum(PhoneType).getKeys()\n  userForm: FormGroup\n  states: Observable<IUSState[]>\n  userError = ''\n  currentUserRole = this.Role.None\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit() {\n    this.authService.authStatus.subscribe(\n      authStatus => (this.currentUserRole = authStatus.userRole)\n    )\n\n    this.userService.getCurrentUser().subscribe(user => {\n      this.buildUserForm(user)\n    })\n\n    this.buildUserForm()\n  }\n  ...\n}\n```", "```ts\nsrc/app/user/profile/profile.component.ts\n...\n  buildUserForm(user?: IUser) {\n    this.userForm = this.formBuilder.group({\n      email: [\n        {\n          value: (user && user.email) || '',\n          disabled: this.currentUserRole !== this.Role.Manager,\n        },\n        EmailValidation,\n      ],\n      name: this.formBuilder.group({\n        first: [(user && user.name.first) || '', RequiredTextValidation],\n        middle: [(user && user.name.middle) || '', OneCharValidation],\n        last: [(user && user.name.last) || '', RequiredTextValidation],\n      }),\n      role: [\n        {\n          value: (user && user.role) || '',\n          disabled: this.currentUserRole !== this.Role.Manager,\n        },\n        [Validators.required],\n      ],\n      dateOfBirth: [(user && user.dateOfBirth) || '', BirthDateValidation],\n      address: this.formBuilder.group({\n        line1: [\n          (user && user.address && user.address.line1) || '',\n          RequiredTextValidation,\n        ],\n        line2: [\n          (user && user.address && user.address.line2) || '',\n          OptionalTextValidation,\n        ],\n        city: [(user && user.address && user.address.city) || '', RequiredTextValidation],\n        state: [\n          (user && user.address && user.address.state) || '',\n          RequiredTextValidation,\n        ],\n        zip: [(user && user.address && user.address.zip) || '', USAZipCodeValidation],\n      }),\n      ...\n    })\n    ...\n  }\n...\n```", "```ts\nMatAutocompleteModule,\nMatDatepickerModule,\nMatDividerModule,\nMatLineModule,\nMatNativeDateModule,\nMatRadioModule,\nMatSelectModule,\nMatStepperModule,\n```", "```ts\nsrc/app/user/profile/profile.component.html <mat-toolbar color=\"accent\"> <h5>User Profile</h5>\n</mat-toolbar>\n\n<mat-horizontal-stepper #stepper=\"matHorizontalStepper\">\n  <mat-step [stepControl]=\"userForm\">\n    <form [formGroup]=\"userForm\">\n      <ng-template matStepLabel>Account Information</ng-template>\n      <div class=\"stepContent\">\n        <div fxLayout=\"row\" fxLayout.lt-sm=\"column\" [formGroup]=\"userForm.get('name')\" fxLayoutGap=\"10px\">\n          <mat-form-field fxFlex=\"40%\">\n            <input matInput placeholder=\"First Name\" aria-label=\"First Name\" formControlName=\"first\">\n            <mat-error *ngIf=\"userForm.get('name').get('first').hasError('required')\">\n              First Name is required\n            </mat-error>\n            <mat-error *ngIf=\"userForm.get('name').get('first').hasError('minLength')\">\n              Must be at least 2 characters\n            </mat-error>\n            <mat-error *ngIf=\"userForm.get('name').get('first').hasError('maxLength')\">\n              Can't exceed 50 characters\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex=\"20%\">\n            <input matInput placeholder=\"MI\" aria-label=\"Middle Initial\" formControlName=\"middle\">\n            <mat-error *ngIf=\"userForm.get('name').get('middle').invalid\">\n              Only inital\n            </mat-error>\n          </mat-form-field>\n          <mat-form-field fxFlex=\"40%\">\n            <input matInput placeholder=\"Last Name\" aria-label=\"Last Name\" formControlName=\"last\">\n            <mat-error *ngIf=\"userForm.get('name').get('last').hasError('required')\">\n              Last Name is required\n            </mat-error>\n            <mat-error *ngIf=\"userForm.get('name').get('last').hasError('minLength')\">\n              Must be at least 2 characters\n            </mat-error>\n            <mat-error *ngIf=\"userForm.get('name').get('last').hasError('maxLength')\">\n              Can't exceed 50 characters\n            </mat-error>\n          </mat-form-field>\n        </div>\n       ...\n      </div>\n    </form>\n   </mat-step>\n...\n</mat-horizontal-stepper>\n```", "```ts\nsrc/app/user/profile/profile.component.ts ...\nget dateOfBirth() {\n  return this.userForm.get('dateOfBirth').value || new Date()\n}\n\nget age() {\n  return new Date().getFullYear() - this.dateOfBirth.getFullYear()\n}\n...\n```", "```ts\nsrc/app/user/profile/profile.component ...\n<mat-form-field fxFlex=\"50%\">\n  <input matInput placeholder=\"Date of Birth\" aria-label=\"Date of Birth\" formControlName=\"dateOfBirth\" [matDatepicker]=\"dateOfBirthPicker\">\n  <mat-hint *ngIf=\"userForm.get('dateOfBirth').touched\">{{this.age}} year(s) old</mat-hint>\n  <mat-datepicker-toggle matSuffix [for]=\"dateOfBirthPicker\"></mat-datepicker-toggle>\n  <mat-datepicker #dateOfBirthPicker></mat-datepicker>\n  <mat-error *ngIf=\"userForm.get('dateOfBirth').invalid\">\n    Date must be with the last 100 years\n  </mat-error>\n</mat-form-field>\n...\n```", "```ts\nsrc/app/user/profile/profile.component.ts ...\nthis.states = this.userForm\n  .get('address')\n  .get('state')\n  .valueChanges.pipe(startWith(''), map(value => USStateFilter(value)))\n...\n```", "```ts\nsrc/app/user/profile/profile.component.html ...\n<mat-form-field fxFlex=\"30%\">\n  <input type=\"text\" placeholder=\"State\" aria-label=\"State\" matInput formControlName=\"state\" [matAutocomplete]=\"stateAuto\">\n  <mat-autocomplete #stateAuto=\"matAutocomplete\">\n    <mat-option *ngFor=\"let state of states | async\" [value]=\"state.name\">\n      {{ state.name }}\n    </mat-option>\n  </mat-autocomplete>\n  <mat-error *ngIf=\"userForm.get('address').get('state').hasError('required')\">\n    State is required\n  </mat-error>\n</mat-form-field>\n...\n```", "```ts\nsrc/app/user/profile/profile.component.ts\n...\n  phones: this.formBuilder.array(this.buildPhoneArray(user ? user.phones : [])),\n...\n  private buildPhoneArray(phones: IPhone[]) {\n    const groups = []\n\n    if (!phones || (phones && phones.length === 0)) {\n      groups.push(this.buildPhoneFormControl(1))\n    } else {\n      phones.forEach(p => {\n        groups.push(this.buildPhoneFormControl(p.id, p.type, p.number))\n      })\n    }\n    return groups\n  }\n\n  private buildPhoneFormControl(id, type?: string, number?: string) {\n    return this.formBuilder.group({\n      id: [id],\n      type: [type || '', Validators.required],\n      number: [number || '', USAPhoneNumberValidation],\n    })\n  }\n...\n```", "```ts\nsrc/app/user/profile/profile.component.ts\n...  \n  addPhone() {\n    this.phonesArray.push(\n      this.buildPhoneFormControl(this.userForm.get('phones').value.length + 1)\n    )\n  }\n\n  get phonesArray(): FormArray {\n    return <FormArray>this.userForm.get('phones')\n  }\n...\n```", "```ts\nsrc/app/user/profile/profile.component.html\n...\n<mat-list formArrayName=\"phones\">\n  <h2 mat-subheader>Phone Number(s)</h2>\n  <button mat-button (click)=\"this.addPhone()\">\n    <mat-icon>add</mat-icon>\n    Add Phone\n  </button>\n  <mat-list-item *ngFor=\"let position of this.phonesArray.controls let i=index\" [formGroupName]=\"i\">\n  <mat-form-field fxFlex=\"100px\">\n    <mat-select placeholder=\"Type\" formControlName=\"type\">\n      <mat-option *ngFor=\"let type of this.PhoneTypes\" [value]=\"type\">\n      {{ type }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field fxFlex fxFlexOffset=\"10px\">\n    <input matInput type=\"text\" placeholder=\"Number\" formControlName=\"number\">\n    <mat-error *ngIf=\"this.phonesArray.controls[i].invalid\">\n      A valid phone number is required\n    </mat-error>\n  </mat-form-field>\n  <button fxFlex=\"33px\" mat-icon-button (click)=\"this.phonesArray.removeAt(i)\">\n    <mat-icon>close</mat-icon>\n  </button>\n  </mat-list-item>\n</mat-list>\n...\n```", "```ts\nsrc/app/user/view-user/view-user.component.ts\nimport { Component, OnInit, Input } from '@angular/core'\nimport { IUser, User } from '../user/user'\n\n@Component({\n  selector: 'app-view-user',\n  template: `\n    <mat-card>\n      <mat-card-header>\n        <div mat-card-avatar><mat-icon>account_circle</mat-icon></div>\n        <mat-card-title>{{currentUser.fullName}}</mat-card-title>\n        <mat-card-subtitle>{{currentUser.role}}</mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n        <p><span class=\"mat-input bold\">E-mail</span></p>\n        <p>{{currentUser.email}}</p>\n        <p><span class=\"mat-input bold\">Date of Birth</span></p>\n        <p>{{currentUser.dateOfBirth | date:'mediumDate'}}</p>\n      </mat-card-content>\n      <mat-card-actions *ngIf=\"!this.user\">\n        <button mat-button mat-raised-button>Edit</button>\n      </mat-card-actions>\n    </mat-card>\n  `,\n  styles: [\n    `\n    .bold {\n      font-weight: bold\n    }\n  `,\n  ],\n})\nexport class ViewUserComponent implements OnChanges {\n  @Input() user: IUser\n  currentUser = new User()\n\n  constructor() {}\n\n  ngOnChanges() {\n    if (this.user) {\n      this.currentUser = User.BuildUser(this.user)\n    }\n  }\n}\n```", "```ts\nsrc/app/user/profile/profile.component \n...\nasync save(form: FormGroup) {\n  this.userService\n    .updateUser(form.value)\n    .subscribe(res => this.buildUserForm(res), err => (this.userError = err))\n }\n...\n```", "```ts\nsrc/app/user/profile/profile.component.html\n...\n<mat-step [stepControl]=\"userForm\">\n  <form [formGroup]=\"userForm\" (ngSubmit)=\"save(userForm)\">\n  <ng-template matStepLabel>Review</ng-template>\n  <div class=\"stepContent\">\n    Review and update your user profile.\n    <app-view-user [user]=\"this.userForm.value\"></app-view-user>\n  </div>\n  <div fxLayout=\"row\" class=\"margin-top\">\n    <button mat-button matStepperPrevious color=\"accent\">Back</button>\n    <div class=\"flex-spacer\"></div>\n    <div *ngIf=\"userError\" class=\"mat-caption error\">{{userError}}</div>\n    <button mat-button color=\"warn\" (click)=\"stepper.reset()\">Reset</button>\n    <button mat-raised-button matStepperNext color=\"primary\" type=\"submit\" [disabled]=\"this.userForm.invalid\">Update</button>\n  </div>\n  </form>\n</mat-step>\n...\n```", "```ts\n**src/app/user/user/user.resolve.ts**\nimport { Injectable } from '@angular/core'\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router'\nimport { UserService } from './user.service'\nimport { IUser } from './user'\n\n@Injectable()\nexport class UserResolve implements Resolve<IUser> {\n  constructor(private userService: UserService) {}\n\n  resolve(route: ActivatedRouteSnapshot) {\n    return this.userService.getUser(route.paramMap.get('userId'))\n  }\n} \n```", "```ts\nexample\n{\n  path: 'user',\n  component: ViewUserComponent,\n  resolve: {\n    user: UserResolve,\n  },\n},\n```", "```ts\nexample\n['user', {userId: row.id}]\n```", "```ts\nexample\nthis.route.snapshot.data['user']\n```", "```ts\nsrc/app/user/view-user/view-user.component.ts\n...\nimport { ActivatedRoute } from '@angular/router'\n\nexport class ViewUserComponent implements OnChanges, OnInit {\n  ...\n  constructor(private route: ActivatedRoute) {}\n\n  ngOnInit() {\n    if (this.route.snapshot && this.route.snapshot.data['user']) {\n      this.currentUser = User.BuildUser(this.route.snapshot.data['user'])\n      this.currentUser.dateOfBirth = Date.now() // for data mocking purposes only\n    }\n  }\n  ...\n```", "```ts\nsrc/app/shared-components.module.ts\nimport { NgModule } from '@angular/core'\nimport { ViewUserComponent } from './user/view-user/view-user.component'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { FlexLayoutModule } from '@angular/flex-layout'\nimport { CommonModule } from '@angular/common'\nimport { MaterialModule } from './app-material.module'\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    MaterialModule,\n  ],\n  declarations: [ViewUserComponent],\n  exports: [ViewUserComponent],\n})\nexport class SharedComponentsModule {}\n\n```", "```ts\nsrc/app/manager/user-management/user-manager.component.ts\ntemplate: `\n    <div class=\"horizontal-padding\">\n      <router-outlet name=\"master\"></router-outlet>\n      <div style=\"min-height: 10px\"></div>\n      <router-outlet name=\"detail\"></router-outlet>\n    </div>\n  `\n```", "```ts\nsrc/app/manager/manager-routing.module.ts\n  ...\n      {\n        path: 'users',\n        component: UserManagementComponent,\n        children: [\n          { path: '', component: UserTableComponent, outlet: \n         'master' },\n          {\n            path: 'user',\n            component: ViewUserComponent,\n            outlet: 'detail',\n            resolve: {\n              user: UserResolve,\n            },\n          },\n        ],\n        canActivate: [AuthGuard],\n        canActivateChild: [AuthGuard],\n        data: {\n          expectedRole: Role.Manager,\n        },\n      },\n  ...\n```", "```ts\nsrc/app/manager/user-table/user-table.component.html\n<a mat-button mat-icon-button [routerLink]=\"['/manager/users', { outlets: { detail: ['user', {userId: 'fakeid'}] } }]\" skipLocationChange>\n  <mat-icon>visibility</mat-icon>\n</a>\n```", "```ts\nsrc/app/user/user/user.service.ts\n...\nexport interface IUsers {\n  items: IUser[]\n  total: number\n}\n```", "```ts\nsrc/app/user/user/user.service.ts\n...\ngetUsers(pageSize: number, searchText = '', pagesToSkip = 0): Observable<IUsers> {\n  return this.httpClient.get<IUsers>(`${environment.baseUrl}/v1/users`, {\n    params: {\n      search: searchText,\n      offset: pagesToSkip.toString(),\n      limit: pageSize.toString(),\n    },\n  })\n}\n...\n```", "```ts\nsrc/app/manager/user-table/user-table.component\nimport { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core'\nimport { FormControl } from '@angular/forms'\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material'\nimport { merge, of } from 'rxjs'\nimport { catchError, debounceTime, map, startWith, switchMap } from 'rxjs/operators'\nimport { OptionalTextValidation } from '../../common/validations'\nimport { IUser } from '../../user/user/user'\nimport { UserService } from '../../user/user/user.service'\n\n@Component({\n  selector: 'app-user-table',\n  templateUrl: './user-table.component.html',\n  styleUrls: ['./user-table.component.css'],\n})\nexport class UserTableComponent implements OnInit, AfterViewInit {\n  displayedColumns = ['name', 'email', 'role', 'status', 'id']\n  dataSource = new MatTableDataSource()\n  resultsLength = 0\n  _isLoadingResults = true\n  _hasError = false\n  errorText = ''\n  _skipLoading = false\n\n  search = new FormControl('', OptionalTextValidation)\n\n  @ViewChild(MatPaginator) paginator: MatPaginator\n  @ViewChild(MatSort) sort: MatSort\n\n  constructor(private userService: UserService) {}\n\n  ngOnInit() {}\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator\n    this.dataSource.sort = this.sort\n\n    this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0))\n\n    if (this._skipLoading) {\n      return\n    }\n\n    merge(\n      this.sort.sortChange,\n      this.paginator.page,\n      this.search.valueChanges.pipe(debounceTime(1000))\n    )\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this._isLoadingResults = true\n          return this.userService.getUsers(\n            this.paginator.pageSize,\n            this.search.value,\n            this.paginator.pageIndex\n          )\n        }),\n        map((data: { total: number; items: IUser[] }) => {\n          this._isLoadingResults = false\n          this._hasError = false\n          this.resultsLength = data.total\n\n          return data.items\n        }),\n        catchError(err => {\n          this._isLoadingResults = false\n          this._hasError = true\n          this.errorText = err\n          return of([])\n        })\n      )\n      .subscribe(data => (this.dataSource.data = data))\n  }\n\n  get isLoadingResults() {\n    return this._isLoadingResults\n  }\n\n  get hasError() {\n    return this._hasError\n  }\n}\n\n```", "```ts\nMatTableModule, \nMatSortModule, \nMatPaginatorModule, \nMatProgressSpinnerModule\n```", "```ts\nsrc/app/manager/user-table/user-table.component.html\n<div class=\"filter-row\">\n  <form style=\"margin-bottom: 32px\">\n    <div fxLayout=\"row\">\n      <mat-form-field class=\"full-width\">\n        <mat-icon matPrefix>search</mat-icon>\n        <input matInput placeholder=\"Search\" aria-label=\"Search\" [formControl]=\"search\">\n        <mat-hint>Search by e-mail or name</mat-hint>\n        <mat-error *ngIf=\"search.invalid\">\n          Type more than one character to search\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </form>\n</div>\n<div class=\"mat-elevation-z8\">\n  <div class=\"loading-shade\" *ngIf=\"isLoadingResults\">\n    <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\n    <div class=\"error\" *ngIf=\"hasError\">\n      {{errorText}}\n    </div>\n  </div>\n  <mat-table [dataSource]=\"dataSource\" matSort>\n    <ng-container matColumnDef=\"name\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Name </mat-header-cell>\n      <mat-cell *matCellDef=\"let row\"> {{row.name.first}} {{row.name.last}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"email\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> E-mail </mat-header-cell>\n      <mat-cell *matCellDef=\"let row\"> {{row.email}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"role\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Role </mat-header-cell>\n      <mat-cell *matCellDef=\"let row\"> {{row.role}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"status\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Status </mat-header-cell>\n      <mat-cell *matCellDef=\"let row\"> {{row.status}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"id\">\n      <mat-header-cell *matHeaderCellDef fxLayoutAlign=\"end center\">View Details</mat-header-cell>\n      <mat-cell *matCellDef=\"let row\" fxLayoutAlign=\"end center\" style=\"margin-right: 8px\">\n        <a mat-button mat-icon-button [routerLink]=\"['/manager/users', { outlets: { detail: ['user', {userId: row.id}] } }]\" skipLocationChange>\n          <mat-icon>visibility</mat-icon>\n        </a>\n      </mat-cell>\n    </ng-container>\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\">\n    </mat-row>\n  </mat-table>\n\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator>\n</div>\n\n```", "```ts\nsrc/app/user/user/user.service.ts\nexport interface IUserService {\n  currentUser: BehaviorSubject<IUser>\n  getCurrentUser(): Observable<IUser>\n  getUser(id): Observable<IUser>\n  updateUser(user: IUser): Observable<IUser>\n  getUsers(pageSize: number, searchText: string, pagesToSkip: number): Observable<IUsers>\n}\n...\nexport class UserService extends CacheService implements IUserService {\n```", "```ts\nsrc/app/user/user/user.service.fake.ts\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable, of } from 'rxjs'\n\nimport { IUser, User } from './user'\nimport { IUsers, IUserService } from './user.service'\n\n@Injectable()\nexport class UserServiceFake implements IUserService {\n  currentUser = new BehaviorSubject<IUser>(new User())\n\n  constructor() {}\n\n```", "```ts\n  getCurrentUser(): Observable<IUser> {\n    return of(new User())\n  }\n\n  getUser(id): Observable<IUser> {\n    return of(new User((id = id)))\n  }\n\n  updateUser(user: IUser): Observable<IUser> {\n    return of(user)\n  }\n\n  getUsers(pageSize: number, searchText = '', pagesToSkip = 0): Observable<IUsers> {\n    return of({\n      total: 1,\n      items: [new User()],\n    } as IUsers)\n  }\n}\n```", "```ts\nsrc/app/common/common.testing.ts\nexport const commonTestingProviders: any[] = [\n  ...\n  { provide: UserService, useClass: UserServiceFake },\n]\n```", "```ts\nsrc/app/common/common.testing.ts\nexport const commonTestingModules: any[] = [\n  ...\n  SharedComponentsModule\n]\n```", "```ts\nsrc/app/manager/user-table/user-table.component.spec.ts ...\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserTableComponent)\n    component = fixture.componentInstance\n component.dataSource = new MatTableDataSource()\n component.dataSource.data = [new User()]\n component._skipLoading = true\n    fixture.detectChanges()\n  })\n...\n```", "```ts\nsrc/app/manager/user-management/user-management.component.spec.ts      \nproviders: commonTestingProviders,\nimports: commonTestingModules.concat([ManagerMaterialModule]),\n```"]