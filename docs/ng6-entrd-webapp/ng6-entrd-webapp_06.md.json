["```ts\nsrc/app/app.module.ts\n...\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\n...\n@NgModule({\n  ...\n  imports: [\n    ...\n    FormsModule,\n    ReactiveFormsModule,\n    ...\n```", "```ts\nsrc/app/material.module.ts\nimport {\n  ...\n  MatFormFieldModule,\n  MatInputModule,\n} from '@angular/material'\n...\n@NgModule({\n  imports: [\n    ...\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  exports: [\n    ...\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n})\n```", "```ts\n$ npx ng g c citySearch --module=app.module\n```", "```ts\nsrc/app/city-search/city-search.component.html\n<form>\n  <mat-form-field>\n    <mat-icon matPrefix>search</mat-icon>\n    <input matInput placeholder=\"Enter city or zip\" aria-label=\"City or Zip\" [formControl]=\"search\">\n  </mat-form-field>\n</form>\n```", "```ts\nsrc/app/city-search/city-search.component.ts\nimport { FormControl } from '@angular/forms'\n...\nexport class CitySearchComponent implements OnInit {\n  search = new FormControl()\n  ...\n```", "```ts\nsrc/app/app.component.ts\n...\n  </div>    \n  <div fxLayoutAlign=\"center\">\n    <app-city-search></app-city-search>\n  </div>\n  <div fxLayout=\"row\">\n...\n```", "```ts\napp/src/weather/weather.service.ts  \n  getCurrentWeather(\n    search: string | number,\n    country?: string\n  ): Observable<ICurrentWeather> {\n    let uriParams = ''\n    if (typeof search === 'string') {\n      uriParams = `q=${search}`\n    } else {\n      uriParams = `zip=${search}`\n    }\n\n    if (country) {\n      uriParams = `${uriParams},${country}`\n    }\n\n    return this.getCurrentWeatherHelper(uriParams)\n  }\n```", "```ts\nsrc/app/weather/weather.service.ts  \n  private getCurrentWeatherHelper(uriParams: string): Observable<ICurrentWeather> {\n    return this.httpClient\n      .get<ICurrentWeatherData>(\n        `${environment.baseUrl}api.openweathermap.org/data/2.5/weather?` +\n          `${uriParams}&appid=${environment.appId}`\n      )\n      .pipe(map(data => this.transformToICurrentWeather(data)))\n  }\n```", "```ts\nsrc/app/weather/weather.service.ts    \ngetCurrentWeatherByCoords(coords: Coordinates): Observable<ICurrentWeather> {\n  const uriParams = `lat=${coords.latitude}&lon=${coords.longitude}`\n  return this.getCurrentWeatherHelper(uriParams)\n}\n```", "```ts\nsrc/app/city-search/city-search.component.ts\n...\nexport class CitySearchComponent implements OnInit {\n  search = new FormControl()  \n  constructor(private weatherService: WeatherService) {}\n  ...\n  ngOnInit() {\n    this.search.valueChanges\n      .subscribe(...)\n  } \n```", "```ts\nsrc/app/city-search/city-search.component.ts\nthis.search.valueChanges\n  .subscribe((searchValue: string) => {\n    if (searchValue) {\n      const userInput = searchValue.split(',').map(s => s.trim())\n      this.weatherService.getCurrentWeather(\n        userInput[0],\n        userInput.length > 1 ? userInput[1] : undefined\n      ).subscribe(data => (console.log(data)))\n    }\n  })\n```", "```ts\nsrc/app/city-search/city-search.component.html\n...    \n  <mat-form-field>\n    ...\n    <mat-hint>Specify country code like 'Paris, US'</mat-hint>\n  </mat-form-field>\n...\n```", "```ts\nsrc/app/city-search/city-search.component.ts\nimport { debounceTime } from 'rxjs/operators'\n\n    this.search.valueChanges\n      .pipe(debounceTime(1000))\n      .subscribe(...)\n```", "```ts\nexample\nnew FormControl('Bethesda', { updateOn: 'submit' })\n```", "```ts\nsrc/app/city-search/city-search.component.ts\nimport { FormControl, Validators } from '@angular/forms'\n```", "```ts\nsrc/app/city-search/city-search.component.ts\nsearch = new FormControl('', [Validators.minLength(2)])\n```", "```ts\nsrc/app/city-search/city-search.component.html\n...  \n<form style=\"margin-bottom: 32px\">  \n  <mat-form-field>\n    ...\n    <mat-error *ngIf=\"search.invalid\">\n      Type more than one character to search\n    </mat-error>\n  </mat-form-field>\n</form>\n...\n```", "```ts\nexample\n<mat-error *ngIf=\"search.invalid\">{{getErrorMessage()}}</mat-error>\n\ngetErrorMessage() {\n   return this.search.hasError('minLength') ? 'Type more than one character to search' : '';\n}\n```", "```ts\nsrc/app/city-search/city-search.component.ts\nthis.search.valueChanges.pipe(debounceTime(1000)).subscribe((searchValue: string) => {\n      if (!this.search.invalid) {\n        ...\n```", "```ts\nsrc/app/city-search-tpldriven/city-search-tpldriven.component.html\n  ...\n    <input matInput placeholder=\"Enter city or zip\" aria-label=\"City or Zip\" \n      [(ngModel)]=\"model.search\" (ngModelChange)=\"doSearch($event)\"\n      minlength=\"2\" name=\"search\" #search=\"ngModel\">\n  ...\n    <mat-error *ngIf=\"search.invalid\">\n      Type more than one character to search\n    </mat-error>\n  ...\n\n```", "```ts\nsrc/app/city-search-tpldriven/city-search-tpldriven.component.ts\nimport { NgModel, Validators} from '@angular/forms'\n...\nexport class CitySearchTpldrivenComponent implements OnInit {\n   model = {\n    search: '',\n  }\n  ...\n  doSearch(searchValue) {\n    const userInput = searchValue.split(',').map(s => s.trim())\n    this.weatherService\n      .getCurrentWeather(userInput[0], userInput.length > 1 ? userInput[1] : undefined)\n      .subscribe(data => console.log(data))\n  }\n```", "```ts\nsrc/app/city-search/city-search.component.ts\nimport { Component, Output, EventEmitter } from '@angular/core'\n\nexport class CitySearchComponent implements OnInit {\n  ...\n  @Output() searchEvent = new EventEmitter<string>()\n\n  ...\n  this.search.valueChanges.debounceTime(1000).subscribe((searchValue: string) => {\n      if (!this.search.invalid) {\n        this.searchEvent.emit(this.searchValue)\n      }\n    })\n  ...\n}\n```", "```ts\nsrc/app/app.component.ts\ntemplate: `\n  ...\n    <app-city-search (searchEvent)=\"doSearch($event)\"></app-city-search>\n  ...\n`\n\nexport class AppComponent {\n  currentWeather: ICurrenWeather\n  constructor() { }\n\n  doSearch(searchValue) {\n    const userInput = searchValue.split(',').map(s => s.trim())\n    this.weatherService\n      .getCurrentWeather(userInput[0], userInput.length > 1 ? userInput[1] : undefined)\n      .subscribe(data => this.currentWeather = data)\n  }\n}\n```", "```ts\nsrc/app/current-weather/current-weather.component.ts\nimport { Component, Input } from '@angular/core'\n...\nexport class CurrentWeatherComponent implements OnInit {\n @Input() current: ICurrentWeather\n ...\n}\n```", "```ts\nsrc/app/app.component.ts\ntemplate: `\n  ...\n    <app-current-weather [current]=\"currentWeather\"></app-current-weather>\n  ...\n`\n```", "```ts\nexample\n<app-mini-forecast *ngFor=\"let dailyForecast of forecastArray     \n  [forecast]=\"dailyForecast\">\n</app-mini-forecast>\n```", "```ts\nsrc/app/weather/weather.service.ts\nimport { Subject } from 'rxjs'\n...\nexport class WeatherService implements IWeatherService {\n   currentWeather: Subject<ICurrentWeather>\n   ...\n}\n```", "```ts\nexample\ncurrentWeather.subscribe(data => (this.current = data))\ncurrentWeather.next(newData)\n```", "```ts\napp/src/weather/weather.service.ts\nimport { BehaviorSubject } from 'rxjs'\n...\nexport class WeatherService implements IWeatherService {\n  currentWeather = new BehaviorSubject<ICurrentWeather>({\n    city: '--',\n    country: '--',\n    date: Date.now(),\n    image: '',\n    temperature: 0,\n    description: '',\n  })\n  ...\n}\n```", "```ts\napp/src/current-weather/current-weather.component.ts\n...  \nngOnInit() {\n  this.weatherService.currentWeather.subscribe(data => (this.current = data))\n}\n...\n```", "```ts\napp/src/city-search/city-search.component.ts\n... \nthis.weatherService\n  .getCurrentWeather(\n    userInput[0],\n    userInput.length > 1 ? userInput[1] : undefined\n  )\n  .subscribe(data => this.weatherService.currentWeather.next(data))\n...\n```"]