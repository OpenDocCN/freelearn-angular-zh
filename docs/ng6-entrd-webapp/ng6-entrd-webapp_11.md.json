["```ts\n$ docker stats\nCONTAINER ID  CPU %  MEM USAGE / LIMIT    MEM %  NET I/O         BLOCK I/O  PIDS\n27d431e289c9  0.00%  1.797MiB / 1.952GiB  0.09%  13.7kB / 285kB  0B / 0B       2\n```", "```ts\n$ docker run --name <imageName> -d -p 8080:<internal_port> <imageRepo>\n```", "```ts\n$ npm run docker:debug\n```", "```ts\n$ curl -L http://bit.ly/load-test-bash [](http://bit.ly/load-test-bash) | bash -s 100 \"http://localhost:8080\"\n```", "```ts\npackage.json ...\n\"config\": {\n  \u201cimageRepo\u201d: \u201c000000000000.dkr.ecr.us-east-1.amazonaws.com/lemon-mart\u201d,\n  ...\n}\n```", "```ts\nDNS name:\nlemon-mart-alb-1871778644.us-east-1.elb.amazonaws.com (A Record)\n```", "```ts\nDockerfile \nFROM duluca/minimal-nginx-web-server:1.13.8-alpine\nCOPY dist /var/www\nCMD 'nginx'\n```", "```ts\n\"docker:runHelper\": \"cross-conf-env docker run -e NODE_ENV=local --name $npm_package_config_imageName -d -p $npm_package_config_imagePort:80 $npm_package_config_imageRepo\",\n```", "```ts\n.env\nAWS_ACCESS_KEY_ID=your_own_key_id\nAWS_SECRET_ACCESS_KEY=your_own_secret_key\n```", "```ts\npackage.json\n  ...\n  \"config\": {\n    ...\n    \"awsRegion\": \"us-east-1\",\n    \"awsEcsCluster\": \"fargate-cluster\",\n    \"awsService\": \"lemon-mart-service\"\n  },\n ...\n```", "```ts\npackage.json\n...\n\"scripts\": {\n  ...\n  \"aws:login\": \"run-p -cs aws:login:win aws:login:mac\",\n  \"aws:login:win\": \"cross-conf-env aws ecr get-login --no-include-email --region $npm_package_config_awsRegion > dockerLogin.cmd && call dockerLogin.cmd && del dockerLogin.cmd\",\n \"aws:login:mac\": \"eval $(aws ecr get-login --no-include-email --region $npm_package_config_awsRegion)\"\n}\n```", "```ts\nexample\n$ aws ecr get-login --no-include-email --region us-east-1\ndocker login -u AWS -p eyJwYXl...3ODk1fQ== https://073020584345.dkr.ecr.us-east-1.amazonaws.com\n```", "```ts\npackage.json\n...\n\"scripts\": {\n  ...\n  \"aws:deploy\": \"cross-conf-env docker run --env-file ./.env duluca/ecs-deploy-fargate -c $npm_package_config_awsEcsCluster -n $npm_package_config_awsService -i $npm_package_config_imageRepo:latest -r $npm_package_config_awsRegion --timeout 1000\"\n  }\n...\n```", "```ts\npackage.json\n...\n\"scripts\": {\n  ...\n  \"aws:release\": \"run-s -cs aws:login docker:publish aws:deploy\"\n}\n...\n```", "```ts\n$ npm run docker:debug\n```", "```ts\n $ npm run aws:release\n```"]