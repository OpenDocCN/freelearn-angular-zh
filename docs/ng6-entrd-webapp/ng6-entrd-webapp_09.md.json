["```ts\n$ npx ng g s auth -m app --flat false\n```", "```ts\nsrc/app/app.module.ts\nimport { AuthService } from './auth/auth.service'\n...  \nproviders: [AuthService],\n```", "```ts\nsrc/app/auth/role.enum.ts\nexport enum Role {\n  None = 'none',\n  Clerk = 'clerk',\n  Cashier = 'cashier',\n  Manager = 'manager',\n}\n```", "```ts\n$ npm install jwt-decode fake-jwt-sign\n$ npm install -D @types/jwt-decode\n```", "```ts\nsrc/app/auth/auth.service.ts\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\n\nimport { sign } from 'fake-jwt-sign' // For fakeAuthProvider only\nimport * as decode from 'jwt-decode'\n\nimport { BehaviorSubject, Observable, of, throwError as observableThrowError } from 'rxjs'\nimport { catchError, map } from 'rxjs/operators'\n\nimport { environment } from '../../environments/environment'\nimport { Role } from './role.enum'\n...\n```", "```ts\nsrc/app/auth/auth.service.ts\n...\nexport interface IAuthStatus {\n  isAuthenticated: boolean\n  userRole: Role\n  userId: string\n}\n\ninterface IServerAuthResponse {\n  accessToken: string\n}\n\nconst defaultAuthStatus = { isAuthenticated: false, userRole: Role.None, userId: null }\n...\n```", "```ts\nsrc/app/auth/auth.service.ts ...\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n   private readonly authProvider: (\n    email: string,\n    password: string\n  ) => Observable<IServerAuthResponse>\n\n  authStatus = new BehaviorSubject<IAuthStatus>(defaultAuthStatus)\n\n  constructor(private httpClient: HttpClient) {\n     // Fake login function to simulate roles\n    this.authProvider = this.fakeAuthProvider\n    // Example of a real login call to server-side\n    // this.authProvider = this.exampleAuthProvider\n  }\n  ...\n```", "```ts\nexample\nprivate exampleAuthProvider(\n  email: string,\n  password: string\n): Observable<IServerAuthResponse> {\n  return this.httpClient.post<IServerAuthResponse>(`${environment.baseUrl}/v1/login`, {\n    email: email,\n    password: password,\n  })\n}\n```", "```ts\nsrc/app/auth/auth.service.ts\n  ...\n  private fakeAuthProvider(\n    email: string,\n    password: string\n  ): Observable<IServerAuthResponse> {\n    if (!email.toLowerCase().endsWith('@test.com')) {\n      return observableThrowError('Failed to login! Email needs to end with @test.com.')\n    }\n\n    const authStatus = {\n      isAuthenticated: true,\n      userId: 'e4d1bc2ab25c',\n      userRole: email.toLowerCase().includes('cashier')\n        ? Role.Cashier\n        : email.toLowerCase().includes('clerk')\n          ? Role.Clerk\n          : email.toLowerCase().includes('manager') ? Role.Manager : Role.None,\n    } as IAuthStatus\n\n    const authResponse = {\n      accessToken: sign(authStatus, 'secret', {\n        expiresIn: '1h',\n        algorithm: 'none',\n      }),\n    } as IServerAuthResponse\n\n    return of(authResponse)\n  }\n  ...\n```", "```ts\nsrc/app/common/common.ts\nimport { HttpErrorResponse } from '@angular/common/http'\nimport { throwError } from 'rxjs'\n\nexport function transformError(error: HttpErrorResponse | string) {\n  let errorMessage = 'An unknown error has occurred'\n  if (typeof error === 'string') {\n    errorMessage = error\n  } else if (error.error instanceof ErrorEvent) {\n    errorMessage = `Error! ${error.error.message}`\n  } else if (error.status) {\n    errorMessage = `Request failed with ${error.status} ${error.statusText}`\n  }\n  return throwError(errorMessage)\n}\n```", "```ts\nsrc/app/auth/auth.service.ts\n  ...\n  login(email: string, password: string): Observable<IAuthStatus> {\n    this.logout()\n\n    const loginResponse = this.authProvider(email, password).pipe(\n      map(value => {\n        return decode(value.accessToken) as IAuthStatus\n      }),\n      catchError(transformError)\n    )\n\n    loginResponse.subscribe(\n      res => {\n        this.authStatus.next(res)\n      },\n      err => {\n        this.logout()\n        return observableThrowError(err)\n      }\n    )\n\n    return loginResponse\n  }\n\n  logout() {\n    this.authStatus.next(defaultAuthStatus)\n  }\n}\n```", "```ts\nsrc/app/app-routing.modules.ts\n...\n  { path: 'login', component: LoginComponent },\n  { path: 'login/:redirectUrl', component: LoginComponent },\n...\n```", "```ts\nsrc/app/login/login.component.ts\nimport { Component, OnInit } from '@angular/core'\nimport { FormBuilder, FormGroup, Validators, NgForm } from '@angular/forms'\nimport { AuthService } from '../auth/auth.service'\nimport { Role } from '../auth/role.enum'\n\n@Component({\n  selector: 'app-login',\n  templateUrl: 'login.component.html',\n  styles: [\n    `\n    .error {\n        color: red\n    }\n    `,\n    `\n    div[fxLayout] {margin-top: 32px;}\n    `,\n  ],\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup\n  loginError = ''\n  redirectUrl\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    route.paramMap.subscribe(params => (this.redirectUrl = params.get('redirectUrl')))\n  }\n\n  ngOnInit() {\n    this.buildLoginForm()\n  }\n\n  buildLoginForm() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.maxLength(50),\n      ]],\n    })\n  }\n\n  async login(submittedForm: FormGroup) {\n    this.authService\n      .login(submittedForm.value.email, submittedForm.value.password)\n      .subscribe(authStatus => {\n        if (authStatus.isAuthenticated) {\n          this.router.navigate([this.redirectUrl || '/manager'])\n        }\n      }, error => (this.loginError = error))\n  }\n}\n```", "```ts\nsrc/app/login/login.component.html\n<div fxLayout=\"row\" fxLayoutAlign=\"center\">\n  <mat-card fxFlex=\"400px\">\n    <mat-card-header>\n      <mat-card-title>\n        <div class=\"mat-headline\">Hello, Lemonite!</div>\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"login(loginForm)\" fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\n          <mat-icon>email</mat-icon>\n          <mat-form-field fxFlex>\n            <input matInput placeholder=\"E-mail\" aria-label=\"E-mail\" formControlName=\"email\">\n            <mat-error *ngIf=\"loginForm.get('email').hasError('required')\">\n              E-mail is required\n            </mat-error>\n            <mat-error *ngIf=\"loginForm.get('email').hasError('email')\">\n              E-mail is not valid\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\n          <mat-icon matPrefix>vpn_key</mat-icon>\n          <mat-form-field fxFlex>\n            <input matInput placeholder=\"Password\" aria-label=\"Password\" type=\"password\" formControlName=\"password\">\n            <mat-hint>Minimum 8 characters</mat-hint>\n            <mat-error *ngIf=\"loginForm.get('password').hasError('required')\">\n              Password is required\n            </mat-error>\n            <mat-error *ngIf=\"loginForm.get('password').hasError('minlength')\">\n              Password is at least 8 characters long\n            </mat-error>\n            <mat-error *ngIf=\"loginForm.get('password').hasError('maxlength')\">\n              Password cannot be longer than 50 characters\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div fxLayout=\"row\" class=\"margin-top\">\n          <div *ngIf=\"loginError\" class=\"mat-caption error\">{{loginError}}</div>\n          <div class=\"flex-spacer\"></div>\n          <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"loginForm.invalid\">Login</button>\n        </div>\n      </form>\n    </mat-card-content>\n  </mat-card>\n</div>\n```", "```ts\nsrc/app/home/home.component.ts\n\n  template: `\n    <div *ngIf=\"displayLogin\">\n      <app-login></app-login>\n    </div>\n    <div *ngIf=\"!displayLogin\">\n      <span class=\"mat-display-3\">You get a lemon, you get a lemon, you get a lemon...</span>\n    </div>\n  `,\n\nexport class HomeComponent implements OnInit {\n  displayLogin = true\n  ...\n```", "```ts\nsrc/app/home/home.component\n...\nimport { AuthService } from '../auth/auth.service'\n...\nexport class HomeComponent implements OnInit {\n  private _displayLogin = true\n  constructor(private authService: AuthService) {}\n\n  ngOnInit() {\n    this.authService.authStatus.subscribe(\n      authStatus => (this._displayLogin = !authStatus.isAuthenticated)\n    )\n  }\n\n  get displayLogin() {\n    return this._displayLogin\n  }\n}\n```", "```ts\nsrc/app/app.component.ts\n\nimport { Component, OnInit } from '@angular/core'\nimport { AuthService } from './auth/auth.service'\n...\nexport class AppComponent implements OnInit {\n  displayAccountIcons = false\n  constructor(..., private authService: AuthService) { \n  ...\n  ngOnInit() {\n    this.authService.authStatus.subscribe(\n      authStatus => (this.displayAccountIcons = authStatus.isAuthenticated)\n    )\n  }\n  ...\n}\n```", "```ts\nsrc/app/app.component.ts \n<button *ngIf=\"displayAccountIcons\" ... >\n```", "```ts\nsrc/app/common/validations.ts\nimport { Validators } from '@angular/forms'\n\nexport const EmailValidation = [Validators.required, Validators.email]\nexport const PasswordValidation = [\n  Validators.required,\n  Validators.minLength(8),\n  Validators.maxLength(50),\n]\n```", "```ts\nsrc/app/login/login.component.ts\nimport { EmailValidation, PasswordValidation } from '../common/validations'\n  ...\n     this.loginForm = this.formBuilder.group({\n      email: ['', EmailValidation],\n      password: ['', PasswordValidation],\n    })\n```", "```ts\nsrc/app/common/ui.service.ts\nimport { Injectable, Component, Inject } from '@angular/core'\nimport {\n  MatSnackBar,\n  MatSnackBarConfig,\n  MatDialog,\n  MatDialogConfig,\n} from '@angular/material'\nimport { Observable } from 'rxjs'\n\n@Injectable()\nexport class UiService {\n  constructor(private snackBar: MatSnackBar, private dialog: MatDialog) {}\n\n  showToast(message: string, action = 'Close', config?: MatSnackBarConfig) {\n    this.snackBar.open(\n      message,\n      action,\n      config || {\n        duration: 7000,\n      }\n    )\n  }\n...\n}\n```", "```ts\napp/common/simple-dialog/simple-dialog.component.ts\n@Component({\n  template: `\n    <h2 mat-dialog-title>data.title</h2>\n    <mat-dialog-content>\n      <p>data.content</p>\n    </mat-dialog-content>\n    <mat-dialog-actions>\n      <span class=\"flex-spacer\"></span>\n      <button mat-button mat-dialog-close *ngIf=\"data.cancelText\">data.cancelText</button>\n      <button mat-button mat-button-raised color=\"primary\" [mat-dialog-close]=\"true\"\n        cdkFocusInitial>\n        data.okText\n      </button>\n    </mat-dialog-actions>\n  `,\n})\nexport class SimpleDialogComponent {\n  constructor(\n    public dialogRef: MatDialogRef<SimpleDialogComponent, Boolean>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {}\n}\n```", "```ts\napp/common/ui.service.ts\n...\nshowDialog(\n    title: string,\n    content: string,\n    okText = 'OK',\n    cancelText?: string,\n    customConfig?: MatDialogConfig\n  ): Observable<Boolean> {\n    const dialogRef = this.dialog.open(\n      SimpleDialogComponent,\n      customConfig || {\n        width: '300px',\n        data: { title: title, content: content, okText: okText, cancelText: cancelText },\n      }\n    )\n\n    return dialogRef.afterClosed()\n  }\n}\n```", "```ts\nsrc/app/login/login.component.ts\nimport { UiService } from '../common/ui.service'\n...\nconstructor(... ,\n    private uiService: UiService)\n...\n  .subscribe(authStatus => {\n        if (authStatus.isAuthenticated) {\n          this.uiService.showToast(`Welcome! Role: ${authStatus.userRole}`)\n          ...\n```", "```ts\nsrc/app/auth/cache.service.ts\nexport abstract class CacheService {\n  protected getItem<T>(key: string): T {\n    const data = localStorage.getItem(key)\n    if (data && data !== 'undefined') {\n      return JSON.parse(data)\n    }\n    return null\n  }\n\n  protected setItem(key: string, data: object | string) {\n    if (typeof data === 'string') {\n      localStorage.setItem(key, data)\n    }\n    localStorage.setItem(key, JSON.stringify(data))\n  }\n\n  protected removeItem(key: string) {\n    localStorage.removeItem(key)\n  }\n\n  protected clear() {\n    localStorage.clear()\n  }\n}\n\n```", "```ts\nauth/auth.service\n...\nexport class AuthService extends CacheService {\n  authStatus = new BehaviorSubject<IAuthStatus>(\n    this.getItem('authStatus') || defaultAuthStatus\n  )\n\n  constructor(private httpClient: HttpClient) {\n    super()\n    this.authStatus.subscribe(authStatus => this.setItem('authStatus', authStatus))\n    ...\n  }\n  ...\n}\n```", "```ts\nsrc/app/auth/auth.service.ts\n...\n  private setToken(jwt: string) {\n    this.setItem('jwt', jwt)\n  }\n\n  private getDecodedToken(): IAuthStatus {\n    return decode(this.getItem('jwt'))\n  }\n\n  getToken(): string {\n    return this.getItem('jwt') || ''\n  }\n\n  private clearToken() {\n    this.removeItem('jwt')\n  }\n```", "```ts\nsrc/app/auth/auth.service.ts\n...\n  login(email: string, password: string): Observable<IAuthStatus> {\n    this.logout()\n\n    const loginResponse = this.authProvider(email, password).pipe(\n      map(value => {\n        this.setToken(value.accessToken)\n        return decode(value.accessToken) as IAuthStatus\n      }),\n      catchError(transformError)\n    )\n  ...\n  logout() {\n    this.clearToken()\n    this.authStatus.next(defaultAuthStatus)\n  }\n```", "```ts\nsrc/app/auth/auth-http-interceptor.ts\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Router } from '@angular/router'\nimport { Observable, throwError as observableThrowError } from 'rxjs'\nimport { catchError } from 'rxjs/operators'\nimport { AuthService } from './auth.service'\n\n@Injectable()\nexport class AuthHttpInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService, private router: Router) {}\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const jwt = this.authService.getToken()\n    const authRequest = req.clone({ setHeaders: { authorization: `Bearer ${jwt}` } })\n    return next.handle(authRequest).pipe(\n      catchError((err, caught) => {\n        if (err.status === 401) {\n          this.router.navigate(['/user/login'], {\n            queryParams: { redirectUrl: this.router.routerState.snapshot.url },\n          })\n        }\n\n        return observableThrowError(err)\n      })\n    )\n  }\n}\n```", "```ts\nsrc/app/app.module.ts\n providers: [\n    ...\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthHttpInterceptor,\n      multi: true,\n    },\n  ],\n```", "```ts\nsrc/app/app.module.ts\n@NgModule({\n  declarations: [\n    ...\n    NavigationMenuComponent,\n  ],\n```", "```ts\nsrc/app/material.module.ts\n@NgModule({\n  imports: [\n    ...\n    MatSidenavModule,\n    MatListModule,\n  ],\n  exports: [\n    ...\n    MatSidenavModule,\n    MatListModule,\n  ]\n```", "```ts\nsrc/app/app.component.ts\nstyles: [\n    `.app-container {\n      display: flex;\n      flex-direction: column;\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .app-is-mobile .app-toolbar {\n      position: fixed;\n      z-index: 2;\n    }\n    .app-sidenav-container {\n      flex: 1;\n    }\n    .app-is-mobile .app-sidenav-container {\n      flex: 1 0 auto;\n    },\n    mat-sidenav {\n      width: 200px;\n    }\n    `\n  ],\n```", "```ts\nsrc/app/app.component.ts\nconstructor(\n    ...\n    public media: ObservableMedia\n  ) {\n  ...\n}\n```", "```ts\nsrc/app/app.component.ts\n...\ntemplate: `\n  <div class=\"app-container\">\n    <mat-toolbar color=\"primary\" fxLayoutGap=\"8px\" class=\"app-toolbar\"\n      [class.app-is-mobile]=\"media.isActive('xs')\">\n      <button *ngIf=\"displayAccountIcons\" mat-icon-button (click)=\"sidenav.toggle()\">\n        <mat-icon>menu</mat-icon>\n      </button>\n      <a mat-icon-button routerLink=\"/home\">\n        <mat-icon svgIcon=\"lemon\"></mat-icon><span class=\"mat-h2\">LemonMart</span>\n      </a>\n      <span class=\"flex-spacer\"></span>\n      <button *ngIf=\"displayAccountIcons\" mat-mini-fab routerLink=\"/user/profile\"\n        matTooltip=\"Profile\" aria-label=\"User Profile\"><mat-icon>account_circle</mat-icon>\n      </button>\n      <button *ngIf=\"displayAccountIcons\" mat-mini-fab routerLink=\"/user/logout\"\n        matTooltip=\"Logout\" aria-label=\"Logout\"><mat-icon>lock_open</mat-icon>\n      </button>\n    </mat-toolbar>\n    <mat-sidenav-container class=\"app-sidenav-container\"\n                          [style.marginTop.px]=\"media.isActive('xs') ? 56 : 0\">\n      <mat-sidenav #sidenav [mode]=\"media.isActive('xs') ? 'over' : 'side'\"\n                  [fixedInViewport]=\"media.isActive('xs')\" fixedTopGap=\"56\">\n        <app-navigation-menu></app-navigation-menu>\n      </mat-sidenav>\n      <mat-sidenav-content>\n        <router-outlet class=\"app-container\"></router-outlet>\n      </mat-sidenav-content>\n    </mat-sidenav-container>\n  </div>\n`,\n```", "```ts\nsrc/app/app.component.ts export class AppComponent implements OnInit {\n  _displayAccountIcons = false\n  ...\n  ngOnInit() {\n    this.authService.authStatus.subscribe(authStatus => {\n      setTimeout(() => {\n        this._displayAccountIcons = authStatus.isAuthenticated\n      }, 0)\n    })\n  }\n```", "```ts\n  get displayAccountIcons() {\n    return this._displayAccountIcons\n  }\n}\n```", "```ts\nsrc/app/navigation-menu/navigation-menu.component.ts\n...\n  styles: [\n    `\n    .active-link {\n      font-weight: bold;\n      border-left: 3px solid green;\n    }\n  `,\n  ],\n  template: `\n    <mat-nav-list>\n      <h3 matSubheader>Manager</h3>\n      <a mat-list-item routerLinkActive=\"active-link\" routerLink=\"/manager/users\">Users</a>\n      <a mat-list-item routerLinkActive=\"active-link\" routerLink=\"/manager/receipts\">Receipts</a>\n      <h3 matSubheader>Inventory</h3>\n      <a mat-list-item routerLinkActive=\"active-link\" routerLink=\"/inventory/stockEntry\">Stock Entry</a>\n      <a mat-list-item routerLinkActive=\"active-link\" routerLink=\"/inventory/products\">Products</a>\n      <a mat-list-item routerLinkActive=\"active-link\" routerLink=\"/inventory/categories\">Categories</a>\n      <h3 matSubheader>Clerk</h3>\n      <a mat-list-item routerLinkActive=\"active-link\" routerLink=\"/pos\">POS</a>\n    </mat-nav-list>\n  `,\n...\n```", "```ts\nsrc/app/auth/auth.service.ts\n...\n  logout() {\n    this.clearToken()\n    this.authStatus.next(defaultAuthStatus)\n  }\n```", "```ts\nsrc/app/user/logout/logout.component.ts\nimport { Component, OnInit } from '@angular/core'\nimport { Router } from '@angular/router'\nimport { AuthService } from '../../auth/auth.service'\n\n@Component({\n  selector: 'app-logout',\n  template: `\n    <p>\n      Logging out...\n    </p>\n  `,\n  styles: [],\n})\nexport class LogoutComponent implements OnInit {\n  constructor(private router: Router, private authService: AuthService) {}\n\n  ngOnInit() {\n    this.authService.logout()\n    this.router.navigate(['/'])\n  }\n}\n```", "```ts\napp/src/login/login.component.ts  \n\nasync login(submittedForm: FormGroup) {\n    ...\n    this.router.navigate([\n      this.redirectUrl || this.homeRoutePerRole(authStatus.userRole)\n    ])\n    ...\n  }\n\n  homeRoutePerRole(role: Role) {\n    switch (role) {\n      case Role.Cashier:\n        return '/pos' \n      case Role.Clerk:\n        return '/inventory' \n      case Role.Manager:\n        return '/manager' \n      default:\n        return '/user/profile'\n    }\n  }\n```", "```ts\nsrc/app/auth/auth-guard.service.ts\nimport { Injectable } from '@angular/core'\nimport {\n  CanActivate,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  CanLoad,\n  CanActivateChild,\n} from '@angular/router'\nimport { AuthService, IAuthStatus } from './auth.service'\nimport { Observable } from 'rxjs'\nimport { Route } from '@angular/compiler/src/core'\nimport { Role } from './role.enum'\nimport { UiService } from '../common/ui.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate, CanActivateChild, CanLoad {\n  protected currentAuthStatus: IAuthStatus\n  constructor(\n    protected authService: AuthService,\n    protected router: Router,\n    private uiService: UiService\n  ) {\n    this.authService.authStatus.subscribe(\n      authStatus => (this.currentAuthStatus = authStatus)\n    )\n  }\n\n  canLoad(route: Route): boolean | Observable<boolean> | Promise<boolean> {\n    return this.checkLogin()\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean | Observable<boolean> | Promise<boolean> {\n    return this.checkLogin(route)\n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean | Observable<boolean> | Promise<boolean> {\n    return this.checkLogin(childRoute)\n  }\n\n  protected checkLogin(route?: ActivatedRouteSnapshot) {\n    let roleMatch = true\n    let params: any\n    if (route) {\n      const expectedRole = route.data.expectedRole\n\n      if (expectedRole) {\n        roleMatch = this.currentAuthStatus.userRole === expectedRole\n      }\n\n      if (roleMatch) {\n        params = { redirectUrl: route.pathFromRoot.map(r => r.url).join('/') }\n      }\n    }\n\n    if (!this.currentAuthStatus.isAuthenticated || !roleMatch) {\n      this.showAlert(this.currentAuthStatus.isAuthenticated, roleMatch)\n\n      this.router.navigate(['login', params  || {}])\n      return false\n    }\n\n    return true\n  }\n\n  private showAlert(isAuth: boolean, roleMatch: boolean) {\n    if (!isAuth) {\n      this.uiService.showToast('You must login to continue')\n    }\n\n    if (!roleMatch) {\n      this.uiService.showToast('You do not have the permissions to view this resource')\n    }\n  }\n}\n```", "```ts\nsrc/app/app-routing.module.ts\n...\n  {\n    path: 'manager',\n    loadChildren: './manager/manager.module#ManagerModule',\n    canLoad: [AuthGuard],\n  },\n...\n```", "```ts\nuser/user-routing.module.ts\n...\n{ path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\n...\n```", "```ts\nmananger/manager-routing.module.ts\n...\n  {\n    path: 'home',\n    component: ManagerHomeComponent,\n    canActivate: [AuthGuard],\n    data: {\n      expectedRole: Role.Manager,\n    },\n  },\n {\n    path: 'users',\n    component: UserManagementComponent,\n    canActivate: [AuthGuard],\n    data: {\n      expectedRole: Role.Manager,\n    },\n  },\n  {\n    path: 'receipts',\n    component: ReceiptLookupComponent,\n    canActivate: [AuthGuard],\n    data: {\n      expectedRole: Role.Manager,\n    },\n  },\n...\n```", "```ts\nsrc/app/auth/auth.service.ts export interface IAuthService {\n  authStatus: BehaviorSubject<IAuthStatus>\n  login(email: string, password: string): Observable<IAuthStatus>\n  logout()\n  getToken(): string\n}\n```", "```ts\nsrc/app/auth/auth.service.ts\n\nexport const defaultAuthStatus = {\n  isAuthenticated: false,\n  userRole: Role.None,\n  userId: null,\n}export class AuthService extends CacheService implements IAuthService \n```", "```ts\nsrc/app/auth/auth.service.fake.ts\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable, of } from 'rxjs'\nimport { IAuthService, IAuthStatus, defaultAuthStatus } from './auth.service'\n\n@Injectable()\nexport class AuthServiceFake implements IAuthService {\n  authStatus = new BehaviorSubject<IAuthStatus>(defaultAuthStatus)\n  constructor() {}\n\n  login(email: string, password: string): Observable<IAuthStatus> {\n    return of(defaultAuthStatus)\n  }\n\n  logout() {}\n\n  getToken(): string {\n    return ''\n  }\n}\n```", "```ts\nsrc/app/common/common.testing.ts\n\nexport const commonTestingProviders: any[] = [\n  { provide: AuthService, useClass: AuthServiceFake },\n  UiService,\n]\n```", "```ts\nsrc/app/app.component.spec.ts ...\n  TestBed.configureTestingModule({\n    imports: commonTestingModules,\n    providers: commonTestingProviders.concat([\n      { provide: ObservableMedia, useClass: ObservableMediaFake },\n      ...\n```", "```ts\nsrc/app/auth/auth-guard.service.spec.ts ...\n   TestBed.configureTestingModule({\n      imports: commonTestingModules,\n      providers: commonTestingProviders.concat(AuthGuard)\n    })\n```", "```ts\nsrc/app/auth/auth.service.spec.ts\n...\n  TestBed.configureTestingModule({\n    imports: [HttpClientTestingModule],\n    providers: [AuthService, UiService],\n  })\n```", "```ts\nsrc/app/common/simple-dialog/simple-dialog.component.spec.ts\n  ...\n    providers: [{\n      provide: MatDialogRef,\n      useValue: {}\n    }, {\n      provide: MAT_DIALOG_DATA,\n      useValue: {} // Add any data you wish to test if it is passed/used correctly\n    }],\n  ...\n```"]