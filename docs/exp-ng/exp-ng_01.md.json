["```ts\nimport {Http, Response} from @angular/http'; \n\n```", "```ts\nexport * from './http'; \n\n```", "```ts\nexport class BookComponent { \n  title: string; \n  author: string; \n  constructor() { \n      this.title = 'Learning Angular for .Net Developers'; \n      this.author = 'Rajesh Gunasundaram'; \n  } \n  getPubName() : string { \n    return 'Packt Publishing'; \n  } \n} \n\n```", "```ts\n<h1>Book Details</h1> \n<p>Title of the Book: {{title}}</p> \n<p>Author Name : {{author}}</p> \n\n```", "```ts\n@Component({ \n  selector:    'book-detail', \n  templateUrl: 'app/book.component.html' \n}) \nexport class BookComponent { ... } \n\n```", "```ts\n<div>Title: {{book.title}}<br/> \n  Enter Author Name: <input [(ngModel)]=\"book.author\"> \n</div> \n\n```", "```ts\n<book-detail></book-detail> \n\n```", "```ts\n<ul> \n<li *ngFor=\"let book of books\"> \n    {{book.title}} \n</li> \n</ul> \n\n```", "```ts\n<p [myFontsize]>Fontsize is sixteen</p> \n\n```", "```ts\nimport { Directive, ElementRef, Input } from '@angular/core'; \n@Directive({ selector: '[myFontsize]' }) \nexport class FontsizeDirective { \n    constructor(el: ElementRef) { \n       el.nativeElement.style.fontSize = 16; \n    } \n} \n\n```", "```ts\nimport { NgModule } from '@angular/core'; \nimport { BrowserModule } from '@angular/platform-browser'; \nimport { AppComponent } from './app.component'; \nimport { FontsizeDirective } from './fontsize.directive'; \n@NgModule({ \n  imports: [ BrowserModule ], \n  declarations: [ \n    AppComponent, \n    FontsizeDirective \n  ], \n  bootstrap: [ AppComponent ] \n}) \nexport class AppModule { } \n\n```", "```ts\nexport class BookComponent { \n  constructor(private service: BookService) { } \n} \n\n```", "```ts\n@NgModule({ \n  imports: [BrowserModule], \n  declarations: [AppComponent,], \n  providers: [BookService], \n  bootstrap: [ AppComponent ] \n}) \nexport class AppModule { } \n\n```", "```ts\n@Component({ \n  providers:   [BookService] \n}) \nexport class BookComponent { ... } \n\n```", "```ts\nnpm install -g typescript\n\n```", "```ts\ntsc mytypescriptcodefile.ts\n\n```", "```ts\nlet decimal: number = 6; \nlet hex: number = 0xf00d; \nlet binary: number = 0b1010; \nlet octal: number = 0o744; \n\n```", "```ts\nlet isSaved: Boolean; \nisSaved = true; \n\n```", "```ts\nvar authorName: string = \"Rajesh Gunasundaram\"; \n\n```", "```ts\nvar even:number[] = [2, 4, 6, 8, 10]; \n\n```", "```ts\nvar even:Array<number> = [2, 4, 6, 8, 10]; \n\n```", "```ts\nenum Day {Mon, Tue, Wed, Thu, Fri, Sat, Sun}; \nvar firstDay: Day = Day.Mon; \n\n```", "```ts\nvar mixedList:any[] = [1, \"I am string\", false]; \nmixedList [2] = \"no you are not\"; \n\n```", "```ts\nfunction alertMessage(): void { \n    alert(\"This function does not return any value\"); \n} \n\n```", "```ts\nclass Customer { \n    name: string; \n    constructor(name: string) { \n        this.name = name; \n   } \n    logCustomer() { \n        console.log('customer name is ' + this.name; \n   } \n} \n\nvar customer = new Customer(\"Rajesh Gunasundaram\"); \n\n```", "```ts\nfunction addCustomer(customerObj: {name: string}) { \n  console.log(customerObj.name); \n} \n\nvar customer = {id: 101, name: \"Rajesh Gunasundaram\"}; \naddCustomer(customer); \n\n```", "```ts\ninterface Customer { \n  name: string; \n} \n\nfunction addCustomer(customerObj: Customer) { \n  console.log(customerObj.name); \n} \nvar customer = {id: 101, name: \"Rajesh Gunasundaram\"}; \naddCustomer(customer); \n\n```", "```ts\ninterface Customer { \n  id: number; \n  name: string; \n  bonus?: number; \n} \n\nfunction addCustomer(customer: Customer) { \n  if (customer.bonus) { \n    console.log(customer.bonus); \n  } \n} \n\naddCustomer({id: 101, name: \"Rajesh Gunasundaram\"}); \n\n```", "```ts\ninterface AddCustomerFunc { \n  (firstName: string, lastName: string): string; \n} \n\n```", "```ts\nvar addCustomer: AddCustomerFunc; \naddCustomer = function(firstName: string, lastName: string) { \n  console.log('Full Name: ' + firstName + ' ' + lastName); \n  return firstName + ' ' + lastName; \n} \n\n```", "```ts\naddCustomer = function(fn: string, ln: string) { \n  console.log('Full Name: ' + fn + ' ' + ln); \n} \n\n```", "```ts\ninterface CutomerNameArray { \n  [index: number]: string; \n} \n\nvar customerNameList: CutomerNameArray; \ncustomerNameList = [\"Rajesh\", \"Gunasundaram\"]; \n\n```", "```ts\ninterface CustomerInterface { \n    id: number; \n    firstName: string; \n    lastName: string; \n    addCustomer(firstName: string, lastName: string); \n    getCustomer(id: number): Customer; \n} \n\nclass Customer implements CustomerInterface { \n    id: number; \n    firstName: string; \n    lastName: string; \n    constructor() { } \n    addCustomer(firstName: string, lastName: string) { \n        // code to add customer \n   } \n    getCustomer(id: number): Customer { \n        return this; \n    } \n} \n\n```", "```ts\ninterface Manager { \n    hasPower: boolean; \n} \n\ninterface Employee extends Manager { \n    name: string; \n} \n\nvar employee = <Employee>{}; \nemployee.name = \"Rajesh Gunasundaram\"; \nemployee.hasPower = true; \n\n```", "```ts\ninterface Customer { \n    (name: string); \n    name: string; \n    deleteCustomer(id: number): void; \n} \n\nvar c: Customer; \nc('Rajesh Gunasundaram'); \nc.name = 'Rajesh Gunasundaram'; \nc.deleteCustomer(101); \n\n```", "```ts\nvar Animal = function() { \n\n    this.sleep = function() { \n       console.log('sleeping'); \n   } \n\n    this.eat = function() { \n       console.log('eating'); \n   } \n} \n\n```", "```ts\nAnimal.prototype.bark = function() { \n    console.log('barking'); \n} \n\n```", "```ts\nvar a = new Animal(); \na.bark(); \n\n```", "```ts\nvar Dog = function() { \n    this.bark = new function() { \n       console.log('barking'); \n   } \n} \n\n```", "```ts\nDog.prototype = Object.create(animal.prototype); \nvar d = new Dog(); \nd.sleep(); \nd.eat(); \n\n```", "```ts\nclass SimpleCalculator { \n   z: number; \n    constructor() { } \n   addition(x: number, y: number) { \n        this.z = this.x + this.y; \n   } \n    subtraction(x: number, y: number) { \n        this.z = this.x - this.y; \n   } \n} \n\nclass ComplexCalculator extends SimpleCalculator { \n    constructor() { super(); } \n   multiplication(x: number, y: number) { \n        this.z = x * y; \n   } \n    division(x: number, y: number) { \n        this.z = x / y; \n   } \n} \nvar calculator = new ComplexCalculator(); \ncalculator.addition(10, 20); \ncalculator.Substraction(20, 10); \ncalculator.multiplication(10, 20); \ncalculator.division(20, 10); \n\n```", "```ts\nclass SimpleCalculator { \n    private x: number; \n    private y: number; \n    z: number; \n    constructor(x: number, y: number) { \n       this.x = x; \n       this.y = y; \n    } \n    addition() { \n        this.z = this.x + this.y; \n   } \n   subtraction() { \n        this.z = this.x - this.y; \n   } \n} \n\nclass ComplexCalculator { \n    z: number; \n    constructor(private x: number, private y: number) { } \n    multiplication() { \n       this.z = this.x * this.y;  \n   } \n    division() { \n        this.z = this.x / this.y; \n   } \n} \n\n```", "```ts\nvar updateCustomerNameAllowed = true; \nclass Customer { \n    private _name: string; \n    get name: string { \n          return this._name; \n   } \n    set name(newName: string) { \n          if (updateCustomerNameAllowed == true) { \n               this._name = newName; \n          } \n          else { \n               alert(\"Error: Updating Customer name not allowed!\"); \n          } \n   } \n} \n\n```", "```ts\nclass Customer { \n     static bonusPercentage = 20; \n     constructor(public salary: number) {  } \n\n   calculateBonus() { \n          return this.salary * Customer.bonusPercentage/100; \n     } \n} \nvar customer = new Customer(10000); \nvar bonus = customer.calculateBonus(); \n\n```", "```ts\nnamespace Inventory { \n      class Product { \n             constructor (public name: string, public quantity:  \n                  number) {   } \n      } \n      // product is accessible \n      var p = new Product('mobile', 101); \n} \n\n// Product class is not accessible outside namespace \nvar p = new Inventory.Product('mobile', 101); \n\n```", "```ts\nmodule Inventory { \n      export class Product { \n             constructor (public name: string, public quantity: number) {   } \n      } \n} \n\n// Product class is now accessible outside namespace \nvar p = new Inventory.Product('mobile', 101); \n\n```", "```ts\n/// <reference path=\"Inventory.ts\" /> \n\n```", "```ts\nImport { inv } from \"./Inventory\"; \nvar p = new inv.Product('mobile', 101); \n\n```", "```ts\n//Named function \nfunction multiply(a, b) { \n    return a * b; \n} \n\n//Anonymous function \nvar result = function(a, b) { return a * b; }; \n\n```", "```ts\nvar multiply:(a: number, b: number) => number = \n          function(a: number, b: number): number { return a * b; }; \n\n```", "```ts\nfunction CustomerName(firstName: string, lastName: string, middleName?: string) { \n    if (middleName) \n        return firstName + \" \" + middleName + \" \" + lastName; \n    else \n        return firstName + \" \" + lastName; \n} \n//ignored optional parameter middleName \nvar customer1 = customerName(\"Rajesh\", \"Gunasundaram\"); \n//error, supplied too many parameters \nvar customer2 = customerName(\"Scott\", \"Tiger\", \"Lion\", \"King\");  \n//supplied values for all \nvar customer3 = customerName(\"Scott\", \"Tiger\", \"Lion\");  \n\n```", "```ts\nfunction CustomerName(firstName: string, lastName: string, middleName: \n     string = 'No Middle Name') { \n    if (middleName) \n        return firstName + \" \" + middleName + \" \" + lastName; \n    else \n        return firstName + \" \" + lastName; \n} \n\n```", "```ts\nfunction clientName(firstClient: string, ...restOfClient: string[]) { \n   console.log(firstClient + \" \" + restOfClient.join(\" \")); \n} \nclientName (\"Scott\", \"Steve\", \"Bill\", \"Sergey\", \"Larry\"); \n\n```", "```ts\nfunction returnNumberReceived(arg: number): number { \n    return arg; \n} \nunction returnStringReceived(arg: string): string { \n    return arg; \n} \n\n```", "```ts\nfunction returnAnythingReceived (arg: any): any { \n    return arg; \n} \n\n```", "```ts\nfunction returnWhatReceived<T>(arg: T): T { \n    return arg; \n} \n\n```", "```ts\nvar stringOutput = returnWhatReceived<string>(\"return this\");  \n// type of output will be 'string' \nvar numberOutput = returnWhatReceived<number>(101);  \n// type of output will be number \n\n```", "```ts\ninterface GenericFunc<T> { \n    (arg: T): T; \n} \nfunction func<T>(arg: T): T { \n    return arg; \n} \nvar myFunc: GenericFunc<number> = func; \n\n```", "```ts\nclass GenericClass<T> { \n    add: (a: T, b: T) => T; \n}\n\n```", "```ts\nvar myGenericClass = new GenericClass<number>(); \nmyGenericClass.add = function(a, b) { return a + b; }; \n\n```", "```ts\nfunction authorize(target) { \n    // check the authorization of the use to access the \"target\" \n} \n\n```", "```ts\ndeclare type ClassDecorator = <TFunction extends Function>(target:  \n      TFunction) => TFunction | void; \n\n```", "```ts\n@freezed \nclass Customer { \n\n  public firstName: string; \n  public lastName: string; \n\n  constructor(firstName : string, lastName : string) { \n    this.firstName = firstName; \n    this.lastName = lastName; \n  } \n} \n\n```", "```ts\nfunction freezed(target: any) { \n    Object.freeze(target); \n} \n\n```", "```ts\nclass Hello { \n    @logging \n    increment(n: number) { \n        return n++; \n   } \n} \n\n```", "```ts\nfunction logging(target: Object, key: string, value: any) { \n\n        value.value = function (...args: any[]) { \n            var result = value.apply(this, args); \n            console.log(JSON.stringify(args)); \n            return result; \n        } \n    }; \n} \n\n```", "```ts\nclass Customer { \n  private _firstname: string; \n  private _lastname: string; \n\n  constructor(firstname: string, lastname: string) { \n        this._firstname = firstname; \n        this._lastname = lastname; \n  } \n\n  @logging(false) \n  get firstname() { return this._firstname; } \n\n  @logging(false) \n  get lastname() { return this._lastname; } \n} \n\n```", "```ts\nfunction logging(value: boolean) { \n    return function (target: any, propertyKey: string, descriptor: \n                PropertyDescriptor) { \n        descriptor.logging = value; \n    }; \n} \n\n```", "```ts\ndeclare type PropertyDecorator = (target: Object, propertyKey: string | \n    symbol) => void; \n\n```", "```ts\nclass Customer { \n  @hashify \n  public firstname: string; \n  public lastname: string; \n\n  constructor(firstname : string, lastname : string) { \n    this.firstname = firstname; \n    this.lastname = lastname; \n  } \n} \n\n```", "```ts\nfunction hashify(target: any, key: string) { \n  var _value = this[key]; \n\n  var getter = function () { \n        return '#' + _value; \n  }; \n\n  var setter = function (newValue) { \n    _value = newValue; \n  }; \n\n  if (delete this[key]) { \n    Object.defineProperty(target, key, { \n      get: getter, \n      set: setter, \n      enumerable: true, \n      configurable: true \n    }); \n  } \n} \n\n```", "```ts\ndeclare type ParameterDecorator = (target: Object, propertyKey:  \n   string | symbol, parameterIndex: number) => void; \n\n```", "```ts\nclass Customer { \n    constructor() {  } \n\n    getName(@logging name: string) { \n        return name; \n   } \n} \n\n```", "```ts\nfunction logging(target: any, key : string, index : number) { \n\n  console.log(target); \n  console.log(key); \n  console.log(index); \n} \n\n```", "```ts\n **git clone https://github.com/angular/quickstart my-angular** \n\n```", "```ts\n{   \n   \"name\":\"angular-quickstart\",   \n   \"version\":\"1.0.0\",   \n   \"description\":\"QuickStart   package.json from the documentation, \n         supplemented with testing support\",   \n   \"scripts\":{   \n      \"build\":\"tsc   -p src/\",   \n      \"build:watch\":\"tsc   -p src/ -w\",   \n      \"build:e2e\":\"tsc   -p e2e/\",   \n      \"serve\":\"lite-server   -c=bs-config.json\",   \n      \"serve:e2e\":\"lite-server   -c=bs-config.e2e.json\",   \n      \"prestart\":\"npm   run build\",   \n      \"start\":\"concurrently   \\\"npm run build:watch\\\" \\\"npm run \n            serve\\\"\",   \n      \"pree2e\":\"npm   run build:e2e\",   \n      \"e2e\":\"concurrently   \\\"npm run serve:e2e\\\" \\\"npm run \n            protractor\\\" --kill-others   --success first\",   \n      \"preprotractor\":\"webdriver-manager   update\",   \n      \"protractor\":\"protractor   protractor.config.js\",   \n      \"pretest\":\"npm   run build\",   \n      \"test\":\"concurrently   \\\"npm run build:watch\\\" \\\"karma start \n           karma.conf.js\\\"\",   \n      \"pretest:once\":\"npm   run build\",   \n      \"test:once\":\"karma   start karma.conf.js --single-run\",   \n      \"lint\":\"tslint   ./src/**/*.ts -t verbose\"   \n   },   \n   \"keywords\":[   \n\n   ],   \n   \"author\":\"\",   \n   \"license\":\"MIT\",   \n   \"dependencies\":{   \n      \"@angular/common\":\"~4.0.0\",   \n      \"@angular/compiler\":\"~4.0.0\",   \n      \"@angular/core\":\"~4.0.0\",   \n      \"@angular/forms\":\"~4.0.0\",   \n      \"@angular/http\":\"~4.0.0\",   \n      \"@angular/platform-browser\":\"~4.0.0\",   \n      \"@angular/platform-browser-dynamic\":\"~4.0.0\",   \n      \"@angular/router\":\"~4.0.0\",   \n      \"angular-in-memory-web-api\":\"~0.3.0\",   \n      \"systemjs\":\"0.19.40\",   \n      \"core-js\":\"^2.4.1\",   \n      \"rxjs\":\"5.0.1\",   \n      \"zone.js\":\"^0.8.4\"   \n   },   \n   \"devDependencies\":{   \n      \"concurrently\":\"^3.2.0\",   \n      \"lite-server\":\"^2.2.2\",   \n      \"typescript\":\"~2.1.0\",   \n      \"canonical-path\":\"0.0.2\",   \n      \"tslint\":\"^3.15.1\",   \n      \"lodash\":\"^4.16.4\",   \n      \"jasmine-core\":\"~2.4.1\",   \n      \"karma\":\"^1.3.0\",   \n      \"karma-chrome-launcher\":\"^2.0.0\",   \n      \"karma-cli\":\"^1.0.1\",   \n      \"karma-jasmine\":\"^1.0.2\",   \n      \"karma-jasmine-html-reporter\":\"^0.2.2\",   \n      \"protractor\":\"~4.0.14\",   \n      \"rimraf\":\"^2.5.4\",   \n      \"@types/node\":\"^6.0.46\",   \n      \"@types/jasmine\":\"2.5.36\"   \n   },   \n   \"repository\":{   \n\n   }   \n}   \n\n```", "```ts\n          npm start\n\n```", "```ts\n<!DOCTYPE html>\n<html>\n<head>\n<title>Hello Angular 4</title>\n<base href=\"/\">\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width,                  initial-scale=1\">\n<link rel=\"stylesheet\" href=\"styles.css\">\n<!-- Polyfill(s) for older browsers -->\n<script src=\"node_modules/core-   \n                js/client/shim.min.js\">   \n      </script>\n<script    \n         src=\"node_modules/zone.js/dist/zone.js\">   \n      </script>\n<script    \n         src=\"node_modules/systemjs/dist/system.src.js\">   \n      </script>\n<script src=\"systemjs.config.js\"></script>\n<script>\n            System.import('main.js').catch(function(err){               \n              console.error(err); });\n         </script>\n\n```", "```ts\n</head>\n<body>\n<my-app>My first Angular 4   app for Packt    \n               Publishing...</my-app>\n</body>\n</html>\n\n```"]