["```ts\n$ git clone --depth one https://github.com/MathieuNls/mastering-\n   angular2 advanced-forms\n$ cd advanced-forms\n$ git filter-branch --prune-empty --subdirectory-filter chap7/angular-\n   promise HEAD\n$ npm install\n\n```", "```ts\nimport { Component } from '@angular/core';\nimport { IMDBAPIService } from './services/imdbapi.service';\nimport { Movie, MovieFields } from './models/movie'; \n\n@Component({ \n  selector: 'app-root', \n  templateUrl: './app.component.html', \n  styleUrls: ['./app.component.css'] \n}) \nexport class AppComponent { \n  title = 'app works!';\n\n  private movies:Movie[] = [];\n  private error:boolean = false;\n  private finished:boolean = false;\n\n  constructor(private IMDBAPI:IMDBAPIService){\n\n      this.IMDBAPI.fecthOneById(1).then(\n        value => {\n            this.movies.push(value); \n            console.log(\"Component\", value)\n        },\n        error => this.error = true\n      );\n\n      this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).then(\n        value => {\n            this.movies = value; \n            console.log(\"Component\", value)\n        },\n        error => this.error = true\n      )\n\n      this.IMDBAPI.byField(MovieFields.release_year, 2015)\n        .or(MovieFields.release_year, 2014)\n        .or(MovieFields.phase, \"Phase Two\")\n        .fetch()\n        .then(\n          value => {\n              this.movies = value; \n              console.log(\"Component\", value)\n          },\n          error => this.error = true\n        );\n     }\n} \n\n```", "```ts\n<h1>\n  {{title}}\n</h1>\n\n<ul>\n    <li *ngFor=\"let movie of movies\">{{movie}}</li> \n</ul> \n\n```", "```ts\n<form [formGroup]=\"movieForm\">\n        <label>movie_id</label>\n        <input type=\"text\" formControlName=\"movie_id\"><br/>\n        <label>title</label>\n        <input type=\"text\" formControlName=\"title\"><br/>\n        <label>phase</label>\n        <input type=\"text\" formControlName=\"phase\"><br/>\n        <label>category_name</label>\n        <input type=\"text\" formControlName=\"category_name\"><br/>\n        <label>release_year</label>\n        <input type=\"text\" formControlName=\"release_year\"><br/>\n        <label>running_time</label>\n        <input type=\"text\" formControlName=\"running_time\"><br/>\n        <label>rating_name</label>\n        <input type=\"text\" formControlName=\"rating_name\"><br/>\n        <label>disc_format_name</label>\n        <input type=\"text\" formControlName=\"disc_format_name\"><br/>\n        <label>number_discs</label>\n        <input type=\"text\" formControlName=\"number_discs\"><br/>\n        <label>viewing_format_name</label>\n        <input type=\"text\" formControlName=\"viewing_format_name\"><br/>\n        <label>aspect_ratio_name</label>\n        <input type=\"text\" formControlName=\"aspect_ratio_name\"><br/>\n        <label>status</label>\n        <input type=\"text\" formControlName=\"status\"><br/>\n        <label>release_date</label>\n        <input type=\"text\" formControlName=\"release_date\"><br/>\n        <label>budget</label>\n        <input type=\"text\" formControlName=\"budget\"><br/>\n        <label>gross</label>\n        <input type=\"text\" formControlName=\"gross\"><br/>\n        <label>time_stamp</label>\n        <input type=\"text\" formControlName=\"time_stamp\"><br/>\n</form> \n\n```", "```ts\n private movieForm:FormGroup =  new FormGroup({\n    movie_id: new FormControl(),\n    title: new FormControl(),\n    phase: new FormControl(),\n    category_name: new FormControl(),\n    release_year: new FormControl(),\n    running_time: new FormControl(),\n    rating_name: new FormControl(),\n    disc_format_name: new FormControl(),\n    number_discs: new FormControl(),\n    viewing_format_name: new FormControl(),\n    aspect_ratio_name: new FormControl(),\n    status: new FormControl(),\n    release_date: new FormControl(),\n    budget: new FormControl(),\n    gross: new FormControl(),\n    time_stamp: new FormControl()\n}); \n\n```", "```ts\n<button (click)=\"submit()\" type=\"submit\">SUBMIT</button> \n\n```", "```ts\n  private submit(){\n    console.log(\n      \"Form Values\",\n      this.movieForm.value.movie_id,\n      this.movieForm.value.title,\n      this.movieForm.value.phase,\n      this.movieForm.value.category_name,\n      this.movieForm.value.release_year,\n      this.movieForm.value.running_time,\n      this.movieForm.value.rating_name,\n      this.movieForm.value.disc_format_name,\n      this.movieForm.value.number_discs,\n      this.movieForm.value.viewing_format_name,\n      this.movieForm.value.aspect_ratio_name,\n      this.movieForm.value.status,\n      this.movieForm.value.release_date,\n      this.movieForm.value.budget,\n      this.movieForm.value.gross,\n      this.movieForm.value.time_stamp\n    );\n  } \n\n```", "```ts\nprivate submit(){\n    console.log(\n      \"Form Values\",\n      this.movieForm.value.movie_id,\n      this.movieForm.value.title,\n      this.movieForm.value.phase,\n      this.movieForm.value.category_name,\n      this.movieForm.value.release_year,\n      this.movieForm.value.running_time,\n      this.movieForm.value.rating_name,\n      this.movieForm.value.disc_format_name,\n      this.movieForm.value.number_discs,\n      this.movieForm.value.viewing_format_name,\n      this.movieForm.value.aspect_ratio_name,\n      this.movieForm.value.status,\n      this.movieForm.value.release_date,\n      this.movieForm.value.budget,\n      this.movieForm.value.gross,\n      this.movieForm.value.time_stamp\n    );\n\n    let movie:Movie = new Movie(\n      this.movieForm.value.movie_id,\n      this.movieForm.value.title,\n      this.movieForm.value.phase,\n      this.movieForm.value.category_name,\n      this.movieForm.value.release_year,\n      this.movieForm.value.running_time,\n      this.movieForm.value.rating_name,\n      this.movieForm.value.disc_format_name,\n      this.movieForm.value.number_discs,\n      this.movieForm.value.viewing_format_name,\n      this.movieForm.value.aspect_ratio_name,\n      this.movieForm.value.status,\n      this.movieForm.value.release_date,\n      this.movieForm.value.budget,\n      this.movieForm.value.gross,\n      this.movieForm.value.time_stamp\n     );\n\n    console.log(movie);\n\n    //Persist movie\n\n  } \n\n```", "```ts\nthis.movieForm = this.formBuilder.group({\n   movie_id: '',\n   title: '',\n   phase: '',\n   category_name: '',\n   release_year: '',\n   running_time: '',\n   rating_name: '',\n   disc_format_name: '',\n   number_discs: '',\n   viewing_format_name: '',\n   aspect_ratio_name: '',\n   status: '',\n   release_date: '',\n   budget: '',\n   gross: '',\n   time_stamp: ''\n}); \n\n```", "```ts\nImport { FormGroup, FormControl, FormBuilder } from '@angular/forms'; \n\n```", "```ts\n constructor(private IMDBAPI:IMDBAPIService, private formBuilder: FormBuilder) \n\n```", "```ts\n\nimport { Component } from '@angular/core';\nimport { IMDBAPIService } from './services/imdbapi.service';\nimport { Movie, MovieFields } from './models/movie';\n\nimport { FormGroup, FormControl, FormBuilder } from '@angular/forms';\n\n@Component({ \n  selector: 'app-root', \n  templateUrl: './app.component.html', \n  styleUrls: ['./app.component.css'] \n})\nexport class AppComponent {\n  title = 'app works!';\n\n  private movies:Movie[] = [];\n  private error:boolean = false;\n  private finished:boolean = false;\n  private movieForm:FormGroup;\n\n  constructor(private IMDBAPI:IMDBAPIService, private formBuilder: \n     FormBuilder){\n\n      this.movieForm =  this.formBuilder.group({\n        movie_id: '',\n        title: '',\n        phase: '',\n        category_name: '',\n        release_year: '',\n        running_time: '',\n        rating_name: '',\n        disc_format_name: '',\n        number_discs: '',\n        viewing_format_name: '',\n        aspect_ratio_name: '',\n        status: '',\n        release_date: '',\n        budget: '',\n        gross: '',\n        time_stamp: ''\n      });\n\n      // IMDB queries have been removed for simplicity\n    }\n\n    private submit(){\n        // submit body has been removed for simplicity\n    }    \n\n```", "```ts\n\n//In AppComponent\n\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\n\n//[...]\n\nconstructor(private IMDBAPI:IMDBAPIService, private formBuilder: FormBuilder){\n\n      this.movieForm =  this.formBuilder.group({\n        movie_id: ['', Validators.required],\n        title: ['', Validators.required],\n        phase: ['', Validators.required],\n        category_name: ['', Validators.required],\n        release_year: ['', Validators.required],\n        running_time: ['', Validators.required],\n        rating_name: ['', Validators.required],\n        disc_format_name: ['', Validators.required],\n        number_discs: ['', Validators.required],\n        viewing_format_name: ['', Validators.required],\n        aspect_ratio_name: ['', Validators.required],\n        status: ['', Validators.required],\n        release_date: ['', Validators.required],\n        budget: ['', Validators.required],\n        gross: ['', Validators.required],\n        time_stamp: ['', Validators.required]\n      });\n}\n\n//[...] \n\n```", "```ts\n private submit(){\n    console.log(\n      \"Form Values\",\n      this.movieForm.value.movie_id,\n      this.movieForm.value.title,\n      this.movieForm.value.phase,\n      this.movieForm.value.category_name,\n      this.movieForm.value.release_year,\n      this.movieForm.value.running_time,\n      this.movieForm.value.rating_name,\n      this.movieForm.value.disc_format_name,\n      this.movieForm.value.number_discs,\n      this.movieForm.value.viewing_format_name,\n      this.movieForm.value.aspect_ratio_name,\n      this.movieForm.value.status,\n      this.movieForm.value.release_date,\n      this.movieForm.value.budget,\n      this.movieForm.value.gross,\n      this.movieForm.value.time_stamp\n    );\n\n    if(this.movieForm.valid){\n      let movie:Movie = new Movie(\n        this.movieForm.value.movie_id,\n        this.movieForm.value.title,\n        this.movieForm.value.phase,\n        this.movieForm.value.category_name,\n        this.movieForm.value.release_year,\n        this.movieForm.value.running_time,\n        this.movieForm.value.rating_name,\n        this.movieForm.value.disc_format_name,\n        this.movieForm.value.number_discs,\n        this.movieForm.value.viewing_format_name,\n        this.movieForm.value.aspect_ratio_name,\n        this.movieForm.value.status,\n        this.movieForm.value.release_date,\n        this.movieForm.value.budget,\n        this.movieForm.value.gross,\n        this.movieForm.value.time_stamp\n       );\n\n      console.log(movie);\n      //Persist movie\n    }else{\n      console.error(\"Form not valid\");\n    }\n} \n\n```", "```ts\n<p class='error' *ngIf=!movieForm.valid>Error</p> \n/*app.component.css*/\n.error{\n    color:red;\n} \n\n```", "```ts\n<form [formGroup]=\"movieForm\">\n\n        <p class='error' *ngIf=!movieForm.valid>Error</p>\n        <label>movie_id</label>\n        <p class='error' *ngIf=!movieForm.controls.movie_id.valid>This \n               field is required</p>\n        <input type=\"text\" formControlName=\"movie_id\"><br/>\n        <label>title</label>\n        <p class='error' *ngIf=!movieForm.controls.title.valid>This \n               field is required</p>\n        <input type=\"text\" formControlName=\"title\"><br/>\n        <label>phase</label>\n        <p class='error' *ngIf=!movieForm.controls.phase.valid>This \n               field is required</p>\n        <input type=\"text\" formControlName=\"phase\"><br/>\n        <label>category_name</label>\n        <p class='error' \n              *ngIf=!movieForm.controls.category_name.valid>This field \n               is required</p>\n        <input type=\"text\" formControlName=\"category_name\"><br/>\n        <label>release_year</label>\n        <p class='error' \n              *ngIf=!movieForm.controls.release_year.valid>This field \n               is required</p>\n        <input type=\"text\" formControlName=\"release_year\"><br/>\n        <label>running_time</label>\n        <p class='error' \n              *ngIf=!movieForm.controls.running_time.valid>This field  \n               is required</p>\n        <input type=\"text\" formControlName=\"running_time\"><br/>\n        <label>rating_name</label>\n        <p class='error' \n               *ngIf=!movieForm.controls.rating_name.valid>This field \n                is required</p>\n        <input type=\"text\" formControlName=\"rating_name\"><br/>\n        <label>disc_format_name</label>\n        <p class='error' \n              *ngIf=!movieForm.controls.disc_format_name.valid>This \n               field is required</p>\n        <input type=\"text\" formControlName=\"disc_format_name\"><br/>\n        <label>number_discs</label>\n        <p class='error' \n              *ngIf=!movieForm.controls.number_discs.valid>This field \n              is required</p>\n        <input type=\"text\" formControlName=\"number_discs\"><br/>\n        <label>viewing_format_name</label>\n        <p class='error' \n            *ngIf=!movieForm.controls.viewing_format_name.valid>This \n             field is required</p>\n        <input type=\"text\" formControlName=\"viewing_format_name\"><br/>\n        <label>aspect_ratio_name</label>\n        <p class='error' \n            *ngIf=!movieForm.controls.aspect_ratio_name.valid>This         \n             field is required</p>\n        <input type=\"text\" formControlName=\"aspect_ratio_name\"><br/>\n        <label>status</label>\n        <p class='error' *ngIf=!movieForm.controls.status.valid>This \n              field is required</p>\n        <input type=\"text\" formControlName=\"status\"><br/>\n        <label>release_date</label>\n        <p class='error' \n             *ngIf=!movieForm.controls.release_date.valid>This field is \n              required</p>\n        <input type=\"text\" formControlName=\"release_date\"><br/>\n        <label>budget</label>\n        <p class='error' *ngIf=!movieForm.controls.budget.valid>This \n            field is required</p>\n        <input type=\"text\" formControlName=\"budget\"><br/>\n        <label>gross</label>\n        <p class='error' *ngIf=!movieForm.controls.gross.valid>This \n             field is required</p>\n        <input type=\"text\" formControlName=\"gross\"><br/>\n        <label>time_stamp</label>\n        <p class='error' \n           *ngIf=!movieForm.controls.time_stamp.valid>This field is \n            required</p>\n        <input type=\"text\" formControlName=\"time_stamp\"><br/>\n\n        <button (click)=\"submit()\" type=\"submit\">SUBMIT</button>\n</form> \n\n```", "```ts\nthis.movieForm =  this.formBuilder.group({\n    movie_id: ['',  \n       Validators.compose(\n       [\n          Validators.required,\n          Validators.minLength(1), \n          Validators.maxLength(4), \n          Validators.pattern('[0-9]+')\n       ]\n      )\n    ],\n    title: ['', Validators.required],\n    phase: ['', Validators.required],\n    category_name: ['', Validators.required],\n    release_year: ['', Validators.required],\n    running_time: ['', Validators.required],\n    rating_name: ['', Validators.required],\n    disc_format_name: ['', Validators.required],\n    number_discs: ['', Validators.required],\n    viewing_format_name: ['', Validators.required],\n    aspect_ratio_name: ['', Validators.required],\n    status: ['', Validators.required],\n    release_date: ['', Validators.required],\n    budget: ['', Validators.required],\n    gross: ['', Validators.required],\n    time_stamp: ['', Validators.required]\n}); \n\n```", "```ts\n\nimport { FormControl } from '@angular/forms';\n\ninterface ValidationResult {\n [key:string]:boolean;\n}\n\nexport class MovieIDValidator{\n    static idNotTaken(control: FormControl): ValidationResult { \n\n        let movies = require('./marvel-cinematic-\n                universe.json').movies;\n        let found:boolean = false;\n\n        for (var i = 0; i < movies.length; ++i) {\n\n            if(control.value == movies[i].movie_id){\n                 return { \"idNotTaken\": true };\n            }\n        }\n\n       return null;\n    }\n} \n\n```", "```ts\nimport { MovieIDValidator } from './movie-id.validator'\n\n// [...]\n\nthis.movieForm =  this.formBuilder.group({\n        movie_id: ['',  \n          Validators.compose(\n            [\n             Validators.required,\n             Validators.minLength(1), \n             Validators.maxLength(4), \n             Validators.pattern('[0-9]+'),\n             MovieIDValidator.idNotTaken\n            ]\n          )\n        ],\n        title: ['', Validators.required],\n        phase: ['', Validators.required],\n        category_name: ['', Validators.required],\n        release_year: ['', Validators.required],\n        running_time: ['', Validators.required],\n        rating_name: ['', Validators.required],\n        disc_format_name: ['', Validators.required],\n        number_discs: ['', Validators.required],\n        viewing_format_name: ['', Validators.required],\n        aspect_ratio_name: ['', Validators.required],\n        status: ['', Validators.required],\n        release_date: ['', Validators.required],\n        budget: ['', Validators.required],\n        gross: ['', Validators.required],\n        time_stamp: ['', Validators.required]\n      }); \n\n```", "```ts\nimport { FormControl } from '@angular/forms';\n\ninterface ValidationResult {\n [key:string]:boolean;\n}\n\nexport class MovieIDValidator{\n    static idNotTaken(control: FormControl): ValidationResult { \n\n        let movies = require('./marvel-cinematic-\n           universe.json').movies;\n        let found:boolean = false;\n\n        for (var i = 0; i < movies.length; ++i) {\n\n            if(control.value == movies[i].movie_id){\n                 return { \"idNotTaken\": true };\n            }\n        }\n\n       return null;\n    }\n\n    static idTakenAsync(control: FormControl): \n     Promise<ValidationResult> { \n\n        let p = new Promise((resolve, reject) => {\n         setTimeout(() => {\n\n            let movies = require('./marvel-cinematic-\n                universe.json').movies;\n            let found:boolean = false;\n\n            for (var i = 0; i < movies.length; ++i) {\n\n                if(control.value == movies[i].movie_id){\n                     resolve({ \"idNotTaken\": true });\n                }\n            }\n\n            resolve(null);\n\n         }, 1000)\n       });\n\n       return p;\n\n    }\n} \n\n```", "```ts\nprivate submit(){\n  console.log(\n    \"Form Values\",\n    this.movieForm.value.movie_id,\n    this.movieForm.value.title,\n    this.movieForm.value.phase,\n    this.movieForm.value.category_name,\n    this.movieForm.value.release_year,\n    this.movieForm.value.running_time,\n    this.movieForm.value.rating_name,\n    this.movieForm.value.disc_format_name,\n    this.movieForm.value.number_discs,\n    this.movieForm.value.viewing_format_name,\n    this.movieForm.value.aspect_ratio_name,\n    this.movieForm.value.status,\n    this.movieForm.value.release_date,\n    this.movieForm.value.budget,\n    this.movieForm.value.gross,\n    this.movieForm.value.time_stamp\n  );\n\n  if(this.movieForm.valid){\n    let movie:Movie = new Movie(\n      this.movieForm.value.movie_id,\n      this.movieForm.value.title,\n      this.movieForm.value.phase,\n      this.movieForm.value.category_name,\n      this.movieForm.value.release_year,\n      this.movieForm.value.running_time,\n      this.movieForm.value.rating_name,\n      this.movieForm.value.disc_format_name,\n      this.movieForm.value.number_discs,\n      this.movieForm.value.viewing_format_name,\n      this.movieForm.value.aspect_ratio_name,\n      this.movieForm.value.status,\n      this.movieForm.value.release_date,\n      this.movieForm.value.budget,\n      this.movieForm.value.gross,\n      this.movieForm.value.time_stamp\n    );\n\n    console.log(movie);\n   }\n  else{\n      console.error(\"Form not valid\");\n    }\n  } \n\n```", "```ts\n<form [formGroup]=\"movieForm\">\n\n        <p class='error' *ngIf=!movieForm.valid>Error</p>\n        <label>movie_id</label>\n        <p class='error' *ngIf=!movieForm.controls.movie_id.valid>This \n              field is required</p>\n        <input type=\"text\" formControlName=\"movie_id\" \n             [(ngModel)]=\"movie.movie_id\" name=\"movie_id\" ><br/>\n        <label>title</label>\n        <p class='error' *ngIf=!movieForm.controls.title.valid>This \n             field is required</p>\n        <input type=\"text\" formControlName=\"title\" \n            [(ngModel)]=\"movie.title\" name=\"movie_title\"><br/>\n        <label>phase</label>\n        <p class='error' *ngIf=!movieForm.controls.phase.valid>This \n            field is required</p>\n        <input type=\"text\" formControlName=\"phase\" \n            [(ngModel)]=\"movie.phase\" name=\"movie_phase\"><br/>\n        <label>category_name</label>\n        <p class='error' *ngIf=!movieForm.controls.\n            category_name.valid>This field is required</p>\n        <input type=\"text\" formControlName=\"category_name\" \n             [(ngModel)]=\"movie.category_name\"  name=\"movie_cat\"><br/>\n        <label>release_year</label>\n        <p class='error' *ngIf=!movieForm.controls.release_year\n              .valid>This field is required</p>\n        <input type=\"text\" formControlName=\"release_year\"  \n            [(ngModel)]=\"movie.release_year\" name=\"movie_year\"><br/>\n        <label>running_time</label>\n        <p class='error'*ngIf=!movieForm.controls.\n             running_time.valid>This field is required</p>\n        <input type=\"text\" formControlName=\"running_time\" \n              [(ngModel)]=\"movie.running_time\" name=\"movie_time\"><br/>\n        <label>rating_name</label>\n        <p class='error' *ngIf=!movieForm.controls.rating_name.\n        valid>This field is required</p>\n        <input type=\"text\" formControlName=\"rating_name\" \n             [(ngModel)]=\"movie.rating_name\" name=\"movie_rating\"><br/>\n        <label>disc_format_name</label>\n        <p class='error' *ngIf=!movieForm.controls.\n            disc_format_name.valid>This field is required</p>\n        <input type=\"text\" formControlName=\"disc_format_name\" \n           [(ngModel)]=\"movie.disc_format_name\" name=\"movie_disc\"><br/>\n        <label>number_discs</label>\n        <p class='error' *ngIf=!movieForm.controls.number_discs.valid>\n              This field is required</p>\n        <input type=\"text\" formControlName=\"number_discs\" \n           [(ngModel)]=\"movie.number_discs\" name=\"movie_discs_nb\"><br/>\n        <label>viewing_format_name</label>\n        <p class='error' *ngIf=!movieForm.controls.viewing_format_name.\n             valid>This field is required</p>\n        <input type=\"text\" formControlName=\"viewing_format_name\" \n             [(ngModel)]=\"movie.viewing_format_name\"\n             name=\"movie_format\"><br/>\n        <label>aspect_ratio_name</label>\n        <p class='error' *ngIf=!movieForm.controls.aspect_ratio_name.\n                valid>This field is required</p>\n        <input type=\"text\" formControlName=\"aspect_ratio_name\"  \n           [(ngModel)]=\"movie.aspect_ratio_name\" \n             name=\"movie_ratio\"><br/>\n        <label>status</label>\n        <p class='error' *ngIf=!movieForm.\n           controls.status.valid>This field is required</p>\n        <input type=\"text\" formControlName=\"status\" \n            [(ngModel)]=\"movie.status\" name=\"movie_status\"><br/>\n        <label>release_date</label>\n        <p class='error' *ngIf=!movieForm.controls.release_date.\n              valid>This field is required</p>\n        <input type=\"text\" formControlName=\"release_date\" \n            [(ngModel)]=\"movie.release_date\" name=\"movie_release\"><br/>\n        <label>budget</label>\n        <p class='error' *ngIf=!movieForm.controls.budget.valid>This \n               field is required</p>\n        <input type=\"text\" formControlName=\"budget\" \n            [(ngModel)]=\"movie.budget\" name=\"movie_budget\"><br/>\n        <label>gross</label>\n        <p class='error' *ngIf=!movieForm.controls.gross.valid>This \n              field is required</p>\n        <input type=\"text\" formControlName=\"gross\" \n              [(ngModel)]=\"movie.gross\" name=\"movie_gross\"><br/>\n        <label>time_stamp</label>\n        <p class='error' *ngIf=!movieForm.controls.time_stamp.\n               valid>This field is required</p>\n        <input type=\"text\" formControlName=\"time_stamp\" \n          [(ngModel)]=\"movie.time_stamp\" name=\"movie_timestamp\"><br/>\n\n        <button (click)=\"submit()\" type=\"submit\">SUBMIT</button>\n</form> \n\n```", "```ts\nprivate submit(){ if(this.movieForm.valid){ \n  console.log(this.movie);\n\n  //persist\n}else{\n  console.error(\"Form not valid\");\n} \n} \n\n```", "```ts\n<toolwatch-input \n      [id]             = \"'email'\"\n      [control]        = \"loginForm.controls.email\" \n      [errorLabel]     = \"'email-required'\"\n      [submitAttempt]  = \"submitAttempt\"\n      [autoCapitalize] = false\n      [autoCorrect]    = false\n      [spellCheck]     = false\n> \n\n```", "```ts\nimport { Component, Input, EventEmitter, Output  } from '@angular/core';\nimport {   \n  FormControl\n} from '@angular/forms';\n\n@Component({\n    templateUrl: './toowatch-input.html',\n    pipes: [TranslatePipe],\n    selector: 'toolwatch-input',\n})\nexport class ToolwatchInput {\n\n    @Input()\n     id             : string;\n    @Input()\n     control        : FormControl;\n    @Input()\n     model          : any = null;\n    @Input()\n     type           : string = \"text\";\n    @Input()\n     label          : string;\n    @Input()\n     errorLabel     : string;\n    @Input()\n     formControlName: string;\n    @Input()\n     submitAttempt  : boolean = true;\n    @Input()\n     autoCapitalize : boolean = true;\n    @Input()\n     autoCorrect    : boolean = true;\n    @Input()\n     autoComplete   : boolean = true;\n    @Input()\n     spellCheck     : boolean = true;\n\n    @Output()\n     update         = new EventEmitter();\n\n    constructor() {\n\n    }\n\n    ngAfterViewInit() {\n\n        if(this.control == null || this.id == null){\n            throw \"[Control] and [id] must be set\";\n        }\n\n        //initialize other variables to the value of id \n        //if they are null\n        let variablesToInitialize = [\n            \"label\", \n            \"errorLabel\", \n            \"formControlName\"\n        ];\n\n        for (var i = variablesToInitialize.length - 1; i >= 0; i--) {\n            if(this[variablesToInitialize[i]] == null){\n                this[variablesToInitialize[i]] = this.id;\n            }\n        }\n    }\n\n} \n\n```", "```ts\n<div  class=\"group\"\n  [ngClass]=\"{ 'has-error' : !control.valid && submitAttempt }\"\n\n    >\n    <em *ngIf=\"!control.valid && submitAttempt\">\n      {{ errorLabel | translate:{value: param} }}\n    </em>\n\n    <input #input_field\n      [attr.autocapitalize] = \"autoCapitalize ? 'on' : 'off'\"\n      [attr.autocorrect]    = \"autoCorrect ? 'on' : 'off'\"\n      [attr.autocomplete]   = \"autoComplete ? 'on' : 'off'\"\n      [attr.spellcheck]     = \"spellCheck ? 'on' : 'off'\"\n      class                 = \"form-control\" \n      id                    = \"{{id}}\" \n      type                  = \"{{type}}\" \n      [formControl]         = \"control\" \n      (keyup) = \"update.emit(input_field.value)\"\n    >\n    <span class=\"highlight\"></span>\n    <span class=\"bar\"></span>\n    <label htmlFor=\"{{id}}\">\n      {{ label | translate:{value: param} }}\n    </label>\n</div> \n\n```"]