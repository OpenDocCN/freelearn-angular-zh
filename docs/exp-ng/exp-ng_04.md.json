["```ts\nimport { Component } from '@angular/core'; \n@Component({ \n    selector: 'my-app', \n    template: ` \n    <div class=\"container text-center\"> \n      <div class=\"row\"> \n        <div class=\"col-md-12\"> \n          <div class=\"page-header\"> \n            <h1>{{title}}</h1> \n          </div> \n          <p class=\"lead\">{{description}}</p> \n        </div> \n      </div> \n      <div class=\"row\"> \n        <div class=\"col-md-6\"> \n          <p>A child component could go here</p> \n        </div> \n        <div class=\"col-md-6\"> \n          <p>Another child component could go here</p> \n        </div> \n      </div>           \n    </div>     \n    ` \n}) \nexport class AppComponent {  \n  title: string; \n  description: string; \n  constructor(){ \n    this.title = 'Mastering Angular - Chapter 4, Example 1'; \n    this.description = 'This is a minimal example for an Angular 2   \n    component with an element tag selector.'; \n  } \n} \n\n```", "```ts\n<!DOCTYPE html> \n<html> \n  <head> \n    <title>Mastering Angular example</title> \n    ... \n  </head> \n  <body> \n    <my-app>Loading...</my-app> \n  </body> \n</html>    \n\n```", "```ts\nnpm run start  \n\n```", "```ts\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic'; \nimport { AppModule } from './app.module'; \nplatformBrowserDynamic().bootstrapModule(AppModule);  \n\n```", "```ts\nimport { NgModule } from '@angular/core'; \nimport { BrowserModule } from '@angular/platform-browser'; \nimport { AppComponent } from './app.component'; \n@NgModule({ \n  imports:      [ BrowserModule ], \n  declarations: [ AppComponent ], \n  bootstrap:    [ AppComponent ] \n}) \nexport class AppModule { } \n\n```", "```ts\nimport { Component, Input, Output, EventEmitter } from '@angular/core'; \n@Component({ \n    selector: 'div[my-child-comp]', \n    template: ` \n        <p>{{myText}}</p> \n        <button class=\"btn btn-default\" type=\"button\" (click)=\"onClick()\">Send message</button>` \n}) \nexport class ChildComponent {  \n  private static instanceCount: number = 0; \n  instanceId: number; \n  @Input() myText: string; \n  @Output() onChildMessage = new EventEmitter<string>();   \n  constructor(){ \n    ChildComponent.instanceCount += 1; \n    this.instanceId = ChildComponent.instanceCount; \n  } \n  onClick(){ \n    this.onChildMessage.emit(`Hello from ChildComponent with instance  \n    id: ${this.instanceId}`); \n  } \n} \n\n```", "```ts\n@Component({ \n    selector: 'div.container.my-app', \n    template: ` \n    <div class=\"container text-center\"> \n      <div class=\"row\"><div class=\"col-md-12\"> \n          <div class=\"page-header\"><h1>{{title}}</h1></div> \n          <p class=\"lead\">{{description}}</p> \n      </div></div> \n      <div class=\"row\"> \n        <div class=\"col-md-6\" my-child-comp myText=\"A child component \n goes here\" (onChildMessage)=\"onChildMessageReceived($event)\"> \n </div>       \n        <div class=\"col-md-6\" my-child-comp \n [myText]=\"secondComponentText\" \n (onChildMessage)=\"onChildMessageReceived($event)\"></div>          \n        </div> \n      <div class=\"row\"><div class=\"col-md-12\"><div class=\"well well-\n       sm\">          \n            <p>Last message from child components: <strong> \n               {{lastMessage}}</strong>\n            </p> \n           </div></div></div>           \n    </div> \n}) \nexport class AppComponent {  \n  title: string; \n  description: string; \n  secondComponentText: string; \n  lastMessage: string; \n  constructor(){ \n    this.title = 'Mastering Angular - Chapter 4, Example 2'; \n    this.description = 'This is an example for an Angular 2 root   \n    component with an element and class selector and a child component \n    with an element attribute selector.'; \n    this.secondComponentText = 'Another child component goes here'; \n  } \n\n  onChildMessageReceived($event: string) \n  { \n    this.lastMessage = $event; \n  } \n} \n\n```", "```ts\n@NgModule({ \n  imports:      [ BrowserModule ], \n  declarations: [ AppComponent, ChildComponent ], \n  bootstrap:    [ AppComponent ] \n}) \nexport class AppModule { } \n\n```", "```ts\nimport {Component, Input, Output, EventEmitter, OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked} from '@angular/core'; \n@Component({ \n  selector: 'div[my-child-comp]', \n  template: ` \n  <h2>These are the lifecycle events for a child component:</h2> \n  <p class=\"lead\">Child component initial lifecycle events:</p> \n  <p>{{initialChildEvents}}</p> \n  <p class=\"lead\">Child component continuous lifecycle events:</p> \n  <p>{{continuousChildEvents}}</p> \n  <button class=\"btn btn-default\" type=\"button\" (click)=\"onClick()\">Send message from child to parent</button>` \n}) \nexport class ChildComponent implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked { \n  initialChildEvents: string[]; \n  continuousChildEvents: string[]; \n  @Output() onChildMessage = new EventEmitter<string>(); \n  private hasInitialLifecycleFinished: boolean = false; \n  private ngAfterViewCheckedEventCount: number = 0; \n  constructor() { \n    this.initialChildEvents = []; \n    this.continuousChildEvents = []; \n  } \n  private logEvent(message: string) { \n        if (!this.hasInitialLifecycleFinished) { \n            this.initialChildEvents.push(message); \n        } else { \n            this.continuousChildEvents.push(message); \n        } \n    } \n  ngOnChanges(): void { \n    this.logEvent(` [${new Date().toLocaleTimeString()}]-ngOnChanges`); \n  } \n  ngOnInit(): void { \n    this.logEvent(` [${new Date().toLocaleTimeString()}]-ngOnInit`); \n  } \n  ngDoCheck(): void { \n    this.logEvent(` [${new Date().toLocaleTimeString()}]-ngDoCheck`); \n  } \n  ngAfterContentInit(): void { \n    this.logEvent(` [${new Date().toLocaleTimeString()}]-\n    ngAfterContentInit`); \n  } \n  ngAfterContentChecked(): void { \n    this.logEvent(` [${new Date().toLocaleTimeString()}]-\n    ngAfterContentChecked`); \n  } \n  ngAfterViewInit(): void { \n    console.log(`child: [${new Date().toLocaleTimeString()}]-\n    ngAfterViewInit`); \n  } \n  ngAfterViewChecked(): void { \n    this.ngAfterViewCheckedEventCount += 1; \n    if (this.ngAfterViewCheckedEventCount === 2) { \n      this.hasInitialLifecycleFinished = true; \n    } \n    console.log(`child: [${new Date().toLocaleTimeString()}]-\n    ngAfterViewChecked`); \n  } \n  onClick() { \n    this.onChildMessage.emit(`Hello from ChildComponent at: ${new \n    Date().toLocaleTimeString()}`); \n  } \n} \n\n```", "```ts\nngAfterViewInit(): void { \n    this.logEvent(` [${new Date().toLocaleTimeString()}]-\n    ngAfterViewInit); \n} \n\n```", "```ts\n... \nexport class ChildComponent {  \n  private static instanceCount: number = 0;  \n  instanceId: number; \n  @Input() myText: string; \n  @Output() onChildMessage = new EventEmitter<string>(); \n\n  constructor(){ \n    ChildComponent.instanceCount += 1; \n    this.instanceId = ChildComponent.instanceCount; \n    this.myText = 'This is the default child component text.'; \n  } \n\n  onClick(){ \n    this.onChildMessage.emit(`Hello from ChildComponent with instance \n    id: ${this.instanceId}`); \n  } \n} \n\n```", "```ts\nimport { Component, ViewChildren, OnInit, QueryList } from '@angular/core'; \nimport { ChildComponent } from './child.component'; \n@Component({ \n    selector: 'div.container.my-app', \n    template: ` \n    <div class=\"container text-center\"> \n      <div class=\"row\"><div class=\"col-md-12\"> \n          <div class=\"page-header\"><h1>{{title}}</h1></div> \n          <p class=\"lead\">{{description}}</p>           \n      </div></div> \n      <div class=\"row\"> \n        <div class=\"col-md-6\"> \n          <button class=\"btn btn-default\" type=\"button\" \n (click)=\"firstChildComponent.myText='First child component \n goes here.'\">Set first child component text</button> \n          <button class=\"btn btn-default\" type=\"button\" \n (click)=\"firstChildComponent.onChildMessage.subscribe(onFirstChildComp\n onentMessageReceived)\">Set first child component message \n output</button> \n         </div>       \n         <div class=\"col-md-6\"> \n        <button class=\"btn btn-default\" type=\"button\" \n (click)=\"setSecondChildComponentProperties()\">Set second \n child component properties</button> \n         </div>          \n         </div>       \n      <div class=\"row\"> \n      <div class=\"col-md-6 well well-sm\" my-child-comp \n #firstChildComponent></div>       \n        <div class=\"col-md-6 well well-sm\" my-child-comp \n id=\"secondChildComponent\"></div>       \n      </div> \n      <div class=\"row\"><div class=\"col-md-12\"><div class=\"well well-\n      sm\">          \n            <p>Last message from child components: <strong>\n            {{lastMessage}}</strong></p> \n      </div></div></div>           \n    </div>` \n}) \nexport class AppComponent {  \n  title: string; \n  description: string; \n  lastMessage: string; \n  @ViewChildren(ChildComponent) childComponents: \n  QueryList<ChildComponent>; \n  constructor(){ \n    this.title = 'Mastering Angular - Chapter 4, Example 4'; \n    this.description = 'This is an example for how to reference \n    existing components from a parent component.'; \n    this.lastMessage = 'Waiting for child messages ...'; \n  } \n  onFirstChildComponentMessageReceived($event: string) \n  { \n    alert($event); \n  }   \n  setSecondChildComponentProperties(){     \n    this.childComponents.last.myText = \"The second child component goes \n    here.\"; \n    this.childComponents.last.onChildMessage.subscribe( (message: \n    string) => {  \n      this.lastMessage = message + ' (the message will be reset in 2 \n      seconds)'; \n      setTimeout( ()=>{ this.lastMessage = 'Waiting for child messages \n      ...';}, 2000); \n    }); \n  } \n} \n\n```", "```ts\n@ViewChildren(ChildComponent) childComponents: QueryList<ChildComponent>; \n\n```", "```ts\nimport {Injectable,EventEmitter} from '@angular/core'; \n@Injectable() \nexport class AppService { \n  private componentDescriptions: string[]; \n  private componentMessages: string[]; \n  public appServiceMessage$ = new EventEmitter <string> (); \n  constructor() { \n    this.componentDescriptions = [ \n      'The first child component goes here', \n      'The second child component goes here' \n    ]; \n    this.componentMessages = []; \n  } \n  getComponentDescription(index: number): string { \n    return this.componentDescriptions[index]; \n  } \n  sendMessage(message: string): void { \n    this.componentMessages.push(message); \n    this.appServiceMessage$.emit(message); \n  } \n  getComponentMessages(): string[] { \n    return this.componentMessages; \n  } \n} \n\n```", "```ts\nimport {Component, Input, Output, EventEmitter, OnInit} from '@angular/core'; \nimport {AppService} from './app.service'; \n\n@Component({ \n  selector: 'div[my-child-comp]', \n  template: ` \n        <p>{{myText}}</p> \n        <button class=\"btn btn-default\" type=\"button\" \n        (click)=\"onClick()\">Send message</button>` \n}) \nexport class ChildComponent implements OnInit { \n  @Input() index: number; \n  myText: string; \n  constructor(private appService: AppService) {} \n  ngOnInit() { \n    this.myText = this.appService.getComponentDescription(this.index); \n  } \n\n  onClick() { \n    if (this.appService.getComponentMessages().length > 3) { \n      this.appService.sendMessage(`There are too many messages ...`); \n      return; \n    } \n    this.appService.sendMessage(`Hello from ChildComponent with index: \n    ${this.index}`); \n  } \n} \n\n```", "```ts\nimport { Component, OnInit } from '@angular/core'; \nimport { AppService } from './app.service'; \n@Component({ \n    selector: 'div.container.my-app', \n    template: `<div class=\"container text-center\"> \n      <div class=\"row\"><div class=\"col-md-12\"> \n          <div class=\"page-header\"><h1>{{title}}</h1></div> \n          <p class=\"lead\">{{description}}</p> \n      </div></div> \n      <div class=\"row\"> \n        <div class=\"col-md-6 well\" my-child-comp index=\"0\"></div>       \n        <div class=\"col-md-6 well\" my-child-comp index=\"1\"></div>          \n      </div> \n      <div class=\"row\"><div class=\"col-md-12\"><div class=\"well well-\n       sm\"> \n            <p><strong>Last message received:</strong> \n             {{lastMessageReceived}}</p> \n            <p><strong>Messages from child components:</strong> \n            {{appService.getComponentMessages()}}</p> \n       </div></div></div>           \n    </div>` \n}) \nexport class AppComponent implements OnInit {  \n  title: string; \n  description: string; \n  lastMessageReceived: string; \n  constructor(private appService: AppService){ \n    this.title = 'Mastering Angular - Chapter 4, Example 4'; \n    this.description = 'This is an example of how to communicate and \n    share data between components via services.';     \n  }  \n  ngOnInit(){ \n    this.appService.appServiceMessage$.subscribe((message:string) => { \n      this.lastMessageReceived = message; \n    }); \n  } \n} \n\n```"]