["```ts\nng new chap10\ncd chap10\nnpm install --save @angular/material \nnpm install --save @angular/animations\nnpm install --save hammerjs \n\n```", "```ts\n//src/app/app.module.ts\n\nimport { MaterialModule } from '@angular/material';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n declarations: [\n   AppComponent\n ],\n imports: [\n   BrowserModule,\n   FormsModule,\n   HttpModule,\n   ReactiveFormsModule,\n   NgbModule.forRoot(),\n   MaterialModule.forRoot()\n ],\n providers: [],\n bootstrap: [AppComponent]\n})\nexport class AppModule { } \n\n```", "```ts\n@import '~@angular/material/core/theming/prebuilt/deeppurple-\n     amber.css'; \n\n```", "```ts\n@media (min-width: 600dp) {\n .class {\n   content: 'Whoa.';\n }\n} \n\n```", "```ts\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" \n    rel=\"stylesheet\"> \n\n```", "```ts\n<!doctype html>\n<html>\n<head>\n <meta charset=\"utf-8\">\n <title>Chap10</title>\n <base href=\"/\">\n\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" \n    rel=\"stylesheet\">\n</head>\n<body>\n <app-root>Loading...</app-root>\n</body>\n</html> \n\n```", "```ts\n<h1>\n {{title}}\n\n <i class=\"material-icons\">cast_connected</i>\n</h1> \n\n```", "```ts\n\n @Component({\n  selector: 'buttons',\n  template: `\n    <button md-button>FLAT</button>\n    <button md-raised-button>RAISED</button> \n    <button md-fab>\n        <md-icon>add</md-icon>\n    </button>\n    <button md-mini-fab>\n        <md-icon>add</md-icon>\n    </button>\n    <button md-raised-button color=\"primary\">PRIMARY</button>\n    <button md-raised-button color=\"accent\">ACCENT</button>\n    <button md-raised-button color=\"warn\">WARN</button>\n  `\n })\n export class ButtonsComponent {\n  constructor() { }\n }\n\n```", "```ts\n@Component({\n selector: 'menu',\n template: `\n <md-menu>\n     <button md-menu-item> Refresh </button>\n     <button md-menu-item> Settings </button>\n     <button md-menu-item> Help </button>\n     <button md-menu-item disabled> Sign Out </button>\n </md-menu>\n `\n})\nexport class MenuComponent {\n constructor() { }\n} \n\n```", "```ts\n<md-toolbar>\n One good looking toolbar\n</md-toolbar> \n\n```", "```ts\n<md-toolbar [color]=\"accent\">\n  One good looking toolbar\n</md-toolbar>\n<md-toolbar [color]=\"warn\">\n  <span>First Row</span>\n\n  <md-toolbar-row>\n    <span>Second Row</span>\n  </md-toolbar-row>\n\n  <md-toolbar-row>\n    <span>Third Row</span>\n  </md-toolbar-row>\n</md-toolbar>\n<md-toolbar [color]=\"primary\">\n  Another good looking toolbar\n</md-toolbar> \n\n```", "```ts\n@Component({\n selector: 'draft-component',\n template: `\n <button type=\"button\" (click)=\"openDialog()\">Open dialog</button>\n `\n})\nexport class DraftComponent {\n\n dialogRef: MdDialogRef<DraftDialog>;\n\n constructor(public dialog: MdDialog) { }\n\n openDialog() {\n   this.dialogRef = this.dialog.open(DraftDialog, {\n     disableClose: false\n   });\n\n   this.dialogRef.afterClosed().subscribe(result => {\n     console.log('result: ' + result);\n     this.dialogRef = null;\n   });\n }\n} \n\n```", "```ts\n@Component({\n selector: 'draft-dialog',\n template: `\n <md-dialog-content>\n   Discard Draft?\n </md-dialog-content>\n <md-dialog-actions>\n   <button (click)=\"dialogRef.close('can\ncel')\">Cancel</button>\n   <button md-dialog-close>Discard</button>\n </md-dialog-actions>\n `\n})\nexport class DraftDialog {\n constructor(public dialogRef: MdDialogRef<DraftDialog>) { }\n} \n\n```", "```ts\n@NgModule({\n declarations: [\n   ...,\n   DraftDialog\n ],\n entryComponents: [\n   ...,\n   DraftDialog\n ],\n ...\n})\nexport class AppModule { } \n\n```", "```ts\n@Component({\n selector: 'sidenav',\n template: `\n   <md-sidenav-container>\n   <md-sidenav #side (open)=\"closeButton.focus()\">\n      Side Navigation.\n     <br>\n     <button md-button #closeButton      \n         (click)=\"side.close()\">Close</button>\n   </md-sidenav>\n\n   My regular content. This will be moved into the proper DOM at \n       runtime.\n   <button md-button (click)=\"side.open()\">Open side sidenav</button>\n\n </md-sidenav-container>\n `\n})\nexport class SideNavComponent {\n constructor() { }\n} \n\n```", "```ts\n//src/styles.scss\n\n@import '~https://fonts.googleapis.com/icon?family=Material+Icons';\n@import '~@angular/material/core/theming/all-theme';\n// Plus imports for other components in your app.\n\n// Include the base styles for Angular Material core. We include this here so that you only\n// have to load a single css file for Angular Material in your app.\n@include md-core();\n\n// Define the palettes for your theme using the Material Design \n   palettes available in palette.scss\n// (imported above). For each palette, you can optionally specify a \n  default, lighter, and darker\n// hue.\n  $candy-app-primary: md-palette($md-indigo);\n  $candy-app-accent:  md-palette($md-pink, A200, A100, A400);\n\n// The warn palette is optional (defaults to red).\n   $candy-app-warn:    md-palette($md-red);\n\n// Create the theme object (a Sass map containing all of the palettes).\n  $candy-app-theme: md-light-theme($candy-app-primary, $candy-app-  \n   accent, $candy-app-warn);\n\n// Include theme styles for core and each component used in your app.\n// Alternatively, you can import and @include the theme mixins for each \n   component\n// that you are using.\n@include angular-material-theme($candy-app-theme); \n\n```"]