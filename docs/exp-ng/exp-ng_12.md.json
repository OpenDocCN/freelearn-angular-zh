["```ts\nfunction MovieService($http) {   \n  this.getMovieList = function   getMovieList() {   \n    return $http.get('/api/movies');   \n  };   \n}   \nangular.module('moviedb').service('MovieService',   MovieService);   \n\n```", "```ts\nfunction MovieService($http) {   \n  return {   \n    getMovieList: function() {   \n         return $http.get('/api/movies');   \n    }   \n  };   \n}   \nangular.module('moviedb').factory('MovieService',   MovieService);   \n\n```", "```ts\nfunction MovieController(MovieService   service) {   \n  service.getMovieList().then(function   (response) {   \n      // manage response   \n    });   \n}   \nangular.module('moviedb').controller('MovieController',   \n        MovieController);   \n\n```", "```ts\nclass MovieService {\n getMovieList() {\n  return $http.get('/api/movies');\n }\n}\napp.service('MovieService', MovieService);\n\n```", "```ts\nexport class Book { \n  id: number; \n  title: string; \n  author: string; \n  publisher: string; \n} \n\n```", "```ts\nimport { Injectable } from '@angular/core';\nimport {Book} from './book';\n@Injectable()\nexport class BookService {\n  getBooks() {\n  var books: Book[] = [\n    { \"id\": 1, \"title\": \"ASP.NET Web API Security Essentials\", author:   \n         \"Rajesh Gunasundaram\", publisher: \"Packt Publishing\" },\n    { \"id\": 2, \"title\": \"Learning Angular for .Net Developers\", author: \n         \"Rajesh Gunasundaram\", publisher: \"Packt Publishing\" },\n    { \"id\": 3, \"title\": \"Mastering Angular\", author: \"Rajesh \n         Gunasundaram\", publisher: \"Packt Publishing\" },\n   ];\n  return books;\n  }\n}\n\n```", "```ts\nimport { Component, OnInit } from '@angular/core';\nimport { Book } from './book';\nimport { BookService } from './book.service';\n@Component({\n   selector: 'book-list',\n   template: `\n   <div *ngFor=\"let book of books\">\n   {{book.id}} - {{book.title}}<br/>\n   Author: {{book.author}}<br/>\n   Publication: {{book.publisher}} \n   </div>\n    `,\n   providers: [BookService]\n  })\n export class BookListComponent implements OnInit {\n   books: Array<Book>;\n   constructor(private bookService: BookService) { }\n   ngOnInit() {   \n       this.books = this.bookService.getBooks();\n      }\n   }\n\n```", "```ts\nimport { Component } from '@angular/core';   \nimport { BookService } from './book.service';   \n\n@Component({   \n  selector: 'my-books',   \n  template: '   \n    <h2>Book Library</h2>   \n  <book-list></book-list>   \n  '   \n})   \nexport class AppComponent { }   \n\n```", "```ts\nimport { NgModule }          from '@angular/core';   \nimport { BrowserModule }  from '@angular/platform-browser';   \nimport { AppComponent }   from './app.component';   \nimport { BookListComponent }  from './book-list.component';   \n\n@NgModule({   \n  imports:        [ BrowserModule ],   \n  declarations: [ AppComponent,   BooklistComponent ],   \n  bootstrap:     [ AppComponent ]   \n})   \nexport class AppModule { }   \n\n```", "```ts\n<!DOCTYPE html>   \n<html>   \n  <head>   \n    <base href=\"/\">   \n    <title>Book   Library</title>   \n    <meta charset=\"UTF-8\">   \n    <meta name=\"viewport\"   content=\"width=device-width, initial-\n          scale=1\">   \n  </head>   \n  <body>   \n    <h1>TodoList Angular app for   Packt Publishing...</h1>\n\n```", "```ts\n    <my-books>Loading...</my-books>   \n  </body>   \n</html>   \n\n```", "```ts\ne:\\Explore\\packt\\MovieDB>ng generate   service Movie   \ninstalling service   \n  create src\\app\\movie.service.spec.ts   \n  create src\\app\\movie.service.ts   \n\ne:\\Explore\\packt\\MovieDB>   \n\n```", "```ts\nimport { Injectable } from '@angular/core';   \n\n@Injectable()   \nexport class MovieService {   \n\n  constructor() { }   \n\n}   \n\n```", "```ts\nimport { Injectable } from '@angular/core';   \n\n@Injectable()   \nexport class MovieService {   \n\n  constructor() { }   \n  getMovies(): void {}   \n}   \n\n```", "```ts\ne:\\Explore\\packt\\MovieDB>ng generate   class Movie   \ninstalling class   \n  create src\\app\\movie.spec.ts   \n  create src\\app\\movie.ts   \n\ne:\\Explore\\packt\\MovieDB>   \n\n```", "```ts\nexport class Movie {   \n}   \n\n```", "```ts\nexport class Movie {   \n\n   public constructor(   \n         private _movie_id:number,   \n         private _title: string,   \n         private _phase: string,   \n         private _category_name: string,   \n         private _release_year: number,   \n         private _running_time: number,   \n         private _rating_name: string,   \n         private _disc_format_name:   string,   \n         private _number_discs: number,   \n         private _viewing_format_name:   string,   \n         private _aspect_ratio_name:   string,   \n         private _status: string,   \n         private _release_date: string,   \n         private _budget: number,   \n         private _gross: number,   \n         private _time_stamp:Date){   \n   }   \n\n   public toString = () : string => {   \n\n         return `Movie (movie_id:   ${this._movie_id},   \n         title: ${this._title},   \n         phase: ${this._phase},   \n         category_name:   ${this._category_name},   \n         release_year:   ${this._release_year},   \n         running_time: ${this._running_time},   \n         rating_name:   ${this._rating_name},   \n         disc_format_name:   ${this._disc_format_name},   \n          number_discs:   ${this._number_discs},   \n         viewing_format_name:   ${this._viewing_format_name},   \n         aspect_ratio_name: ${this._aspect_ratio_name},   \n         status: ${this._status},   \n         release_date:   ${this._release_date},   \n         budget: ${this._budget},   \n         gross: ${this._gross},   \n         time_stamp:   ${this._time_stamp})`;   \n\n   }   \n}   \n\n```", "```ts\ngetMovies(): Movie[] {   \n    let movies: Movie[] = [   \n          {   \n               \"movie_id\" : 1,   \n               \"title\" : \"Iron   Man\",   \n               \"phase\" : \"Phase   One: Avengers Assembled\",   \n               \"category_name\"   : \"Action\",   \n               \"release_year\" :   2015,   \n               \"running_time\" :   126,   \n               \"rating_name\" : \"PG-13\",   \n               \"disc_format_name\"   : \"Blu-ray\",   \n               \"number_discs\" :   1,   \n               \"viewing_format_name\"   : \"Widescreen\",   \n               \"aspect_ratio_name\"   : \" 2.35:1\",   \n               \"status\" : 1,   \n               \"release_date\" :   \"May 2, 2008\",   \n               \"budget\" : \"140,000,000\",   \n               \"gross\" : \"318,298,180\",   \n               \"time_stamp\" : \"2015-05-03\"   \n         },   \n          {   \n               \"movie_id\" : 2,   \n               \"title\" : \"Spiderman\",   \n               \"phase\" : \"Phase   One\",   \n               \"category_name\"   : \"Action\",   \n               \"release_year\" :   2014,   \n               \"running_time\" :   126,   \n               \"rating_name\" : \"PG-13\",   \n               \"disc_format_name\"   : \"Blu-ray\",   \n               \"number_discs\" :   1,   \n               \"viewing_format_name\"   : \"Widescreen\",   \n               \"aspect_ratio_name\"   : \" 2.35:1\",   \n               \"status\" : 1,   \n               \"release_date\" :   \"May 2, 2008\",   \n               \"budget\" : \"140,000,000\",   \n               \"gross\" : \"318,298,180\",   \n               \"time_stamp\" : \"2015-05-03\"   \n         }   \n        ];   \n        return movies;   \n  }   \n\n```", "```ts\nimport { Injectable } from '@angular/core';   \nimport { Movie} from './movie';   \n\n@Injectable()   \nexport class MovieService {   \n  getMovies(): Movie[] {   \n    let movies: Movie[] = [   \n          {   \n               \"movie_id\" : 1,   \n               \"title\" : \"Iron   Man\",   \n               \"phase\" : \"Phase   One: Avengers Assembled\",   \n               \"category_name\"   : \"Action\",   \n               \"release_year\" :   2015,   \n               \"running_time\" :   126,   \n               \"rating_name\" : \"PG-13\",   \n               \"disc_format_name\"   : \"Blu-ray\",   \n               \"number_discs\" :   1,   \n               \"viewing_format_name\"   : \"Widescreen\",   \n               \"aspect_ratio_name\"   : \" 2.35:1\",   \n               \"status\" : 1,   \n               \"release_date\" :   \"May 2, 2008\",   \n               \"budget\" : \"140,000,000\",   \n               \"gross\" : \"318,298,180\",   \n               \"time_stamp\" : \"2015-05-03\"   \n         },   \n          {   \n               \"movie_id\" : 2,   \n               \"title\" : \"Spiderman\",   \n               \"phase\" : \"Phase   One\",   \n               \"category_name\"   : \"Action\",   \n               \"release_year\" :   2014,   \n               \"running_time\" :   126,   \n               \"rating_name\" : \"PG-13\",   \n               \"disc_format_name\"   : \"Blu-ray\",   \n               \"number_discs\" :   1,   \n               \"viewing_format_name\"   : \"Widescreen\",   \n               \"aspect_ratio_name\"   : \" 2.35:1\",   \n               \"status\" : 1,   \n               \"release_date\" :   \"May 2, 2008\",   \n               \"budget\" : \"140,000,000\",   \n               \"gross\" : \"318,298,180\",   \n               \"time_stamp\" : \"2015-05-03\"   \n         }   \n        ];   \n        return movies;   \n  }   \n}   \n\n```", "```ts\ne:\\Explore\\packt\\MovieDB>ng generate   component movie   \ninstalling component   \n  create src\\app\\movie\\movie.component.css   \n  create   src\\app\\movie\\movie.component.html   \n  create   src\\app\\movie\\movie.component.spec.ts   \n  create src\\app\\movie\\movie.component.ts   \n\ne:\\Explore\\packt\\MovieDB>   \n\n```", "```ts\nimport { Component, OnInit } from '@angular/core';   \n\n@Component({   \n  selector: 'app-movie',   \n  templateUrl: './movie.component.html',   \n  styleUrls: ['./movie.component.css']   \n})   \nexport class MovieComponent implements   OnInit {   \n\n  constructor() { }   \n\n  ngOnInit() {   \n  }   \n\n}   \n\n```", "```ts\nlet movieService = new MovieService();   \n\n```", "```ts\nimport { Component, OnInit } from '@angular/core';   \nimport { MovieService } from './movie.service';   \nimport { Movie } from './movie';   \n\n@Component({   \n  selector: 'app-movie',   \n  templateUrl: './movie.component.html',   \n  styleUrls: ['./movie.component.css']   \n})   \nexport class MovieComponent implements   OnInit {   \n  movies : Movie[];   \n\n  constructor() { }   \n\n  ngOnInit() {   \n    let movieService = new   MovieService();   \n    this.movies =   movieService.getMovies();   \n  }   \n\n}   \n\n```", "```ts\ngetMovies(): Promise<Movie[]> {   \n    let movies: Movie[] = [   \n          {   \n               \"movie_id\" : 1,   \n               \"title\" : \"Iron   Man\",   \n               \"phase\" : \"Phase   One: Avengers Assembled\",   \n               \"category_name\"   : \"Action\",   \n               \"release_year\" :   2015,   \n               \"running_time\" :   126,   \n               \"rating_name\" : \"PG-13\",   \n               \"disc_format_name\"   : \"Blu-ray\",   \n               \"number_discs\" :   1,   \n               \"viewing_format_name\"   : \"Widescreen\",   \n               \"aspect_ratio_name\"   : \" 2.35:1\",   \n               \"status\" : 1,   \n               \"release_date\" :   \"May 2, 2008\",   \n               \"budget\" : \"140,000,000\",   \n               \"gross\" : \"318,298,180\",   \n               \"time_stamp\" : \"2015-05-03\"   \n         },   \n          {   \n               \"movie_id\" : 2,   \n               \"title\" : \"Spiderman\",   \n               \"phase\" : \"Phase   One\",   \n               \"category_name\"   : \"Action\",   \n               \"release_year\" :   2014,   \n               \"running_time\" :   126,   \n               \"rating_name\" : \"PG-13\",   \n               \"disc_format_name\"   : \"Blu-ray\",   \n               \"number_discs\" :   1,   \n               \"viewing_format_name\"   : \"Widescreen\",   \n               \"aspect_ratio_name\"   : \" 2.35:1\",   \n               \"status\" : 1,   \n               \"release_date\" :   \"May 2, 2008\",   \n               \"budget\" : \"140,000,000\",   \n               \"gross\" : \"318,298,180\",   \n               \"time_stamp\" : \"2015-05-03\"   \n         }   \n        ];   \n  return Promise.resolve(movies);   \n}   \n\n```", "```ts\nngOnInit() {   \n    let movieService = new   MovieService();   \n    movieService.getMovies().then(movies   => this.movies = movies);   \n}   \n\n```"]