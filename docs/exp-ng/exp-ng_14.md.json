["```ts\nnpm install @angular/animations@latest --save\n\n```", "```ts\nimport { BrowserAnimationsModule } from '@angular/platform-\n   browser/animations';\n\n```", "```ts\n@ngModule({\n imports: [\nBrowserModule,\nBrowserAnimationsModule\n ],\n//other imports\n})\n\n```", "```ts\n\nanimations : [\n trigger('slideInOut', [\n  state('in', style({\n      transform: 'translate3d(0, 0, 0)'\n    })),\n  state('out', style({\n      transform: 'translate3d(100%, 0, 0)'\n    })),\n  transition('in => out', animate('400ms ease-in-out')),\n  transition('out => in', animate('400ms ease-in-out'))\n ])\n]\n\n```", "```ts\ntrigger('triggerName', [\n  we define states and transitions here\n])\n\n```", "```ts\nstate('in', style({\n backgroundColor: '#ffffcc'\n}))\n\n```", "```ts\n//Duration Example - seconds or milliseconds\ntransition('in => out', animate('100')) \n\n// Easing Example: refer http://easings.net\ntransition('in => out', animate('300ms ease-in'))\n\n// Using Delay in Animation\ntransition('in => out', animate('10s 50ms'))\n\n```", "```ts\nimport { Component } from '@angular/core';\nimport { state, style, animate, trigger, transition, keyframes} from '@angular/core';\n\n@Component({\n templateUrl: './learn-animation.component.html',\n styleUrls: ['./learn-animation.component.css'],\n animations : [\n trigger('customHover', [\n  state('inactive', style({\n   transform: 'scale(1)',\n    backgroundColor: '#ffffcc'\n  })),\n  state('active', style({\n   transform: 'scale(1.1)',\n   backgroundColor: '#c5cae8'\n  })),\n\n transition('inactive => active', animate('100ms ease-in')),\n transition('active => inactive', animate('100ms ease-out'))\n ]),\n ]\n})\nexport class AppComponent {\n title = 'Animation works!';\n constructor() {}\n\n state: string = 'inactive';\n toggleBackground() {\n  this.state = (this.state === 'inactive' ? 'active' : 'inactive');\n }\n}\n\n```", "```ts\n<div>\n <div id=\"content\" [@customHover]='state' \n       (mouseover)=\"toggleBackground()\"  \n       (mouseout)=\"toggleBackground()\">Watch this fade</div>\n</div>\n\n```", "```ts\n trigger('animationToggle', [\n  transition('show => hide', [\n   style({transform: 'translateX(-100%)'}),\n   animate(350) ]),\n   transition('hide => show', animate('3000ms'))\n ])\n\n```", "```ts\ntransition('frameTest1 => frameTest2', [\n animate(300, keyframes([\n style({opacity: 1, transform: 'rotate(180deg)', offset: 0.3}),\n style({opacity: 1, transform: 'rotate(-90deg)', offset: 0.7}),\n style({opacity: 0, transform: 'rotate(-180deg)', offset: 1.0})\n ]))\n\n```", "```ts\nimport { Component } from '@angular/core';\nimport { state, style, animate, trigger, transition, keyframes} from '@angular/animations';\n\n@Component({\n selector: 'app-learn-animation',\n templateUrl: './learn-animation.component.html',\n styleUrls: ['./learn-animation.component.css'],\n animations: [\n trigger('animationState', [\n   state('frameTest1', style({ transform: 'translate3d(0, 0, 0)'  })),\n   state('frameTest2', style({ transform:\n                 'translate3d(300px, 0, 0)'  })),\n   transition('frameTest1 => frameTest2', \n                  animate('300ms ease-in-out')),\n\n   transition('frameTest2 => frameTest1', [\n     animate(1000, keyframes([\n       style({opacity: 1, transform: 'rotate(180deg)', offset: 0.3}),\n       style({opacity: 1, transform: 'rotate(-90deg)', offset: 0.7}),\n       style({opacity: 0, transform: 'rotate(-180deg)', offset: 1.0})\n     ]))\n   ])\n  ])\n ]\n})\nexport class LearnAnimationComponent{\n constructor() {}\n\n public left : string = 'frameTest1';\n public onClick () : void\n {\n  this.left = this.left === 'frameTest1' ? 'frameTest2' : 'frameTest1';\n }\n}\n\n```", "```ts\n<h4>Keyframe Effects</h4>\n\n<div class=\"animateElement\" [@animationState]=\"left\"    \n  (click)=\"onClick()\">\n     Click to slide right/ Toggle to move div\n</div>\n\n```", "```ts\n<h4>Collapse Menu</h4>\n\n<button (click)=\"toggleMenu()\" class=\"menuIcon\">Toggle Menu</button>\n <div class=\"menu\" [@toggleMenu]=\"menuState\">\n <ul>\n   <li>Home</li>\n   <li>Angular</li>\n   <li>Material Design</li>\n   <li>Sridhar Rao</li>\n   <li>Packt Publications</li>\n </ul>\n</div>\n\n```", "```ts\n.animateElement{\n   background:red;\n   height:100px;\n   width:100px;\n}\n.menu {\n   background: #FFB300;\n   color: #fff;\n   position: fixed;\n   left: auto;\n   top: 0;\n   right: 0;\n   bottom: 0;\n   width: 20%;\n   min-width: 250px;\n   z-index: 9999;\n   font-family: Arial, \"Helvetica Neue\", Helvetica, sans-serif;\n }\n\n ul {\n   font-size: 18px;\n   line-height: 3;\n   font-weight: 400;\n   padding-top: 50px;\n   list-style: none;\n }\n .menuIcon:hover {\n   cursor: pointer;\n }\n\n```", "```ts\nimport { Component } from '@angular/core';\nimport { state, style, animate, trigger, transition, keyframes} from '@angular/core';\n\n@Component({\n selector: 'app-learn-animation',\n templateUrl: './learn-animation.component.html',\n styleUrls: ['./learn-animation.component.css'],\n animations: [\n\n  trigger('toggleMenu', [\n   state('opened', style({\n    transform: 'translate3d(0, 0, 0)'\n   })),\n   state('closed', style({\n    transform: 'translate3d(100%, 0, 0)'\n   })),\n   transition('opened => closed', animate('400ms ease-in-out')),\n   transition('closed => opened', animate('400ms ease-in-out'))\n  ])\n ])\n ]\n})\nexport class LearnAnimationComponent{\n\nconstructor() {}\n menuState : string = 'opened';\n toggleMenu()\n {\n  this.menuState = this.menuState === 'closed' ? 'opened' : 'closed';\n }\n}\n\n```"]