["```ts\nclass Movie{\n\n     constructor(private title:string, private release_year:number){}\n\n     public getTitle():string{\n         return this.title;\n     }\n     public getReleaseYear():number{\n         return this.release_year;\n     }\n }\n\n```", "```ts\nclass Model{\n\n     private movies:Movie[] = [];\n\n     constructor(){\n     }\n\n     public addMovie(title:string, year:number){\n         let movie:Movie = new Movie(title, year);\n         this.movies.push(movie);\n         this.appendView(movie);\n     }\n\n     private appendView(movie:Movie){\n         var node = document.createElement(\"LI\"); \n         var textnode = document.createTextNode(movie.getTitle() +\n              \"-\" + movie.getReleaseYear()); \n         node.appendChild(textnode);\n         document.getElementById(\"movies\").appendChild(node);\n     }\n\n }\n\n```", "```ts\n\n class Controller{\n\n     private model:Model;\n\n     constructor(){\n\n         this.model = new Model();\n     }\n\n     click(title:string, year:number){\n\n         console.log(title, year);\n         this.model.addMovie(title, year);\n\n     }\n\n }\n let controller = new Controller();\n\n```", "```ts\n<html>\n     <head>\n         <script src=\"mvc.js\"></script>\n     </head>\n     <body>\n         <h1>Movies</h1>\n         <div id=\"movies\">\n         </div>\n\n         <form action=\"#\" onsubmit=\"controller.click(this.title.value,\n              this.year.value); return false;\">\n             Title: <input name=\"title\" type=\"text\" id=\"title\">\n             Year: <input name=\"year\" type=\"text\" id=\"year\">\n            <input type=\"submit\">\n         </form>\n\n     </body>\n </html>\n\n```", "```ts\nvar Movie = (function () {\n     function Movie(title, release_year) {\n         this.title = title;\n         this.release_year = release_year;\n     }\n     Movie.prototype.getTitle = function () {\n         return this.title;\n     };\n     Movie.prototype.getReleaseYear = function () {\n         return this.release_year;\n     };\n     return Movie;\n }());\n /// <reference path=\"./movie.ts\"/>\n var Model = (function () {\n     function Model() {\n         this.movies = [];\n     }\n     Model.prototype.addMovie = function (title, year) {\n         var movie = new Movie(title, year);\n         this.movies.push(movie);\n         this.appendView(movie);\n     };\n     Model.prototype.appendView = function (movie) {\n         var node = document.createElement(\"LI\");\n         var textnode = document.createTextNode(movie.getTitle() +\n                 \"-\" + movie.getReleaseYear());\n         node.appendChild(textnode);\n         document.getElementById(\"movies\").appendChild(node);\n     };\n     return Model;\n }());\n /// <reference path=\"./model.ts\"/>\n var Controller = (function () {\n     function Controller() {\n         this.model = new Model();\n     }\n     Controller.prototype.add = function (title, year) {\n         console.log(title, year);\n         this.model.addMovie(title, year);\n     };\n     return Controller;\n }());\n var controller = new Controller();\n\n```", "```ts\nexport class User {\n\n     public constructor(private _email:string, private _password:string){}\n\n     get email():string{\n         return this._password;\n     }\n\n     get password():string{\n         return this._email;\n     }\n\n     set email (email:string){\n         this._password = email;\n     }\n\n     set password (password:string){\n         this._email = password;\n     }\n\n }\n\n```", "```ts\nuser:User = new User('mathieu.nayrolles@gmail.com', 'password');\n\nconsole.log(user.email); // will print mathieu.nayrolles@gmail.com\n\n```", "```ts\nvar email = function(){\n     return \"mathieu.nayrolles@gmail.com\";\n }\n console.log(email);\n\n```", "```ts\nexport class UserModel{\n\n     private user:User;\n     private _loading:boolean = false;\n\n     public constructor(private api:APIService){}\n\n     public signin(email:string, password:string){\n\n         this._loading = true;\n\n         this.api.getUser(new User(email, password)).then(\n\n             user => {\n                 this.user = user;\n                 this._loading = false;\n             }\n         );\n     }\n\n     public signup(email:string, password:string){\n\n         this._loading = true;\n         this.api.postUser(new User(email, password)).then(\n             user => {\n                 this.user = user;\n                 this._loading = false;\n             }   \n         );\n     }\n\n     get loading():boolean{\n         return this._loading;\n     }\n }\n\n```", "```ts\n@Component({\n     templateUrl: 'user.html'\n })\n export class UserComponent{\n\n     private model:UserModel;\n\n     public constructor(api:APIService){\n\n         this.model = new UserModel(api);\n     }\n\n     public signinClick(email:string, password:string){\n         this.model.signin(email, password);\n     }\n\n     public signupClick(email:string, password:string){\n         this.model.signup(email, password);\n     }\n\n }\n\n```", "```ts\n\n <h1>Signin</h1>\n\n <form action=\"#\" onsubmit=\"signinClick(this.email.value, this.password.value); return false;\">\n\n     email: <input name=\"email\" type=\"text\" id=\"email\">\n     password: <input name=\"password\" type=\"password\" id=\"password\">\n    <input [hidden]=\"model.loading\" type=\"submit\">\n    <i [hidden]=\"!model.loading\" class=\"fa fa-spinner\" \n         aria-hidden=\"true\">loading</i>\n </form>\n\n <h1>Signup</h1>\n\n <form action=\"#\" onsubmit=\"signupClick(this.email.value,\n      this.password.value); return false;\">\n\n     email: <input name=\"email\" type=\"text\" id=\"email\">\n     password: <input name=\"password\" type=\"password\" id=\"password\">\n     <input [hidden]=\"model.loading\" type=\"submit\">\n     <i [hidden]=\"!model.loading\" class=\"fa fa-spinner\" \n       aria-hidden=\"true\">loading</i>\n </form>\n\n```", "```ts\nexport interface IModel{\n\n     protected get(POTO):POTO;\n     protected put(POTO):POTO;\n     protected post(POTO):POTO;\n     protected delete(POTO):boolean;\n     protected patch(POTO):POTO;\n\n }\n\n```", "```ts\nexport class AbstractModel<T extends POTO> implements IModel{\n     protected T domainModel;\n\n     public constructor(protected api:APIService){}\n\n     protected get(POTO):T{\n         //this.api.get ...\n     };\n     protected put(T):T{\n         //this.api.put...\n     };\n     protected post(T):T{\n         //this.api.post...\n     };\n     protected delete(T):boolean{\n         //this.api.delete...\n     };\n     protected patch(T):T{\n         //this.api.patch...\n     };\n}\n\nexport class UserModel extends AbstractModel<User>{\n\n     public constructor(api:APIService){\n         super(api);\n     }\n\n     public signin(email:string, password:string){\n\n         this._loading = true;\n\n         this.get(new User(email, password)).then(\n\n             user => {\n                 this.user = user;\n                 this._loading = false;\n             }\n         );\n     }\n\n     public signup(email:string, password:string){\n\n         this._loading = true;\n         this.post(new User(email, password)).then(\n             user => {\n                 this.user = user;\n                 this._loading = false;\n             }   \n         );\n     }\n     //Only the code specialized for the UI! \n }\n\n```", "```ts\nexport class UserController{\n\n     public UserComponent(protected model:UserModel){\n     }\n\n     public signin(email:string, password:string){\n         this.model.signin(email, password);\n     }\n\n     public signup(email:string, password:string){\n         this.model.signup(email, password);\n     }\n\n }\n\n```", "```ts\nexport class LoginPage extends UserController{\n\n     public LoginPage(api:APIService){\n         super(new UserModel(api));\n     }\n\n     //Only what's different on mobile!\n\n }\n\n```", "```ts\n@Component({\n     templateUrl: 'login.html'\n })\n export class LoginComponent extends UserController{\n\n     public UserComponent(api:APIService){\n\n         super(new UserModel(api));\n     }\n\n     //Only what's different on the browser !\n\n }\n\n```", "```ts\nexport class MySingleton{\n\n     private static instance:MySingleton = null;\n\n   //This constructor is private in order to prevent new creation  \n   //of MySingleton objects    private constructor(){\n\n     }\n\n     public static getInstance():MySingleton{\n         if(MySingleton.instance == null){\n             MySingleton.instance = new MySingleton();\n         }         return MySingleton.instance;    }\n\n }\n\n let singleton:MySingleton = MySingleton.getInstance();\n\n```", "```ts\nlet singleton:MySingleton = new MySingleton(); \n\n```", "```ts\nexport class MySingleton{\n\n     private static instance:MySingleton = new MySingleton();\n\n     private constructor(){\n\n     }\n }\n\n singleton:MySingleton = MySingleton.getInstance();\n\n```", "```ts\n// ./service/api.service.ts\n import { Injectable } from '@angular/core';\n\n @Injectable()\n export class APIService {\n\n     private increment:number = 0;\n\n     public constructor(){\n         this.increment++;\n     }\n\n     public toString:string{\n         return \"Current instance: \" + this.increment;\n     }\n }\n\n // ./app.component.ts\n\n @Component({\n   selector: 'app-root',\n   templateUrl: './app.component.html',\n   styleUrls: ['./app.component.css'],\n })\n export class AppComponent {\n\n     public constructor(api:APIService){\n         console.log(api);\n     }\n\n }\n\n // ./other.component.ts\n\n @Component({\n   selector: 'other-root',\n   templateUrl: './other.component.html',\n   styleUrls: ['./other.component.css'],\n })\n export class OtherComponent {\n\n     public constructor(api:APIService){\n         console.log(api);\n     }\n }\n\n //app.module.ts\n\n import { BrowserModule } from '@angular/platform-browser';\n import { NgModule } from '@angular/core';\n import { FormsModule, ReactiveFormsModule  } from '@angular/forms';\n import { HttpModule } from '@angular/http';\n import { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n import { APIService } from './services/api.service'\n\n import { AppComponent } from './app.component';\n import { OtherComponent } from './other.component';\n\n @NgModule({\n   declarations: [\n     AppComponent,\n     OtherComponent\n   ],\n   imports: [\n     BrowserModule,\n     FormsModule,\n     HttpModule,\n     ReactiveFormsModule,\n     NgbModule.forRoot()\n   ],\n   providers: [APIService],\n   bootstrap: [AppComponent]\n })\n export class AppModule { }\n\n```", "```ts\nCurrent instance: 1\nCurrent instance: 1\n\n```", "```ts\n// ./app.component.ts\n\n @Component({\n   selector: 'app-root',\n   templateUrl: './app.component.html',\n   styleUrls: ['./app.component.css'],\n   providers: [APIService],\n })\n export class AppComponent {\n\n     public constructor AppComponent(APIService api){\n         console.log(api);\n     }\n\n }\n\n // ./other.component.ts\n\n @Component({\n   selector: 'other-root',\n   templateUrl: './other.component.html',\n   styleUrls: ['./other.component.css'],\n   providers: [APIService],\n })\n export class OtherComponent {\n\n     public constructor OtherComponent(APIService api){\n         console.log(api);\n     }\n }\n\n```", "```ts\nCurrent instance: 1\nCurrent instance: 2\n\n```", "```ts\nexport interface Prototype{\n\n     clone(): Prototype;\n }\n\n```", "```ts\nexport class Movie implements Prototype {\n\n     private title:string;\n     private year:number;\n     //...\n\n     public constructor(); \n     public constructor(title?: string, year?: number); \n     public constructor(title?: string, year?: number) { \n    {\n         if(title == undefined || year == undefined){\n             //do the expensive creation\n         }else{\n             this.title = title;\n             this.year = year;\n         }\n     }\n\n     clone() : Movie {\n         return new Movie(this.title, this.year);\n     }\n }\n\n let expensiveMovie:Movie = new Movie();\n cheapMovie = expensiveMovie.clone();\n\n```", "```ts\nexport class MoviePool{\n\n     private static movies:[{movie:Movie, used:boolean}];\n     private static nbMaxMovie = 10;\n     private static instance:MoviePool;\n\n     private constructor(){}\n\n     public static getMovie(){\n\n         //first hard create\n         if(MoviePool.movies.length == 0){\n\n             MoviePool.movies.push({movie:new Movie(), used:true});\n             return MoviePool.movies[0].movie;\n\n         }else{\n\n             for(var reusableMovie of MoviePool.movies){\n                 if(!reusableMovie.used){\n                     reusableMovie.used = true;\n                     return reusableMovie.movie;\n                 }\n             }\n         }\n\n         //subsequent clone create\n         if(MoviePool.movie.length < MoviePool.nbMaxMovie){\n\n             MoviePool.movies.push({movie:MoviePool.movies[MoviePool.movies.\n                length - 1].movie.clone(), used:true});\n             return MoviePool.movies[MoviePool.movies.length - 1].movie;\n         }\n\n         throw new Error('Out of movies');\n     }\n\n     public static releaseMovie(movie:Movie){\n         for(var reusableMovie of MoviePool.movies){\n             if(reusableMovie.movie === movie){\n                 reusableMovie.used = false;\n             }\n             return;\n         }\n     }\n }\n\n```", "```ts\nprivate static movies:[{movie:Movie, used:boolean}];  \n\n```", "```ts\nclass User{\n     constructor(private lastName:string, private firstName:string){\n     }\n     hello(){\n         console.log(\"Hi I am\", this.firstName, this.lastName);\n     }\n }\n\n```", "```ts\n[{\"lastName\":\"Nayrolles\",\"firstName\":\"Mathieu\"}...].  \n\n```", "```ts\nlet userFromJSONAPI: User = JSON.parse('[{\"lastName\":\"Nayrolles\",\"firstName\":\"Mathieu\"}]')[0]; \n\n```", "```ts\njson.ts:19\n userFromJSONAPI.hello();\n                  ^\n TypeError: userFromUJSONAPI.hello is not a function\n     at Object.<anonymous> (json.ts:19:18)\n     at Module._compile (module.js:541:32)\n     at Object.loader (/usr/lib/node_modules/ts-node/src/ts-node.ts:225:14)\n     at Module.load (module.js:458:32)\n     at tryModuleLoad (module.js:417:12)\n     at Function.Module._load (module.js:409:3)\n     at Function.Module.runMain (module.js:575:10)\n     at Object.<anonymous> (/usr/lib/node_modules/ts-node/\n        src/bin/ts-node.ts:110:12)\n     at Module._compile (module.js:541:32)\n     at Object.Module._extensions..js (module.js:550:10)\n\n```", "```ts\nlet validUser = JSON.parse('[{\"lastName\":\"Nayrolles\",\"firstName\":\"Mathieu\"}]')\n .map((json: any):User => {\n     return new User(json.lastName, json.firstName);\n })[0];\n\n```", "```ts\nexport class POTOFactory{\n\n     /**\n      * Builds an User from json response\n      * @param  {any}  jsonUser\n      * @return {User}         \n      */\n     static buildUser(jsonUser: any): User {\n\n         return new User(\n             jsonUser.firstName,\n             jsonUser.lastName\n         );\n     }\n }\n\n```", "```ts\n<div *ngFor=\"let movie of model.movies\"> \n   <p>{{movie.title}}</p> \n   <p>{{movie.year}}</p> \n</div> \n\n```", "```ts\n<form> \n   <input id=\"title\" name=\"title\" type=\"text\" [(ngModel)]=\"movie.title\" /> \n   <input id=\"year\" name=\"year\" type=\"text\" [(ngModel)]=\"movie.year\" /> \n</form> \n<a href=\"/back\">Cancel</a> \n\n```", "```ts\nexport class Movie implements Prototype { \n   private title:string; \n   private year:number; \n   //... \n       public constructor(); \n         public constructor(title?: string, year?: number); \n\n         public constructor(title?: string, year?: number) { \n\n         if(title == undefined || year == undefined){ \n         //do the expensive creation \n         }else{ \n         this.title = title; \n         this.year = year; \n         } \n   } \n\n   clone() : Movie { \n         return new Movie(this.title, this.year); \n   } \n   restore(movie:Movie){ \n         this.title = movie.title; \n         this.year = movie.year; \n   } \n} \n\n```", "```ts\nimport { Component } from '@angular/core'; \nimport { Movie } from './movie'; \n@Component({ \n  selector: 'app-root', \n  templateUrl: './app.component.html', \n  styleUrls: ['./app.component.css'] \n}) \nexport class AppComponent { \n  title = 'app works!'; \n\n  private memento: Movie; \n\n  constructor(){ \n    this.memento = new Movie(\"Title\", 2015); \n    let movieTmp = this.memento.clone(); \n    this.memento.setTitle(\"Another Title\"); \n    //Prints Another title \n    console.log(this.memento.getTitle()); \n    this.memento.restore(movieTmp); \n    //Prints Title \n    console.log(this.memento.getTitle()); \n  } \n} \n\n```"]