["```ts\n<h1>Book Details:</h1> \n<p>{{vm.bookName}}</p> \n<p>{{vm.authorName}}</p> \n\n```", "```ts\n<h1>Book Details:</h1> \n<p>{{bookName}}</p> \n<p>{{authorName}}</p> \n\n```", "```ts\n<h1>Book Details:</h1> \n<p>{{vm.bookName}}</p> \n<p>{{vm.releaseDate | date }}</p> \n\n```", "```ts\n<h1>Book Details:</h1> \n<p>{{bookName}}</p> \n<p>{{releaseDate | date }}</p> \n\n```", "```ts\n<tr ng-repeat=\"book in vm.books\"> \n  <td>{{book.name}}</td> \n</tr> \n\n```", "```ts\n<tr *ngFor=\"let book of books\"> \n  <td>{{book.name}}</td> \n</tr> \n\n```", "```ts\n<body ng-app=\"packtPub\"> \n\n```", "```ts\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic'; \nimport { AppModule } from './app/app.module'; \nplatformBrowserDynamic().bootstrapModule(AppModule); \n\n```", "```ts\n<div ng-class=\"{active: isActive}\"> \n\n```", "```ts\n<div [ngClass]=\"{active: isActive}\"> \n<div [class.active]=\"isActive\"> \n\n```", "```ts\n<button ng-click=\"vm.showBook()\"> \n<button ng-click=\"vm.showBook($event)\"> \n\n```", "```ts\n<button (click)=\"showBook()\"> \n<button (click)=\"showBook($event)\"> \n\n```", "```ts\n<div ng-controller=\"PacktBooksCtrl as vm\"> \n\n```", "```ts\n@Component({ \n  selector: 'packt-books', \n  templateUrl:'app/packtbooks.component.html' \n})\n\n```", "```ts\n(function () { \n  ... \n}()); \n\n```", "```ts\n@Component({ \n  selector: 'packt-books', \n  templateUrl:'app/packtbooks.component.html' \n}) \nexport class PacktBooks { \n} \n\n```", "```ts\nnpm i typescript --save-dev\n\n```", "```ts\n\"script\": {   \n  \"tsc\": \"tsc\",   \n  \"tsc:w\": \"tsc -w\",   \n}   \n\n```", "```ts\nnpm install\n\n```", "```ts\n<base href=\"/app/\">   \n\n```", "```ts\n<script src=\"/node_modules/core-js/client/shim.min.js\"></script>   \n<script src=\"/node_modules/zone.js/dist/zone.js\"></script>   \n<script src=\"/node_modules/systemjs/dist/system.src.js\"></script>   \n<script src=\"/systemjs.config.js\"></script>   \n<script>   \n  System.import('/app');   \n</script>   \n\n```", "```ts\nimport { NgModule } from '@angular/core';   \nimport { BrowserModule } from '@angular/platform-browser';   \n\n@NgModule({   \n  imports: [   \n    BrowserModule,   \n  ],   \n})   \nexport class AppModule {   \n}\n\n```", "```ts\nnpm install @angular/upgrade --save\n\n```", "```ts\nSystem.config({   \n    paths: {   \n      'npm:': '/node_modules/'   \n    },   \n    map: {   \n      'ng-loader': '../src/systemjs-angular-loader.js',   \n      app: '/app',   \n      '@angular/upgrade/static': 'npm:@angular/upgrade/bundles/upgrade-static.umd.js'   \n    }   \n})   \n\n```", "```ts\nimport { UpgradeModule } from '@angular/upgrade/static';   \n\n@NgModule({   \n  imports: [   \n    BrowserModule,   \n    UpgradeModule,   \n  ],   \n})   \nexport class AppModule {   \n  constructor(private upgrade:   UpgradeModule) { }   \n  ngDoBootstrap() {   \n      this.upgrade.bootstrap(document.documentElement, [yourApp']);   \n  }   \n}   \n\n```", "```ts\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';   \nimport { AppModule } from './app.module';      \nplatformBrowserDynamic().bootstrapModule(AppModule);   \n\n```", "```ts\nimport { HttpModule } from '@angular/http';   \n\n@NgModule({   \n  imports: [   \n    BrowserModule,   \n    UpgradeModule,   \n    HttpModule,   \n  ],   \n})   \nexport class AppModule {   \n  constructor(private upgrade:   UpgradeModule) { }   \n  ngDoBootstrap() {   \n      this.upgrade.bootstrap(document.documentElement, ['yourApp']);   \n  }   \n}   \n\n```", "```ts\n@Injectable()   \nexport class BookService {   \n/* . . . */   \n}   \n\n```", "```ts\n@Injectable()   \nexport class BookService {   \n  constructor(private http: Http) { }   \n  books(): Observable<Book[]> {   \n    return   this.http.get(`data/books.json`)   \n      .map((res: Response) =>   res.json());   \n  }   \n}   \n\n```", "```ts\nexport interface PhoneData {   \n  title: string;   \n  author: string;   \n  publication: string;   \n}   \n\n```", "```ts\ndeclare var angular:   angular.IAngularStatic;   \nimport { downgradeInjectable } from '@angular/upgrade/static';   \n\n@Injectable()   \nexport class BookService {   \n}   \n\nangular.module('core.lib')   \n  .factory('core.lib',   downgradeInjectable(BookService));   \n\n```", "```ts\nimport { Injectable } from '@angular/core';   \nimport { Http, Response } from '@angular/http';   \nimport { Observable } from 'rxjs/Rx';   \n\ndeclare var angular:   angular.IAngularStatic;   \nimport { downgradeInjectable } from '@angular/upgrade/static';   \n\nimport 'rxjs/add/operator/map';   \n\nexport interface Book {   \n  title: string;   \n  author: string;   \n  publication: string;   \n}   \n\n@Injectable()   \nexport class BookService {   \n  constructor(private http: Http) { }   \n  books(): Observable<Book[]> {   \n    return   this.http.get(`data/books.json`)   \n      .map((res: Response) =>   res.json());   \n  }   \n}   \n\nangular.module('core.lib')   \n  .factory('phone',   downgradeInjectable(BookService));   \n\n```", "```ts\nimport { BookService } from './book.service';   \n\n@NgModule({   \n  imports: [   \n    BrowserModule,   \n    UpgradeModule,   \n    HttpModule,   \n  ],   \n  providers: [   \n    BookService,   \n  ]   \n})   \nexport class AppModule {   \n  constructor(private upgrade:   UpgradeModule) { }   \n  ngDoBootstrap() {   \n    this.upgrade.bootstrap(document.documentElement,   [yourApp']);   \n  }   \n}   \n\n```", "```ts\ndeclare var angular:   angular.IAngularStatic;   \nimport { downgradeComponent } from '@angular/upgrade/static';   \n\n@Component({   \n  selector: 'book-list',   \n  templateUrl: './book-list.template.html'   \n})   \nexport class BookListComponent {   \n}   \n\nangular.module('bookList')   \n  .directive(   \n    'bookList',   \n    downgradeComponent({component:   BookListComponent}) as \n           angular.IDirectiveFactory   \n);   \n\n```", "```ts\nimport { BookListComponent } from './components/book-list.component';   \n\n@NgModule({   \n  imports: [   \n    BrowserModule,   \n    UpgradeModule,   \n    HttpModule   \n  ],   \n  declarations: [   \n    BookListComponent,   \n  ],   \n  entryComponents: [   \n    BookListComponent,   \n})   \nexport class AppModule {   \n  constructor(private upgrade:   UpgradeModule) { }   \n  ngDoBootstrap() {   \n      this.upgrade.bootstrap(document.documentElement, ['yourApp']);   \n  }   \n}   \n\n```", "```ts\n<ul>   \n    <li *ngFor=\"let book of books\">   \n      {{book.title}}   \n    </li>   \n  </ul>   \n\n```", "```ts\nimport { Component } from '@angular/core';   \n\n@Component({   \n  selector: 'your-app',   \n  template: '<router-outlet></router-outlet>'   \n})   \nexport class AppComponent { }   \n\n```", "```ts\n<body>   \n  <your-app></your-app>   \n</body>   \n\n```", "```ts\nimport { NgModule } from '@angular/core';   \nimport { Routes, RouterModule } from '@angular/router';   \nimport { HashLocationStrategy,   LocationStrategy } from '@angular/common';   \n\nimport { BookListComponent }   from './components/book-list.component';   \n\nconst routes: Routes = [   \n  { path: '', redirectTo: 'books',   pathMatch: 'full' },   \n  { path: 'books',          component:   BookListComponent }   \n];   \n\n@NgModule({   \n  imports: [ RouterModule.forRoot(routes)   ],   \n  exports: [ RouterModule ],   \n  providers: [   \n    { provide: LocationStrategy,   useClass: HashLocationStrategy },   \n  ]   \n})   \nexport class AppRoutingModule { }   \n\n```", "```ts\nimport { NgModule } from '@angular/core';   \nimport { BrowserModule } from '@angular/platform-browser';   \nimport { HttpModule } from '@angular/http';   \nimport { AppRoutingModule } from './app-routing.module';   \nimport { AppComponent }  from './app.component';   \nimport { BookService }   from './services/book.service';   \nimport { BookListComponent }  from './components/book-list.component';   \n\n@NgModule({   \n  imports: [   \n    BrowserModule,   \n    HttpModule,   \n    AppRoutingModule   \n  ],   \n  declarations: [   \n    AppComponent,   \n    BookListComponent   \n  ],   \n  providers: [   \n    BookService   \n  ],   \n  bootstrap: [ AppComponent ]   \n})   \nexport class AppModule {}   \n\n```"]