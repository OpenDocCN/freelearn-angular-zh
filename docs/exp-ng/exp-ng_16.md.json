["```ts\nnpm install -g angular-cli\n\n```", "```ts\nng new test-app\ncd test-app\n\n```", "```ts\nng g component ./test-app\n\n```", "```ts\nng serve\n\n```", "```ts\ndescribe(\"Sample Test Suite\", function() {\n it(\"This is a spec that defines test\", function() {\n   expect statement // asserts the logic etc\n });\n});\n\n```", "```ts\ndescribe('JavaScript addition operator', function () {  it('adds two numbers together', function () {  expect(1 + 2).toEqual(3); }); });\n\n```", "```ts\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { TestAppComponent } from './test-app.component';\n\ndescribe('Testing App Component', () => {\n   it('Test learning component', () => {\n    let component = new TestAppComponent();\n    expect(component).toBeTruthy();\n   });\n});\n\n```", "```ts\nng test\n\n```", "```ts\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n selector: 'app-test-app',\n templateUrl: './test-app.component.html',\n styleUrls: ['./test-app.component.css']\n})\nexport class TestAppComponent implements OnInit {\n  public authorName = 'Sridhar';\n}\n\n```", "```ts\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { TestAppComponent } from './test-app.component';\n\n describe('TestAppComponent', () => {\n  it('Testing App component', () => {\n   let component = new TestAppComponent();\n   expect(component.authorName).toMatch('Sridhar');\n  });\n});\n\n```", "```ts\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n selector: 'app-test-app',\n templateUrl: './test-app.component.html',\n styleUrls: ['./test-app.component.css']\n})\nexport class TestAppComponent {\n public authorName = 'Sridhar';\n public publisherName = 'Packt'\n\n public hiPackt() {\n return 'Hello '+ this.publisherName;\n }\n}\n\n```", "```ts\nit('Testing Component Method', () => {\n let component = new TestAppComponent();\n expect(component.hiPackt()).toBe(\"Hello Packt\");\n});\n\n```", "```ts\ndescribe('TestAppComponent', () => {  beforeEach(function() {\n  this.app = new TestAppComponent();\n });  it('Component should have matching publisher name', function() {\n  expect(this.app.publisherName).toBe('Packt');\n }); });\n\n```", "```ts\nbeforeEach(() => {  fixture = TestBed.createComponent(AppComponent);\n  comp = fixture.componentInstance;\n  de = fixture.debugElement.query(By.css('h1'));\n });\n\n```", "```ts\nimport { Component } from '@angular/core';\n\n@Component({\n selector: 'test-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent {\n title = 'Packt Testing works';\n}\n\n```", "```ts\n<h1> {{ title }} </h1>\n\n```", "```ts\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { ChangeDetectTestComponent } from './change-detect-test.component';\nimport { By } from '@angular/platform-browser';\nimport { DebugElement } from '@angular/core';\n\ndescribe('ChangeDetectTestComponent', () => {\n\n let comp:ChangeDetectTestComponent;\n   let fixture: ComponentFixture<ChangeDetectTestComponent>;\n   let de:DebugElement;\n   let el:HTMLElement;\n\n beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ ChangeDetectTestComponent ]\n    });\n    fixture = TestBed.createComponent(ChangeDetectTestComponent);\n    comp = fixture.componentInstance;\n    de = fixture.debugElement.query(By.css('h1'));\n    el = de.nativeElement;\n  });\n\nit('should have as title 'Packt Testing works!'', async(() => {\n   const fixture = TestBed.createComponent(ChangeDetectTestComponent);\n   const app = fixture.debugElement.componentInstance;\n   expect(app.title).toEqual('Packt Testing works');\n }));\n\nit('should render title in a h1 tag', async(() => {\n  const fixture = TestBed.createComponent(ChangeDetectTestComponent);\n  fixture.detectChanges();\n  const compiled = fixture.debugElement.nativeElement;\n  expect(compiled.querySelector('h1').textContent).toContain('Packt   \n    Testing works');\n }));\n});\n\n```", "```ts\nng g service ./test-app/test-app\n\n```", "```ts\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TestAppService {\n\n  getAuthorCount() {\n    let Authors =[\n      {name :\"Sridhar\"},\n      {name: \"Robin\"},\n      {name: \"John\"},\n      {name: \"Aditi\"}\n   ];\n  return Object.keys(Authors).length;\n };\n}\n\n```", "```ts\nimport { TestBed, inject } from '@angular/core/testing';\nimport { TestAppService } from './test-app.service';\n\ndescribe('TestAppService', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n providers: [TestAppService]\n });\n });\n\n it('Service should return 4 values', inject([TestAppService], \n  (service: TestAppService) => {\n     let countAuthor = service.getAuthorCount;\n     expect(countAuthor).toBe(4);\n }));\n\n});\n\n```", "```ts\nimport { Injectable } from  '@angular/core'; import { Http } from  '@angular/http'; import { Observable } from  'rxjs'; import  'rxjs/add/operator/map'; @Injectable() export  class  TestService {\n constructor (private  http: Http) {}\n\n getpublications() {\n    return ['Packt', 'Packt PDF', 'Packt Video'];\n  }\n\n  getproducts() {\n    return  this.http.get('someurl1').map((response) =>  response);\n  }\n\n search(term: string): Observable<any> {\n   return  this.http.get(\n      'someurl'\n    ).map((response) =>  response.json());\n  }\n}\n\n```", "```ts\n  beforeEach(() => {  TestBed.configureTestingModule({\n  imports: [ HttpModule ],  providers: [ {  provide:  XHRBackend,\n  useClass:  XHRBackend\n }, TestService ]\n }); });\n\n```", "```ts\nimport {TestService} from  './test.service'; import { TestBed, inject } from  '@angular/core/testing'; import { MockBackend, MockConnection} from  '@angular/http/testing'; import { HttpModule,XHRBackend, ResponseOptions,Response, RequestMethod } from  '@angular/http'; const  mockResponse = { 'isbn':  \"123456\",\n  'book': {  \"id\":  10,\n  \"title\":  \"Packt Angular\"\n } }; const  mockResponseText = 'Hello Packt'; describe('service: TestService', () => {  beforeEach(() => {  TestBed.configureTestingModule({\n  imports: [ HttpModule ],  providers: [ {  provide:  XHRBackend,\n  useClass: XHRBackend  }, TestService]\n }); });  it('Service should return 4 publication values',    \n    inject([TestService, XHRBackend], (service: TestService, \n      XHRBackend: XHRBackend) => {  let  names = service.getpublications();\n  expect(names).toContain('Packt');\n  expect(names).toContain('Packt PDF');\n  expect(names).toContain('Packt Video');\n  expect(names.length).toEqual(3);\n }));  it('Mocking Services with Json', inject([TestService, XHRBackend], \n     (service: TestService, XHRBackend: XHRBackend) => {  const  expectedUrl = 'someurl';\n XHRBackend.connections.subscribe(\n (connection: MockConnection) => {  expect(connection.request.method).toBe(RequestMethod.Get);\n  expect(connection.request.url).toBe(expectedUrl);\n  connection.mockRespond(new  Response(\n  new  ResponseOptions({ body:  mockResponse }) )); });  service.getbooks().subscribe(res  => {  expect(res).toEqual(mockResponse);\n }); })); });\n\n```", "```ts\nelement( by.css ( 'firstName' ) );\n\n```", "```ts\nelement.all(by.css('.parent'))\n\n```", "```ts\nelement( by.css('.firstName' ) );\n\n```", "```ts\nelement( by.model ( 'firstName' ) );\n\n```", "```ts\nelement( by.repeater('user in users').row(0).column('name') );\n\n```", "```ts\nelement( by.id( 'firstName' ) );\n\n```", "```ts\nelement( by.binding( 'firstName' ) );\n\n```", "```ts\nelement(by.css('h1')).element(by.xpath('following-\n  sibling::div'));\n\n```", "```ts\n element.all(by.css('.items li')).first();\n\n```", "```ts\nelement.all( by.id('sendMail') ).click();\n\n```", "```ts\nelement(by.css('.firstName')).getTagName()\n\n```", "```ts\nelement(by.css('#firstName')).sendKeys(\"sridhar\");\n\n```", "```ts\nelement(by.css('#firstPara')).isDisplayed();\n\n```", "```ts\nbrowser.wait(function() {\n  return true;\n}).then(function () {\n  // do some operation\n});\n\n```", "```ts\nelement(by.id('firstName')).getWebElement();\n\n```", "```ts\nvar curUrl = browser.getCurrentUrl();\n\n```", "```ts\ndescribe(\"Sample Test Suite\", function() {\n it(\"This is a spec that defines test\", function() {\n     // expect statement to assert the logic etc\n });\n});\n\n```", "```ts\nimport {element, by, browser} from 'protractor';\n\n  describe('dashboard App', () => {\n   it('should display message saying app works', () => {\n    browser.get('/');\n    let title = element(by.tagName('h1')).getText();\n    expect(title).toEqual('Testing E2E');\n   });\n});\n\n```", "```ts\nng e2e\n\n```", "```ts\nimport { browser, by, element } from 'protractor';\n\ndescribe('Form automation Example', function() {\n it('Check paragraphs inner text', function() {\n    browser.get('/first-test');\n    var s = element(by.css('#firstPara')).getText();\n    expect(s).toEqual('Testing E2E');\n  });\n\n it('Should check for getAttribute - class', function() {\n    browser.get('/first-test');\n    var frstPa = element(by.id('firstPara'));\n    expect(frstPa.getAttribute('class')).toEqual('custom-style');\n  });\n\n it('Should check element for isDisplayed method', function() {\n    browser.get('/first-test');\n    var ele = element(by.css('#firstPara')).isDisplayed();\n    expect(ele).toBeTruthy();\n  });\n\n it('Check the applications current URL', function() {\n    var curUrl = browser.getCurrentUrl();\n    expect(curUrl).toBe('http://localhost:49152/first-test');\n  });\n\n});\n\n```", "```ts\nng e2e\n\n```", "```ts\n<h3 class=\"packtHeading\">Using protractor - E2E Tests</h3>\n\n<input id=\"sendEmailCopy\" type=\"checkbox\"> Send email copy\n\n<!-- paragraph to load the result -->\n<p class=\"afterClick\">{{afterClick}}</p>\n\n<!-- button to click -->\n<button (click)=\"sendMail()\">Send mail!</button>\n\n```", "```ts\nimport { Component } from '@angular/core';\nimport { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({ \n selector: 'app-test-app',\n templateUrl: './test-app.component.html',\n styleUrls: ['./test-app.component.css']\n})\n\nexport class TestAppComponent { \n  constructor() {} \n\n  public myModel = \"Testing E2e\";\n  public authorName = 'Sridhar';\n  public publisherName = 'Packt';\n  public afterClick = 'Element is not clicked';\n\n  public hiPackt() {\n    return 'Hello ' + this.publisherName;  \n  }\n  public sendMail() {\n   this.afterClick = 'Element is clicked';\n  }\n}\n\n```", "```ts\nimport {element, by, browser} from 'protractor';\n\ndescribe('dashboard App', () => {\n beforeEach(function () {\n   browser.get('/test-app');\n });\n\n it('should display message saying app works', () => {\n  const title = element(by.tagName('h1')).getText();\n  expect(title).toEqual('Learning Angular - Packt Way');\n });\n\n it('should display message saying app works', () => {\n  element(by.tagName('button')).click();\n  const title = element(by.css('.afterClick')).getText();\n  expect(title).toEqual('Element is not clicked');\n });\n\n it('Should check is radio button is selected or deselected',  \n  function() {\n    var mailCopy = element(by.id('sendEmailCopy'));\n    expect(mailCopy.isSelected()).toBe(false);\n    mailCopy.click();\n    expect(mailCopy.isSelected()).toBe(true);\n });\n\n it('Check the applications current URL', function() {\n   var curUrl = browser.getCurrentUrl();\n   expect(curUrl).toBe('http://localhost:49152/test-app');\n });\n\n});\n\n```"]