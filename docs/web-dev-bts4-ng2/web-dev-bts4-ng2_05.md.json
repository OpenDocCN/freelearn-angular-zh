["```ts\n     **npm install** \n\n    ```", "```ts\n     **npm run start** \n\n    ```", "```ts\n// angular bundles \n'@angular/core': 'npm:@angular/core/bundles/core.umd.js', \n'@angular/common': 'npm:@angular/common/bundles/common.umd.js', \n'@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js', \n'@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js', \n'@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js', \n'@angular/http': 'npm:@angular/http/bundles/http.umd.js', \n **'@angular/router': 'npm:@angular/router/bundles/router.umd.js',** \n\n'@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js', \n\n```", "```ts\n<base href=\"/\"> \n\n```", "```ts\n<base href=\"/portal\"> \n\n```", "```ts\nimport { RouterModule } from '@angular/router'; \n\n```", "```ts\nimport { Routes, RouterModule } from **'@angular/router'** \n\n; \n\n```", "```ts\nconst routes: Routes = [ \n  { path: 'welcome', component: WelcomeComponent }, \n  { path: 'products', component: ProductListComponent }, \n  // { path: 'products/:id', component: ProductComponent } \n]; \n\n```", "```ts\nexport const routing = RouterModule.forRoot(routes); \n\n```", "```ts\n/* \n * Routing \n */ \nimport {routing}  from './app.routes'; \n\n@NgModule({ \n  imports: [BrowserModule, FormsModule,  \n            routing, CategoryModule], \n  declarations: [AppComponent, NavbarComponent], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```", "```ts\nconst routes: Routes = [ \n  { path: '', redirectTo: 'welcome', pathMatch: 'full' }, \n  { path: 'welcome', component: WelcomeComponent }, \n  { path: 'products', component: ProductListComponent }, \n  //{ path: 'products/:id', component: ProductComponent } \n]; \n\n```", "```ts\n<db-navbar></db-navbar> \n<router-outlet></router-outlet> \n<footer class=\"footer\"> \n  <div class=\"container\"> \n    <address> \n      <strong>Contact Info</strong><br> \n      0000 Market St, Suite 000, San Francisco, CA 00000, (123) 456-7890, \n      <a href=\"mailto:#\">support@dream-bean.com</a> \n    </address> \n  </div> \n</footer> \n\n```", "```ts\n/* \n * Angular Imports \n */ \nimport {Component} from '@angular/core'; \n\n@Component({ \n  selector: 'db-welcome', \n  templateUrl: 'app/welcome/welcome.component.html' \n}) \nexport class WelcomeComponent { } \n\n```", "```ts\n/* \n * Angular Imports \n */ \nimport {Component} from '@angular/core'; \n\n@Component({ \n  selector: 'my-app', \n  templateUrl: 'app/app.component.html', \n}) \nexport class AppComponent { } \n\n```", "```ts\n/* \n * Components \n */ \nimport {Component} from '@angular/core'; \n\n@Component({ \n  selector: 'db-footer', \n  templateUrl: 'app/footer/footer.component.html' \n}) \nexport class FooterComponent {} \n\n```", "```ts\n<db-navbar></db-navbar> \n **<router-outlet></router-outlet>** \n\n<db-footer></db-footer> \n\n```", "```ts\nexport interface Category { \n    // Unique Id \n    id: string; \n    // The title \n    title: string; \n    // Description \n    desc: string; \n    // Path to small image \n    imageS: string; \n    // Path to large image \n    imageL: string; \n} \n\nvar categories: Category[] = [ \n    { id: '1', title: 'Bread & Bakery', imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'The best cupcakes, cookies, cakes, pies, cheesecakes, fresh bread, biscotti, muffins, bagels, fresh coffee and more.' }, \n    { id: '2', title: 'Takeaway', imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'It's consistently excellent, dishes are superb and healthily cooked with high quality ingredients.' }, \n    { id: '3', title: 'Dairy', imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'A dairy product is food produced from the milk of mammals, primarily cows, water buffaloes, goats, sheep, yaks.' }, \n    { id: '4', title: 'Meat', imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Only superior quality beef, lamb, pork.' }, \n    { id: '5', title: 'Seafood', imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Great place to buy fresh seafood.' }, \n    { id: '6', title: 'Fruit & Veg', imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'A variety of fresh fruits and vegetables.' } \n]; \n\nexport function getCategories() { \n    return categories; \n} \n\nexport function getCategory(id: string): Category { \n    for (let i = 0; i < categories.length; i++) { \n        if (categories[i].id === id) { \n            return categories[i]; \n        } \n    } \n    throw new CategoryNotFoundException(`Category ${id} not found`); \n} \n\nexport class CategoryNotFoundException extends Error { \n    constructor(message?: string) { \n        super(message); \n    } \n} \n\n```", "```ts\n<div class=\"col-xs-12 col-sm-6 col-md-4\"> \n    <div class=\"card\"> \n    <img class=\"card-img-top center-block product-item\"  \n         src=\"{{category.image}}\" alt=\"{{category.title}}\"> \n    <div class=\"card-block\"> \n        <h4 class=\"card-title\">{{category.title}}</h4> \n        <p class=\"card-text\">{{category.desc}}</p> \n        <a class=\"btn btn-primary\"  \n **(click)=\"filterProducts(category)\">Browse</a>** \n\n    </div> \n    </div> \n</div> \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \n **import {Router} from '@angular/router';** \n\nimport {Category} from './category'; \n\n@Component({ \n    selector: 'db-category-card', \n    templateUrl:  \n      'app/shared/category/category-card.component.html' \n}) \nexport class CategoryCardComponent { \n    @Input() category: Category; \n\n    constructor( **private router: Router** \n\n) {} \n\n    filterProducts(category: Category) { \n **this.router.navigate(['/products'],** \n\n **{queryParams: { category: category.id} });** \n\n    } \n} \n\n```", "```ts\n/products?category=1 \n\n```", "```ts\nexport interface Product { \n    // Unique Id \n    id: string; \n    // Ref on category belongs to \n    categoryId: string; \n    // The title \n    title: string; \n    // Price \n    price: number; \n    // Mark product with specialproce \n    isSpecial: boolean; \n    // Description \n    desc: string; \n    // Path to small image \n    imageS: string; \n    // Path to large image \n    imageL: string; \n} \n\nvar products: Product[] = [ \n    // Bakery \n    { id: '1', categoryId: '1', title: 'Baguette/French Bread', price: 1.5, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Great eaten fresh from oven. Used to make sub sandwiches, etc.' }, \n    { id: '2', categoryId: '1', title: 'Croissants', price: 0.5, isSpecial: true, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'A croissant is a buttery, flaky, viennoiserie-pastry named for its well-known crescent shape.' }, \n    // Takeaway \n    { id: '3', categoryId: '2', title: 'Pizza', price: 1.2, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Pizza is a flatbread generally topped with tomato sauce and cheese and baked in an oven.' }, \n    // Dairy \n    { id: '4', categoryId: '3', title: 'Milk', price: 1.7, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Milk is a pale liquid produced by the mammary glands of mammals' }, \n    { id: '5', categoryId: '3', title: 'Cream Cheese', price: 2.35, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Cream cheese is a soft, mild-tasting fresh cheese with a high fat content.' }, \n    // Meat \n    { id: '6', categoryId: '4', title: 'Pork Tenderloin', price: 5.60, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'The pork tenderloin, in some countries called pork fillet, is a cut of pork. ' }, \n    { id: '7', categoryId: '4', title: 'Ribs, Baby Back', price: 4.85, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Pork ribs are a cut of pork popular in North American and Asian cuisines. ' }, \n    { id: '8', categoryId: '4', title: 'Ground Beef', price: 9.20, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Ground beef, beef mince, minced beef, minced meat is a ground meat made of beef that has been finely chopped with a large knife or a meat grinder.' }, \n    // Seafood \n    { id: '9', categoryId: '5', title: 'Tuna', price: 3.45, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'A tuna is a saltwater finfish that belongs to the tribe Thunnini, a sub-grouping of the mackerel family - which together with the tunas, also includes the bonitos, ackerels, and Spanish mackerels.' }, \n    { id: '10', categoryId: '5', title: 'Salmon', price: 4.55, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Salmon is the common name for several species of ray-finned fish in the family Salmonidae.' }, \n    { id: '11', categoryId: '5', title: 'Oysters', price: 7.80, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'The word oyster is used as a common name for a number of different families of saltwater clams, bivalve molluscs that live in marine or brackish habitats.' }, \n    { id: '12', categoryId: '5', title: 'Scalops', price: 2.70, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Scallop is a common name that is primarily applied to any one of numerous species of saltwater clams or marine bivalve mollusks in the taxonomic family Pectinidae, the scallops.' }, \n    // Fruit & Veg \n    { id: '13', categoryId: '6', title: 'Banana', price: 1.55, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'The banana is an edible fruit, botanically a berry, produced by several kinds of large herbaceous flowering plants in the genus Musa.' }, \n    { id: '14', categoryId: '6', title: 'Cucumber', price: 1.05, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Cucumber is a widely cultivated plant in the gourd family, Cucurbitaceae. ' }, \n    { id: '15', categoryId: '6', title: 'Apple', price: 0.80, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'The apple tree is a deciduous tree in the rose family best known for its sweet, pomaceous fruit, the apple.' }, \n    { id: '16', categoryId: '6', title: 'Lemon', price: 3.20, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'The lemon is a species of small evergreen tree native to Asia.' }, \n    { id: '17', categoryId: '6', title: 'Pear', price: 4.25, isSpecial: false, imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'The pear is any of several tree and shrub species of genus Pyrus, in the family Rosaceae.' } \n]; \n\nexport function getProducts() { \n    return products; \n} \n\nexport function getProduct(id: string): Product { \n    for (let I = 0; I < products.length; i++) { \n        if (products[i].id === id) { \n            return products[i]; \n        } \n    } \n    throw new ProductNotFoundException(`Product ${id} not found`); \n} \n\nexport class ProductNotFoundException extends Error { \n    constructor(message?: string) { \n        super(message); \n    } \n} \n\n```", "```ts\n<div class=\"card\"> \n    <div class=\"card-header\">Quick Shop</div> \n    <div class=\"input-group\"> \n        <input #search type=\"text\" class=\"form-control\"  \n               placeholder=\"Search for...\"> \n        <span class=\"input-group-btn\"> \n            <button class=\"btn btn-secondary\" type=\"button\"  \n                    (click)=\"searchProduct(search.value)\">Go! \n            </button> \n        </span> \n    </div> \n</div> \n\n```", "```ts\nimport {Component} from '@angular/core'; \nimport {Router} from '@angular/router'; \n\nimport {Product} from './product'; \n\n@Component({ \n    selector: 'db-product-search', \n    templateUrl: 'app/product/product-search.component.html' \n}) \nexport class ProductSearchComponent { \n\n    constructor(private router: Router) {} \n\n    searchProduct(value: string) { \n **this.router.navigate(['/products'],** \n\n **{ queryParams: { search: value} });** \n\n    } \n} \n\n```", "```ts\n/products?search=Apple \n\n```", "```ts\n<div class=\"card\"> \n    <div class=\"card-header\">Categories</div> \n    <div class=\"card-block\"> \n        <div class=\" **list-group list-group-flush** \n\n\"> \n **<a class=\"list-group-item\"** \n\n ***ngFor=\"let category of categories\"** \n\n **(click)=\"filterProducts(category)\">** \n\n **{{category.title}}</a>** \n\n        </div> \n    </div> \n</div> \n\n```", "```ts\n/* \n * Angular Imports \n */ \nimport {Component} from '@angular/core'; \nimport {Router} from '@angular/router'; \n\n/* \n * Components \n */ \nimport {Category, getCategories} from './category'; \n\n@Component({ \n    selector: 'db-category-list', \n    templateUrl: 'app/category/category-list.component.html' \n}) \nexport class CategoryListComponent { \n\n    categories: Category[] = getCategories(); \n\n    constructor(private router: Router) {} \n\n    filterProducts(category: Category) { \n        this.router.navigate(['/products'], {  \n          queryParams: { category: category.id}  \n        }); \n    } \n} \n\n```", "```ts\nimport {NgModule} from '@angular/core'; \nimport {CommonModule} from '@angular/common'; \nimport {FormsModule} from '@angular/forms'; \nimport {RouterModule} from '@angular/router'; \n\n **import {CategoryListComponent} from './category-list.component';** \n\nimport {CategoryCardComponent} from './category-card.component'; \nimport {CategorySlideComponent} from './category-slide.component'; \n\n@NgModule({ \n    imports: [CommonModule, FormsModule, RouterModule], \n    declarations: [CategoryListComponent, CategoryCardComponent, CategorySlideComponent], \n    exports: [CategoryListComponent, CategoryCardComponent, CategorySlideComponent] \n}) \nexport class CategoryModule {} \n\n```", "```ts\n<div class=\"col-xs-12 col-sm-6 col-md-4\"> \n    <div class=\"card\"> \n        <img class=\"card-img-top center-block product-item\"  \n             src=\"{{product.imageS}}\" alt=\"{{product.title}}\"> \n        <div class=\"card-block\"> \n            <h4 class=\"card-title\">{{product.title}}</h4> \n            <p class=\"card-text\">{{product.desc}}</p> \n            <a class=\"btn btn-primary\" \n **[routerLink]=\"['/product', product.id]\">Browse</a>** \n\n        </div> \n    </div> \n</div> \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \n\nimport {Product} from './product'; \n\n@Component({ \n    selector: 'db-product-card', \n    templateUrl: 'app/product/product-card.component.html' \n}) \nexport class ProductCardComponent { \n    @Input() product: Product; \n} \n\n```", "```ts\n/* \n * Angular Imports \n */ \nimport {Component} from '@angular/core'; \n\n/* \n * Components \n */ \nimport {Product, getProducts} from './product'; \n\n@Component({ \n    selector: 'db-product-grid', \n    templateUrl: 'app/product/product-grid.component.html' \n}) \nexport class ProductGridComponent { \n    products: Product[] = getProducts(); \n} \n\n```", "```ts\n<div class= **\"card-group\"** \n\n> \n    <db-product-card *ngFor=\"let product of products\" \n        [product]=\"product\"></db-product-card> \n</div> \n\n```", "```ts\n<div class= **\"card-columns\"** \n\n> \n    <db-product-card *ngFor=\"let product of products\" \n        [product]=\"product\"></db-product-card> \n</div> \n\n```", "```ts\n<div class= **\"card-deck-wrapper\"** \n\n> \n    <div class= **\"card-deck\"** \n\n> \n        <div class=\"card\" *ngFor=\"let product of products\"> \n            <div class=\"card-header text-xs-center\"> \n                {{product.title}} \n            </div> \n            <img class=\"card-img-top center-block product-item\"  \n                 src=\"{{product.imageS}}\" alt=\"{{product.title}}\"> \n            <div class=\"card-block text-xs-center\"  \n                   [ngClass]=\"setClasses(product)\"> \n                <h4 class=\"card-text\"> \n                  Price: ${{product.price}} \n                </h4> \n            </div> \n            <div class=\"card-footer text-xs-center\"> \n                <a class=\"btn btn-primary\"  \n                   (click)=\"buy(product)\">Buy Now</a> \n                <a class=\"btn btn-secondary\"  \n                   [routerLink]=\"['/product', product.id]\"> \n                     More Info \n                </a> \n            </div> \n            <div class=\"card-block\"> \n                <p class=\"card-text\">{{product.desc}}</p> \n            </div> \n        </div> \n    </div> \n</div> \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \n\nimport {Product} from './product'; \n\n@Component({ \n    selector: 'db-product-card', \n    templateUrl: 'app/product/product-card.component.html', \n    directives: [ROUTER_DIRECTIVES] \n}) \nexport class ProductCardComponent { \n    @Input() products: Product[]; \n\n    setClasses(product: Product) { \n        return { \n            'card-danger': product.isSpecial, \n            'card-inverse': product.isSpecial \n        }; \n    } \n\n    buy(product: Product) { \n        console.log('We bought', product.title); \n    } \n} \n\n```", "```ts\n<db-product-card *ngFor=\"let row of products\"   \n                  [products]=\"row\"></db-product-card> \n\n```", "```ts\nimport {Component} from '@angular/core'; \n\nimport {Product, getProducts} from './product'; \n\n@Component({ \n    selector: 'db-product-grid', \n    templateUrl: 'app/product/product-grid.component.html' \n}) \nexport class ProductGridComponent { \n    products: any = []; \n\n    constructor() { \n        let index = 0; \n        let products: Product[] = getProducts(); \n        let length = products.length; \n\n        this.products = []; \n\n        while (length) { \n            let row: Product[] = []; \n            if (length >= 3) { \n                for (let i = 0; i < 3; i++) { \n                    row.push(products[index++]); \n                } \n                this.products.push(row); \n                length -= 3; \n            } else { \n                for (; length > 0; length--) { \n                    row.push(products[index++]); \n                } \n                this.products.push(row); \n            } \n        } \n    } \n} \n\n```", "```ts\n/* \n * Angular Imports \n */ \nimport {Component} from '@angular/core'; \n\n/* \n * Components \n */ \n\n@Component({ \n  selector: 'db-products', \n  templateUrl: 'app/product/product-list.component.html' \n}) \nexport class ProductListComponent {} \n\n```", "```ts\n<div class=\"container\"> \n    <div class=\"row\"> \n        <div class=\"col-md-3\"> \n            <db-product-search></db-product-search> \n            <db-category-list></db-category-list> \n        </div> \n        <div class=\"col-md-9\"> \n            <db-product-grid></db-product-grid> \n        </div> \n    </div> \n</div> \n\n```", "```ts\nimport {NgModule} from '@angular/core'; \nimport {CommonModule} from '@angular/common'; \nimport {FormsModule} from '@angular/forms'; \nimport {RouterModule} from '@angular/router'; \n\nimport {ProductListComponent} from './product-list.component'; \nimport {ProductCardComponent} from './product-card.component'; \nimport {ProductSearchComponent} from './product-search.component'; \nimport {ProductGridComponent} from './product-grid.component'; \n\nimport {CategoryModule} from '../category/category.module'; \n\n@NgModule({ \n    imports: [CommonModule, FormsModule, RouterModule, CategoryModule], \n    declarations: [ProductListComponent, ProductCardComponent, ProductSearchComponent, ProductGridComponent], \n    exports: [ProductListComponent, ProductCardComponent, ProductSearchComponent, ProductGridComponent] \n}) \nexport class ProductModule {} \n\n```", "```ts\nimport {NgModule} from '@angular/core'; \nimport {BrowserModule} from '@angular/platform-browser'; \nimport {FormsModule} from '@angular/forms'; \n\n/** \n * Modules \n */ \n **import {CategoryModule} from './category/category.module';** \n\n **import {ProductModule} from './product/product.module';** \n\n/* \n * Components \n */ \nimport {AppComponent}  from './app.component'; \nimport {NavbarComponent} from './navbar/navbar.component'; \nimport {FooterComponent} from './footer/footer.component'; \nimport {WelcomeComponent} from './welcome/welcome.component'; \n\n/* \n * Routing \n */ \nimport {routing}  from './app.routes'; \n\n@NgModule({ \n  imports: [BrowserModule, FormsModule, routing, \n **CategoryModule, ProductModule],** \n\n  declarations: [AppComponent, NavbarComponent, FooterComponent, \n    WelcomeComponent], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```", "```ts\n/products?category=1 \n\n```", "```ts\n/products?search=apple \n\n```", "```ts\nconstructor(private router: ActivatedRouter) { \n        this.router \n            .queryParams \n            .subscribe(params => { \n                let category: string = params['category']; \n                let search: string = params['search']; \n                // Return filtered data from getProducts function \n                let products: Product[] =  \n                  getProducts(category, search); \n                // Transform products to appropriate data  \n                // to display \n                this.products = this.transform(products); \n            }); \n    } \n\n```", "```ts\ntransform(source: Product[]) { \n    let index = 0; \n    let length = source.length; \n\n    let products = []; \n\n    while (length) { \n        let row: Product[] = []; \n        if (length >= 3) { \n            for (let i = 0; i < 3; i++) { \n                row.push(source[index++]); \n            } \n            products.push(row); \n            length -= 3; \n        } else { \n            for (; length > 0; length--) { \n                row.push(source[index++]); \n            } \n            products.push(row); \n        } \n    } \n\n    return products; \n} \n\n```", "```ts\n export function getProducts(category?: string, search?: string) { \n    if (category) { \n        return products.filter( \n          (product: Product, index: number, array: Product[]) => { \n            return product.categoryId === category; \n        }); \n    } else if (search) { \n        let lowSearch = search.toLowerCase(); \n        return products.filter( \n          (product: Product, index: number, array: Product[]) => { \n            return product.title.toLowerCase(). \n              indexOf(lowSearch) != -1; \n        }); \n    } else { \n        return products; \n    } \n} \n\n```", "```ts\nimport {LocationStrategy, HashLocationStrategy ,  \n        PathLocationStrategy} from '@angular/common';  \n\n```", "```ts\n@NgModule({ \n  imports: [BrowserModule, FormsModule,  \n            routing, CategoryModule, ProductModule], \n  declarations: [AppComponent, NavbarComponent, FooterComponent,  \n                WelcomeComponent], \n **providers: [{provide: LocationStrategy, useClass: HashLocationStrategy}],** \n\n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```"]