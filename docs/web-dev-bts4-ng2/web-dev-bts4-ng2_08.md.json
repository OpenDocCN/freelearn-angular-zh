["```ts\nexport class CategoryListComponent { \n\n    categories: Category[]; \n\n    constructor(private router: Router,  \n                private categoryService: CategoryService) { \n        this.categories = this.categoryService.getCategories(); \n    } \n\n    filterProducts(category: Category) { \n        this.router.navigate(['/products'], {  \n          queryParams: { category: category.id}  \n        }); \n    } \n} \n\n```", "```ts\nexport class CategorySlideComponent { \n    @Input() category: Category; \n    @Output() select: EventEmitter<Category> =  \n       new EventEmitter<Category>(); \n} \n\n```", "```ts\n@Component({ \n    selector: 'db-product-search', \n    templateUrl: 'app/product/product-search.component.html', \n    changeDetection: ChangeDetectionStrategy.OnPush \n}) \nexport class ProductSearchComponent implements OnInit { \n\n    disabled: boolean = true; \n    seachControl: FormControl; \n\n    constructor(private router: Router,  \n                private changeDetection: ChangeDetectorRef) {} \n\n **ngOnInit() {** \n\n **this.seachControl = new FormControl();** \n\n **this.seachControl.valueChanges.subscribe((value: string)** \n\n **=> {** \n\n **this.searchChanged(value);** \n\n **this.changeDetection.markForCheck();** \n\n **});** \n\n **}** \n\n... \n} \n\n```", "```ts\n@Component({ \n    selector: 'db-product-card', \n    templateUrl: 'app/product/product-card.component.html' \n}) \nexport class ProductCardComponent { \n **@Input() products: Product[];** \n\n **@Output() addToCart: EventEmitter<Product> =** \n\n **new EventEmitter<Product>();** \n\n    setClasses(product: Product) { \n        return { \n            'card-danger': product.isSpecial, \n            'card-inverse': product.isSpecial \n        }; \n    } \n\n    buy(product: Product) { \n      this.addToCart.emit(product); \n    } \n} \n\n```", "```ts\nexport interface Product { \n    // Unique Id \n    id: string; \n    // Ref on category belongs to \n    categoryId: string; \n    // The title \n    title: string; \n    // Price \n    price: number; \n    // Mark product with special price \n    isSpecial: boolean; \n    // Description \n    desc: string; \n    // Path to small image \n    imageS: string; \n    // Path to large image \n    imageL: string; \n} \n\n```", "```ts\n@Component({ \n    selector: 'db-product-card', \n    templateUrl: 'app/product/product-card.component.html', \n **changeDetection: ChangeDetectionStrategy.OnPush** \n\n}) \nexport class ProductCardComponent { \n... \n} \n\n```", "```ts\nimport {Component, ChangeDetectionStrategy, ChangeDetectorRef}   \n    from '@angular/core'; \nimport {Router} from '@angular/router'; \nimport {FormControl} from '@angular/forms'; \n\n@Component({ \n    selector: 'db-product-search', \n    templateUrl: 'app/product/product-search.component.html', \n    changeDetection: ChangeDetectionStrategy.OnPush \n}) \nexport class ProductSearchComponent { \n\n    disabled: boolean = true; \n    seachControl: FormControl; \n\n    constructor(private router: Router,  \n                private changeDetection: ChangeDetectorRef) {} \n\n    ngOnInit() { \n        this.seachControl = new FormControl(); \n        this.seachControl.valueChanges.subscribe((value: string)  \n        => { \n            this.searchChanged(value); \n **this.changeDetection.markForCheck();** \n\n        }); \n    } \n\n    searchProduct(value: string) { \n        this.router.navigate(['/products'], {  \n          queryParams: { search: value}  \n        }); \n    } \n\n    searchChanged(value: string) { \n        // Update the disabled property depends on value  \n        if (value) { \n            this.disabled = false; \n        } else { \n            this.disabled = true; \n        } \n    } \n} \n\n```", "```ts\nimport {Component, Input, OnChanges, SimpleChanges}  \n   from '@angular/core'; \nimport {Router} from '@angular/router'; \n\nimport {Category} from './category.service'; \n\n@Component({ \n    selector: 'db-category-card', \n    templateUrl: 'app/category/category-card.component.html' \n}) \nexport class CategoryCardComponent implements OnChanges { \n **@Input() category: Category;** \n\n    constructor(private router: Router) {} \n\n **ngOnChanges(changes: SimpleChanges): void {** \n\n **for (let propName in changes) {** \n\n **let change = changes[propName];** \n\n **let current  = JSON.stringify(change.currentValue);** \n\n **let previous = JSON.stringify(change.previousValue);** \n\n **console.log(`${propName}: currentValue = ${current},** \n\n **previousValue = ${previous}`);** \n\n **}** \n\n **}** \n\n    filterProducts(category: Category) { \n        this.router.navigate(['/products'], {  \n          queryParams: { category: category.id}  \n        }); \n    } \n} \n\n```", "```ts\ncategory: currentValue = {\"id\":\"1\", \"title\":\"Bread & Bakery\", \"imageL\":\"http://placehold.it/1110x480\", \"imageS\":\"http://placehold.it/270x171\",  \"desc\":\"The best cupcakes, cookies, cakes, pies, cheesecakes, fresh bread, biscotti, muffins, bagels, fresh coffee and more.\"}, previousValue = {} \n\n```", "```ts\n:host { \n  display: block; \n  border: 1px solid black; \n} \n\n```", "```ts\n:host(.active) { \n  border-width: 3px; \n} \n\n```", "```ts\n:host-context(.theme-dark) p { \n  background-color: gray; \n} \n\n```", "```ts\n:host /deep/ h4 { \n  font-weight: bold; \n} \n\n```", "```ts\nimport {Component, Input, ViewEncapsulation} from '@angular/core'; \n\n@Component({ \n  selector: 'my-parent', \n  template: ` \n  <div class=\"parent\"> \n    <div class=\"parent__title\"> \n     {{title}} \n    </div> \n    <div class=\"parent__content\"> \n        <ng-content></ng-content> \n    </div> \n  </div>`, \n  styles: [` \n    .parent { \n      background: green; \n      color: white; \n    } \n  `], \n **encapsulation: ViewEncapsulation.None** \n\n}) \nexport class ParentComponent { \n  @Input() title: string; \n} \n\n```", "```ts\nimport { Component } from '@angular/core'; \n\n@Component({ \n  selector: 'my-app', \n  template: ` \n **<my-parent >** \n\n **<my-child></my-child>** \n\n **</my-parent>`** \n\n}) \nexport class AppComponent { } \n\n```", "```ts\n<head> \n  ... \n  <style> \n    .parent { \n      background: green; \n      color: white; \n    } \n  </style> \n  <style>.child[_ngcontent-ced-3] { \n    background: red; \n    color: yellow; \n  }</style> \n</head> \n\n```", "```ts\n<my-app> \n  <my-parent  ng-reflect-> \n    <div class=\"parent\"> \n      <div class=\"parent__title\"> \n       Parent \n      </div> \n      <div class=\"parent__content\"> \n        <my-child _nghost-fhc-3=\"\"> \n          <div _ngcontent-fhc-3=\"\" class=\"child\"> \n            Child \n          </div> \n        </my-child> \n      </div> \n    </div> \n  </my-parent> \n</my-app> \n\n```", "```ts\n<head> \n  ... \n  <style>.parent[_ngcontent-xdn-2] { \n    background: green; \n    color: white; \n  }</style><style>.child[_ngcontent-xdn-3] { \n    background: red; \n    color: yellow; \n  }</style> \n</head> \n\n```", "```ts\n<my-app> \n    <my-parent  _nghost-xdn-2=\"\"  \n               ng-reflect-> \n        <div _ngcontent-xdn-2=\"\" class=\"parent\"> \n            <div _ngcontent-xdn-2=\"\" class=\"parent__title\"> \n                Parent \n            </div> \n            <div _ngcontent-xdn-2=\"\" class=\"parent__content\"> \n                <my-child _nghost-xdn-3=\"\"> \n                    <div _ngcontent-xdn-3=\"\" class=\"child\"> \n                        Child \n                    </div> \n                </my-child> \n            </div> \n        </div> \n    </my-parent> \n</my-app> \n\n```", "```ts\n<head> \n  ... \n  <style>.child[_ngcontent-sgt-3] { \n      background: red; \n      color: yellow; \n    }</style> \n</head> \n\n```", "```ts\n<my-app> \n  <my-parent  ng-reflect-> \n **#shadow-root** \n\n      <style>.child[_ngcontent-sgt-3] { \n        background: red; \n        color: yellow; \n      }</style> \n      <style>.parent { \n        background: green; \n        color: white; \n      }</style> \n      <div class=\"parent\"> \n        <div class=\"parent__title\"> \n          Parent \n        </div> \n        <div class=\"parent__content\"> \n            <my-child _nghost-sgt-3=\"\"> \n                <div _ngcontent-sgt-3=\"\" class=\"child\"> \n                    Child \n                </div> \n            </my-child> \n        </div> \n    </div> \n  </my-parent> \n</my-app> \n\n```", "```ts\nimport {Component, Input, ViewEncapsulation} from '@angular/core'; \n\n@Component({ \n  selector: 'my-parent', \n  template: ` \n  <div class=\"parent\"> \n    <div class=\"parent__title\"> \n     {{title}} \n    </div> \n    <div class=\"parent__content\"> \n **<ng-content></ng-content>** \n\n    </div> \n    <div class=\"parent__content\"> \n **<ng-content select=\".another\"></ng-content>** \n\n    </div> \n  </div>`, \n  styles: [` \n    .parent { \n      background: green; \n      color: white; \n    } \n  `], \n  encapsulation: ViewEncapsulation.Native \n}) \nexport class ParentComponent { \n  @Input() title: string; \n} \n\n```", "```ts\nimport { Component } from '@angular/core'; \n\n@Component({ \n  selector: 'my-app', \n  template: ` \n  <my-parent > \n **<my-child></my-child>** \n\n **<my-child class=\"another\"></my-child>** \n\n  </my-parent>` \n}) \nexport class AppComponent { } \n\n```", "```ts\n<div class=\"parent\"> \n    <div class=\"parent__title\"> \n        Parent \n    </div> \n    <div class=\"parent__content\"> \n **<my-child _nghost-cni-3=\"\">** \n\n **<div _ngcontent-cni-3=\"\" class=\"child\">** \n\n **Child** \n\n **</div>** \n\n **</my-child>** \n\n    </div> \n    <div class=\"parent__content\"> \n **<my-child class=\"another\" _nghost-cni-3=\"\">** \n\n **<div _ngcontent-cni-3=\"\" class=\"child\">** \n\n **Child** \n\n **</div>** \n\n **</my-child>** \n\n    </div> \n</div> \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \n\n@Component({ \n  selector: 'my-child', \n  template: ` \n  <div class=\"child\"> \n    Child is {{status}} \n  </div>`, \n  styles: [` \n    .child { \n      background: red; \n      color: yellow; \n    } \n  `] \n}) \nexport class ChildComponent {  \n  @Input() status: string = 'Not Ready'; \n} \n\n```", "```ts\nimport {Component, Input, AfterContentInit, AfterContentChecked,  \n        ContentChild} from '@angular/core'; \n\nimport {ChildComponent} from './child.component'; \n\n@Component({ \n  selector: 'my-parent', \n  template: ` \n  <div class=\"parent\"> \n    <div class=\"parent__title\"> \n     {{title}} \n    </div> \n    <div class=\"parent__content\"> \n        <ng-content></ng-content> \n    </div> \n  </div>`, \n  styles: [` \n    .parent { \n      background: green; \n      color: white; \n    } \n  `] \n}) \nexport class ParentComponent implements  \n             AfterContentInit, AfterContentChecked { \n  @Input() title: string; \n\n  // Query for a CONTENT child of type ChildComponent` \n **@ContentChild(ChildComponent) contentChild: ChildComponent;** \n\n **ngAfterContentInit() {** \n\n    // contentChild is set after the content has been initialized \n    console.log('AfterContentInit. Child is',  \n                 this.contentChild.status); \n    this.title = 'Parent'; \n  } \n\n **ngAfterContentChecked() {** \n\n    console.log('AfterContentChecked. Child is',  \n                 this.contentChild.status); \n    // contentChild is updated after the content has been checked \n    if (this.contentChild.status == 'Ready') { \n      console.log('AfterContentChecked (no change)'); \n    } else { \n      this.contentChild.status = 'Ready'; \n    } \n  } \n} \n\n```", "```ts\nimport { Component } from '@angular/core'; \n\n@Component({ \n  selector: 'my-app', \n  template: ` \n **<my-parent >** \n\n **<my-child></my-child>** \n\n **</my-parent>`** \n\n}) \nexport class AppComponent { } \n\n```", "```ts\n **AfterContentInit. Child is Not Ready** \n\n **AfterContentChecked. Child is Not Ready** \n\n **AfterContentChecked. Child is Ready** \n\n **AfterContentChecked (no change)** \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \n\n@Component({ \n  selector: 'my-child', \n  template: ` \n  <div class=\"child\"> \n    Child is {{status}} \n  </div>`, \n  styles: [` \n    .child { \n      background: red; \n      color: yellow; \n    } \n  `] \n}) \nexport class ChildComponent {  \n  @Input() status: string = 'Not Ready'; \n} \n\n```", "```ts\nimport {Component, Input, AfterViewInit, AfterViewChecked,  \n        ViewChild, ChangeDetectionStrategy} from '@angular/core'; \n\nimport {ChildComponent} from './child.component'; \n\n@Component({ \n  selector: 'my-parent', \n **changeDetection: ChangeDetectionStrategy.OnPush,** \n\n  template: ` \n  <div class=\"parent\"> \n    <div class=\"parent__title\"> \n     {{title}} \n    </div> \n    <div class=\"parent__content\"> \n **<my-child></my-child>** \n\n    </div> \n  </div>`, \n  styles: [` \n    .parent { \n      background: green; \n      color: white; \n    } \n  `] \n}) \nexport class ParentComponent implements  \n **AfterViewInit, AfterViewChecked {** \n\n  @Input() title: string; \n\n  // Query for a VIEW child of type `ChildComponent` \n **@ViewChild(ChildComponent) viewChild: ChildComponent;** \n\n  ngAfterViewInit() { \n    // viewChild is set after the view has been initialized \n    console.log('AfterViewInit. Child is', this.viewChild.status); \n    this.title = 'Parent'; \n  } \n\n  ngAfterViewChecked() { \n    console.log('AfterViewChecked. Child is',  \n                 this.viewChild.status); \n    // viewChild is updated after the view has been checked \n    if (this.viewChild.status == 'Ready') { \n      console.log('AfterViewChecked (no change)'); \n    } else { \n      this.viewChild.status = 'Ready'; \n    } \n  } \n} \n\n```", "```ts\nimport { Component } from '@angular/core'; \n\n@Component({ \n  selector: 'my-app', \n  template: ` \n **<my-parent >** \n\n **</my-parent>`** \n\n}) \nexport class AppComponent { } \n\n```", "```ts\n **AfterViewInit. Child is Not Ready** \n\n **AfterViewChecked. Child is Not Ready** \n\n **AfterViewChecked. Child is Ready** \n\n **AfterViewChecked (no change)** \n\n```", "```ts\nimport {Component, Input, Output, EventEmitter, OnInit }  \n       from '@angular/core'; \n\n@Component({ \n  selector: 'my-child', \n  template: ` \n  <div class=\"child\"> \n **{{desc}} belongs to {{parent}} with {{emoji}}** \n\n  </div>`, \n  styles: [` \n    .child { \n      background: red; \n      color: yellow; \n    } \n  `] \n}) \nexport class ChildComponent {  \n **@Input() desc: string;** \n\n **@Input('owner') parent: string;** \n\n **private _emoji: string;** \n\n **@Input() set emoji(value: string) {** \n\n **this._emoji = value || 'happy';** \n\n **}** \n\n **get emoji(): string {** \n\n **return this._emoji;** \n\n **}** \n\n@Output() status: EventEmitter<string> =  \n              new EventEmitter<string>(); \n\n  ngOnInit(): void { \n    this.status.emit('Ready'); \n  } \n} \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \n\n@Component({ \n  selector: 'my-parent', \n  template: ` \n  <div class=\"parent\"> \n    <div class=\"parent__title\"> \n     {{title}}. Child is {{status}} \n    </div> \n    <div class=\"parent__content\"> \n **<my-child [desc]=\"'Child'\"** \n\n **[owner]=\"title\"** \n\n **[emoji]=\"'pleasure'\"** \n\n **(status)=\"onStatus($event)\" ></my-child>** \n\n    </div> \n  </div>`, \n  styles: [` \n    .parent { \n      background: green; \n      color: white; \n    } \n  `] \n}) \nexport class ParentComponent { \n  @Input() title: string; \n  status: string; \n\n  onStatus(value: string) { \n    this.status = value; \n  } \n} \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \n\n@Component({ \n  selector: 'my-parent', \n  template: ` \n  <div class=\"parent\" [ngInit]=\"child.setDesc('You are mine')\"> \n    <div class=\"parent__title\"> \n     {{title}} \n    </div> \n    <div class=\"parent__content\"> \n        <my-child #child></my-child> \n    </div> \n  </div>`, \n  styles: [` \n    .parent { \n      background: green; \n      color: white; \n    } \n  `] \n}) \nexport class ParentComponent { \n  @Input() title: string; \n} \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \n\n@Component({ \n  selector: 'my-child', \n  template: ` \n  <div class=\"child\"> \n    {{desc}} \n  </div>`, \n  styles: [` \n    .child { \n      background: red; \n      color: yellow; \n    } \n  `] \n}) \nexport class ChildComponent {  \n  @Input() desc: string; \n\n  setDesc(value: string) { \n    this.desc = value; \n  } \n} \n\n```", "```ts\nimport {Directive, Input} from '@angular/core'; \n\n@Directive({ \n  selector: '[ngInit]' \n}) \nexport class NgInit { \n  @Input() ngInit; \n\n  ngOnInit() { \n    if(this.ngInit) {  \n        this.ngInit();  \n    } \n  } \n} \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \n\n@Component({ \n  selector: 'my-child', \n  template: ` \n  <div class=\"child\"> \n    {{desc}} \n  </div>`, \n  styles: [` \n    .child { \n      background: red; \n      color: yellow; \n    } \n  `] \n}) \nexport class ChildComponent {  \n  @Input() desc: string; \n} \n\n```", "```ts\nimport {Component, Input, AfterViewInit, ViewChild}  \n   from '@angular/core'; \n\nimport {ChildComponent} from './child.component'; \n\n@Component({ \n  selector: 'my-parent', \n  template: ` \n  <div class=\"parent\"> \n    <div class=\"parent__title\"> \n     {{title}} \n    </div> \n    <div class=\"parent__content\"> \n **<my-child></my-child>** \n\n    </div> \n  </div>`, \n  styles: [` \n    .parent { \n      background: green; \n      color: white; \n    } \n  `] \n}) \nexport class ParentComponent implements AfterViewInit { \n  @Input() title: string; \n\n **@ViewChild(ChildComponent)** \n\n **private child: ChildComponent;** \n\n **ngAfterViewInit()\n {** \n\n **this.child.desc = \"You are mine\";** \n\n **}** \n\n} \n\n```", "```ts\nimport {Component, Input, OnDestroy} from '@angular/core'; \nimport {Subscription} from 'rxjs/Subscription'; \nimport {CommonService} from './common.service'; \n\n@Component({ \n  selector: 'my-child', \n  template: ` \n  <div class=\"child\"> \n    {{desc}} \n  </div>`, \n  styles: [` \n    .child { \n      background: red; \n      color: yellow; \n    } \n  `] \n}) \nexport class ChildComponent implements OnDestroy {  \n  @Input() desc: string; \n\n  subscription: Subscription; \n\n  constructor(private common: CommonService) { \n    this.subscription = this.common.childQueue.subscribe( \n      message => { \n        this.desc = message; \n      } \n    ); \n  } \n\n  ngOnDestroy() { \n    // Clean after yourself \n    this.subscription.unsubscribe(); \n  } \n} \n\n```", "```ts\nimport {Component, Input, OnInit} from '@angular/core'; \nimport {CommonService} from './common.service'; \n\n @Component({ \n  selector: 'my-parent', \n  template: ` \n  <div class=\"parent\"> \n    <div class=\"parent__title\"> \n     {{title}} \n    </div> \n    <div class=\"parent__content\"> \n        <my-child></my-child> \n    </div> \n  </div>`, \n  styles: [` \n    .parent { \n      background: green; \n      color: white; \n    } \n  `], \n **providers: [CommonService]** \n\n}) \nexport class ParentComponent implements OnInit { \n  @Input() title: string; \n\n  constructor(private common: CommonService) { \n **this.common.parentQueue.subscribe(** \n\n **message => {** \n\n **this.title = message;** \n\n **}** \n\n **);** \n\n  } \n\n  ngOnInit() { \n **this.common.toChild(\"You are mine\");** \n\n  } \n} \n\n```"]