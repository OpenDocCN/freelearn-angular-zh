["```ts\n **node --version** \n\n```", "```ts\n **v4.4.3** \n\n```", "```ts\n **npm --version** \n\n```", "```ts\n **2.15.1** \n\n```", "```ts\n **npm install npm@latest -g** \n\n```", "```ts\n **npm config list** \n\n```", "```ts\n **npm install -g <package_name>** \n\n```", "```ts\n **npm config get prefix** \n\n```", "```ts\n **npm i <package_name>** \n\n```", "```ts\n **git -version** \n\n```", "```ts\n **git version 2.8.1.windows.1** \n\n```", "```ts\nfunction add(first: number, second: number): number { \n  return first + second; \n} \n\n```", "```ts\nvar result = [1, 2, 3] \n  .reduce(function (total, current) {   \n    return total + current; \n  }, 0); // 6 \n\n```", "```ts\nvar result = [1, 2, 3] \n  .reduce( (total, current) => {   \n    return total + current; \n  }, 0); // 6 \n\n```", "```ts\nvar result = [1, 2, 3] \n  .reduce( (total, current) => total + current, 0); // 6 \n\n```", "```ts\nvar result = [1, 2, 3].map(function (x) {  \n  return x * x  \n}); \n\n```", "```ts\nvar result = [1, 2, 3].map(x => x * x); \n\n```", "```ts\nfunction Counter() { \n  this.age = 30; \n  setTimeout(() => { \n    this.age += 1; \n    console.log(this.age); \n  }, 100); \n} \nnew Counter(); // 31 \n\n```", "```ts\nfunction Counter() { \n    var _this = this; \n    this.age = 30; \n    setTimeout(function () { \n        _this.age += 1; \n        console.log(_this.age); \n    }, 100); \n} \n\n```", "```ts\nvar x = 3; \nfunction random(randomize) { \n    if (randomize) { \n        // x initialized as reference on function \n        var x = Math.random();  \n        return x; \n    } \n    return x; // x is not defined \n} \nrandom(false); // undefined \n\n```", "```ts\nfunction random(randomize) { \n    var x; // x is undefined \n    if (randomize) { \n        // x initialized as reference on function \n        x = Math.random(); \n        return x; \n    } \n    return x; // x is not defined \n} \n\n```", "```ts\nlet x = 3; \nfunction random(randomize) { \n    if (randomize) { \n        let x = Math.random(); \n        return x; \n    } \n    return x; \n} \nrandom(false); // 3 \n\n```", "```ts\nlet out: string = '(' + x + ', ' + y + ')'; \n\n```", "```ts\nlet out: string = `(${x}, ${y})`; \n\n```", "```ts\nLet x = 1, y = 2; \nlet out: string = ` \nCoordinates \n x: ${x},  \n y: ${y}`; \nconsole.log(out); \n\n```", "```ts\nCoordinates \n x: 1,  \n y: 2 \n\n```", "```ts\nlet arr = [1, 2, 3]; \n// The for statement usage \nfor (let i = 0; i < arr.length; i++) { \n    let element = arr[i]; \n    console.log(element); \n} \n// The usage of forEach method \narr.forEach(element => console.log(element)); \n\n```", "```ts\nconst arr = [1, 2, 3]; \nfor (const element of arr) { \n    console.log(element); \n} \n\n```", "```ts\nconst arr = [1, 2, 3]; \nfor (const [index, element] of arr.entries()) { \n    console.log(`${index}: ${element}`); \n} \n\n```", "```ts\nfunction square(x, y) { \n  x = x || 0; \n  y = y || 0; \n  return x * y; \n} \nlet result = square(4, 5); // Out 20 \n\n```", "```ts\nfunction square(x: number = 0, y: number = 0) { \n  return x * y; \n} \nlet result = square(4, 5); // Out 20 \n\n```", "```ts\nfunction square(x: number = 0, y?: number) { \n if (y) { \n   return x * y; \n } else { \n  return x * x; \n } \n} \nlet result = square(4); // Out 16 \nlet result = square(4, 5); // Out 20 \n\n```", "```ts\nfunction print(name: number, ...restOfName: number[]) { \n  return name + \" \" + restOfName.join(\" \"); \n} \nlet name = print(\"Joseph\", \"Samuel\", \"Lucas\"); \n// Out: Joseph Samuel Lucas \n\n```", "```ts\ninterface Greetable { \n  greetings(message: string): void; \n} \n\n```", "```ts\nfunction hello(greeter: Greetable) { \n  greeter.greetings('Hi there'); \n} \n\n```", "```ts\nclass Greeter { \n  greeting: string; \n  constructor(message: string) { \n    this.greeting = message; \n  } \n  greet() { \n    return \"Hello, \" + this.greeting; \n  } \n} \n\n```", "```ts\nlet greeter = new Greeter(\"world\"); \n\n```", "```ts\nclass EmailGreeter extends Greeter {  \n  private email: string;  \n  constructor(emailAddr: string, message: string) {  \n    super(message); \n    this.email = emailAddr;  \n  }  \n  mailto() {  \n    return \"mailto:${this.email}?subject=${this.greet()}\";  \n  }  \n} \n\n```", "```ts\nclass EmailGreeter extends Greeter { \n  constructor(private email: string, message: string) { \n    super(message); \n  } \n  mailto() { \n    return \"mailto:${this.email}?subject=${this.greet()}\"; \n  } \n} \n\n```", "```ts\nclass Greeter {  \n  private _greeting: string; \n  get greeting(): string { \n    return this._greeting; \n  } \n  set greeting(value: string) { \n    this._greeting = value || \"\"; \n  } \n  constructor(message: string) { \n    this.greeting = message; \n  } \n  greet() { \n    return \"Hello, \" + this.greeting; \n  } \n} \n\n```", "```ts\nclass Types {  \n  static GENERIC: string = \"\"; \n  static EMAIL: string = \"email\"; \n} \n\n```", "```ts\nconsole.log(Types.GENERIC); \n\n```", "```ts\nabstract class BaseGreeter {  \n  private _greeting: string; \n  get greeting(): string { \n    return this._greeting; \n  } \n  set greeting(value: string) { \n    this._greeting = value || \"\"; \n  } \n  abstract greet(); \n} \n\n```", "```ts\nexport interface StringValidator { \n  isAcceptable(s: string): boolean; \n} \n\n```", "```ts\nconst numberRegexp = /^[0-9]+$/; \nexport class ZipCodeValidator implements StringValidator { \n  isAcceptable(s: string) { \n    return s.length === 5 && numberRegexp.test(s); \n  } \n} \n\n```", "```ts\nexport * from \"./string-validator\"; \nexport * from \"./zip-validator\"; \n\n```", "```ts\nimport { StringValidator } from \"./validators\";  \nlet strValidator = new StringValidator(); \n\n```", "```ts\nimport { ZipCodeValidator as ZCV } from \"./validators\"; \nlet zipValidator = new ZCV(); \n\n```", "```ts\nimport * as validator from \"./validators\";  \nlet strValidator = new validator.StringValidator(); \nlet zipValidator = new validator.ZipCodeValidator(); \n\n```", "```ts\nclass Box<T> { \n    private _value : T;  \n    set value(val : T) {  \n        this._value = val;  \n    }  \n    get value() : T {  \n        return this._value;  \n    }  \n} \n\n```", "```ts\nvar box1 = new Box<string>();  \nbox1.setValue(\"Hello World\");  \nconsole.log(box1.getValue());  \nvar box2 = new Box<number>();  \nbox2.setValue(1);  \nconsole.log(box2.getValue()); \nvar box3 = new Box<boolean>();  \nbox3.setValue(true);  \nconsole.log(box3.getValue()); \n// Out: Hello World \n// Out: 1 \n// Out: true \n\n```", "```ts\nvar request = new XMLHttpRequest(); \nrequest.open('GET', url); \n\nrequest.onload = () => { \n    if (req.status == 200) { \n        processData(request.response); \n    } else { \n        console.log('ERROR', request.statusText); \n    } \n}; \n\nrequest.onerror = () => { \n    console.log('Network Error'); \n}; \n\nrequest.send(); // Add request to task queue \n\n```", "```ts\nreadFileFunctional('myfile.txt', { encoding: 'utf8' }, \n    (text) => { // success \n        console.log(text); \n    }, \n    (error) => { // failure \n        // ... \n    } \n); \n\n```", "```ts\nfunction readFile(filename, encode){ \n  return new Promise((resolve, reject) => { \n    fs.readFile(filename, enccode, (error, result) => { \n      if (error) { \n        reject(error); \n      } else { \n        resolve(result); \n      } \n    }); \n  }); \n} \n\n```", "```ts\nfunction readJSON(filename){\n return readFile(filename, 'utf8').then((result) => {\n console.log(result);\n }, (error) => {\n console.log(error);\n });\n} \n\n```", "```ts\nfunction readJSON(filename){ \n  return readFile(filename, 'utf8').then((result) => { \n    return JSON.parse(result); \n  }, (error) => { \n    console.log(error); \n  } \n} \n\n```", "```ts\n<!DOCTYPE html> \n<html> \n  <head> \n    <script src=\"https://jspm.io/system.js\"></script>   \n    <script src=\"https://jspm.io/system.js\"></script>\n\n    <script>\n      System.config({\n      packages: {\n      './': {\n      defaultExtension: false\n            }\n         }\n      });\n    </script>\n\n    <script>\n    System.import('./app.js');\n    </script>\n  </head> \n  <body> \n    <div id=\"main\"></div> \n  </body> \n</html> \n\n```", "```ts\n **npm init** \n\n```", "```ts\n{ \n  \"name\": \"hello-world\", \n  \"version\": \"1.0.0\", \n  \"description\": \"The Hello World\", \n  \"author\": \" Put Your Name Here\", \n  \"license\": \"MIT\" \n  \"scripts\": { \n    \"test\": \"echo \"Error: no test specified\" && exit 1\" \n  } \n} \n\n```", "```ts\n{ \n  \"compilerOptions\": { \n    \"target\": \"es5\", \n    \"module\": \"commonjs\", \n    \"moduleResolution\": \"node\", \n    \"sourceMap\": true, \n    \"emitDecoratorMetadata\": true, \n    \"experimentalDecorators\": true, \n    \"removeComments\": false, \n    \"noImplicitAny\": false \n  }, \n  \"exclude\": [ \n    \"node_modules\", \n    \"typings/main\", \n    \"typings/main.d.ts\" \n  ] \n} \n\n```", "```ts\n{\n   \"ambientDependencies\": {\n     \"es6-shim\": \"registry:dt/es6-shim#0.31.2+20160317120654\"\n   }\n} \n\n```", "```ts\n{ \n  \"name\": \"hello-world\", \n  \"version\": \"1.0.0\", \n  \"description\": \"The Hello World\", \n  \"author\": \"Put Your Name Here\", \n  \"license\": \"MIT\", \n  \"scripts\": { \n    \"start\": \"tsc && concurrently \"npm run tsc:w\" \"npm run lite\" \", \n    \"lite\": \"lite-server\", \n    \"postinstall\": \"typings install\", \n    \"tsc\": \"tsc\", \n    \"tsc:w\": \"tsc -w\", \n    \"typings\": \"typings\" \n  }, \n  \"dependencies\": { \n    \"@angular/common\":  \"~2.0.1\", \n    \"@angular/compiler\":  \"~2.0.1\", \n    \"@angular/core\":  \"~2.0.1\", \n    \"@angular/http\":  \"~2.0.1\", \n    \"@angular/platform-browser\":  \"~2.0.1\", \n    \"@angular/platform-browser-dynamic\":  \"~2.0.1\", \n    \"@angular/router\":  \"~3.0.1\", \n    \"@angular/upgrade\": \"~2.0.1\", \n\n    \"systemjs\": \"0.19.39\", \n    \"core-js\": \"^2.4.1\", \n    \"reflect-metadata\": \"^0.1.8\", \n    \"rxjs\": \"5.0.0-beta.12\", \n    \"zone.js\": \"^0.6.25\", \n\n    \"angular-in-memory-web-api\": \"~0.1.1\", \n    \"bootstrap\": \"4.0.0-alpha.4\" \n  }, \n  \"devDependencies\": { \n    \"concurrently\": \"^3.0.0\", \n    \"lite-server\": \"^2.2.2\", \n    \"typescript\": \"^2.0.3\", \n    \"typings\":\"^1.4.0\" \n  } \n} \n\n```", "```ts\n **npm i** \n\n```", "```ts\n **npm WARN** \n\n```", "```ts\n// Import the decorator class for Component \nimport { Component } from '@angular/core'; \n\n@Component({ \n  selector: 'my-app', \n  template: '<h1> Hello, World</h1>' \n}) \nexport class AppComponent { } \n\n```", "```ts\nimport { NgModule } from '@angular/core'; \nimport { BrowserModule } from '@angular/platform-browser'; \n\n@NgModule({ \n  imports: [ BrowserModule ] \n}) \nexport class AppModule { } \n\n```", "```ts\nimport { platformBrowserDynamic } from  \n     '@angular/platform-browser-dynamic'; \n\nimport { AppModule } from './app.module'; \n\nconst platform = platformBrowserDynamic(); \n\nplatform.bootstrapModule(AppModule); \n\n```", "```ts\n<html> \n  <head> \n    <title>Angular 2 First Project</title> \n    <meta charset=\"UTF-8\"> \n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n    <link rel=\"stylesheet\" href=\"styles.css\"> \n\n    <!-- 1\\. Load libraries --> \n     <!-- Polyfill(s) for older browsers --> \n    <script src=\"node_modules/core-js/client/shim.min.js\"> \n    </script> \n\n    <script src=\"node_modules/zone.js/dist/zone.js\"></script> \n    <script src=\"node_modules/reflect-metadata/Reflect.js\"> \n    </script> \n    <script src=\"node_modules/systemjs/dist/system.src.js\"> \n</script> \n\n    <!-- 2\\. Configure SystemJS --> \n    <script src=\"systemjs.config.js\"></script> \n    <script> \n      System.import('app') \n      .catch(function(err){ console.error(err);  }); \n    </script> \n  </head> \n\n  <!-- 3\\. Display the application --> \n  <body> \n    <my-app>Loading...</my-app> \n  </body> \n</html> \n\n```", "```ts\n(function (global) { \n  System.config({ \n    paths: { \n      // paths serve as alias \n      'npm:': 'node_modules/' \n    }, \n    // map tells the System loader where to look for things \n    map: { \n      // our app is within the app folder \n      app: 'app', \n      // angular bundles \n      '@angular/core': 'npm:@angular/core/bundles/core.umd.js', \n      '@angular/common': 'npm:@angular/common/bundles/common.umd.js', \n      '@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js', \n      '@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js', \n      '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js', \n      '@angular/http': 'npm:@angular/http/bundles/http.umd.js', \n      '@angular/router': 'npm:@angular/router/bundles/router.umd.js', \n      '@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js', \n      // other libraries \n      'rxjs':                      'npm:rxjs', \n      'angular-in-memory-web-api': 'npm:angular-in-memory-web-api', \n    }, \n    // packages tells the System loader how to load when no filename and/or no extension \n    packages: { \n      app: { \n        main: './main.js', \n        defaultExtension: 'js' \n      }, \n      rxjs: { \n        defaultExtension: 'js' \n      }, \n      'angular-in-memory-web-api': { \n        main: './index.js', \n        defaultExtension: 'js' \n      } \n    } \n  }); \n})(this); \n\n```", "```ts\n **npm start** \n\n```", "```ts\nimport { NgModule }      from '@angular/core'; \nimport { BrowserModule } from '@angular/platform-browser'; \n **import { FormsModule }   from '@angular/forms';** \n\nimport { AppComponent }   from './app.component'; \n\n@NgModule({ \n  imports:      [ BrowserModule, **FormsModule** \n\n ], \n  declarations: [ AppComponent ], \n  bootstrap:    [ AppComponent ] \n\n}) \nexport class AppModule { } \n\n```", "```ts\nimport { Component } from '@angular/core'; \n\n@Component({ \n  selector: 'my-app', \n  template: ` \n<h1>Hello, {{name || 'World'}}</h1>  \n **<input type=\"text\" [(ngModel)]=\"name\" placeholder=\"name\">** \n\n`}) \nexport class AppComponent {  \n  name: string = 'World'; \n} \n\n```", "```ts\n **{{name}}** \n\n```", "```ts\n{{name || 'World'}}  \n\n```", "```ts\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n **<link rel=\"stylesheet\" href=\"node_modules/bootstrap/dist/css/bootstrap.css\">** \n\n<link rel=\"stylesheet\" href=\"styles.css\"> \n\n```", "```ts\n<div class=\"container\">  \n  <h1>Hello, {{name || 'World'}}</h1>  \n  <input type=\"text\" [(ngModel)]=\"name\">  \n</div> \n\n```", "```ts\n<div class=\"container\"> \n  <div class=\"jumbotron\"> \n    <h1>Hello, {{name || 'World'}}</h1> \n   <input type=\"text\" ng-model=\"name\"> \n  </div> \n</div> \n\n```", "```ts\n<div class=\"container\"> \n  <div class=\"page-header\"> \n    <h2>Chapter 1 <small>Hello, World</small></h2> \n  </div> \n  <div class=\"jumbotron\"> \n    <h1>Hello, {{name || 'World'}}</h1> \n    <input type=\"text\" [(ng-model)]=\"name\"> \n  </div> \n</div> \n\n```", "```ts\n<input type=\"text\" [(ngModel)]=\"name\" class=\"form-control\"> \n\n```", "```ts\n<input type=\"text\" [(ngModel)]=\"name\"  \n       class=\"form-control form-control-lg\"> \n\n```"]