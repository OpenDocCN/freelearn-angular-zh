["```ts\n **npm install** \n\n```", "```ts\n **npm run start** \n\n```", "```ts\nimport { Component } from '@angular/core'; \n\n@Component({ \n  selector: 'db-navbar', \n  templateUrl: 'app/navbar/navbar.component.html' \n}) \nexport class NavbarComponent {} \n\n```", "```ts\n<db-navbar></db-navbar> \n\n```", "```ts\nimport { NgModule } from '@angular/core'; \nimport { BrowserModule } from '@angular/platform-browser'; \n\n/* \n * Components \n */ \nimport { AppComponent }  from './app.component'; \n **import { NavbarComponent } from './navbar/navbar.component';** \n\n@NgModule({ \n  imports: [BrowserModule], \n  declarations: [AppComponent, **NavbarComponent** \n\n], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```", "```ts\n<div class=\"nav navbar-nav\"> \n  <a class=\"nav-item nav-link active\" href=\"#\"> \n    Home <span class=\"sr-only\">(current)</span> \n  </a> \n  <a class=\"nav-item nav-link\" href=\"#\">Checkout</a> \n  <a class=\"nav-item nav-link\" href=\"#\">Create Account</a> \n  <a class=\"nav-item nav-link\" href=\"#\">Login</a> \n</div> \n\n```", "```ts\nexport interface NavItem { \n  // Navigation link \n  href: string; \n  // Navigation Label \n  label: string; \n  // Status of Navigation Item \n  active: boolean; \n} \n\n```", "```ts\n@Component({ \n  selector: 'db-navbar', \n  templateUrl: 'app/navbar/navbar.component.html' \n}) \nexport class NavbarComponent { \n  // App name \n  appName: string = 'Dream Bean'; \n  // Navgation items \n  navItems: NavItem[] = [ \n    {href: '#', label: 'Home', active: true}, \n    {href: '#', label: 'Products', active: false}, \n    {href: '#', label: 'Checkout', active: false}, \n    {href: '#', label: 'Sign out', active: false} \n  ]; \n} \n\n```", "```ts\n        <input **#product** \n\n placeholder=\"Product ID\"> \n        <button (click)=\"findProduct(product.value)\">Find</button> \n\n```", "```ts\n        <input **ref-product** \n\n placeholder=\"Product ID\"> \n        <button (click)=\"findProduct(product.value)\">Find</button> \n\n```", "```ts\n<div>Product: {{product.name | uppercase}}</div> \n\n```", "```ts\nTypeError: Cannot read property 'name' of null in [null] \n\n```", "```ts\n<div ***ngIf=\"product && product.name\">** \n\n  Product: {{product.name | uppercase}} \n</div> \n\n```", "```ts\n<div>Product: {{product?.name | uppercase}}</div> \n\n```", "```ts\n<div>Product: {{product.name | **uppercase** \n\n}}</div> \n\n```", "```ts\n<div>Product: {{product.name | **uppercase** \n\n | **lowercase** \n\n}}</div> \n\n```", "```ts\n<div>Expiry Date: {{product.expDate | **date:'longDate'** \n\n}}</div> \n\n```", "```ts\nimport {Pipe, PipeTransform} from '@angular/core'; \n\n@Pipe({name: 'db-json'}) \nexport class JsonPipe implements PipeTransform { \n  transform(value: any): string { \n    return JSON.stringify(value); \n  } \n} \n\n```", "```ts\nimport {Component} from '@angular/core'; \nimport { **JsonPipe** \n\n} from './shared/json.pipe'; \n\n@Component({\nselector: 'receiver',\ntemplate: `\n<h2>Receiver</h2>\n<p>Received: {{data | db-json}}</p>\n`\n})\nexport class PowerBoosterComponent {  \n  data: any = {x: 5, y: 6}; \n} \n\n```", "```ts\n        {{expression}} \n        [target] = \"expression\" \n        bind-target = \"expression\" \n\n```", "```ts\n        (target) = \"statement\" \n        on-target = \"statement\" \n\n```", "```ts\n        [(target)] = \"expression\" \n        bindon-target = \"expression\" \n\n```", "```ts\n **@Input()** \n\n product: Product; \n\n```", "```ts\n@Component({ \n **inputs:** \n\n ['product'] \n}) \n\n```", "```ts\n<div> \n  <db-product [ **product** \n\n]=\"product\"></db-product> \n</div> \n\n```", "```ts\n@Input( **'bestProduct'** \n\n) product: Product; \n\n```", "```ts\n<div> \n  <db-product **[bestProduct]** \n\n=\"product\"></db-product> \n</div> \n\n```", "```ts\n<a class=\"navbar-brand\" href=\"#\"> **{{appName}}** \n\n</a> \n\n```", "```ts\n<a class=\"navbar-brand\" href=\"#\" [ **innerHTML** \n\n]=\"appName\"></a> \n\n```", "```ts\n<div [ **ngClass** \n\n]=\"classes\">Binding to the classes property</div> \n\n```", "```ts\n<product-detail [ **product** \n\n]=\"currentProduct\"></product-detail> \n\n```", "```ts\n<tr><td colspan=\"{{1 + 1}}\">Table</td></tr> \n\n```", "```ts\nbrowser_adapter.js:77 EXCEPTION: Error: Uncaught (in promise): Template parse errors: \nCan't bind to 'colspan' since it isn't a known native property (\" \n<tr><td [ERROR ->]colspan=\"{{1 + 1}}\">Three-Four</td></tr> \n\") \n\n```", "```ts\n<tr><td [attr.colspan]=\"1 + 1\">Three-Four</td></tr> \n\n```", "```ts\n<div class=\"meat special\">Meat special</div> \n\n```", "```ts\n<div [ **class** \n\n]=\"meatSpecial\">Meat special</div> \n\n```", "```ts\n<div [ **class.special** \n\n]=\"isSpecial\">Show special</div> \n\n```", "```ts\n<button **[style.color]** \n\n=\"isSpecial?'red':'green'\">Special</button> \n\n```", "```ts\n<button **(click)** \n\n=\"onSave()\">Save</button> \n\n```", "```ts\n<button **on-click** \n\n=\"onSave()\">Save</button> \n\n```", "```ts\n<div #product> \n  <input [value]=\"product.name\" \n         (input)=\"product.name=$event.target.value\"><br> \n  {{product.name}} \n</div> \n\n```", "```ts\n **@Output()** \n\n select:EventEmitter<Product> \n\n```", "```ts\n@Component({ \n  **outputs:** \n\n ['select'] \n}) \n\n```", "```ts\n **@Output('selected')** \n\n select:EventEmitter<Product> \n\n```", "```ts\n<a class=\"btn btn-primary\" (click)=\"browse(product)\">Browse</a> \n\n```", "```ts\nimport {Component, Input, Output, EventEmitter} from  \n       '@angular/core'; \n\nexport class Product { \n  name: string; \n  price: number; \n} \n\n@Component({ \n  selector: 'db-product', \n  templateUrl: 'app/product/product.component.html' \n}) \nexport class ProductComponent { \n  @Input product: Product; \n\n  @Output() select:EventEmitter<Product> =  \n            new EventEmitter<Product>(); \n\n  browse($event) { \n    this.select.emit(<Product>$event); \n  } \n} \n\n```", "```ts\n<db-product [product]=\"product\"  \n            (select)=\"productSelected($event)\"></db-product> \n\n```", "```ts\n<input **[value]** \n\n=\"product.selected\"></input> \n\n```", "```ts\n<input **(input)** \n\n=\"product.selected=$event.target.value\">Browse</a> \n\n```", "```ts\n        <input **[(ngModel)]** \n\n=\"product.selected\"></input> \n\n```", "```ts\n        <input **bindon-ngModel** \n\n=\"product.selected\"></input> \n\n```", "```ts\n<div [ **class.special** \n\n]=\"isSpecial\">Show special</div> \n\n```", "```ts\n **getClasses()** \n\n { \n  let classes =  { \n    modified: false, \n    special: true \n  }; \n  return classes; \n} \n\n```", "```ts\n<div [ **ngClass** \n\n]=\" **getClasses** \n\n()\">This is special</div> \n\n```", "```ts\n<button [ **style.color** \n\n]=\"isSpecial?'red':'green'\">Special</button> \n\n```", "```ts\ngetStyles() { \n  let styles =  { \n    'font-style':  'normal', \n    'font-size':   '24px' \n  }; \n  return styles; \n} \n\n```", "```ts\n<div [ **ngStyle** \n\n]=\" **getStyles** \n\n()\"> \n  This div has a normal font with 8 px size. \n</div>  \n\n```", "```ts\n<h3 [ **hidden** \n\n]=\"!specialName\"> \n  Your special is: {{specialName}} \n</h3> \n\n```", "```ts\n<h3 * **ngIf** \n\n=\"specialName\"> \n  Your special is: {{specialName}} \n</h3> \n\n```", "```ts\n<div [ **ngSwitch** \n\n]=\"condition\"> \n  <p * **ngSwitchWhen** \n\n=\"true\">The true value</p> \n  <p * **ngSwitchWhen** \n\n=\"false\">The false value</p> \n  <p * **ngSwitchDefault** \n\n>Unknown value</p> \n</div> \n\n```", "```ts\n<div ***ngFor** \n\n=\"let product of products\">{{product.name}}</div> \n\n```", "```ts\n<div *ngFor=\"let product of products; let **i=index** \n\n\"> \n     {{ **i** \n\n + 1}} - {{product.name}} \n</div> \n\n```", "```ts\n<div *ngFor=\"let product of products; trackBy: product.id; let i=index\"> \n     {{i + 1}} - {{product.name}} \n</div> \n\n```", "```ts\ntrackByProductId(index: number, product: Product): any {  \n  return product.id;  \n} \n\n```", "```ts\n<div *ngFor=\"let product of products; trackBy:trackByProductId; \n             let i=index\"> \n  {{i + 1}} - {{product.name}} \n</div> \n\n```", "```ts\n<template id=\"special_template\"> \n  <h3>Your are special</h3> \n</template> \n\n```", "```ts\n// Get the template \nvar template: HTMLTemplateElement =  \n    <HTMLTemplateElement>document. \n    querySelector(\"#special_template\"); \n// Find place where  \nvar placeholder: HTMLElement =  \n    <HTMLElement>document. \n    querySelector(\"place\"); \n// Clone and insert template into the DOM \nplaceholder.appendChild(template.content.cloneNode(true)); \n\n```", "```ts\n<h3 *ngIf=\"condition\">Your are special</h3> \n\n```", "```ts\n<template [ngIf]=\"condition\"> \n  <h3>Your are special</h3> \n</template> \n\n```", "```ts\nimport {Directive, Input} from '@angular/core'; \n\n@Directive({ selector: '[dbIf]' }) \nexport class IfDirective { \n} \n\n```", "```ts\nimport {Directive, Input} from '@angular/core'; \nimport {TemplateRef, ViewContainerRef} from '@angular/core'; \n\n@Directive({ selector: '[dbIf]' }) \nexport class IfDirective { \n    constructor( \n        private templateRef: TemplateRef<any>, \n        **private viewContainer: ViewContainerRef** \n\n    ) { } \n} \n\n```", "```ts\n@Input() set dbIf(condition: boolean) { \n    if (condition) { \n        **this.viewContainer.createEmbeddedView(this.templateRef);** \n\n    } else { \n        **this.viewContainer.clear();** \n\n    } \n} \n\n```", "```ts\nimport {Directive, Input} from '@angular/core'; \nimport {TemplateRef, ViewContainerRef} from '@angular/core'; \n\n@Directive({ selector: '[dbIf]' }) \nexport class IfDirective { \n    constructor( \n        private templateRef: TemplateRef<any>, \n        private viewContainer: ViewContainerRef \n    ) { } \n\n    @Input() set dbIf(condition: boolean) { \n        if (condition) { \n            this.viewContainer. \n                 createEmbeddedView(this.templateRef); \n        } else { \n            this.viewContainer.clear(); \n        } \n    } \n} \n\n```", "```ts\nexport class Category { \n    // Unique Id \n    id: string; \n    // The title \n    title: string; \n    // Description \n    desc: string; \n    // Path to image \n    image: string; \n} \n\n```", "```ts\nimport {Component, Input, Output, EventEmitter}  \nfrom '@angular/core'; \n\nimport {Category} from './category'; \n\n@Component({ \n    selector: 'db-category-card', \n    templateUrl:  \n      'app/category/category-card.component.html' \n}) \nexport class CategoryCardComponent { \n    @Input() category: Category; \n    @Output() select: EventEmitter<Category> =  \n                  new EventEmitter<Category>(); \n\n    browse() { \n        this.select.emit(this.category); \n    } \n} \n\n```", "```ts\n<div class=\"col-xs-12 col-sm-6 col-md-4\"> \n    <div class=\"card\"> \n    <img class=\"card-img-top img-fluid center-block product-item\"  \n         src=\"{{category.image}}\" alt=\"{{category.title}}\"> \n    <div class=\"card-block\"> \n        <h4 class=\"card-title\">{{category.title}}</h4> \n        <p class=\"card-text\">{{category.desc}}</p> \n        <a class=\"btn btn-primary\" (click)=\"browse()\">Browse</a> \n    </div> \n    </div> \n</div> \n<!-- /.col --> \n\n```", "```ts\nimport {Component, Input, Output, EventEmitter} from '@angular/core'; \n\nimport {Category} from './category'; \n\n@Component({ \n    selector: 'db-category-slide', \n    templateUrl:  \n      'app/category/category-slide.component.html' \n}) \nexport class CategorySlideComponent { \n    @Input() category: Category; \n    @Output() select: EventEmitter<Category> =  \n                  new EventEmitter<Category>(); \n\n    browse() { \n        this.select.emit(this.category); \n    } \n} \n\n```", "```ts\n<img src=\"{{category.image}}\" alt=\"{{category.title}}\"> \n<div class=\"carousel-caption\"> \n    <h2>{{category.title}}</h2> \n</div> \n\n```", "```ts\nimport { NgModule } from '@angular/core'; \nimport { CommonModule } from '@angular/common'; \nimport { RouterModule } from '@angular/router'; \n\nimport { CategoryCardComponent } from './category-card.component'; \nimport { CategorySlideComponent } from './category-slide.component'; \n\n@NgModule({ \n    imports: [CommonModule, RouterModule], \n    declarations: [CategoryCardComponent, CategorySlideComponent], \n    exports: [CategoryCardComponent, CategorySlideComponent] \n}) \nexport class CategoryModule { } \n\n```", "```ts\nimport { NgModule } from '@angular/core'; \nimport { BrowserModule } from '@angular/platform-browser'; \n\n/** \n * Modules \n */ \n **import { CategoryModule } from './category/category.module';** \n\n/* \n * Components \n */ \nimport { AppComponent }  from './app.component'; \nimport { NavbarComponent } from './navbar/navbar.component'; \n\n@NgModule({ \n  imports: [BrowserModule, CategoryModule], \n  declarations: [AppComponent, NavbarComponent], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```", "```ts\n<!-- Indicators --> \n<ol class=\"carousel-indicators\"> \n  <li data-target=\"#welcome-products\" \n*ngFor=\"let category of slideCategories; let first=first; let i=index\" \n      attr.data-slide-to=\"{{i}}\" [ngClass]=\"{active: first}\"></li> \n</ol> \n\n```", "```ts\n<!-- Content --> \n<div class=\"carousel-inner\" role=\"listbox\"> \n  <div *ngFor=\"let category of slideCategories; let first=first\" \n        class=\"carousel-item\" [ngClass]=\"{active: first}\"> \n    <db-category-slide \n      [category]=\"category\" (select)=\"selectCategory($event)\"> \n    </db-category-slide> \n  </div> \n</div> \n\n```", "```ts\n<div class=\"row\"> \n    <db-category-card *ngFor=\"let category of cardCategories\" \n      [category]=\"category\" (select)=\"selectCategory($event)\"> \n    </db-category-card> \n  </div> \n\n```"]