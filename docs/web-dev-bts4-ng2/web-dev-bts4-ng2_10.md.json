["```ts\n     **npm install** \n\n    ```", "```ts\n     **npm start** \n\n    ```", "```ts\n **npm install -g webpack** \n\n```", "```ts\n\"devDependencies\": { \n    \"typescript\": \"^2.0.0\", \n    \"typings\": \"^1.0.5\", \n\n    \"ts-loader\": \"^0.8.2\", \n    \"webpack\": \"^1.12.2\", \n **\"webpack-dev-server\": \"^1.12.1\"** \n\n  } \n\n```", "```ts\n\"scripts\": { \n    \"start\": \"webpack-dev-server\", \n    \"build\": \"webpack\", \n    \"postinstall\": \"typings install\" \n  } \n\n```", "```ts\n{ \n  \"compilerOptions\": { \n    \"target\": \"es5\", \n **\"module\": \"commonjs\",** \n\n    \"moduleResolution\": \"node\", \n    \"sourceMap\": true, \n    \"emitDecoratorMetadata\": true, \n    \"experimentalDecorators\": true, \n    \"removeComments\": false, \n    \"noImplicitAny\": false \n  } \n} \n\n```", "```ts\n **npm install** \n\n```", "```ts\nmodule.exports = { \n    entry: \"./app/main\", \n    output: { \n        path: __dirname, \n        filename: \"./dist/bundle.js\" \n    }, \n    resolve: { \n        extensions: ['', '.js', '.ts'] \n    }, \n    devServer: { \n        historyApiFallback: true, \n        open: true, \n        watch: true, \n        inline: true, \n        colors: true, \n        port: 9000 \n    }, \n    module: { \n        loaders: [{ \n            test: /\\.ts/, loaders: ['ts-loader'],  \n              exclude: /node_modules/ \n        }] \n    } \n}; \n\n```", "```ts\n **npm run build** \n\n```", "```ts\n<html> \n  <head> \n    <title>The Dream Bean Grocery Store</title> \n    <base href=\"/\"> \n    <meta charset=\"UTF-8\"> \n    <meta name=\"viewport\"  \n          content=\"width=device-width, initial-scale=1\"> \n    <link rel=\"stylesheet\"  \n          href=\"node_modules/bootstrap/dist/css/bootstrap.css\"> \n    <link rel=\"stylesheet\"  \n          href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css\"> \n    <link rel=\"stylesheet\" href=\"assets/ecommerce.css\"> \n  </head> \n\n  <body> \n    <my-app>Loading...</my-app> \n  </body> \n\n  <script src=\"node_modules/zone.js/dist/zone.js\"></script> \n  <script src=\"node_modules/reflect-metadata/Reflect.js\"></script> \n\n  <script src=\"node_modules/jquery/dist/jquery.min.js\"></script> \n  <script  \n       src=\"node_modules/tether/dist/js/tether.min.js\"></script> \n  <script  \n       src=\"node_modules/bootstrap/dist/js/bootstrap.js\"></script> \n\n **<script src=\"dist/bundle.js\"></script>** \n\n</html> \n\n```", "```ts\n **npm start** \n\n```", "```ts\nconst NODE_ENV = process.env.NODE_ENV; \n//... \nconfig.plugins = [ \n  new DefinePlugin({ \n    'process.env.NODE_ENV': JSON.stringify(NODE_ENV) \n  }),  \n//... \n]; \n\n```", "```ts\nif (process.env.NODE_ENV === 'production') { \n  enableProdMode(); \n} \n\n```", "```ts\nnew ProvidePlugin({ \n    jQuery: 'jquery', \n    $: 'jquery', \n    jquery: 'jquery', \n    \"Tether\": 'tether', \n    \"window.Tether\": \"tether\" \n}) \n\n```", "```ts\nnew LoaderOptionsPlugin({ \n    debug: false, \n    minimize: ENV_PRODUCTION \n}) \n\n```", "```ts\nnew CommonsChunkPlugin({ \n  name: ['vendor', 'polyfills'], \n  minChunks: Infinity \n}) \n\n```", "```ts\nnew UglifyJsPlugin({ \n  comments: false, \n  compress: { \n    dead_code: true, // eslint-disable-line camelcase \n    screw_ie8: true, // eslint-disable-line camelcase \n    unused: true, \n    warnings: false \n  }, \n  mangle: { \n    screw_ie8: true  // eslint-disable-line camelcase \n  } \n}) \n\n```", "```ts\n/** \n * Import styles \n */ \nimport './assets/ecommerce.scss'; \n\n```", "```ts\n        config.module.loaders.push({ \n          test: /\\.scss$/, \n          loader: ExtractTextPlugin \n                  .extract('css?-autoprefixer!postcss!sass'), \n          include: path.resolve('src/assets/ecommerce.scss') \n        }); \n        config.plugins.push( \n           new ExtractTextPlugin('styles.[contenthash].css') \n        ) \n\n```", "```ts\n[chunkhash].[id].chunk.js \n\n```", "```ts\nnew HtmlWebpackPlugin({ \n  chunkSortMode: 'dependency', \n  filename: 'index.html', \n  hash: false, \n  inject: 'body', \n  template: './src/index.html' \n}) \n\n```", "```ts\n[\"*-webpack-loader\", \"*-web-loader\", \"*-loader\", \"*\"] \n\n```", "```ts\nurl(image.png) => require(\"./image.png\") \n\n```", "```ts\nvar url = require(\"file!./file.png\"); \n\n```", "```ts\n/public-path/0dcbbaa701328a3c262cfd45869e351f.png \n\n```", "```ts\nrequire(\"file?name=js/[hash].script.[ext]!./javascript.js\"); \n// => js/0dcbbaa701328a3c262cfd45869e351f.script.js \n\n```", "```ts\nconst autoprefixer = require('autoprefixer'); \n//... \nconfig.module.loaders.push({ \n    test: /\\.scss$/, \n    loader:  \n      ExtractTextPlugin.extract('css?-autoprefixer!postcss!sass'), \n    include: path.resolve('src/assets/ecommerce.scss') \n  }); \n\n```", "```ts\nvar fileContent = require(\"raw!./file.txt\"); \n// => returns file.txt content as string \n\n```", "```ts\nvar css = require('!css!resolve-url!./file.css'); \n\n```", "```ts\nvar css = require(\"!raw!sass!./file.scss\"); \n// returns compiled css code from file.scss, resolves Sass imports \n\n```", "```ts\nmodule.exports.module = { \n    loaders: [ \n      // all files with a `.ts` or `.tsx` extension  \n      // will be handled by `ts-loader` \n      { test: /\\.tsx?$/, loader: 'ts-loader' } \n    ] \n  } \n} \n\n```", "```ts\nrequire(\"url?limit=10000!./file.png\"); \n// => DataUrl if \"file.png\" is smaller that 10kb \n\n```", "```ts\n/* \n * Angular Firebase \n */ \nimport {AngularFireModule, AuthProviders, AuthMethods}  \n    from 'angularfire2'; \nimport * as firebase from 'firebase'; \n\n// Initialize Firebase \nexport var firebaseConfig = { \n  apiKey: \"AIzaSyDDrc42huFLZqnG-pAg1Ly9VnFtVx3m-Cg\", \n  authDomain: \"ecommerce-a99fc.firebaseapp.com\", \n  databaseURL: \"https://ecommerce-a99fc.firebaseio.com\", \n  storageBucket: \"ecommerce-a99fc.appspot.com\", \n}; \n// Initialize Firebase Authentication \n **const firebaseAuthConfig = {** \n\n **provider: AuthProviders.Password,** \n\n **method: AuthMethods.Redirect** \n\n **}** \n\n@NgModule({ \n  imports: [HttpModule, \n **AngularFireModule.initializeApp(firebaseConfig,** \n\n **firebaseAuthConfig),** \n\n            BrowserModule, FormsModule, ReactiveFormsModule,  \n            routing, CartModule, CategoryModule, ProductModule], \n  declarations: [AppComponent, NavbarComponent, FooterComponent,  \n                WelcomeComponent, CheckoutViewComponent], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```", "```ts\nconstructor(public auth$: FirebaseAuth) { \n    auth$.subscribe((state: FirebaseAuthState) => { \n        this.authState = state; \n    }); \n} \n\n```", "```ts\nsignIn(email: string, password: string):  \n   firebase.Promise<FirebaseAuthState> { \n    return this.auth$.login({ \n        email: email, \n        password: password \n    }, { \n        provider: AuthProviders.Password, \n        method: AuthMethods.Password, \n    }); \n} \n\nsignOut(): void { \n    this.auth$.logout(); \n} \n\n```", "```ts\nonSubmit(values:any): void { \n    this.submitted = true; \n    this.auth.signIn(values.email, values.password) \n        .then(() => this.postSignIn()) \n        .catch((error) => { \n            this.error = 'Username or password is incorrect'; \n            this.submitted = false; \n        }); \n} \n\nprivate postSignIn(): void { \n    this.router.navigate(['/welcome']); \n} \n\n```", "```ts\nexport class AuthGuard implements CanActivate { \n\n    constructor(private auth: AuthService, private router: Router)  \n    { } \n\n    canActivate(): Observable<boolean>|boolean { \n      return this.auth.auth$.map((authState: FirebaseAuthState)=>{ \n            if (authState) { \n                return true; \n            } else { \n                this.router.navigateByUrl('/login'); \n                return false; \n            } \n      }).first(); \n    } \n} \n\n```", "```ts\nexport class NavbarComponent { \n  constructor(private authService: AuthService,  \n              private router: Router) { } \n\n  logout() { \n    this.authService.signOut(); \n    this.router.navigateByUrl(\"/login\"); \n  } \n} \n\n```", "```ts\n<div class=\"collapse navbar-toggleable-xs\"  \n  id=\"exCollapsingNavbar\"> \n  <a class=\"navbar-brand\" href=\"\">Dream Bean</a> \n\n  <div class=\"nav navbar-nav\"> \n    <a class=\"nav-item nav-link\" (click)=\"logout()\"  \n       ***ngIf=\"authService.authenticated\"** \n\n>Sign out</a> \n  </div> \n\n  <db-cart-menu ***ngIf=\"authService.authenticated\"** \n\n></db-cart-menu> \n</div> \n\n```", "```ts\n{ \n  \"rules\": { \n **\".read\": \"auth != null\",** \n\n    \".write\": \"auth != null\", \n    \"products\": { \n      \".indexOn\": [\"categoryId\", \"title\"] \n    } \n  } \n} \n\n```", "```ts\n **npm run build** \n\n```", "```ts\n **firebase login** \n\n **firebase deploy** \n\n```", "```ts\n **npm uninstall -save bootstrap bootstrap-loader jquery tether** \n\n```", "```ts\n// Bootstrap 4 \nimport \"jquery\"; \nimport \"bootstrap-loader\"; \n\n```", "```ts\nnpm install ng2-bootstrap --save \n\n```", "```ts\n **import {Ng2BootstrapModule, Ng2BootstrapConfig, Ng2BootstrapTheme}** \n\n **from 'ng2-bootstrap';** \n\n **Ng2BootstrapConfig.theme = Ng2BootstrapTheme.BS4;** \n\n@NgModule({ \n  imports: [ \n    AngularFireModule.initializeApp(firebaseConfig,  \n      firebaseAuthConfig), AuthModule, \n    BrowserModule, FormsModule, ReactiveFormsModule, \n    routing, CartModule, CategoryModule, ProductModule,  \n **Ng2BootstrapModule],** \n\n  declarations: [AppComponent, NavbarComponent, FooterComponent, \n    WelcomeComponent, CheckoutViewComponent], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```", "```ts\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/css/bootstrap.min.css\" crossorigin=\"anonymous\"> \n\n```", "```ts\n<carousel> \n  <slide *ngFor=\"let category of slideCategories; let i=index\"  \n         [active]=\"category.active\"> \n    <db-category-slide [category]=\"category\"></db-category-slide> \n  </slide> \n</carousel> \n\n```", "```ts\n **import {DropdownModule} from 'ng2-bootstrap';** \n\n@NgModule({ \n    imports: [CommonModule, FormsModule, ReactiveFormsModule,  \n              RouterModule, DropdownModule], \n    declarations: [CartItemCountComponent, CartMenuComponent,  \n                   CartViewComponent], \n    exports: [CartMenuComponent, CartViewComponent,  \n              CartItemCountComponent], \n    providers: [CartService] \n}) \nexport class CartModule {} \n\n```", "```ts\n<div class=\"nav navbar-nav float-xs-right\"> \n    <div class=\"nav-item\"> \n        <div dropdown> \n            <a href class=\"nav-link\" id=\"cart-dropdown\"  \n               dropdownToggle> \n                Cart: {{cart.amount | currency:'USD':true: \n                        '1.2-2'}} ({{cart.count}} items) \n            </a> \n            <div class=\"dropdown-menu dropdown-menu-right\"  \n                 dropdownMenu aria-labelledby=\"cart-dropdown\"> \n              <!-- cart content --> \n            </div> \n        </div> \n    </div> \n</div> \n\n```", "```ts\n **npm install -g angular-cli** \n\n```", "```ts\n **ng --help** \n\n```", "```ts\n **ng new ecommerce** \n\n```", "```ts\n **cd ecommerce** \n\n **ng serve** \n\n```", "```ts\n **npm i angularfire2 firebase @types/request ng2-bootstrap** \n\n```", "```ts\n\"styles\": [ \n  \"assets/ecommerce.scss\" \n], \n\"scripts\": [ \n  \"../node_modules/ng2-bootstrap/bundles/ng2-bootstrap.umd.js\" \n], \n\n```", "```ts\n\"scripts\": { \n  \"start\": \"ng serve\", \n  \"lint\": \"tslint \"src/**/*.ts\"\", \n  \"test\": \"ng test\", \n  \"pree2e\": \"webdriver-manager update\", \n  \"e2e\": \"protractor\", \n **\"prod:build\": \"ng build --prod --aot\",** \n\n **\"prod:serve\": \"ng serve --prod --aot\"** \n\n}, \n\n```", "```ts\n **npm run prod:build** \n\n```", "```ts\n **npm run prod:serve** \n\n```"]