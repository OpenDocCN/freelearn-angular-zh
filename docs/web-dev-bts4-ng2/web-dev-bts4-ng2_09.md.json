["```ts\n     **npm install** \n\n    ```", "```ts\n     **npm start** \n\n    ```", "```ts\nvar ngPackageNames = [ \n    'common', \n    'compiler', \n    'core', \n    'forms', \n **'http',** \n\n    'platform-browser', \n    'platform-browser-dynamic', \n    'router', \n    'router-deprecated', \n    'upgrade', \n  ]; \n\n```", "```ts\nimport {NgModule} from '@angular/core'; \nimport {BrowserModule} from '@angular/platform-browser'; \nimport {FormsModule, ReactiveFormsModule} from '@angular/forms'; \n **import {HttpModule} from '@angular/http';** \n\n/** \n * Modules \n */ \nimport {CartModule} from './cart/cart.module'; \nimport {CategoryModule} from './category/category.module'; \nimport {ProductModule} from './product/product.module'; \n\n/* \n * Components \n */ \nimport {AppComponent}  from './app.component'; \nimport {NavbarComponent} from './navbar/navbar.component'; \nimport {FooterComponent} from './footer/footer.component'; \nimport {WelcomeComponent} from './welcome/welcome.component'; \nimport {CheckoutViewComponent} from \n'./checkout/checkout-view.component'; \n\n/* \n * Routing \n */ \nimport {routing}  from './app.routes'; \n\n@NgModule({ \n  imports: [ **HttpModule** \n\n, BrowserModule, FormsModule, \n            ReactiveFormsModule, routing, CartModule, \n            CategoryModule, ProductModule], \n  declarations: [AppComponent, NavbarComponent, FooterComponent, \n                WelcomeComponent, CheckoutViewComponent], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```", "```ts\n// map tells the System loader where to look for things \nvar map = { \n    'app':      'app', \n    'rxjs':     'node_modules/rxjs', \n    **'angular-in-memory-web-api': \n                 'node_modules/angular-in-memory-web-api',** \n\n    '@angular': 'node_modules/@angular' \n  }; \n\n  // packages tells the System loader how to load when no filename \n  // and/or no extension \n  var packages = { \n    'app':  { main: 'main.js',  defaultExtension: 'js' }, \n    'rxjs': { defaultExtension: 'js' }, \n    **'angular-in-memory-web-api': \n             { main: 'index.js', defaultExtension: 'js' },** \n\n  }; \n\n```", "```ts\nimport {InMemoryDbService} from 'angular-in-memory-web-api'; \n\nimport {Category} from './category/category.service'; \nimport {Product} from './product/product.service'; \n\nexport class InMemoryDataService implements InMemoryDbService { \n  createDb() { \n    let categories: Category[] = [ \n        { id: '1', title: 'Bread & Bakery', \n          imageL: 'http://placehold.it/1110x480', \n          imageS: 'http://placehold.it/270x171', \n          desc: 'The best cupcakes, cookies, cakes, pies, \n                 cheesecakes, fresh bread, biscotti, muffins, \n                 bagels, fresh coffee and more.' }, \n        { id: '2', title: 'Takeaway', \n          imageL: 'http://placehold.it/1110x480', \n          imageS: 'http://placehold.it/270x171', \n          desc: 'It's consistently excellent, dishes are superb \n                 and healthily cooked with high quality \n                 ingredients.' }, \n                       // ... \n]; \n\n    let products: Product[] = [ \n        // Bakery \n        { id: '1', categoryId: '1', title: 'Baguette', \n          price: 1.5, isSpecial: false, \n          imageL: 'http://placehold.it/1110x480', \n          imageS: 'http://placehold.it/270x171', \n          desc: 'Great eaten fresh from oven. Used to make sub \n          sandwiches, etc.' }, \n        { id: '2', categoryId: '1', title: 'Croissants', \n          price: 0.5, isSpecial: true, \n          imageL: 'http://placehold.it/1110x480', \n          imageS: 'http://placehold.it/270x171', \n          desc: 'A croissant is a buttery, flaky, \n                 viennoiserie-pastry named for its well-known \n                 crescent shape.' }, \n        // \n    ];   \n    return { \n      categories, \n      products \n    }; \n  } \n} \n\n```", "```ts\nimport {HttpModule} from '@angular/http'; \n// Imports for loading & configuring the in-memory web api \nimport { **InMemoryWebApiModule** \n\n} from 'angular-in-memory-web-api'; \nimport { **InMemoryDataService** \n\n}  from './in-memory-data.service'; \nAnd finally, we need to link the InMemoryWebApiModule to use the InMemoryDataService: \n@NgModule({ \n  imports: [HttpModule, \n           **InMemoryWebApiModule.forRoot(InMemoryDataService),** \n\n            BrowserModule, FormsModule, ReactiveFormsModule, \n\n```", "```ts\nimport {Injectable} from '@angular/core'; \n **import {Headers, Http, Response} from '@angular/http';** \n\nimport 'rxjs/add/operator/toPromise'; \n\n```", "```ts\ngetProducts(category?:string, search?:string):Promise<Product[]> { \n  let url = this.productsUrl; \n  if (category) { \n    url += `/?categoryId=${category}`; \n  } else if (search) { \n    url += `/?title=${search}`; \n  } \n  return this.http \n   .get(url) \n   .toPromise() \n   .then((response:Response) => response.json().data as Product[]) \n   .catch(this.handleError); \n } \n\n```", "```ts\n@Component({ \n    selector: 'db-product-grid', \n    templateUrl: 'app/product/product-grid.component.html' \n}) \nexport class ProductGridComponent implements OnInit { \n  **products: any = [];** \n\n    constructor(private route: ActivatedRoute, \n                private productService: ProductService, \n                private cartService: CartService) {} \n\n    ngOnInit(): void { \n        this.route \n            .queryParams \n            .subscribe(params => { \n                let category: string = params['category']; \n                let search: string = params['search']; \n                // Clear view before request \n                this.products = []; \n                // Return filtered data from getProducts function \n                this.productService.getProducts(category, search) \n               **.then((products: Product[]) => {** \n\n                    // Transform products to appropriate data \n                    // to display \n                    this.products = this.transform(products); \n                }); \n            }); \n    } \n    // \n} \n\n```", "```ts\n<db-product-card ***ngFor=\"let row of products\"** \n\n    [products]=\"row\" (addToCart)=\"addToCart($event)\"> \n</db-product-card> \n\n```", "```ts\n@Injectable() \nexport class CategoryService { \n    // URL to Categories web api \n    private categoriesUrl = 'app/categories'; \n    // We keep categories in cache variable \n   **private categories: Category[] = [];** \n\n    constructor(private http: Http) {} \n\n    getCategories(): Promise<Category[]> { \n      return this.http \n          .get(this.categoriesUrl) \n          .toPromise() \n          .then((response: Response) => { \n             this.categories = response.json().data as Category[]; \n             return this.categories; \n          }) \n          .catch(this.handleError); \n    } \n\n    getCategory(id: string): Category { \n        for (let i = 0; i < this.categories.length; i++) { \n            if (this.categories[i].id === id) { \n                return this.categories[i]; \n            } \n        } \n        return null; \n    } \n\n    private handleError(error: any): Promise<any> { \n        window.alert(`An error occurred: ${error}`); \n        return Promise.reject(error.message || error); \n    } \n} \n\n```", "```ts\ngetCategories(): Promise<Category[]> { \n      return this.http \n          .get(this.categoriesUrl) \n          **.toPromise()** \n\n          .then((response: Response) => { \n             this.categories = response.json().data as Category[]; \n             return this.categories; \n          }) \n          .catch(this.handleError); \n} \n\n```", "```ts\nimport 'rxjs/add/operator/toPromise'; \n\n```", "```ts\nimport * as Rx from 'rxjs/Rx';\n```", "```ts\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\nObservable.of(1,2,3).map(x => x * x); // Result: [1, 4, 9]\n```", "```ts\ngetProducts(category?:string,search?:string):Observable<Product[]>{ \n  let url = this.productsUrl; \n  if (category) { \n    url += `/?categoryId=${category}`; \n  } else if (search) { \n    url += `/?title=${search}`; \n  } \n  return this.http \n    .get(url) \n    .map((response:Response) => response.json().data as Product[]) \n    .catch(this.handleError); \n} \n\ngetProduct(id: string): Observable<Product> { \n  return this.http \n    .get(this.productsUrl + `/${id}`) \n    .map((response: Response) => response.json().data as Product) \n    .catch(this.handleError); \n} \n\n```", "```ts\nprivate handleError(error: any): Promise<any> { \n    window.alert(`An error occurred: ${error}`); \n    return Promise.reject(error.message || error); \n} \n\n```", "```ts\nProductViewComponent: \n@Component({ \n    selector: 'db-product-view', \n    templateUrl: 'app/product/product-view.component.html' \n}) \nexport class ProductViewComponent implements OnInit { \n\n   **product: Product;** \n\n    constructor(private route: ActivatedRoute, \n                private productService: ProductService, \n                private cartService: CartService) { } \n\n    ngOnInit(): void { \n        this.route \n            .params \n            .subscribe(params => { \n                // Get the product id \n                let id: string = params['id']; \n                // Return the product from ProductService \n               **this.productService.getProduct(id) \n                   .subscribe((product:Product) => \n                     this.product = product);** \n\n                // Return the cart item \n                this.cartItem = this.cartService.findItem(id); \n            }); \n    } \n  } \n} \n\n```", "```ts\nProductGridComponent: \n@Component({ \n    selector: 'db-product-grid', \n    templateUrl: 'app/product/product-grid.component.html' \n}) \nexport class ProductGridComponent implements OnInit { \n    **products: Observable<Product[]>;** \n\n    constructor(private route: ActivatedRoute, \n                private productService: ProductService, \n                private cartService: CartService) {} \n\n    ngOnInit(): void { \n        this.route \n            .queryParams \n            .debounceTime(300) // wait for 300ms pause in events \n            .subscribe(params => { \n                let category: string = params['category']; \n                let search: string = params['search']; \n               **this.products = this.productService \n                                .getProducts(category, search) \n                                .map(this.transform);** \n\n            }); \n    } \n    // \n} \n\n```", "```ts\n<db-product-card ***ngFor=\"let row of products | async\"** \n\n      [products]=\"row\" (addToCart)=\"addToCart($event)\"> \n</db-product-card> \n\n```", "```ts\n<div class=\"card\"> \n    <div class=\"card-header\">Quick Shop</div> \n    <input #search type=\"text\" class=\"form-control\" \n           placeholder=\"Search for...\" \n           (keyup)=\"searchProduct(search.value)\"> \n</div> \n\n```", "```ts\n@Component({ \n    selector: 'db-product-search', \n    templateUrl: 'app/product/product-search.component.html' \n}) \nexport class ProductSearchComponent { \n\n    constructor(private router: Router) {} \n\n   **searchProduct(value: string) { \n      this.router.navigate(['/products'], { \n        queryParams: { search: value} });** \n\n **}** \n\n} \n\n```", "```ts\nngOnInit(): void { \n **this.route \n        .queryParams \n        .debounceTime(300) // wait for 300ms pause in events \n        .distinctUntilChanged() // only changed values pass \n        .subscribe(params => {** \n\n            let category: string = params['category']; \n            let search: string = params['search']; \n            this.products = this.productService \n                            .getProducts(category, search) \n                            .map(this.transform); \n        }); \n} \n\n```", "```ts\n **npm install -g firebase-tools** \n\n```", "```ts\n **firebase login** \n\n```", "```ts\n **firebase init** \n\n```", "```ts\n{ \n  \"rules\": { \n **\".read\": true,** \n\n    \".write\": \"auth != null\" \n  } \n} \n\n```", "```ts\n **firebase init** \n\n```", "```ts\n{ \n  \"rules\": { \n    **\".read\": true,** \n\n    \".write\": \"auth != null\" \n  } \n} \n\n```", "```ts\n **npm install -save angularfire2 firebase** \n\n```", "```ts\n **npm install -save-dev typescript@2.0.0** \n\n```", "```ts\n// map tells the System loader where to look for things \nvar map = { \n    'app':          'app', \n    'rxjs':         'node_modules/rxjs', \n    '@angular':     'node_modules/@angular', \n    **'firebase':     'node_modules/firebase', \n    'angularfire2': 'node_modules/angularfire2'** \n\n  }; \n\n// packages tells the System loader how to load \n// when no filename and/or no extension \nvar packages = { \n 'app':          {main: 'main.js',  defaultExtension: 'js'}, \n 'rxjs':         {defaultExtension: 'js'}, \n **'firebase':      {main: 'firebase.js', defaultExtension: 'js'}, \n 'angularfire2':  {main: 'angularfire2.js', defaultExtension: 'js'}** \n\n}; \n\n```", "```ts\n/* \n * Angular Firebase \n */ \nimport {AngularFireModule} from 'angularfire2'; \n **// Initialize Firebase \nexport var firebaseConfig = { \n  apiKey: \"AIzaSyDDrc42huFLZqnG-pAg1Ly9VnFtVx3m-Cg\", \n  authDomain: \"ecommerce-a99fc.firebaseapp.com\", \n  databaseURL: \"https://ecommerce-a99fc.firebaseio.com\", \n  storageBucket: \"ecommerce-a99fc.appspot.com\", \n};** \n\n@NgModule({ \n  imports: [HttpModule, \n           **AngularFireModule.initializeApp(firebaseConfig),** \n\n            BrowserModule, FormsModule, ReactiveFormsModule, \n            routing, CartModule, CategoryModule, ProductModule], \n  declarations: [AppComponent, NavbarComponent, FooterComponent, \n                WelcomeComponent, CheckoutViewComponent], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```", "```ts\nimport {Injectable} from '@angular/core'; \n **import {AngularFire, FirebaseListObservable} from 'angularfire2';** \n\nimport {Observable} from 'rxjs/Observable'; \nimport 'rxjs/add/operator/catch'; \n// \n@Injectable() \nexport class CategoryService { \n\n    // URL to Categories Firebase api \n    private categoriesUrl = 'categories'; \n    // We keep categories in cache variable \n    private categories: Category[] = []; \n\n constructor( **private af: AngularFire** \n\n) {} \n\n    getCategories(): Observable<Category[]> { \n      **return this.af.database \n            .list(this.categoriesUrl) \n            .catch(this.handleError);** \n\n    } \n\n    getCategory(id: string): Category { \n        for (let i = 0; i < this.categories.length; i++) { \n            if (this.categories[i].id === id) { \n                return this.categories[i]; \n            } \n        } \n        return null; \n    } \n\n    // \n} \n\n```", "```ts\nimport {Injectable} from '@angular/core'; \nimport {AngularFire, FirebaseListObservable} from 'angularfire2'; \n **import {Observable} from 'rxjs/Observable';** \n\nimport 'rxjs/add/operator/catch'; \nimport 'rxjs/add/observable/empty'; \n//... \nexport class ProductService { \n\n    // URL to Products web api \n    private productsUrl = 'products'; \n\n    constructor( **private af: AngularFire** \n\n) {} \n\n    getProducts(category?: string, search?: string): \n           Observable<Product[]> { \n        if (category || search) { \n            let query = <any>{}; \n            if (category) { \n                query.orderByChild = 'categoryId'; \n                query.equalTo = category; \n            } else { \n                query.orderByChild = 'title'; \n                query.startAt = search.toUpperCase(); \n                query.endAt = query.startAt + '\\uf8ff'; \n            } \n            return **this.af.database \n                .list(this.productsUrl, { \n                    query: query \n                })** \n\n                .catch(this.handleError); \n        } else { \n            return Observable.empty(); \n        } \n    } \n\n    getProduct(id: string): Observable<Product> { \n        return this.af.database \n            .object(this.productsUrl + `/${id}`) \n            .catch(this.handleError); \n    } \n   //... \n} \n\n```", "```ts\nlet query = <any>{}; \nquery.orderByChild = 'categoryId'; \nquery.equalTo = category; \nreturn this.af.database \n    .list(this.productsUrl, { \n        query: query \n    }) \n    .catch(this.handleError); \n\n```", "```ts\nlet query = <any>{}; \nquery.orderByChild = 'title'; \nquery.startAt = search.toUpperCase(); \nquery.endAt = query.startAt + '\\uf8ff'; \nreturn this.af.database \n    .list(this.productsUrl, { \n        query: query \n    }) \n    .catch(this.handleError); \n\n```", "```ts\n **firebase deploy** \n\n```"]