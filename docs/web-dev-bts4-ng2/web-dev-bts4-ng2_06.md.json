["```ts\n **constructor(private router: ActivatedRoute) {** \n\n    this.router \n        .queryParams \n        .subscribe(params => { \n            let category: string = params['category']; \n            let search: string = params['search']; \n            // Return filtered data \n            let products: Product[] =  \n              getProducts(category, search); \n            // Transform products to appropriate data \n            // to display \n            this.products = this.transform(products); \n        }); \n} \n\n```", "```ts\nimport {Injectable, ReflectiveInjector} from '@angular/core'; \n\n@Injectable() \nexport ProductGridService { \n  constructor(private router: ActivatedRoute) {...} \n} \n\nconst injector = ReflectiveInjector.resolveAndCreate  \n      ([ActivatedRoute, ProductGridService]); \nconst service = injector.get(ProductGridService); \n\n```", "```ts\nconstructor(private router: ActivatedRoute) {...} \n\n```", "```ts\nimport { OpaqueToken } from '@angular/core'; \n\nexport let APP_TITLE = new OpaqueToken('appTitle'); \n\n```", "```ts\nproviders: [{ provide: APP_TITLE, useValue: 'Dream Bean' }] \n\n```", "```ts\nimport {Inject} from '@angular/core'; \n\nconstructor(@Inject('APP_TITLE') private appTitle) {...} \n\n```", "```ts\nimport {Optional} from '@angular/core'; \n\nconstructor(@Optional('config') private config) { \n  if (config) { \n    // Use the config \n    ... \n  } \n} \n\n```", "```ts\nconst injector = ReflectiveInjector.resolveAndCreate  \n      ([ActivatedRoute, ProductGridService]); \n\n```", "```ts\nplatformBrowserDynamic().bootstrapModule(AppModule); \n\n```", "```ts\n@NgModule({ \n  imports: [BrowserModule, FormsModule,  \n            routing, CategoryModule, ProductModule], \n  declarations: [AppComponent, NavbarComponent, FooterComponent,  \n                WelcomeComponent], \n **providers: [ProductService],** \n\n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```", "```ts\n[{provide: Router, useClass: Router] \n\n```", "```ts\n[{ provide: Router, **useClass: BetterRouter** \n\n }] \n\n```", "```ts\nclass BetterRouter extends Router {} \n\nvar injectorClass = ReflectiveInjector.resolveAndCreate([ \n  BetterRouter, {provide: Router, **useClass:** \n\n BetterRouter} \n]); \nvar injectorAlias = ReflectiveInjector.resolveAndCreate([ \n  BetterRouter, {provide: Router, **useExisting:** \n\n BetterRouter} \n]); \n\n```", "```ts\nvar injector = Injector.resolveAndCreate([ \n    HTTP_PROVIDERS, \n    MockBackend, \n    { provide: XHRBackend, useExisting: MockBackend } \n]); \nvar http = injector.get(Http); \nvar backend = injector.get(MockBackend);  \n\n```", "```ts\nvar people = [{name: 'Jeff'}, {name: 'Tobias'}]; \n\n// Listen for any new requests \n **backend.** \n\nconnections.observer({ \n  next: connection => { \n    var response = new Response({body: people}); \n    setTimeout(() => { \n      // Send a response to the request \n      connection.mockRespond(response); \n    }); \n  } \n}); \n\n **http.** \n\nget('people.json').observer({ \n  next: res => { \n    // Response came from mock backend \n    console.log('first person', res.json()[0].name); \n  } \n}); \n\n```", "```ts\n@Directive({ \n    selector: '[custom-validator]', \n    providers: [{ provide: NG_VALIDATORS,  \n **useExisting: CustomValidatorDirective, multi: true }]** \n\n}) \nclass CustomValidatorDirective implements Validator { \n    validate(c: Control): { [key: string]: any } { \n        return { \"custom\": true }; \n    } \n} \n\n```", "```ts\nexport interface **Config** \n\n { \n  url: string; \n  title: string; \n} \n\nexport const **CUSTOM_CONFIG:** \n\n Config = { \n  url: 'www.dreambean.com', \n  title: 'Dream Bean Co.' \n}; \n\n```", "```ts\nproviders: [{ provide: **'app.config', useValue: CUSTOM_CONFIG** \n\n}]\n```", "```ts\nconstructor(@Inject( **'app.config'** \n\n) config: **Config** \n\n) { \n  this.title = config.title + ':' + config.url; \n} \n\n```", "```ts\nimport { OpaqueToken } from '@angular/core'; \n\nexport let **CONFIG** \n\n = new **OpaqueToken** \n\n('app.config'); \n\n```", "```ts\nproviders: [{ provide: **CONFIG, useValue:** \n\n **CUSTOM_CONFIG** \n\n }] \n\n```", "```ts\nconstructor(@Inject( **CONFIG** \n\n) config: **Config** \n\n) { \n  this.title = config.title + ':' + config.url; \n} \n\n```", "```ts\nbootstrap(AppComponent, [ \n   provide('languages', {useValue: 'en', multi:true }), \n   provide('languages', {useValue: 'fr', multi:true }) \n); \n\n```", "```ts\nconstructor(@Inject('languages') languages) { \n  console.log(languages); \n  // Logs: \"['en','fr']\" \n} \n\n```", "```ts\ncategories: Category[] = [...]; \n\nconstructor(private **authorized:** \n\n boolean) { } \n\ngetCategories() { \n **return this.authorized ? this.categories : [];** \n\n} \n\n```", "```ts\nlet categoryServiceFactory = (securityService: SecurityService) => { \n   return new CategoryService(securityService.authorized); \n} \n\n```", "```ts\nexport let categoryServiceProvider = {  \n    provide: CategoryService, \n    useFactory: categoryServiceFactory, \n    deps: [ **SecurityService** \n\n] \n}; \n\n```", "```ts\n **npm install** \n\n```", "```ts\n **npm start** \n\n```", "```ts\nimport { **Injectable** \n\n} from '@angular/core'; \n\n```", "```ts\n **@Injectable()** \n\nexport class **CategoryService** \n\n { \n    **categories:** \n\n Category[] = [ \n        { id: '1', title: 'Bread & Bakery', imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'The best cupcakes, cookies, cakes, pies, cheesecakes, fresh bread, biscotti, muffins, bagels, fresh coffee and more.' }, \n        { id: '2', title: 'Takeaway', imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'It's consistently excellent, dishes are superb and healthily cooked with high quality ingredients.' }, \n        { id: '3', title: 'Dairy', imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'A dairy product is food produced from the milk of mammals, primarily cows, water buffaloes, goats, sheep, yaks, horses.' }, \n        { id: '4', title: 'Meat', imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Only superior quality beef, lamb, and pork.' }, \n        { id: '5', title: 'Seafood', imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'Great place to buy fresh seafood.' }, \n        { id: '6', title: 'Fruit & Veg', imageL: 'http://placehold.it/1110x480', imageS: 'http://placehold.it/270x171', desc: 'A variety of fresh fruits and vegetables.' } \n    ]; \n\n   **getCategories()** \n\n { \n        return this.categories; \n    } \n\n    **getCategory** \n\n(id: string): Category { \n        for (let i = 0; i < this.categories.length; i++) { \n            if (this.categories[i].id === id) { \n                return this.categories[i]; \n            } \n        } \n        throw new CategoryNotFoundException( \n           `Category ${id} not found`); \n    } \n} \n\n```", "```ts\nimport {CategoryService} from './category.service'; \n\n@NgModule({ \n    imports: [CommonModule, FormsModule, RouterModule], \n    declarations: [CategoryListComponent, CategoryCardComponent, CategorySlideComponent], \n    exports: [CategoryListComponent, CategoryCardComponent, CategorySlideComponent], \n **providers: [CategoryService]** \n\n}) \nexport class CategoryModule {} \n\n```", "```ts\nimport {Category, **CategoryService** \n\n} from './category.service'; \n\n```", "```ts\nexport class CategoryListComponent { \n\n    categories: Category[]; \n\n    constructor(private router: Router,  \n **private categoryService: CategoryService) {** \n\n **this.categories = this.categoryService.getCategories();** \n\n    } \n\n    filterProducts(category: Category) { \n        this.router.navigate(['/products'],  \n             { queryParams: { category: category.id} }); \n    } \n} \n\n```", "```ts\nexport class ProductService { \n\n    private **products:** \n\n Product[] = [ \n // ... \n    ]; \n    **getProducts** \n\n(category?: string, search?: string) { \n        if (category) { \n            return this.products.filter((product: Product, index: number, array: Product[]) => { \n                return product.categoryId === category; \n            }); \n        } else if (search) { \n            let lowSearch = search.toLowerCase(); \n            return this.products.filter((product: Product, index: number, array: Product[]) => { \n                return product.title.toLowerCase().indexOf(lowSearch) != -1; \n            }); \n        } else { \n            return this.products; \n        } \n    } \n\n   **getProduct** \n\n(id: string): Product { \n        for (let i = 0; i < this.products.length; i++) { \n            if (this.products[i].id === id) { \n                return this.products[i]; \n            } \n        } \n        throw new ProductNotFoundException(`Product ${id} not found`); \n    } \n} \n\n```", "```ts\nimport {ProductService} from './product.service'; \n\n@NgModule({ \n    imports: [CommonModule, FormsModule, ReactiveFormsModule, RouterModule, CategoryModule], \n    declarations: [ProductListComponent, ProductCardComponent, ProductSearchComponent, ProductGridComponent], \n    exports: [ProductListComponent, ProductCardComponent, ProductSearchComponent, ProductGridComponent], \n **providers: [ProductService]** \n\n}) \nexport class ProductModule {} \n\n```", "```ts\nexport class Cart { \n    count: number = 0; \n    amount: number = 0; \n    items: CartItem[] = []; \n} \n\n```", "```ts\nimport {Product} from '../product/product.service'; \n\nexport interface CartItem { \n    product: Product; \n    count:  number; \n    amount: number; \n} \n\n```", "```ts\n **cart:** \n\n Cart = new Cart(); \n\n```", "```ts\n **addProduct** \n\n(product: Product) { \n    // Find CartItem in items \n    let item: CartItem = this.findItem(product.id); \n    // Check was it found? \n    if (item) { \n        // Item was found. \n        // Increase the count of the same products \n        item.count++; \n        // Increase amount of the same products \n        item.amount += product.price; \n    } else { \n        // Item was not found. \n        // Create the cart item \n        item = { \n            product: product, \n            count: 1, \n            amount: product.price \n        }; \n        // Add item to items \n        this.cart.items.push(item); \n    } \n    // Increase count in the cart \n    this.cart.count++; \n    // Increase amount in the cart \n    this.cart.amount += product.price; \n} \n\n```", "```ts\n **removeProduct** \n\n(product: Product) { \n    // Find CartItem in items \n    let item: CartItem = this.findItem(product.id); \n    // Check is item found? \n    if (item) { \n        // Decrease the count \n        item.count--; \n        // Check was that the last product? \n        if (!item.count) { \n            // It was last product \n            // Delete item from items \n            this.remove(item); \n        } \n        // Decrease count in the cart \n        this.cart.count--; \n        // Decrease amount in the cart \n        this.cart.amount -= product.price; \n    } \n} \n\n```", "```ts\nremoveItem(item: CartItem) { \n    // Delete item from items \n    this.remove(item); \n    // Decrease count in the cart \n    this.cart.count -= item.count; \n    // Decrease amount in the cart \n    this.cart.amount -= item.amount; \n} \n\n```", "```ts\nprivate **findItem** \n\n(id: string): CartItem { \n    for (let i = 0; i < this.cart.items.length; i++) { \n        if (this.cart.items[i].product.id === id) { \n            return this.cart.items[i]; \n        } \n    } \n    return null; \n} \n\n```", "```ts\nprivate **remove** \n\n(item: CartItem) { \n    // Find the index of cart item \n    let indx: number = this.cart.items.indexOf(item); \n    // Check was item found \n    if (indx !== -1) { \n        // Remove element from array \n        this.cart.items.splice(indx, 1); \n    } \n} \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \n\nimport {Cart, CartService} from './cart.service'; \n\n@Component({ \n    selector: 'db-cart-menu', \n    templateUrl: 'app/cart/cart-menu.component.html' \n}) \nexport class CartMenuComponent { \n\n    private cart: Cart; \n\n    constructor(private cartService: CartService) { \n        this.cart = this.cartService.cart; \n    } \n} \n\n```", "```ts\n<ul class=\"nav navbar-nav float-xs-right\"> \n    <li class=\"nav-item dropdown\"> \n        <a class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\"  \n           href=\"#\" role=\"button\" aria-haspopup=\"true\"  \n           aria-expanded=\"false\"> \n            Cart: {{cart. **amount | currency:'USD':true:'1.2-2'** \n\n}}  \n                  ({{cart.count}} items) \n        </a> \n        <div class=\"dropdown-menu dropdown-menu-right\"  \n             aria-labelledby=\"cart\"> \n        <!-- ... --> \n\n```", "```ts\n<div class=\"table-responsive\"> \n    <table class=\"table table-sm table-striped table-bordered  \n           table-cart\"> \n        <tbody> \n            <tr> \n                <td class=\"font-weight-bold\">Title</td> \n                <td class=\"font-weight-bold\">Price</td> \n                <td class=\"font-weight-bold\">Count</td> \n                <td class=\"font-weight-bold\">Amount</td> \n            </tr> \n            <tr *ngFor=\"let item of cart.items\"> \n                <td>{{item.product.title}}</td> \n                <td>{{item.product.price |  \n                       currency:'USD':true:'1.2-2'}}</td> \n                <td>{{item.count}}</td> \n                <td>{{item.amount |  \n                        currency:'USD':true:'1.2-2'}}</td> \n            </tr> \n        </tbody> \n    </table> \n</div> \n\n```", "```ts\n<div class=\"row\"> \n    <div class=\"col-md-12\"> \n        <div class=\"total-cart float-xs-right\"> \n            <b>Total:  \n              {{cart.amount | currency:'USD':true:'1.2-2'}} \n            </b> \n        </div> \n    </div> \n</div> \n<div class=\"row\"> \n    <div class=\"col-md-12\"> \n        <a [routerLink]=\"['/cart']\"  \n           class=\"btn btn-primary float-xs-right btn-cart\"> \n            <i class=\"fa fa-shopping-cart\" aria-hidden=\"true\"></i>  \n **Cart** \n\n        </a> \n        <a [routerLink]=\"['/checkout']\"  \n           class=\"btn btn-success float-xs-right btn-cart\"> \n            <i class=\"fa fa-credit-card\" aria-hidden=\"true\"></i>  \n **Checkout** \n\n       </a> \n    </div> \n</div> \n\n```", "```ts\nimport {NgModule} from '@angular/core'; \nimport {CommonModule} from '@angular/common'; \nimport {RouterModule} from '@angular/router'; \n\nimport {CartMenuComponent} from './cart-menu.component'; \nimport {CartService} from './cart.service'; \n\n@NgModule({ \n    imports: [CommonModule, RouterModule], \n    declarations: [CartMenuComponent], \n    exports: [CartMenuComponent], \n    providers: [CartService] \n}) \nexport class CartModule {} \n\n```", "```ts\n//... \nimport { **CartModule** \n\n } from './cart/cart.module'; \n//... \n@NgModule({ \n  imports: [ \n    BrowserModule, FormsModule, ReactiveFormsModule, \n    routing, **CartModule** \n\n, CategoryModule, ProductModule], \n  declarations: [AppComponent, NavbarComponent, FooterComponent, \n    WelcomeComponent], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```", "```ts\n<ul class=\"nav navbar-nav float-xs-right\"> \n  <li class=\"nav-item dropdown\"> \n    <a class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\"  \n       href=\"#\" role=\"button\" aria-haspopup=\"true\"  \n       aria-expanded=\"false\">Cart</a> \n    <div class=\"dropdown-menu\"> \n      <span>The Cart Placeholder</span> \n    </div> \n  </li> \n</ul> \n\n```", "```ts\n<db-cart-menu></db-cart-menu> \n\n```", "```ts\n **addToCart** \n\n(product:Product) { \n    this.cartService. **addProduct** \n\n(product); \n} \n\n```"]