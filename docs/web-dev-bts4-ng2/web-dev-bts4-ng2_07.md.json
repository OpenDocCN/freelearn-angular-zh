["```ts\n     **npm install** \n\n    ```", "```ts\n     **npm start** \n\n    ```", "```ts\n<form> \n  <div class=\"form-group\"> \n    <label for=\"user_name\">User Name</label> \n    <input type=\"text\" class=\"form-control\" id=\"user_name\"> \n  </div> \n  <div class=\"form-group\"> \n    <label for=\"password\">Password</label> \n    <input type=\"password\" class=\"form-control\" id=\"password\"> \n  </div> \n</form> \n\n```", "```ts\n<form  class=\"form-inline\"> \n  <div class=\"form-group\"> \n    <label for=\"user_name\">User Name</label> \n    <input type=\"text\" class=\"form-control\" id=\"user_name\"> \n  </div> \n  <div class=\"form-group\"> \n    <label for=\"password\">Password</label> \n    <input type=\"password\" class=\"form-control\" id=\"password\"> \n  </div> \n</form> \n\n```", "```ts\n<form  class=\"form-inline\"> \n  <div class=\"form-group\"> \n    <label class=\"sr-only\" for=\"user_name\">User Name</label> \n    <input type=\"text\" class=\"form-control\" id=\"user_name\"  \n **placeholder=\"User Name\">** \n\n  </div> \n  <div class=\"form-group\"> \n    <label class=\"sr-only\" for=\"password\">Password</label> \n    <input type=\"password\" class=\"form-control\" id=\"password\"  \n **placeholder=\"Password\">** \n\n  </div> \n</form> \n\n```", "```ts\n<form> \n  <div class=\"form-group\"> \n    <label for=\"user_name\">User Name</label> \n    <input type=\"text\" class=\"form-control\" id=\"user_name\"> \n  </div> \n  <div class=\"form-group\"> \n    <label for=\"password\">Password</label> \n    <input type=\"password\" class=\"form-control\" id=\"password\"> \n **<p id=\"passwordHelpBlock\" class=\"form-text text-muted\">** \n\n **The password must be more than 8 characters long.** \n\n **</p>** \n\n  </div> \n</form> \n\n```", "```ts\n<form  class=\"form-inline\"> \n  <div class=\"form-group\"> \n    <label for=\"user_name\">User Name</label> \n    <input type=\"text\" class=\"form-control\" id=\"user_name\"> \n  </div> \n  <div class=\"form-group\"> \n    <label for=\"password\">Password</label> \n    <input type=\"password\" class=\"form-control\" id=\"password\"> \n **<small id=\"passwordHelpInline\" class=\"text-muted\">** \n\n **Must be 8-20 characters long.** \n\n **</small>** \n\n  </div> \n</form> \n\n```", "```ts\n<div class=\"container\"> \n  <form> \n    <div class=\"form-group row\"> \n      <label for=\"user_name\" class=\"col-sm-2 col-form-label\"> \n        User Name \n      </label> \n      <div class=\"col-sm-10\"> \n        <input type=\"text\" class=\"form-control\" id=\"user_name\"> \n      </div> \n    </div> \n    <div class=\"form-group row\"> \n      <label for=\"password\" class=\"col-sm-2 col-form-label\"> \n        Password \n      </label> \n      <div class=\"col-sm-10\"> \n        <input type=\"password\" class=\"form-control\" id=\"password\"> \n      </div> \n    </div> \n    <div class=\"form-group row\"> \n      <label class=\"col-sm-2\">Connection</label> \n      <div class=\"col-sm-10\"> \n        <div class=\"form-check\"> \n          <label class=\"form-check-label\"> \n            <input class=\"form-check-input\" type=\"checkbox\">  \n              Secure (SSL) \n          </label> \n        </div> \n      </div> \n    </div> \n    <div class=\"form-group row\"> \n      <div class=\"offset-sm-2 col-sm-10\"> \n        <button type=\"submit\" class=\"btn btn-primary\">Sign in \n        </button> \n      </div> \n    </div> \n  </form> \n</div> \n\n```", "```ts\n<div class=\"container\"> \n  <form> \n    <div class=\"form-group row\"> \n    <label for=\"user_name\" class=\"col-sm-2 col-form-label\"> \n      User Name \n    </label> \n    <div class=\"col-sm-10\"> \n      <input type=\"text\" class=\"form-control\" id=\"user_name\"> \n      </div> \n    </div> \n    <div class=\"form-group row\"> \n      <label for=\"password\"  \n             class=\"col-sm-2 col-form-label\">Password</label> \n      <div class=\"col-sm-10\"> \n        <input type=\"password\" class=\"form-control\" id=\"password\"> \n      </div> \n    </div> \n    <fieldset class=\"form-group row\"> \n      <legend class=\"col-form-legend col-sm-2\">Language</legend> \n      <div class=\"col-sm-10\"> \n        <div class=\"form-check\"> \n          **<label class=\"form-check-label\"> \n            <input class=\"form-check-input\" type=\"radio\"  \n                   name=\"language\" id=\"lngEnglish\" value=\"english\"  \n                   checked> \n            English \n          </label>** \n\n        </div> \n        <div class=\"form-check\"> \n          **<label class=\"form-check-label\"> \n            <input class=\"form-check-input\" type=\"radio\"  \n                   name=\"language\" id=\"lngFrench\" value=\"french\"> \n            French \n          </label>** \n\n        </div> \n        <div class=\"form-check disabled\"> \n          **<label class=\"form-check-label\"> \n            <input class=\"form-check-input\" type=\"radio\"  \n                   name=\"language\" id=\"lngSpain\" value=\"spain\"   \n                   disabled> \n            Spain \n          </label>** \n\n        </div> \n      </div> \n    </fieldset> \n  </form> \n</div> \n\n```", "```ts\n<form  class=\"form-inline\"> \n  <div class=\"form-group\"> \n    <label for=\"user_name\">User Name</label> \n    <input type=\"text\" class=\"form-control\" id=\"user_name\"> \n  </div> \n  <div class=\"form-group\"> \n    <label for=\"password\">Password</label> \n    <input type=\"password\" class=\"form-control\" id=\"password\"> \n    <small id=\"passwordHelpInline\" class=\"text-muted\"> \n      Must be 8-20 characters long. \n    </small> \n  </div> \n  <div class=\"form-group\"> \n **<label class=\"form-check-inline\">** \n\n **<input class=\"form-check-input\" type=\"radio\" name=\"language\"** \n\n **id=\"lngEnglish\" value=\"english\" checked>** \n\n **English** \n\n **</label>** \n\n **<label class=\"form-check-inline\">** \n\n **<input class=\"form-check-input\" type=\"radio\" name=\"language\"** \n\n **id=\"lngFrench\" value=\"french\">** \n\n **French** \n\n **</label>** \n\n **<label class=\"form-check-inline\">** \n\n **<input class=\"form-check-input\" type=\"radio\" name=\"language\"** \n\n **id=\"lngSpain\" value=\"spain\" disabled>** \n\n **Spain** \n\n **</label>** \n\n  </div> \n</form> \n\n```", "```ts\n<div class=\"container\"> \n  <form> \n    <div class=\"form-group row\"> \n      <label for=\"user_name\" class=\"col-sm-2 col-form-label\"> \n        User Name \n      </label> \n      <div class=\"col-sm-10\"> \n **<p class=\"form-control-static\">Admin</p>** \n\n      </div> \n    </div> \n    <div class=\"form-group row\"> \n      <label for=\"password\" class=\"col-sm-2 col-form-label\"> \n        Password \n      </label> \n      <div class=\"col-sm-10\"> \n        <input type=\"password\" class=\"form-control\" id=\"password\"> \n      </div> \n    </div> \n  </form> \n</div> \n\n```", "```ts\n<form> \n  <div class=\"form-group\"> \n    <label for=\"user_name\">User Name</label> \n    **<input type=\"text\" class=\"form-control\" id=\"user_name\"  \n           value=\"Admin\" disabled>** \n\n  </div> \n  <div class=\"form-group\"> \n    <label for=\"password\">Password</label> \n    <input type=\"password\" class=\"form-control\" id=\"password\"> \n    <p id=\"passwordHelpBlock\" class=\"form-text text-muted\"> \n      The password must be more than 8 characters long. \n    </p> \n  </div> \n</form> \n\n```", "```ts\n<form> \n  <div class=\"form-group\"> \n    <label for=\"user_name\">User Name</label> \n    **<input type=\"text\" class=\"form-control\" id=\"user_name\"  \n           value=\"Admin\" readonly>** \n\n  </div> \n  <div class=\"form-group\"> \n    <label for=\"password\">Password</label> \n    <input type=\"password\" class=\"form-control\" id=\"password\"> \n    <p id=\"passwordHelpBlock\" class=\"form-text text-muted\"> \n      The password must be more than 8 characters long. \n    </p> \n  </div> \n</form> \n\n```", "```ts\n<form> \n    <div class=\"form-group **has-success** \n\n\"> \n        <label class=\"control-label\" for=\"username\">Success \n        </label> \n        <input type=\"text\" class=\"form-control  \n               **form-control-success** \n\n\" id=\"username\"> \n        <div class=\" **form-control-feedback** \n\n\">That username's is  \n           ok.</div> \n    </div> \n\n    <div class=\"form-group **has-warning** \n\n\"> \n        <label class=\"control-label\" for=\"password\">Warning \n        </label> \n        <input type=\"password\" class=\"form-control  \n           **form-control-warning** \n\n\" id=\"password\"> \n        <div class=\" **form-control-feedback** \n\n\">The password is  \n           weak</div> \n    </div> \n\n    <div class=\"form-group **has-danger** \n\n\"> \n        <label class=\"control-label\" for=\"card\">Card</label> \n        <input type=\"card\" class=\"form-control  \n           **form-control-danger** \n\n\"  \n            id=\"card\"> \n        <div class=\" **form-control-feedback** \n\n\">We accept only VISA and  \n             Master cards</div> \n    </div> \n</form> \n\n```", "```ts\n<div class=\"card\"> \n    <div class=\"card-header\">Quick Shop</div> \n    <div class=\"input-group\"> \n **<input #search type=\"text\" class=\"form-control\"** \n\n **placeholder=\"Search for...\">** \n\n **<span class=\"input-group-btn\">** \n\n **<button class=\"btn btn-secondary\" type=\"button\"** \n\n **(click)=\"searchProduct(search.value)\">Go!</button>** \n\n **</span>** \n\n    </div> \n</div> \n\n```", "```ts\n<div class=\"card\"> \n    <div class=\"card-header\">Quick Shop</div> \n    <div class=\"input-group\"> \n        <input #search type=\"text\" class=\"form-control\"     \n               placeholder=\"Search for...\"  \n **(keyup)=\"searchChanged($event)\">** \n\n        <span class=\"input-group-btn\"> \n            <button class=\"btn btn-secondary\" type=\"button\"  \n **[disabled]=\"disabled\"** \n\n                (click)=\"searchProduct(search.value)\">Go!</button> \n        </span> \n    </div> \n</div> \n\n```", "```ts\nimport {Component} from '@angular/core'; \nimport {Router} from '@angular/router'; \n\n@Component({ \n    selector: 'db-product-search', \n    templateUrl: 'app/product/product-search.component.html' \n}) \nexport class ProductSearchComponent { \n\n **disabled: boolean = true;** \n\n    constructor(private router: Router) {} \n\n    searchProduct(value: string) { \n        this.router.navigate(['/products'], { queryParams: {  \n        search: value} }); \n    } \n\n **searchChanged(event: KeyboardEvent) {** \n\n **// Get an input element** \n\n **let element:HTMLInputElement =** \n\n **<HTMLInputElement>event.target;** \n\n **// Update the disabled property depends on value** \n\n **if (element.value) {** \n\n **this.disabled = false;** \n\n **} else {** \n\n **this.disabled = true;** \n\n **}** \n\n **}** \n\n} \n\n```", "```ts\n<div class=\"card\"> \n    <div class=\"card-header\">Quick Shop</div> \n    <div class=\"input-group\"> \n        <input #search type=\"text\" class=\"form-control\"  \n              placeholder=\"Search for...\"  \n **(keyup)=\"searchChanged(search.value)\">** \n\n        <span class=\"input-group-btn\"> \n            <button class=\"btn btn-secondary\" type=\"button\"  \n                [disabled]=\"disabled\" \n                (click)=\"searchProduct(search.value)\">Go!</button> \n        </span> \n    </div> \n</div> \n\n```", "```ts\nsearchChanged(value: string) { \n    // Update the disabled property depends on value  \n    if (value) { \n        this.disabled = false; \n    } else { \n        this.disabled = true; \n    } \n} \n\n```", "```ts\n<div class=\"container\"> \n    <div class=\"row\"> \n      <div class=\"col-md-5\"> \n **<img class=\"center-block product-img\" src=\"{{product.imageL}}\"** \n\n **alt=\"{{product.title}}\">** \n\n     </div> \n     <!-- ... --> \n\n```", "```ts\n<div class=\"col-md-4\"> \n    <div class=\"card\"> \n        <div class=\"card-block\"> \n            <h4 class=\"card-title\">{{product.title}}</h4> \n            <p class=\"card-text\">{{product.desc}}</p> \n        </div> \n        <ul class=\"list-group list-group-flush\"> \n            <li class=\"list-group-item\">ID: {{product.id}}</li> \n            <li class=\"list-group-item\">Category:  \n                {{product.categoryId | categoryTitle}}</li> \n        </ul> \n        <div class=\"card-footer\"> \n            <p class=\"card-text\">Availability: In Stock</p> \n        </div> \n    </div> \n    <div class=\"card\" *ngIf=\"!product.isSpecial\"> \n        <div class=\"card-block\"> \n            <h4 class=\"card-title\">Price:  \n              {{product.price | currency:'USD':true:'1.2-2'}}</h4> \n        </div> \n    </div> \n    <div class=\"card card-inverse card-danger\"  \n         *ngIf=\"product.isSpecial\"> \n        <div class=\"card-block\"> \n            <h4 class=\"card-title\">Price:  \n              {{product.price | currency:'USD':true:'1.2-2'}}</h4> \n        </div> \n    </div> \n</div> \n\n```", "```ts\nimport {Pipe, PipeTransform} from '@angular/core'; \nimport {Category, CategoryService} from './category.service'; \n\n/* \n * Return category title of the value \n * Usage: \n *   value | categoryTitle \n * Example: \n *   {{ categoryId |  categoryTitle }} \n *   presume categoryId='1' \n *   result formats to 'Bread & Bakery' \n*/ \n@Pipe({ name: 'categoryTitle' }) \nexport class CategoryTitlePipe implements PipeTransform { \n\n    constructor(private categoryService: CategoryService) { } \n\n    transform(value: string): string { \n        let category: Category = this.categoryService.getCategory(value); \n        return category ? category.title : ''; \n    } \n} \n\n```", "```ts\nimport {NgModule} from '@angular/core'; \nimport {CommonModule} from '@angular/common'; \nimport {RouterModule} from '@angular/router'; \n\nimport {CategoryListComponent} from './category-list.component'; \n **import {CategoryTitlePipe} from './category.pipe';** \n\nimport {CategoryCardComponent} from './category-card.component'; \nimport {CategorySlideComponent} from './category-slide.component'; \n\nimport {CategoryService} from './category.service'; \n\n@NgModule({ \n    imports: [CommonModule, RouterModule], \n    declarations: [CategoryListComponent, CategoryTitlePipe,  \n                   CategoryCardComponent, CategorySlideComponent], \n    exports: [CategoryListComponent, CategoryTitlePipe,  \n              CategoryCardComponent, CategorySlideComponent], \n    providers: [CategoryService] \n}) \nexport class CategoryModule {} \n\n```", "```ts\n<div class=\"form-group row\">\n\u00a0\u00a0\u00a0 <label for=\"first_name\" class=\"col-xs-3 form-control-label\">Quantity</label>\n\u00a0\u00a0\u00a0 <div class=\"col-xs-9\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <h4 class=\"form-control-static\">{{quantity}}</h4>\n\u00a0\u00a0\u00a0 </div>\n</div>\n\n<div class=\"form-group row\">\n\u00a0\u00a0\u00a0 <label for=\"last_name\" class=\"col-xs-3 form-control-label\">Amount</label>\n\u00a0\u00a0\u00a0 <div class=\"col-xs-9\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <h4 class=\"form-control-static\">{{amount | currency:'USD':true:'1.2-2'}}</h4>\n\u00a0\u00a0\u00a0 </div>\n</div> \n\n```", "```ts\n    <div class=\"form-group row\"> \n        <div class=\"col-xs-12\"> \n **<a class=\"btn btn-primary btn-block\"** \n\n **(click)=\"addToCart()\">Add to Cart</a>** \n\n **<a class=\"btn btn-warning btn-block\"** \n\n **(click)=\"removeFromCart()\">Remove from Cart</a>** \n\n        </div> \n    </div> \n    <div class=\"form-group row\"> \n        <div class=\"col-xs-12\"> \n **<a class=\"btn btn-secondary btn-block\"** \n\n **[routerLink]=\"['/products']\">Continue Shopping</a>** \n\n        </div> \n    </div> \n</form> \n\n```", "```ts\nimport { Component } from '@angular/core'; \nimport { ActivatedRoute } from '@angular/router'; \n\nimport { Product, ProductService } from './product.service'; \nimport { Cart, CartItem, CartService } from  \n    '../cart/cart.service'; \n\n@Component({ \n    selector: 'db-product-view', \n    templateUrl: 'app/product/product-view.component.html' \n}) \nexport class ProductViewComponent { \n    product: Product; \n    cartItem: CartItem; \n\n    get quantity(): number { \n        return this.cartItem ? this.cartItem.count : 0; \n    } \n\n    get amount(): number { \n        return this.cartItem ? this.cartItem.amount : 0; \n    } \n\n    constructor(private route: ActivatedRoute,  \n                private productService: ProductService,  \n                private cartService: CartService) { \n        this.route \n            .params \n            .subscribe(params => { \n                // Get the product id \n                let id: string = params['id']; \n                // Return the product from ProductService \n                this.product = this.productService.getProduct(id); \n                // Return the cart item \n                this.cartItem = this.cartService.findItem(id); \n            }); \n    } \n\n    addToCart() { \n     this.cartItem = this.cartService.addProduct(this.product); \n    } \n\n    removeFromCart() { \n     this.cartItem = this.cartService.removeProduct(this.product); \n    } \n} \n\n```", "```ts\nexport interface CartItem { \n    product: Product; \n    count: number; \n    amount: number; \n} \n\n```", "```ts\nget quantity(): number { \n    return this.cartItem ? this.cartItem.count : 0; \n} \n\nget amount(): number { \n    return this.cartItem ? this.cartItem.amount : 0; \n} \n\n```", "```ts\naddToCart() { \n    this.cartItem = this.cartService.addProduct(this.product); \n} \n\nremoveFromCart() { \n    this.cartItem = this.cartService.removeProduct(this.product); \n} \n\n```", "```ts\nimport {NgModule} from '@angular/core'; \nimport {CommonModule} from '@angular/common'; \nimport {RouterModule} from '@angular/router'; \n\nimport {ProductListComponent} from './product-list.component'; \n **import {ProductViewComponent} from './product-view.component';** \n\nimport {ProductCardComponent} from './product-card.component'; \nimport {ProductSearchComponent} from './product-search.component'; \nimport {ProductGridComponent} from './product-grid.component'; \n\nimport {ProductService} from './product.service'; \n\nimport {CategoryModule} from './category/category.module'; \n\n@NgModule({ \n    imports: [CommonModule, RouterModule, CategoryModule], \n    declarations: [ProductListComponent, **ProductViewComponent** \n\n,  \n         ProductCardComponent, ProductSearchComponent,  \n         ProductGridComponent], \n    exports: [ProductListComponent, **ProductViewComponent** \n\n,  \n         ProductCardComponent, ProductSearchComponent,  \n         ProductGridComponent], \n    providers: [ProductService] \n}) \nexport class ProductModule {} \n\n```", "```ts\n/* \n * Angular Imports \n */ \nimport {Routes, RouterModule} from '@angular/router'; \n\n/* \n * Components \n */ \nimport {WelcomeComponent} from './welcome/welcome.component'; \nimport {ProductListComponent} from  \n       './product/product-list.component'; \n **import {ProductViewComponent} from** \n\n **'./product/product-view.component';** \n\n/* \n * Routes \n */ \nconst routes: Routes = [ \n  { path: '', redirectTo: 'welcome', pathMatch: 'full' }, \n  { path: 'welcome', component: WelcomeComponent }, \n  { path: 'products', component: ProductListComponent }, \n **{ path: 'products/:id', component: ProductViewComponent },** \n\n]; \n\n/* \n * Routes Provider \n */ \nexport const routing = RouterModule.forRoot(routes); \n\n```", "```ts\n<div class=\"card-deck-wrapper\"> \n    <div class=\"card-deck\"> \n        <div class=\"card\" *ngFor=\"let product of products\"> \n            <div class=\"card-header text-xs-center\"> \n                {{product.title}} \n            </div> \n            <img class=\"card-img-top center-block product-item\"  \n                 src=\"{{product.imageS}}\" alt=\"{{product.title}}\"> \n            <div class=\"card-block text-xs-center\"  \n                 [ngClass]=\"setClasses(product)\"> \n                <h4 class=\"card-text\">Price:  \n                    ${{product.price}}</h4> \n            </div> \n            <div class=\"card-footer text-xs-center\"> \n                <button class=\"btn btn-primary\"  \n                  (click)=\"buy(product)\">Buy Now</button> \n **<a class=\"btn btn-secondary\"** \n\n **[routerLink]=\"['/products', product.id]\">** \n\n **More Info** \n\n **</a>** \n\n            </div> \n            <div class=\"card-block\"> \n                <p class=\"card-text\">{{product.desc}}</p> \n            </div> \n        </div> \n    </div> \n</div> \n\n```", "```ts\n **$ npm install @angular/forms --save** \n\n```", "```ts\n/* \n * Angular Imports \n */ \nimport { NgModule } from '@angular/core'; \nimport { BrowserModule } from '@angular/platform-browser'; \n **import { FormsModule, ReactiveFormsModule } from '@angular/forms';** \n\nimport { RouterModule } from '@angular/router'; \n\n/** \n * Modules \n */ \nimport { CartModule } from './cart/cart.module'; \nimport { CategoryModule } from './category/category.module'; \nimport { ProductModule } from './product/product.module'; \n\n/* \n * Components \n */ \nimport { AppComponent } from './app.component'; \nimport { NavbarComponent } from './navbar/navbar.component'; \nimport { FooterComponent } from './footer/footer.component'; \nimport { WelcomeComponent } from './welcome/welcome.component'; \n\n/* \n * Routing \n */ \nimport { routing } from './app.routes'; \n\n@NgModule({ \n  imports: [ \n    BrowserModule, **FormsModule, ReactiveFormsModule,** \n\n    routing, CartModule, CategoryModule, ProductModule], \n  declarations: [AppComponent, NavbarComponent, FooterComponent, \n    WelcomeComponent], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```", "```ts\n@Directive({ \n  selector: '[formGroup]', \n  providers: [formDirectiveProvider], \n  host: {'(submit)': 'onSubmit()', '(reset)': 'onReset()'}, \n **exportAs: 'ngForm'** \n\n}) \nexport class FormGroupDirective extends ControlContainer implements Form, OnChanges { // \n\n```", "```ts\n<form #myForm=\"ngForm\"> \n    ... \n</form> \n\n```", "```ts\n<form #myForm=\"ngForm\" (ngSubmit)=\"handle(myForm.value)\"> \n    ... \n</form> \n\n```", "```ts\n<form #myForm=\"ngForm\" (ngSubmit)=\"handle(myForm.value)\"> \n    <label>User Name:</label> \n    <input type=\"text\" name=\"name\" **ngModel** \n\n> \n    <label>Password:</label> \n    <input type=\"password\" name=\"password\" **ngModel** \n\n> \n\n    <button type=\"submit\">Submit</button> \n</form> \n\n```", "```ts\nhandle(value) { \n    console.log(value); \n} \n\n```", "```ts\n{ \n  name: 'User', \n  password: 'myPassword' \n} \n\n```", "```ts\n<form #myForm=\"ngForm\" (ngSubmit)=\"handle(myForm.value)\"> \n    <label>User Name:</label> \n    <input type=\"text\" name=\"name\" [ngModel]=\"name\"> \n    <label>Password:</label> \n    <input type=\"password\" name=\"password\" [ngModel]=\"password\"> \n    <label>Phone:</label> \n    <input type=\"text\" name=\"phone\" [ngModel]=\"phone\"> \n    <label>Email:</label> \n    <input type=\"email\" name=\"email\" [ngModel]=\"email\"> \n\n    <button type=\"submit\">Submit</button> \n</form> \n\n```", "```ts\n@Component({...}) \nexport class MyForm { \n\n **name: string = 'Admin';** \n\n **password: string;** \n\n **phone: string;** \n\n **email: string = 'admin@test.com';** \n\n    handle(value) { \n        console.log(value); \n    } \n} \n\n```", "```ts\n<form #myForm=\"ngForm\" (ngSubmit)=\"handle(myForm.value)\"> \n    <label>User Name:</label> \n    <input type=\"text\" name=\"name\" [(ngModel)]=\"name\"> \n    <p>Hi {{name}}</p> \n    <button type=\"submit\">Submit</button> \n</form> \n\n```", "```ts\n.ng-valid[required], .ng-valid.required  { \n  border-left: 2px solid green; \n} \n\n.ng-invalid:not(form)  { \n  border-left: 2px solid red; \n} \n\n```", "```ts\n<form #myForm=\"ngForm\" (ngSubmit)=\"handle(myForm.value)\"> \n    <fieldset **ngModelGroup=\"user\"** \n\n> \n        <label>User Name:</label> \n        <input type=\"text\" name=\"name\" ngModel> \n        <label>Password:</label> \n        <input type=\"password\" name=\"password\" ngModel> \n    </fieldset> \n    <fieldset **ngModelGroup=\"contact\"** \n\n> \n        <label>Phone:</label> \n        <input type=\"text\" name=\"phone\" ngModel> \n        <label>Email:</label> \n        <input type=\"email\" name=\"email\" ngModel> \n    </fieldset> \n    <button type=\"submit\">Submit</button> \n</form> \n\n```", "```ts\n{ \n  user: { \n    name: 'User', \n    password: 'myPassword' \n  }, \n  contact: { \n    phone: '000-111-22-33', \n    email: 'test@test.com' \n  } \n} \n\n```", "```ts\n<form> \n    <label>User Name:</label> \n    <input type=\"text\" name=\"name\"> \n    <label>Password:</label> \n    <input type=\"password\" name=\"password\"> \n    <label>Phone:</label> \n    <input type=\"text\" name=\"phone\"> \n    <label>Email:</label> \n    <input type=\"email\" name=\"email\"> \n\n    <button type=\"submit\">Submit</button> \n</form> \n\n```", "```ts\nimport { Component } from '@angular/core'; \nimport { FormGroup, FormControl } from '@angular/forms'; \n\n@Component({...}) \nexport class MyForm { \n\n  myForm:FormGroup = new FormGroup({ \n    name: new FormControl('Admin'), \n    password: new FormControl(), \n    contact: new FormGroup({ \n      phone: new FormControl(), \n      email: new FormControl() \n    }) \n  }); \n} \n\n```", "```ts\n<form [formGroup]=\"myForm\"> \n  ... \n</form> \n\n```", "```ts\nimport {Component} from '@angular/core'; \nimport {FormControl, FormGroup, Validators} from '@angular/forms'; \n\n@Component({ \n  selector: 'logon-form', \n  template: ` \n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\"> \n      <div *ngIf=\"userName.invalid\">Name is too short. </div> \n      <input formControlName=\"userName\" placeholder=\"User name\"> \n      <input formControlName=\"password\" placeholder=\"Password\"> \n      <input formControlName=\"phone\" placeholder=\"Phone\"> \n      <input formControlName=\"email\" placeholder=\"Email\"> \n      <button type=\"submit\">Submit</button> \n   </form>` \n}) \nexport class LogonFormGroup { \n  form = new FormGroup({ \n    userName: new FormControl('', Validators.minLength(2)), \n    password: new FormControl('', Validators.minLength(5)), \n    phone: new FormControl(''), \n    email: new FormControl('') \n  }); \n\n  get userName(): any { return this.form.get('userName'); } \n  get password(): any { return this.form.get('password'); } \n\n  constructor() { \n    this.form.setValue({userName: 'admin', password: '12345', phone: '123-123', email: 'mail@example.com'}); \n  } \n\n  onSubmit(): void { \n    console.log(this.form.value);   \n    // Will print {userName: 'admin', password: '12345',  \n    // phone: '123-123', email: 'main@example.com'} \n  } \n} \n\n```", "```ts\nimport {Component} from '@angular/core'; \nimport {FormControl, FormGroup, Validators} from '@angular/forms'; \n\n@Component({ \n  selector: 'logon-form', \n  template: ` \n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\"> \n      <p *ngIf=\"userName.invalid\">Name is invalid.</p> \n      <input formControlName=\"userName\" placeholder=\"User name\"> \n      <input formControlName=\"password\" placeholder=\"Password\"> \n      <fieldset **formGroupName** \n\n=\"contact\"> \n        <input formControlName=\"phone\"> \n        <input formControlName=\"email\"> \n      </fieldset> \n      <button type=\"submit\">Submit</button> \n    </form>` \n}) \nexport class LogonFormComponent { \n  form = new FormGroup({ \n    userName: new FormControl('', Validators.minLength(2)), \n    password: new FormControl('', Validators.minLength(5)), \n\n    contact: new FormGroup({ \n      phone: new FormControl(''), \n      email: new FormControl('') \n    }) \n  }); \n  get userName(): any { return this.form.get(userName'); } \n  get password(): any { return this.form.get('password'); } \n  get phone(): any { return this.form.get('contact.phone'); } \n  get email(): any { return this.form.get('contact.email'); } \n\n  constructor() { \n    this.form.setValue({userName: 'admin', password: '12345',  \n       phone: '123-123', email: 'mail@example.com'}); \n  } \n\n  onSubmit() { \n    console.log(this.form.value);    \n    // Will print: {userName: 'admin', password: '12345',  \n    // phone: '123-123', email: 'main@example.com'} \n    console.log(this.form.status);   \n    // Will print: VALID \n  } \n} \n\n```", "```ts\nimport {Component} from '@angular/core'; \nimport {FormBuilder, FormGroup} from '@angular/forms'; \n\n@Component({...}) \nexport class MyForm { \n  myForm:FormGroup; \n\n  constructor(private **formBuilder: FormBuilder** \n\n) {} \n\n  ngOnInit() { \n    this.myForm = **this.formBuilder.group** \n\n({ \n      name: [], \n      password: , \n      contect: this.formBuilder.group({ \n        phone: [], \n        email: [] \n      }) \n    }); \n  } \n} \nimport {Component, Inject} from '@angular/core'; \nimport {FormBuilder, FormGroup, Validators} from '@angular/forms'; \n\n@Component({ \n  selector: 'logon-form', \n  template: ` \n    <form [formGroup]=\"form\"> \n      <div formGroupName=\"name\"> \n        <input formControlName=\"first\" placeholder=\"First\"> \n        <input formControlName=\"last\" placeholder=\"Last\"> \n      </div> \n      <input formControlName=\"email\" placeholder=\"Email\"> \n      <button>Submit</button> \n    </form> \n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\"> \n      <p *ngIf=\"userName.invalid\">Name is invalid.</p> \n      <input formControlName=\"userName\" placeholder=\"User name\"> \n      <input formControlName=\"password\" placeholder=\"Password\"> \n      <fieldset **formGroupName** \n\n=\"contact\"> \n        <input formControlName=\"phone\"> \n        <input formControlName=\"email\"> \n      </fieldset> \n      <button type=\"submit\">Submit</button> \n    </form> \n    <p>Value: {{ form.value | json }}</p> \n    <p>Validation status: {{ form.status }}</p> \n  ` \n}) \nexport class LogonFormComponent { \n  form: FormGroup; \n  constructor(@Inject(FormBuilder) fb: FormBuilder) { \n    this.form = fb.group({ \n      userName: ['', Validators.minLength(2)], \n      password: ['', Validators.minLength(5)], \n\n      contact: fb.group({ \n        phone: [''], \n        email: [''] \n      }) \n    }); \n  } \n\n  get userName(): any { return this.form.get(userName'); } \n  get password(): any { return this.form.get('password'); } \n  get phone(): any { return this.form.get('contact.phone'); } \n  get email(): any { return this.form.get('contact.email'); } \n\n  constructor() { \n    this.form.setValue({userName: 'admin', password: '12345',  \n       phone: '123-123', email: 'mail@example.com'}); \n  } \n\n  onSubmit() { \n    console.log(this.form.value);    \n    // Will print: {userName: 'admin', password: '12345',  \n    // phone: '123-123', email: 'main@example.com'} \n    console.log(this.form.status);   \n    // Will print: VALID \n  } \n} \n\n```", "```ts\n<div class=\"card\"> \n    <div class=\"card-header\">Quick Shop</div> \n    <div class=\"input-group\"> \n        <input #search type=\"text\" class=\"form-control\"  \n              placeholder=\"Search for...\"  \n **[formControl]=\"seachControl\">** \n\n        <span class=\"input-group-btn\"> \n            <button class=\"btn btn-secondary\" type=\"button\"  \n                [disabled]=\"disabled\" \n                (click)=\"searchProduct(search.value)\">Go!</button> \n        </span> \n    </div> \n</div> \n\n```", "```ts\nimport {Component} from '@angular/core'; \nimport {Router} from '@angular/router'; \n **import {FormControl} from '@angular/forms';** \n\n@Component({ \n    selector: 'db-product-search', \n    templateUrl: 'app/product/product-search.component.html' \n}) \nexport class ProductSearchComponent { \n\n    disabled: boolean = true; \n **seachControl: FormControl;** \n\n    constructor(private router: Router) {} \n\n **ngOnInit() {** \n\n **this.seachControl = new FormControl();** \n\n **this.seachControl.valueChanges.subscribe((value: string) => {** \n\n **this.searchChanged(value);** \n\n **});** \n\n **}** \n\n    searchProduct(value: string) { \n        this.router.navigate(['/products'], { queryParams:  \n                                         { search: value} }); \n    } \n\n    searchChanged(value: string) { \n        // Update the disabled property depends on value  \n        if (value) { \n            this.disabled = false; \n        } else { \n            this.disabled = true; \n        } \n    } \n} \n\n```", "```ts\n<form novalidate> \n  <input type=\"text\" name=\"name\" ngModel **required** \n\n> \n  <input type=\"password\" name=\"password\" ngModel **minlength=\"6\"** \n\n> \n  <input type=\"text\" name=\"city\" ngModel **maxlength=\"10\"** \n\n> \n  <input type=\"text\" name=\"phone\" ngModel  \n **pattern=\"^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$\">** \n\n</form> \n\n```", "```ts\n@Component({...}) \nexport class MyForm { \n  myForm: FormGroup; \n\n  ngOnInit() { \n    this.myForm = new FormGroup({ \n      name: new FormControl('', Validators.required)), \n      password: new FormControl('', Validators.minLength(6)), \n      city: new FormControl('', Validators.maxLength(10)), \n      phone: new FormControl('', Validators.pattern( \n        '[^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$')) \n    }); \n  } \n} \n\n```", "```ts\n@Component({...}) \nexport class MyForm { \n  myForm: FormGroup; \n\n  constructor(private fb: FormBuilder) {} \n\n  ngOnInit() { \n    this. myForm = this.fb.group({ \n      name: ['', Validators.required], \n      password: ['', Validators.minLength(6)], \n      city: ['', Validators.maxLength(10)], \n      phone: ['', Validators.pattern( \n         '[^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$')] \n    }); \n  } \n} \n\n```", "```ts\n<form novalidate [ **formGroup** \n\n]=\" **myForm** \n\n\"> \n... \n</form> \n\n```", "```ts\nexport interface Validator {  \n    validate(c: AbstractControl): { \n        return [key: string]: any \n    }; \n} \n\n```", "```ts\nimport {FormControl} from '@angular/forms'; \n\nexport function validateZip(c: FormControl) { \n  let ZIP_REGEXP:RegExp = new RegExp('[A-Za-z]{5}'); \n\n  return ZIP_REGEXP.test(c.value) ? null : { \n    validateZip: { \n      valid: false \n    } \n  }; \n} \n\n```", "```ts\nimport {Component} from '@angular/core'; \nimport { **validateZip** \n\n} from '../shared/zip.validator'; \nimport {FormBuilder, FormGroup, Validators} from '@angular/forms'; \n\n@Component({...}) \nexport class MyForm { \n  form: FormGroup; \n\n  constructor(private **fb: FormBuilder** \n\n) {} \n\n  ngOnInit() { \n    this.form = this.fb.group({ \n      name: ['', Validators.required], \n      password: ['', Validators.minLength(6)], \n      city: ['', Validators.maxLength(10)], \n      zip: ['', **validateZip** \n\n] \n    }); \n  } \n} \n\n```", "```ts\nimport {FormControl} from '@angular/forms'; \nimport {Directive,forwardRef} from '@angular/core'; \nimport {NG_VALIDATORS} from '@angular/forms'; \n\nexport function validateZip(c: FormControl) { \n  let ZIP_REGEXP:RegExp = new RegExp('[A-Za-z]{5}'); \n\n  return ZIP_REGEXP.test(c.value) ? null : { \n    validateZip: { \n      valid: false \n    } \n  }; \n} \n\n@Directive({ \n  selector: '[validateZip][ngModel],[validateZip][formControl]', \n  providers: [ \n    {provide: NG_VALIDATORS, useExisting: forwardRef(() =>  \n       ZipValidator), multi: true} \n  ] \n}) \nexport class ZipValidator { \n\n  validator: Function = validateZip; \n\n  validate(c: FormControl) { \n    return this.validator(c); \n  } \n} \n\n```", "```ts\n<form novalidate> \n  <input type=\"text\" name=\"name\" ngModel **required** \n\n> \n  <input type=\"password\" name=\"password\" ngModel **minlength=\"6\"** \n\n> \n  <input type=\"text\" name=\"city\" ngModel **maxlength=\"10\"** \n\n> \n  <input type=\"text\" name=\"zip\" ngModel **validateZip** \n\n> \n</form> \n\n```", "```ts\n<div *ngIf=\"cart.count\"> \n    <form #form=\"ngForm\"> \n        <div class=\"table-responsive\"> \n            <table class=\"table table-sm table-striped  \n                          table-bordered table-cart\"> \n                <tbody> \n                    <tr> \n                        <td class=\"font-weight-bold\">Title</td> \n                        <td class=\"font-weight-bold\">Price</td> \n                        <td class=\"font-weight-bold\">Count</td> \n                        <td class=\"font-weight-bold\">Amount</td> \n                    </tr> \n                    <tr *ngFor=\"let item of cart.items\"> \n                        <td>{{item.product.title}}</td> \n                        <td>{{item.product.price |  \n                            currency:'USD':true:'1.2-2'}}</td> \n                        <td> \n                            <input type=\"number\"  \n              name=\"{{item.product.id}}\" min=\"1\"  \n              [ngModel]=\"item.count\" \n              (ngModelChange)=\"item.count = update($event, item)\"> \n                        </td> \n                        <td>{{item.amount |  \n                              currency:'USD':true:'1.2-2'}}</td> \n                    </tr> \n                </tbody> \n            </table> \n        </div> \n    </form> \n</div> \n<div class=\"emty-cart\" *ngIf=\"!cart.count\">The cart is empty!</div> \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \nimport {Cart, CartItem, CartService} from './cart.service'; \n\n@Component({ \n    selector: 'db-cart-view', \n    templateUrl: 'app/cart/cart-view.component.html' \n}) \nexport class CartViewComponent { \n\n    private cart: Cart; \n\n    constructor(private cartService: CartService) { \n        this.cart = this.cartService.cart; \n    } \n\n    clearCart() { \n        this.cartService.clearCart(); \n    } \n\n **update(value, item: CartItem) {** \n\n **let res = value - item.count;** \n\n **if (res > 0) {** \n\n **for (let i = 0; i < res; i++) {** \n\n **this.cartService.addProduct(item.product);** \n\n **}** \n\n **} else if (res < 0) {** \n\n **for (let i = 0; i < -res; i++) {** \n\n **this.cartService.removeProduct(item.product);** \n\n **}** \n\n **}** \n\n **return value;** \n\n **}** \n\n} \n\n```", "```ts\nclearCart() { \n    this.cart.items = []; \n    this.cart.amount = 0; \n    this.cart.count = 0; \n} \n\n```", "```ts\nconst routes: Routes = [ \n  { path: '', redirectTo: 'welcome', pathMatch: 'full' }, \n  { path: 'welcome', component: WelcomeComponent }, \n  { path: 'products', component: ProductListComponent }, \n  { path: 'products/:id', component: ProductViewComponent }, \n **{ path: 'cart', component: CartViewComponent }** \n\n]; \n\n```", "```ts\n<div class=\"row\"> \n    <div class=\"col-md-12\"> \n **<a [routerLink]=\"['/cart']\"** \n\n           class=\"btn btn-primary pull-xs-right btn-cart\"> \n            <i class=\"fa fa-shopping-cart\" aria-hidden=\"true\"></i>  \n            Cart \n        </a> \n        <a [routerLink]=\"['/checkout']\"  \n           class=\"btn btn-success pull-xs-right btn-cart\"> \n            <i class=\"fa fa-credit-card\" aria-hidden=\"true\"></i>  \n              Checkout \n        </a> \n    </div> \n</div> \n\n```", "```ts\nimport {NgModule} from '@angular/core'; \nimport {CommonModule} from '@angular/common'; \nimport {FormsModule, ReactiveFormsModule} from '@angular/forms'; \nimport {RouterModule} from '@angular/router'; \n\nimport {CartMenuComponent} from './cart-menu.component'; \n **import {CartViewComponent} from './cart-view.component';** \n\nimport {CartService} from './cart.service'; \n\n@NgModule({ \n    imports: [CommonModule, FormsModule, ReactiveFormsModule, RouterModule], \n    declarations: [CartMenuComponent, **CartViewComponent** \n\n], \n    exports: [CartMenuComponent, **CartViewComponent** \n\n], \n    providers: [CartService] \n}) \nexport class CartModule {} \n\n```", "```ts\nimport {Component, Input} from '@angular/core'; \nimport {FormGroup, FormBuilder, Validators} from '@angular/forms'; \n\nimport {Cart, CartItem, CartService} from '../cart/cart.service'; \n\n@Component({ \n    selector: 'db-checkout-view', \n    templateUrl: 'app/checkout/checkout-view.component.html' \n}) \nexport class CheckoutViewComponent { \n\n    private cart: Cart; \n    form: FormGroup; \n\n    constructor(private cartService: CartService,  \n                private fb: FormBuilder) { \n        this.cart = this.cartService.cart; \n    } \n\n    ngOnInit() { \n        this.form = this.fb.group({ \n            firstName: ['', Validators.required], \n            lastName: ['', Validators.required], \n            email: ['', Validators.required], \n            phone: ['', Validators.required], \n            address: [] \n        });  \n    } \n\n    submit() { \n        alert('Submitted'); \n        this.cartService.clearCart(); \n    } \n} \n\n```", "```ts\n<form [formGroup]=\"form\"> \n    <div class=\"form-group row\"> \n        <label for=\"firstName\"  \n               class=\"col-xs-2 col-form-label\">First Name:</label> \n        <div class=\"col-xs-10\"> \n            <input class=\"form-control\" type=\"text\" value=\"\"  \n                   id=\"firstName\" formControlName=\"firstName\"> \n            <p [hidden]=\"form.controls.firstName.valid ||  \n                         form.controls.firstName.pristine\"  \n                         class=\"form-text alert-danger\"> \n               The First Name is required \n            </p> \n        </div> \n    </div> \n    <div class=\"form-group row\"> \n        <label for=\"lastName\" class=\"col-xs-2 col-form-label\"> \n            Last Name:</label> \n        <div class=\"col-xs-10\"> \n            <input class=\"form-control\" type=\"text\" value=\"\"  \n                 id=\"lastName\" formControlName=\"lastName\"> \n                 <p [hidden]=\"form.controls.lastName.valid ||  \n                                form.controls.lastName.pristine\"  \n                                class=\"form-text alert-danger\"> \n                     The Last Name is required \n                  </p> \n        </div> \n    </div> \n    <div class=\"form-group row\"> \n        <label for=\"email\"  \n            class=\"col-xs-2 col-form-label\">Email:</label> \n        <div class=\"col-xs-10\"> \n            <input class=\"form-control\" type=\"email\" value=\"\"  \n                  id=\"email\"> \n            <p [hidden]=\"form.controls.email.valid ||  \n                         form.controls.email.pristine\"  \n                         class=\"form-text alert-danger\"> \n                The Email is required \n            </p> \n        </div> \n    </div> \n    <div class=\"form-group row\"> \n        <label for=\"phone\"  \n              class=\"col-xs-2 col-form-label\">Phone:</label> \n        <div class=\"col-xs-10\"> \n            <input class=\"form-control\" type=\"phone\" value=\"\"  \n                   id=\"phone\"> \n            <p [hidden]=\"form.controls.phone.valid ||  \n                         form.controls.phone.pristine\"  \n                         class=\"form-text alert-danger\"> \n                The Phone is required \n            </p> \n        </div> \n    </div> \n    <div class=\"form-group row\"> \n        <label for=\"address\"  \n             class=\"col-xs-2 col-form-label\">Address:</label> \n        <div class=\"col-xs-10\"> \n            <input class=\"form-control\" type=\"text\" value=\"\"   \n                id=\"address\"> \n        </div> \n    </div> \n</form> \n\n```", "```ts\n<input class=\"form-control\" type=\"text\" value=\"\"  \n       id=\"firstName\" formControlName=\"firstName\"> \n<p [hidden]=\"form.controls.firstName.valid ||  \n             form.controls.firstName.pristine\"  \n             class=\"form-text alert-danger\"> \n    The First Name is required \n</p> \n\n```", "```ts\n<div class=\"col-xs-9\"> \n    <button class=\"btn btn-primary\" (click)=\"submit()\"  \n           **[disabled]=\"!form.valid\"** \n\n>Submit</button> \n    <button class=\"btn btn-secondary\"  \n           [routerLink]=\"['/products']\">Continue Shopping</button> \n</div> \n\n```", "```ts\nconst routes: Routes = [ \n  { path: '', redirectTo: 'welcome', pathMatch: 'full' }, \n  { path: 'welcome', component: WelcomeComponent }, \n  { path: 'products', component: ProductListComponent }, \n  { path: 'products/:id', component: ProductViewComponent }, \n  { path: 'cart', component: CartViewComponent }, \n **{ path: 'checkout', component: CheckoutViewComponent }** \n\n]; \n\n```", "```ts\n<div class=\"row\"> \n    <div class=\"col-md-12\"> \n        <a [routerLink]=\"['/cart']\"  \n           class=\"btn btn-primary pull-xs-right btn-cart\"> \n            <i class=\"fa fa-shopping-cart\" aria-hidden=\"true\"></i>  \n            Cart \n        </a> \n **<a [routerLink]=\"['/checkout']\"** \n\n           class=\"btn btn-success pull-xs-right btn-cart\"> \n            <i class=\"fa fa-credit-card\" aria-hidden=\"true\"></i>  \n              Checkout \n        </a> \n    </div> \n</div> \n\n```", "```ts\n/* \n * Components \n */ \nimport {AppComponent}  from './app.component'; \nimport {NavbarComponent} from './navbar/navbar.component'; \nimport {FooterComponent} from './footer/footer.component'; \nimport {WelcomeComponent} from './welcome/welcome.component'; \n **import {CheckoutViewComponent} from** \n\n **'./checkout/checkout-view.component';** \n\n/* \n * Routing \n */ \nimport {routing}  from './app.routes'; \n\n@NgModule({ \n  imports: [BrowserModule, FormsModule, ReactiveFormsModule,  \n            routing, CartModule, CategoryModule, ProductModule], \n  declarations: [AppComponent, NavbarComponent, FooterComponent,  \n                WelcomeComponent, **CheckoutViewComponent** \n\n], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { } \n\n```"]