["```ts\n**$ git clone https://github.com/angular/quickstart.git \n    angular-project**\n\n```", "```ts\n**$ cd angular-project**\n**$ npm install**\n\n```", "```ts\n    \u00a0\u00a0\u00a0     **cd angular-project**\n\n    ```", "```ts\n    \u00a0\u00a0\u00a0     **mkdir spec**\n\n    ```", "```ts\n    \u00a0\u00a0\u00a0     **mkdir spec/unit**\n\n    ```", "```ts\n    \u00a0\u00a0\u00a0     **mkdir spec/e2e**\n\n    ```", "```ts\n**npm install -g karma**\n\n```", "```ts\n\u00a0\u00a0\u00a0 basePath: '', \n     \u00a0\u00a0 frameworks: ['jasmine'], \n\n```", "```ts\n\u00a0\u00a0\u00a0 plugins: [ \n   \u00a0\u00a0       'karma-jasmine', \n  \u00a0\u00a0        'karma-chrome-launcher' \n \u00a0\u00a0 ] \n\n```", "```ts\n    files: [\n          // System.js for module loading\n          'node_modules/systemjs/dist/system.src.js',\n\n          // Polyfills\n          'node_modules/core-js/client/shim.js',\n          'node_modules/reflect-metadata/Reflect.js',\n\n          // zone.js\n          'node_modules/zone.js/dist/zone.js',\n          'node_modules/zone.js/dist/long-stack-trace-zone.js',\n          'node_modules/zone.js/dist/proxy.js',\n          'node_modules/zone.js/dist/sync-test.js',\n          'node_modules/zone.js/dist/jasmine-patch.js',\n          'node_modules/zone.js/dist/async-test.js',\n          'node_modules/zone.js/dist/fake-async-test.js',\n\n          // RxJs\n          { pattern: 'node_modules/rxjs/**/*.js', included: false, \n          watched: false },\n          { pattern: 'node_modules/rxjs/**/*.js.map', included: \n          false, watched: false },\n\n          // Paths loaded via module imports:\n          // Angular itself\n          { pattern: 'node_modules/@angular/**/*.js', included: \n          false, watched: false },\n          { pattern: 'node_modules/@angular/**/*.js.map', included: \n          false, watched: false },\n\n          { pattern: 'systemjs.config.js', included: false, watched: \n          false },\n          { pattern: 'systemjs.config.extras.js', included: false, \n          watched: false },\n          'karma-test-shim.js',\n\n          // transpiled application & spec code paths loaded via \n          module imports\n          { pattern: appBase + '**/*.js', included: false, watched: \n          true },\n          { pattern: testBase + '**/*.spec.js', included: false, \n          watched: true },\n],\n\n```", "```ts\nmodule.exports = function(config) {\n\n  var appBase    = 'app/';       // transpiled app JS and map files\n  var appSrcBase = 'app/';       // app source TS files\n  var appAssets  = 'base/app/'; // component assets fetched by \n  Angular's compiler\n\n  var testBase    = 'spec/unit/';       // transpiled test JS and map \n  files\n  var testSrcBase = 'spec/unit/';       // test source TS files\n\n  config.set({\n    basePath: '',\n    frameworks: ['jasmine'],\n    plugins: [\n      require('karma-jasmine'),\n      require('karma-chrome-launcher'),\n      require('karma-jasmine-html-reporter'), // click \"Debug\" in \n      browser to see it\n      require('karma-htmlfile-reporter') // crashing w/ strange \n      socket error\n    ],\n\n    customLaunchers: {\n      // From the CLI. Not used here but interesting\n      // chrome setup for travis CI using chromium\n      Chrome_travis_ci: {\n        base: 'Chrome',\n        flags: ['--no-sandbox']\n      }\n    },\n    files: [\n      // System.js for module loading\n      'node_modules/systemjs/dist/system.src.js',\n\n      // Polyfills\n      'node_modules/core-js/client/shim.js',\n      'node_modules/reflect-metadata/Reflect.js',\n\n      // zone.js\n      'node_modules/zone.js/dist/zone.js',\n      'node_modules/zone.js/dist/long-stack-trace-zone.js',\n      'node_modules/zone.js/dist/proxy.js',\n      'node_modules/zone.js/dist/sync-test.js',\n      'node_modules/zone.js/dist/jasmine-patch.js',\n      'node_modules/zone.js/dist/async-test.js',\n      'node_modules/zone.js/dist/fake-async-test.js',\n\n      // RxJs\n      { pattern: 'node_modules/rxjs/**/*.js', included: false, \n      watched: false },\n      { pattern: 'node_modules/rxjs/**/*.js.map', included: false, \n      watched: false },\n\n      // Paths loaded via module imports:\n      // Angular itself\n      { pattern: 'node_modules/@angular/**/*.js', included: false, \n      watched: false },\n      { pattern: 'node_modules/@angular/**/*.js.map', included: \n      false, watched: false },\n\n      { pattern: 'systemjs.config.js', included: false, watched: \n      false },\n      { pattern: 'systemjs.config.extras.js', included: false, \n      watched: false },\n      'karma-test-shim.js',\n\n      // transpiled application & spec code paths loaded via module \n      imports\n      { pattern: appBase + '**/*.js', included: false, watched: true \n      },\n      { pattern: testBase + '**/*.spec.js', included: false, watched: \n      true },\n\n      // Asset (HTML & CSS) paths loaded via Angular's component \n      compiler\n      // (these paths need to be rewritten, see proxies section)\n      { pattern: appBase + '**/*.html', included: false, watched: true \n      },\n      { pattern: appBase + '**/*.css', included: false, watched: true \n      },\n\n      // Paths for debugging with source maps in dev tools\n      { pattern: appSrcBase + '**/*.ts', included: false, watched: \n      false },\n      { pattern: appBase + '**/*.js.map', included: false, watched: \n      false },\n      { pattern: testSrcBase + '**/*.ts', included: false, watched: \n      false },\n      { pattern: testBase + '**/*.js.map', included: false, watched: \n      false }\n    ],\n\n    // Proxied base paths for loading assets\n     proxies: {\n       // required for component assets fetched by Angular's compiler\n       \"/app/\": appAssets\n   },\n\n    exclude: [],\n    preprocessors: {},\n    // disabled HtmlReporter; suddenly crashing w/ strange socket \n    error\n    reporters: ['progress', 'kjhtml'],//'html'],\n\n    // HtmlReporter configuration\n    htmlReporter: {\n      // Open this file to see results in browser\n      outputFile: '_test-output/tests.html',\n\n      // Optional\n      pageTitle: 'Unit Tests',\n      subPageTitle: __dirname\n    },\n\n    port: 9876,\n    colors: true,\n    logLevel: config.LOG_INFO,\n    autoWatch: true,\n    browsers: ['Chrome'],\n    singleRun: true\n  })\n};\n\n```", "```ts\n\u00a0\u00a0\u00a0 var builtPath = '/base/'; \n\n```", "```ts\n**$ npm install -g protractor**\n\n```", "```ts\n**$ webdriver-manager update**\n\n```", "```ts\nvar fs = require('fs'); \nvar path = require('canonical-path'); \nvar _ = require('lodash'); \n\nexports.config = { \n  directConnect: true, \n\n  // Capabilities to be passed to the webdriver instance. \n  capabilities: { \n    'browserName': 'chrome' \n  }, \n\n  // Framework to use. Jasmine is recommended. \n  framework: 'jasmine', \n\n  // Spec patterns are relative to this config file \n  specs: ['**/*e2e-spec.js' ], \n\n  // For angular tests \n  useAllAngular2AppRoots: true, \n\n  // Base URL for application server \n  baseUrl: 'http://localhost:8080', \n\n  // doesn't seem to work. \n  // resultJsonOutputFile: \"foo.json\", \n\n  onPrepare: function() { \n    //// SpecReporter \n    //var SpecReporter = require('jasmine-spec-reporter'); \n    //jasmine.getEnv().addReporter(new \n    SpecReporter({displayStacktrace: 'none'}));  \n    //// jasmine.getEnv().addReporter(new SpecReporter({\n    displayStacktrace: 'all'})); \n\n    // debugging \n    // console.log('browser.params:' +    \n    JSON.stringify(browser.params)); \n    jasmine.getEnv().addReporter(new Reporter( browser.params )) ; \n\n    // Allow changing bootstrap mode to NG1 for upgrade tests \n    global.setProtractorToNg1Mode = function() { \n      browser.useAllAngular2AppRoots = false; \n      browser.rootEl = 'body'; \n    }; \n  }, \n\n  jasmineNodeOpts: { \n    // defaultTimeoutInterval: 60000, \n    defaultTimeoutInterval: 10000, \n    showTiming: true, \n    print: function() {} \n  } \n};  \n\n```", "```ts\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing'; \n\nimport {AppComponent} from \"../../app.component\"; \n\ndescribe('AppComponent Tests Suite', () => { \n\n  let comp: AppComponent; \n  let fixture: ComponentFixture<AppComponent>; \n\n  beforeEach(async(() => { \n   TestBed.configureTestingModule({ \n      declarations: [ AppComponent ] \n    }) \n    .compileComponents(); \n  })); \n\n  beforeEach(() => { \n    fixture = TestBed.createComponent(AppComponent); \n    comp = fixture.componentInstance; \n\n  }); \n}); \n\n```", "```ts\n<body> \n  <my-app></my-app> \n</body> \n\n```", "```ts\nimport { browser, element, by } from 'protractor'; \n\ndescribe('Test suite for e2e test', () => { \n    beforeEach(() => { \n        browser.get(''); \n    }); \n}); \n\n```", "```ts\ndescribe('', () => { \n    describe('', () => { \n     beforeEach(() => { \n     }); \n\n      it('', () => { \n      }); \n    }); \n}); \n\n```", "```ts\ndescribe('Given I am posting a new comment', () => { \n    describe('When I push the submit button', () => { \n        beforeEach(() => { \n            // ...  \n        }); \n\n        it('Should then add the comment', () => { \n            // ... \n        }); \n    }); \n}); \n\n```", "```ts\nbeforeEach(() => { \n    browser.get(''); \n}); \n\n```", "```ts\nbeforeEach(() => { \n    ... \n    var commentInput = element(by.css('input')); \n    commentInput.sendKeys('a sample comment'); \n}); \n\n```", "```ts\nbeforeEach(() => { \n    ... \n    var submitButton = element(by.buttonText('Submit')).click(); \n}); \n\n```", "```ts\nit('Should then add the comment', () => { \n    var comment = element.all(by.css('li')).first(); \n    expect(comment.getText()).toBe('a sample comment'); \n}); \n\n```", "```ts\ndescribe('Given I am posting a new comment', () => { \n    describe('When I push the submit button', () => { \n      beforeEach(() => { \n            //Assemble \n            browser.get(''); \n            var commentInput = element(by.css('input')); \n            commentInput.sendKeys('a sample comment'); \n\n            //Act \n            var submitButton =  element(by.buttonText\n            ('Submit')).click(); \n      }); \n\n       //Assert \n  it('Should then add the comment', () => { \n            var comment = element.all(by.css('li')).first(); \n            expect(comment.getText()).toBe('a sample comment'); \n  }); \n    }); \n}); \n\n```", "```ts\n**$ npm start**\n\n```", "```ts\n**$ protractor**\n\n```", "```ts\n**$ npm run e2e // run via npm** \n\n```", "```ts\n**$ Error: Failed: No element found using locator: \n    By(css selector, input)**\n\n```", "```ts\n<body> \n    <my-app>Loading...</my-app> \n</body> \n\n```", "```ts\nimport {Component} from '@angular/core'; \n@Component({ \n    selector: 'my-app', \n    template: '<h1>My First Angular 2 App</h1>' \n}) \nexport class AppComponent { } \n\n```", "```ts\nimport { NgModule }      from '@angular/core'; \nimport { BrowserModule } from '@angular/platform-browser'; \n\nimport { AppComponent }  from './app.component'; \n\n@NgModule({ \n  imports:      [ BrowserModule], \n  declarations: [ AppComponent ], \n  bootstrap:    [ AppComponent ] \n}) \nexport class AppModule { } \n\n```", "```ts\nimport { platformBrowserDynamic } from '@angular/platform\n-browser-dynamic'; \n\nimport { AppModule } from './app.module'; \n\nplatformBrowserDynamic().bootstrapModule(AppModule); \n\n```", "```ts\n    \u00a0\u00a0\u00a0  \u00a0\u00a0 template: ` \n     \u00a0\u00a0  \u00a0\u00a0 <input type='text' />` \n\n    ```", "```ts\n         \u00a0\u00a0\u00a0**$ Error: Failed: No element found using locator: \n        \u00a0\u00a0  by.buttonText('Submit')**\n\n    ```", "```ts\n    \u00a0\u00a0 \u00a0\u00a0 \u00a0 template: ` ...........  \n     \u00a0 \u00a0\u00a0 \u00a0 <button type='button'>Submit</button>` \n\n    ```", "```ts\n        \u00a0\u00a0  **$ Error: Failed: No element found using locator: By\n       \u00a0\u00a0   (css selector, li)**\n\n    ```", "```ts\n    \u00a0\u00a0\u00a0  \u00a0\u00a0 export class AppComponent { \n     \u00a0\u00a0  \u00a0\u00a0     comments:Array<string>; \n     \u00a0\u00a0  \u00a0\u00a0 } \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0  \u00a0\u00a0 template: `..........  \n       \u00a0\u00a0  \u00a0\u00a0   <ul> \n         \u00a0\u00a0  \u00a0\u00a0   <li *ngFor=\"let comment of comments\">{{comment}}</li> \n         \u00a0\u00a0  \u00a0\u00a0 </ul>` \n\n    ```", "```ts\n         \u00a0\u00a0\u00a0**$   Error: Failed: No element found using locator: By(css\n         \u00a0\u00a0 selector, li)**\n\n    ```", "```ts\nexport class AppComponent { \n    comments:Array<string>; \n    constructor() { \n        this.comments = ['First comment', 'Second comment',\n        'Third comment']; \n    } \n}; \n\n```", "```ts\n**$ Expected 'First comment' to be 'a sample comment'.**\n\n```", "```ts\n<body> \n    <my-app>Loading...</my-app> \n</body> \n\n```", "```ts\nimport {Component} from '@angular/core'; \n\n@Component({ \n    selector: 'my-app', \n    template: `<h1>My First Angular 2 App</h1> \n    <input type='text' /> \n    <button type='button'>Submit</button> \n    <ul> \n      <li *ngFor=\"let comment of comments\">{{comment}}</li> \n    </ul>` \n}) \nexport class AppComponent { \n    comments:Array<string>; \n\n    constructor() { \n        this.comments = ['First comment', 'Second comment', \n        'Third comment']; \n    } \n} \n\n```", "```ts\nexport class AppComponent { \n    comments:Array<string>; \n    constructor() { \n        this.comments = ['a sample comment', 'Second comment', \n        'Third comment']; \n    } \n}; \n\n```", "```ts\n**$ 1 test, 1 assertion, 0 failures**\n\n```", "```ts\n         \u00a0\u00a0 files: [ \n           \u00a0\u00a0   ... \n           \u00a0\u00a0   // Application files \n             \u00a0\u00a0 {pattern: 'app/**/*.js', included: false, watched: \n             \u00a0\u00a0 true} \n\n             \u00a0\u00a0 // Unit Test spec files \n             \u00a0\u00a0 {pattern: 'spec/unit/**/*.spec.js', included: false,\n             \u00a0\u00a0 watched: true} \n            \u00a0\u00a0  ... \n       \u00a0\u00a0   ], \n\n    ```", "```ts\n        \u00a0\u00a0  **$ karma start**\n\n    ```", "```ts\n       \u00a0\u00a0   **$ Chrome 50.0.2661 (Mac OS X 10.10.5): Executed 0 of 0 \n      \u00a0\u00a0    SUCCESS (0.003 secs / 0 secs)**\n\n    ```", "```ts\n    describe('', () => { \n     beforeEach(() => { \n     }); \n\n      it('', () => { \n      }); \n    }); \n\n```", "```ts\nimport {AppComponent} from \"../../app/app.component\"; \n\ndescribe('AppComponent Unit Test', () => { \n    let comp: AppComponent; \n    let fixture: ComponentFixture<AppComponent>; \n\n    beforeEach(() => { fixture = TestBed.create\n    Component(AppComponent); \n      comp = fixture.componentInstance; \n\n    }); \n}); \n\n```", "```ts\nbeforeEach(() => { comp.add('a sample comment'); \n}); \n\n```", "```ts\nit('',function(){ \n  expect(com.comments[0]).toBe('a sample comment'); \n}); \n\n```", "```ts\n**$ TypeError: com.add is not a function**\n\n```", "```ts\n    \u00a0\u00a0\u00a0  \u00a0\u00a0 export class AppComponent { \n        \u00a0\u00a0  \u00a0\u00a0  ............. \n        \u00a0\u00a0  \u00a0\u00a0  add() { \n             \u00a0\u00a0 // .... \n         \u00a0\u00a0  \u00a0\u00a0 } \n     \u00a0\u00a0  \u00a0\u00a0 } \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0     **$ Expected 'First comment' to be 'a sample comment'.**\n\n    ```", "```ts\n    \u00a0\u00a0\u00a0  \u00a0\u00a0 export class AppComponent { \n        \u00a0\u00a0  \u00a0\u00a0  ............. \n        \u00a0\u00a0  \u00a0\u00a0  add() { \n            \u00a0\u00a0  \u00a0\u00a0  this.comments.unshift('a sample comment'); \n         \u00a0\u00a0  \u00a0\u00a0 } \n     \u00a0\u00a0  \u00a0\u00a0 }; \n\n    ```", "```ts\n**$ Chrome 50.0.2661 (Mac OS X 10.10.5): Executed 1 of 1 \n    SUCCESS (0.008 secs / 0.002 secs)**\n\n```", "```ts\nexport class AppComponent { \n    ............. \n    add(comment) { \n        this.comments.unshift(comment); \n    } \n}; \n\n```", "```ts\nimport {AppComponent} from \"../../app/app.component\"; \n\ndescribe('AppComponent Tests', () => { \n    let comp: AppComponent; \n    let fixture: ComponentFixture<AppComponent>; \n\n    beforeEach(() => { \n        fixture = TestBed.createComponent(AppComponent); \n        comp = fixture.componentInstance;         \n        comp.add('a sample comment'); \n    }); \n\n    it('First item inthe item should match', () => { \n        expect(com.comments[0]).toBe('a sample comment'); \n    }); \n}); \n\n```", "```ts\nimport {Component} from '@angular/core'; \n\n@Component({ \n    selector: 'my-app', \n    template: `<h1>My First Angular 2 App</h1> \n    <input type='text' /> \n    <button type='button'>Submit</button> \n    <ul> \n      <li *ngFor=\"let comment of comments\">{{comment}}</li> \n    </ul>` \n}) \nexport class AppComponent { \n    comments:Array<string>; \n\n    constructor() { \n        this.comments = ['First comment', 'Second comment', \n        'Third comment']; \n    } \n    add(comment) { \n        this.comments.unshift(comment); \n    } \n} \n\n```", "```ts\n    \u00a0\u00a0\u00a0  \u00a0\u00a0 @Component({ \n     \u00a0\u00a0  \u00a0\u00a0    template: `....... \n     \u00a0\u00a0  \u00a0\u00a0     <button type=\"button\" (click)=\"add('a sample  \u00a0\u00a0  \n    \u00a0\u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0 comment')\">Submit</button> \n      \u00a0\u00a0  \u00a0\u00a0    ...........` \n     \u00a0\u00a0  \u00a0\u00a0 }) \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0  \u00a0\u00a0 constructor() { \n     \u00a0\u00a0  \u00a0\u00a0     this.comments = []; \n     \u00a0\u00a0  \u00a0\u00a0 } \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0  \u00a0\u00a0 @Component({ \n       \u00a0\u00a0  \u00a0\u00a0   template: `............. \n       \u00a0\u00a0  \u00a0\u00a0   <input type=\"text\" [(ngModel)]=\"newComment\"> \n       \u00a0\u00a0  \u00a0\u00a0   ...........` \n     \u00a0\u00a0  \u00a0\u00a0 }) \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 @Component({ \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0    template: `....... \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     <button type=\"button\" (click)=\"add(newComment)\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \u00a0\u00a0 Submit</button> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     ...........` \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }) \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 import { FormsModule }   from '@angular/forms'; \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 @NgModule({ \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 imports: [ BrowserModule, FormsModule ], \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }) \n\n    ```", "```ts\ndescribe('', () => { \n     beforeEach(() => { \n     }); \n\n      it('', () => { \n      }); \n    }); \n\n```", "```ts\ndescribe('When I like a comment', () => { \n    beforeEach(() => { \n    }); \n\n    it('should then be liked', () => { \n      }); \n}); \n\n```", "```ts\ndescribe(''Given I am posting a new comment', () => { \n    describe('When I like a comment', () => { \n    ... \n    }); \n}); \n\n```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var firstComment = null; \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 beforeEach(() => { \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     ... \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var firstComment = element.all(by.css('li').first(); \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var likeButton = firstComment.element(by.buttonText('like')); \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 likeButton.click(); \n\n    ```", "```ts\nit('Should increase the number of likes to one', () => { \nvar commentLikes = firstComment.element(by.binding('likes')); \n  expect(commentLikes.getText()).toBe(1); \n}); \n\n```", "```ts\ndescribe('When I like a comment', () => { \n    var firstComment = null; \n    beforeEach(() => { \n\n      //Assemble \n      firstComment = element.all(by.css('li').first(); \n      var likeButton = firstComment.element(by.buttonText('like')); \n\n      //Act \n      likeButton.click(); \n  }); \n\n  //Assert \n  it('Should increase the number of likes to one', () => { \n      var commentLikes = firstComment.element(by.css('#likes')); \n      expect(commentLikes.getText()).toBe(1); \n  }); \n}); \n\n```", "```ts\n    **$ Error: No element found using locator: by.buttonText(\"like\")**\n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 @Component({ \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       template: `........ \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       <ul> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       <li *ngFor=\"let comment of comments\"> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       {{comment}} \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     <button type=\"button\">like</button> \n      \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      </li> \n      \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0      </ul>` \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   }); \n\n    ```", "```ts\n    **$ Expected 'a sample comment like' to be 'a sample comment'.**\n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 it('Should then add the comment', () => { \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   var comments = element.all(by.css('li')).first(); \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   expect(comments.getText()).toBe('a sample comment like'); \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }); \n\n    ```", "```ts\n    **$ Error: No element found using locator: by.css(\"#likes\")**\n\n    ```", "```ts\n            {title:'',likes:0} \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 export class AppComponent { \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     ...... \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       add(comment) { \n      \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0          var commentObj = {title: comment, likes: 0}; \n       \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0         this.comments.unshift(commentObj); \n       \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     } \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 @Component({ \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     template: `........... \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     <ul> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       <li *ngFor=\"let comment of comments\"> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   {{comment.title}} \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     </li> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     </ul>` \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }) \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 @Component({ \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     template: `........... \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     <ul> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       <li *ngFor=\"let comment of comments\"> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   {{comment.title}} \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   ............. \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   <span id=\"likes\">{{comment.likes}}</span> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       </li> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   </ul>` \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }) \n\n    ```", "```ts\n    **$ Expected 'a sample comment like 0' to be 'a sample\n            comment like'**\n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 it('Should then add the comment',() => { \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ... \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   expect(comments.getText()).toBe('a sample comment like 0'); \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }); \n\n    ```", "```ts\n    **$ Expected '0' to be '1'.**\n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 export class AppComponent { \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     ...... \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       like(comment) { \n       \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0         comment.like++; \n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0    } \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 @Component({ \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       template: `........ \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       <ul> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       <li *ngFor=\"let comment of comments\"> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       {{comment}} \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     <button type=\"button\" (click)=\"like(comment)\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \u00a0\u00a0 like</button> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <span id=\"likes\">{{comment.likes}}</span> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       </li> \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       </ul>` \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   }); \n\n    ```", "```ts\n**$ karma start**\n\n```", "```ts\n**$ Expected { value : 'a sample comment', likes : 0 } to be \n    'a sample comment'.**\n\n```", "```ts\nit('',() => { \n    var firstComment = app.comments[0]; \n    expect(firstComment.title).toBe('a sample comment'); \n}) \n\n```", "```ts\n    <button type=\"button\">Click Me</button>? \n\n```"]