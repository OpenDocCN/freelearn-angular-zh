["```ts\nelement(by.<LOCATOR>); \n\n```", "```ts\n<div class=\"anyClass\" id=\"anyId\"></div> \n// ... \nvar e1 = element(by.css('.anyClass')); \nvar e2 = element(by.css('#anyId')); \nvar e3 = element(by.css('div')); \nvar e4 = $('div'); \n\n```", "```ts\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <button>anyButton</button> \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // ... \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var b1 = element(by.buttonText('anyButton')); \n\n```", "```ts\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <a href=\"#\">anyLink</a> \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // ... \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var a1 = element(by.linkText('anyLink')); \n\n```", "```ts\nvar location = browser.getLocationAbsUrl(); \n\n```", "```ts\n<base href=\"/\"> \n\n```", "```ts\nimport { Component } from '@angular/core'; \n\n@Component({ \n  moduleId: module.id, \n  selector: 'my-app', \n  templateUrl: 'app.component.html' \n}) \nexport class AppComponent { \n\n}; \n\n```", "```ts\n<h1>My First Angular 2 App</h1> \n\n```", "```ts\n**$ cd angular-flip-flop**\n**$ npm install // To install the required node modules.** \n**$ npm run // To build and run the project in http server.** \n\n```", "```ts\n**$ npm install karma-phantomjs-launcher --save -dev**\n\n```", "```ts\nbrowsers: ['PhantomJS'], \n\n```", "```ts\nplugins: [ \n        ......... \n        require('karma-phantomjs-launcher'), \n    ], \n\n```", "```ts\n**$ npm install @angular/router --save**\n\n```", "```ts\nimport {RouterModule} from \"@angular/router\"; \n\n```", "```ts\nimport {Routes} from '@angular/router';\n\n```", "```ts\nexport const rootRouterConfig: Routes = [ \n // List of routes will come here \n]; \n\n```", "```ts\nimport {rootRouterConfig} from \"./app.routes\";\n\n```", "```ts\n@NgModule({ \n  declarations: [AppComponent, ........], \n  imports     : [........., RouterModule.forRoot(rootRouterConfig)], \n  bootstrap   : [AppComponent] \n}) \nexport class AppModule { \n} \n\n```", "```ts\nexport const rootRouterConfig: Routes = [ \n  { \n    path: 'view1',  \n    component: View1Component \n  }, \n  { \n    path: 'view2',  \n    component: View2Component \n  } \n]; \n\n```", "```ts\nexport const rootRouterConfig: Routes = [ \n  { \n    path: '',  \n    redirectTo: 'view1',  \n    pathMatch: 'full' \n  }, \n  .............. \n]; \n\n```", "```ts\nimport {Routes} from '@angular/router'; \nimport {View1Component} from './view/view1.component'; \nimport {View2Component} from './view/view2.component'; \n\nexport const rootRouterConfig: Routes = [ \n  { \n    path: '',  \n    redirectTo: 'view1',  \n    pathMatch: 'full' \n  }, \n  { \n    path: 'view1',  \n    component: View1Component \n  }, \n  { \n    path: 'view2',  \n    component: View2Component \n  } \n]; \n\n```", "```ts\n<router-outlet></router-outlet> \n\n```", "```ts\nimport {Component} from '@angular/core'; \n\n@Component({ \n  selector: 'app-navbar', \n  templateUrl: 'navbar.component.html', \n  styleUrls: ['navbar.component.css'] \n}) \nexport class NavbarComponent {} \n\n```", "```ts\n<main> \n  <nav> \n    <a [routerLink]=\"['/view1']\">View1</a> \n    <a [routerLink]=\"['/view2']\">View2</a> \n    <a [routerLink]=\"['/members']\">Members</a>      \n  </nav> \n</main> \n\n```", "```ts\n:host { \n  border-color: #e1e1e1; \n  border-style: solid; \n  border-width: 0 0 1px; \n  display: block; \n  height: 48px; \n  padding: 0 16px; \n} \n\nnav a { \n  color: #8f8f8f; \n  font-size: 14px; \n  font-weight: 500; \n  margin-right: 20px; \n  text-decoration: none; \n  vertical-align: middle; \n} \n\nnav a.router-link-active { \n  color: #106cc8; \n} \n\n```", "```ts\n<h1>My First Angular 2 App</h1> \n<app-navbar></app-navbar> \n<router-outlet></router-outlet> \n\n```", "```ts\nimport {Component} from '@angular/core'; \n\n@Component({ \n  selector: 'app-view1', \n  template: '<div id=\"view1\">I am view one component</div>' \n}) \nexport class View1Component { } \n\n```", "```ts\nimport {Component} from '@angular/core'; \n\n@Component({ \n  selector: 'app-view2', \n  template: '<div id=\"view2\">I am view two component</div>' \n}) \nexport class View2Component { } \n\n```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 describe('Given views should flip through navigation  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 interaction', () => { \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   beforeEach( () => { \n                // ..... \n            }); \n\n            it('Should fliped to the next view', () => { \n               // ....  \n            }); \n            }); \n\n    ```", "```ts\n            browser.get('view1'); \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var view1 = element(by.css('#view1')); \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 expect(view1.isPresent()).toBeTruthy(); \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var view2 = element(by.css('#view2')); \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 expect(view2.isPresent()).toBeFalsy(); \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var view1 = element(by.css('#view1')); \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 expect(view1.getText()).toEqual('I am view one component'); \n\n    ```", "```ts\nvar view2Link = element(by.linkText('View2')); \nview2Link.click(); \n\n```", "```ts\nvar view1 = element(by.css('#view1')); \nvar view2 = element(by.css('#view2')); \nbeforeEach(() => { \n    browser.get('view1'); \n    expect(view1.isPresent()).toBeTruthy(); \n    var view2Link = element(by.linkText('View2')); \n    view2Link.click(); \n}) \n\n```", "```ts\nit('Should fliped to View2 and view2 should visible', () => { \n  expect(view2.isPresent()).toBeTruthy(); \n}); \n\n```", "```ts\nit('Should fliped to View2 and view1 should not visible', () => { \n  expect(view1.isPresent()).toBeFalsy(); \n}); \n\n```", "```ts\nit('Should fliped to View2 and should have body content as expected',  () => { \n    expect(view2.getText()).toEqual('I am view two component'); \n}); \n\n```", "```ts\nit('Should flipped to View1 again and should visible', () => { \n    var view1Link = element(by.linkText('View1')); \n    view1Link.click(); \n    expect(view1.isPresent()).toBeTruthy(); \n    expect(view2.isPresent()).toBeFalsy(); \n  }); \n\n```", "```ts\n**$ npm start**\n\n```", "```ts\n**$ npm run e2e**\n\n```", "```ts\nSuite: Given views should flip through navigation in \n    passed - View1 should have body content as expected \n    passed - Should flipped to View2 and view2 should visible \n    passed - Should flipped to View2 and should have body content\n    as expected \n    passed - Should flipped to View1 again and should visible \n        Suite passed: Given views should flip through navigation in \n\n```", "```ts\ndescribe('Given should test the search feature', () => { \n    let searchBox, searchButton, searchResult; \n\n    beforeEach(() => { \n\n    //ASSEMBLE  \n    browser.get(''); \n    element(by.linkText('Search')).click(); \n    searchResult = element.all(by.css('#searchList tbody tr')); \n    expect(searchResult.count()).toBe(3); \n\n    //ACT \n    searchButton = element(by.css('form button')); \n    searchBox = element(by.css('form input')); \n    searchBox.sendKeys('Thomas'); \n    searchButton.click(); \n    }); \n\n    //Assert \n    it('There should be one item in search result', () => { \n    searchResult = element.all(by.css('#searchList tbody tr')); \n    expect(searchResult.count()).toBe(1); \n    }); \n}); \n\n```", "```ts\nexport const rootRouterConfig: Routes = [ \n  { \n    path: '/members', \n    component: MembersComponent \n  } \n................... \n]; \n\n```", "```ts\nimport { Component, OnInit } from '@angular/core'; \nimport { Http, Response } from '@angular/http'; \nimport { Router } from '@angular/router'; \n\n```", "```ts\nimport 'rxjs/add/operator/toPromise'; \n\n```", "```ts\nexport class MembersComponent implements OnInit { \n    constructor(private http:Http, private router:Router) { \n  } \n} \n\n```", "```ts\nexport class MembersComponent implements OnInit { \n ngOnInit() { \n    this.search(); \n  } \n\n```", "```ts\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 getData() { \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     return this.http.get('app/data/people.json') \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     .toPromise() \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     .then(response => response.json()); \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \n\n```", "```ts\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 searchQuery(q:string) { \n        \u00a0\u00a0\u00a0 if (!q || q === '*') { \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       q = ''; \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     } else { \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       q = q.toLowerCase(); \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     } \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     return this.getData() \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       .then(data => { \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       let results:Array<Person> = []; \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   data.map(item => { \n       \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   if (JSON.stringify(item).toLowerCase().includes(q)) { \n       \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     results.push(item); \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0     } \n     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   }); \n      \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  return results; \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  }); \n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } \n\n```", "```ts\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 search(): void { \n          this.searchQuery(this.query) \n          .then(results => this.memberList = results); \n        } \n\n```", "```ts\nviewDetails(id:number) { \n    this.router.navigate(['/person', id]); \n  } \n\n```", "```ts\nimport { Component, OnInit } from '@angular/core'; \nimport { Http, Response } from '@angular/http'; \nimport { Router } from '@angular/router'; \nimport 'rxjs/add/operator/toPromise'; \nimport { Person } from './person/person.component'; \n\n@Component({ \n  selector: 'app-member', \n  moduleId: module.id, \n  templateUrl: 'members.component.html', \n  styleUrls: ['members.component.css'] \n}) \nexport class MembersComponent implements OnInit { \n  memberList: Array<Person> = []; \n  query: string; \n\n  constructor(private http:Http, private router:Router) { \n  } \n\n  ngOnInit() { \n    this.search(); \n  } \n\n  viewDetails(id:number) { \n    this.router.navigate(['/person', id]); \n  } \n\n  getData() { \n    return this.http.get('app/data/people.json') \n      .toPromise() \n      .then(response => response.json()); \n  } \n\n  search(): void { \n    this.searchQuery(this.query) \n    .then(results => this.memberList = results); \n  } \n\n  searchQuery(q:string) { \n    if (!q || q === '*') { \n      q = ''; \n    } else { \n      q = q.toLowerCase(); \n    } \n    return this.getData() \n      .then(data => { \n      let results:Array<Person> = []; \n      data.map(item => { \n        if (JSON.stringify(item).toLowerCase().includes(q)) { \n          results.push(item); \n        } \n      }); \n      return results; \n    }); \n  } \n} \n\n```", "```ts\n<h2>Members</h2> \n\n<form> \n  <input type=\"search\" [(ngModel)]=\"query\" name=\"query\" (keyup.enter)=\"search()\"> \n  <button type=\"button\" (click)=\"search()\">Search</button> \n</form> \n\n<table *ngIf=\"memberList\" id=\"searchList\"> \n  <thead> \n  <tr> \n    <th>Name</th> \n    <th>Phone</th> \n  </tr> \n  </thead> \n  <tbody> \n  <tr *ngFor=\"let member of memberList; let i=index\"> \n    <td><a href=\"javascript:void(0)\" (click)=\"viewDetails(member.id)\">{{member.name}}</a></td> \n    <td>{{member.phone}}</td> \n  </tr> \n  </tbody> \n</table> \n\n```", "```ts\nexport class Person { \n  id:number; \n  name:string; \n  phone:string; \n  address:Address; \n\n  constructor(obj?:any) { \n    this.id = obj && Number(obj.id) || null; \n    this.name = obj && obj.name || null; \n    this.phone = obj && obj.phone || null; \n    this.address = obj && obj.address || null; \n  } \n} \n\nexport class Address { \n  street:string; \n  city:string; \n  state:string; \n  zip:string; \n\n  constructor(obj?:any) { \n    this.street = obj && obj.street || null; \n    this.city = obj && obj.city || null; \n    this.state = obj && obj.state || null; \n    this.zip = obj && obj.zip || null; \n  } \n} \n\n```", "```ts\ndescribe('Given should test the search result in details view', () => { \n  beforeEach(() => { \n  }); \n\n  it('should be load the person details page', () => { \n  }); \n}); \n\n```", "```ts\n            let resultItem = element(by.linkText('Demaryius Thomas')); \n\n    ```", "```ts\n            resultItem.click(); \n\n    ```", "```ts\nit('Should be load the person details page', () => { \n    var resultDetail = element(by.css('#personDetails')) \n    expect(resultDetail.isDisplayed()).toBeTruthy(); \n}) \n\n```", "```ts\ndescribe('Given should test the search result in details view', () => { \n\n  beforeEach(() => { \n    browser.get('members'); \n    let searchButton = element(by.css('form button')); \n    let searchBox = element(by.css('form input')); \n    searchBox.sendKeys('Thomas'); \n    searchButton.click(); \n    let resultItem = element(by.linkText('Demaryius Thomas')); \n    resultItem.click(); \n  }); \n\n  it('should be load the person details page', () => { \n    var resultDetail = element(by.css('#personDetails')) \n    expect(resultDetail.isDisplayed()).toBeTruthy(); \n  }); \n\n}); \n\n```", "```ts\nimport { Component, OnInit } from '@angular/core'; \nimport { Http, Response } from '@angular/http'; \nimport { Router, ActivatedRoute, Params } from '@angular/router'; \n\n```", "```ts\nexport class PersonComponent implements OnInit { \n  person: Person; \n  constructor(private http:Http, private route: ActivatedRoute, \n  private router: Router) { \n  } \n\n  ngOnInit() { \n    this.route.params.forEach((params: Params) => { \n       let id = +params['id']; \n       this.getPerson(id).then(person => { \n         this.person = person; \n       }); \n     }); \n  } \n\n```", "```ts\ngetData() { \n    return this.http.get('app/data/people.json') \n      .toPromise() \n      .then(response => response.json()); \n  } \n\n```", "```ts\ngetPerson(id:number) { \n    return this.getData().then(data => data.find(member => \n    member.id === id)); \n  } \n\n```", "```ts\nimport { Component, OnInit } from '@angular/core'; \nimport { Http, Response } from '@angular/http'; \nimport { Router, ActivatedRoute, Params } from '@angular/router'; \nimport 'rxjs/add/operator/toPromise'; \n\n@Component({ \n  selector: 'app-person', \n  moduleId: module.id, \n  templateUrl: 'person.component.html', \n  styleUrls: ['../members.component.css'] \n}) \nexport class PersonComponent implements OnInit { \n  person: Person; \n  constructor(private http:Http, private route: ActivatedRoute, private router: Router) { \n  } \n\n  ngOnInit() { \n    this.route.params.forEach((params: Params) => { \n       let id = +params['id']; \n       this.getPerson(id).then(person => { \n         this.person = person; \n       }); \n     }); \n  } \n\n  getPerson(id:number) { \n    return this.getData().then(data => data.find(member => member.id === id)); \n  } \n\n  getData() { \n    return this.http.get('app/data/people.json') \n      .toPromise() \n      .then(response => response.json()); \n  } \n} \n\n```", "```ts\n<h2>Member Details</h2> \n\n<table *ngIf=\"person\" id=\"personDetails\"> \n  <tbody> \n  <tr> \n    <td>Name :</td> \n    <td>{{person.name}}</td> \n  </tr> \n    <tr> \n      <td>Phone: </td> \n      <td>{{person.phone}}</td> \n    </tr> \n    <tr> \n      <td>Street: </td> \n      <td>{{person.address.street}}</td> \n    </tr> \n    <tr> \n      <td>City: </td> \n      <td>{{person.address.city}}</td> \n    </tr> \n    <tr> \n      <td>State: </td> \n      <td>{{person.address.state}}</td> \n    </tr> \n    <tr> \n      <td>Zip: </td> \n      <td>{{person.address.zip}}</td> \n  </tr> \n  </tbody> \n</table> \n\n```", "```ts\nexport const rootRouterConfig: Routes = [ \n  { \n    path: '/person/:id', \n    component: PersonComponent \n  } \n................... \n]; \n\n```", "```ts\n<router-output> </router-output> \n\n<router-outlet> </router-outlet> \n\n<router-link> </router-link> \n\n```", "```ts\n<a href=\"#\">Some Link</a> \n$('a').click();. \nelement(by.css('li)).click();. \nelement(by.linkText('Some Link')).click();. \n\n```"]