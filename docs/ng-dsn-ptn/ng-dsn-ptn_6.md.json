["```ts\nGET /orders\n```", "```ts\n{\n \"orders\":[\n {\n \"id\":\"123\",\n \"date\": \"10/10/10\",\n \"amount\": 299,\n \"currency\": \"USD\"\n },\n {\n \"id\":\"321\",\n \"date\": \"11/11/11\",\n \"amount\": 1228,\n \"currency\": \"USD\"\n },\n {\n \"id\":\"322\",\n \"date\": \"11/12/11\",\n \"amount\": 513,\n \"currency\": \"USD\"\n },\n\n ...\n\n ]\n}\n```", "```ts\n{\n \"items\":[\n {\n \"id\":123,\n \"qty\":1,\n \"price\": 2,\n \"tax_rate\": 0.19,\n \"currency\": \"USD\",\n \"shipped_at\": \"10/10/10\",\n \"received_at\": \"11/10/10\"\n },\n {\n \"id\":124,\n \"qty\":2,\n \"price\": 3,\n \"tax_rate\": 0.19,\n \"currency\": \"USD\",\n \"shipped_at\": \"10/10/10\",\n \"received_at\": \"11/10/10\"\n }\n ...\n ]\n}\n```", "```ts\nimport { Item } from \"./item\";\nexport interface OnlineCommand {\nfetchItems() : Item[]\n}\n```", "```ts\nimport { Component } from '@angular/core';\nimport { OnlineCommand } from './online-command';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\ntitle = 'app';\nprivate commands:OnlineCommand[]\n}\n```", "```ts\n<ul>\n <li *ngFor=\"let item of commands; let i = index\" (click)=\"item.fetchItems()\">\n {{i}} {{item}}\n </li>\n</ul>\n```", "```ts\nimport { OnlineCommand } from \"./online-command\";\nimport { Item } from \"./item\";\n\n//RealCommand is a real command that has the right to do\n//API calls\nexport class RealCommand implements OnlineCommand{\n\n public fetchItems() : Item[] {\n //This would come from an API call\n return [new Item(), new Item()];\n }\n}\n```", "```ts\nimport { OnlineCommand } from \"./online-command\";\nimport { RealCommand } from \"./real-command\";\nimport { Item } from \"./item\";\n\n//A Proxified Command\nexport class ProxyfiedCommand implements OnlineCommand{\n\n //Reference to the real deal\n private real:RealCommand;\n\n //Constructor\n constructor() {\n this.real = new RealCommand();\n }\n\n //The Proxified fetchItems.\n //It only exists as a placeholder and if we need it\n //we' ll the real command.\n public fetchItems() : Item[] {\n console.log(\"About the call the API\");\n let items = this.real.fetchItems();\n console.log(\"Called it\");\n return items;\n }\n}\n```", "```ts\nexport class Book {\n public constructor(public id:number, public title:string){\n\n this.id = id;\n this.title = title;\n }\n}\n```", "```ts\nimport { Component } from '@angular/core';\nimport { Book } from './books'\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n title = 'app';\n books: Book[] = [];\n constructor(){\n for (let i = 0; i < 10; i++) {\n\n this.books.push(new Book(i, this.makeid()))\n }\n }\n refresh(){\n let id =Math.floor(Math.random() * this.books.length)\n this.books[id].title = this.makeid();\n console.log(id, \"refreshed\")\n }\n private makeid(): string {\n var text = \"\";\n var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n for (var i = 0; i < 15; i++)\n text += possible.charAt(Math.floor(Math.random() * possible.length));\n return text;\n }\n}\n```", "```ts\n<ul>\n <li *ngFor=\"let book of books; let i = index\">{{book.id}} - {{book.title}}</li>\n</ul>\n<button (click)=\"refresh()\">Refresh</button>\n```", "```ts\n<ul>\n <li *ngFor=\"let book of books; trackBy: trackByFn; let i = index\">{{book.id}} - {{book.title}}</li>\n</ul>\n<button (click)=\"refresh()\">Refresh</button>\nThe trackBy: trackByFn;we added references a function of our component named trackByFn\n  trackByFn(index, item) {\nreturnindex; // or item.id\n }\n```", "```ts\nbook == book ? No; repaintBook.title == Book.title? No; repaintBook.id == Book.it ? No; repaint\n```", "```ts\nbook == book ? No; repaint\n```", "```ts\n{{ book.id }} - {{ book.title }}<br/><button (click)=\"changeMe()\">CHANGE</button>\n```", "```ts\nimport { Component } from '@angular/core';\nimport { Book } from './book'\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n title = 'app';\n book: Book;\n constructor(){\n this.book = new Book(1, \"Some Title\");\n }\n changeMe(){\n this.book.title = \"Some Other Title\";\n }\n}\n```", "```ts\nimport { Component, Input } from '@angular/core';\nimport { Book } from './book'\nimport { ChangeDetectionStrategy } from '@angular/core';\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.css'],\n changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AppComponent {\n title = 'app';\n @Input() book: Book;\n constructor(){\n this.book = new Book(1, \"Some Title\");\n }\n changeMe(){\n this.book = new Book(this.book.id, \"Some Other Title\");\n }\n}\n```", "```ts\nexport interface Prototype{\n clone():Prototype;\n}\n```", "```ts\nexport class Movie implements Prototype {\n\n private title:string;\n private year:number;\n //...\n\n public constructor()\n public constructor(title:string = undefined, year:number = undefined)\n {\n if(title == undefined || year == undefined){\n //do the expensive creation\n }else{\n this.title = title;\n this.year = year;\n }\n }\n\n clone() : Movie {\n```", "```ts\n return new Movie(this.title, this.year);\n }\n }\n\n expansiveMovie:Movie = new Movie();\n cheapMovie = expansiveMovie.clone();\n```", "```ts\nexport class MoviePool{\n\n private static movies:[{movie:Movie, used:boolean}] = [];\n private static nbMaxMovie = 10;\n private static instance:MoviePool;\n\n private static constructor(){}\n\n public static getMovie(){\n\n //first hard create\n if(MoviePool.movies.length == 0){\n\n MoviePool.movies.push({movie:new User(), used:true});\n return MoviePool.movies[0].movie;\n\n }else{\n\n for(var reusableMovie:{movie:Movie, used:boolean} of MoviePool.movies){\n if(!reusableMovie.used){\n reusableMovie.used = true;\n return reusableMovie.movie;\n }\n }\n }\n\n //subsequent clone create\n if(MoviePool.movie.length < MoviePool.nbMaxMovie){\n\n MoviePool.movies.push({movie:MoviePool.movies[MoviePool.movies.length - 1].clone(), used:true});\n return MoviePool.movies[MoviePool.movies.length - 1].movie;\n }\n\n throw new Error('Out of movies');\n }\n\n public static releaseMovie(movie:Movie){\n for(var reusableMovie:{movie:Movie, used:boolean} of MoviePool.movies){\n if(reusableMovie.movie === movie){\n reusableMovie.used = false;\n }\n return;\n }\n }\n }\n```"]