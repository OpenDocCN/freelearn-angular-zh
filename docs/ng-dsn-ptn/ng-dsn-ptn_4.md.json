["```ts\nclass Movie{ \n\n    constructor(private title:string, private release_year:number){} \n\n    public getTitle():string{ \n        return this.title; \n    } \n    public getReleaseYear():number{ \n        return this.release_year; \n    } \n} \n```", "```ts\n/// <reference path=\"./movie.ts\"/> \n\nclass Model{ \n\n    private movies:Movie[] = []; \n\n    constructor(){ \n    } \n\n    public addMovie(title:string, year:number){ \n        let movie:Movie = new Movie(title, year); \n        this.movies.push(movie); \n        this.appendView(movie); \n    } \n\n    private appendView(movie:Movie){ \n        var node = document.createElement(\"LI\");  \n        var textnode = document.createTextNode(movie.getTitle() + \"-\" + movie.getReleaseYear());  \n        node.appendChild(textnode); \n        document.getElementById(\"movies\").appendChild(node); \n    } \n\n} \n```", "```ts\n\n/// <reference path=\"./model.ts\"/> \n\nclass Controller{ \n\n    private model:Model; \n\n    constructor(){ \n\n        this.model = new Model(); \n    } \n\n    click(title:string, year:number){ \n\n        console.log(title, year); \n        this.model.addMovie(title, year); \n\n    } \n\n} \nlet controller = new Controller(); \n```", "```ts\n<html> \n    <head> \n        <script src=\"mvc.js\"></script> \n    </head> \n    <body> \n        <h1>Movies</h1> \n\n        <div id=\"movies\"> \n\n        </div> \n\n        <form action=\"#\" onsubmit=\"controller.click(this.title.value, this.year.value); return false;\"> \n\n            Title: <input name=\"title\" type=\"text\" id=\"title\"> \n            Year: <input name=\"year\" type=\"text\" id=\"year\"> \n           <input type=\"submit\"> \n        </form> \n\n    </body> \n</html> \n```", "```ts\nvar Movie = /** @class */ (function () { \n    function Movie(title, release_year) { \n        this.title = title; \n        this.release_year = release_year; \n    } \n    Movie.prototype.getTitle = function () { \n        return this.title; \n    }; \n    Movie.prototype.getReleaseYear = function () { \n        return this.release_year; \n    }; \n    return Movie; \n}()); \n/// <reference path=\"./movie.ts\"/> \nvar Model = /** @class */ (function () { \n    function Model() { \n        this.movies = []; \n    } \n    Model.prototype.addMovie = function (title, year) { \n        var movie = new Movie(title, year); \n        this.movies.push(movie); \n        this.appendView(movie); \n    }; \n    Model.prototype.appendView = function (movie) { \n        var node = document.createElement(\"LI\"); \n        var textnode = document.createTextNode(movie.getTitle() + \"-\" + movie.getReleaseYear()); \n        node.appendChild(textnode); \n        document.getElementById(\"movies\").appendChild(node); \n    }; \n    return Model; \n}()); \n/// <reference path=\"./model.ts\"/> \nvar Controller = /** @class */ (function () { \n    function Controller() { \n        this.model = new Model(); \n    } \n    Controller.prototype.click = function (title, year) { \n        console.log(title, year); \n        this.model.addMovie(title, year); \n    }; \n    return Controller; \n}()); \nvar controller = new Controller(); \n```", "```ts\nclass User { \n\n    public constructor(private _email:string, private _password:string){} \n\n    get email():string{ \n        return this._password; \n    } \n\n    get password():string{ \n        return this._email; \n    } \n\n    set email(email:string){ \n        this._password = email; \n    } \n\n    set password(password:string){ \n        this._email = password; \n    } \n} \n```", "```ts\nuser:User = new User('mathieu.nayrolles@gmail.com', 'password');\n\n console.log(user.email); // will print mathieu.nayrolles@gmail.com\n```", "```ts\n\n var email = function(){\n return \"mathieu.nayrolles@gmail.com\";\n }\n console.log(email);\n```", "```ts\nimport { User } from '../poto/user'; \nimport { APIService } from '../services/api.service'; \n\nexport class UserModel{ \n\n    private user:User; \n    private _loading:boolean = false; \n\n public constructor(private api:APIService){} \n\n    public signin(email:string, password:string){ \n\n        this._loading = true; \n\n        this.api.getUser(email, password).then( \n\n            user => { \n                this.user = user; \n                this._loading = false; \n            } \n        ); \n    } \n\n    public signup(email:string, password:string){ \n\n        this._loading = true; \n        this.api.postUser(email, password).then( \n            user => { \n                this.user = user; \n                this._loading = false; \n            }    \n        ); \n    } \n\n    get loading():boolean{ \n        return this._loading; \n    } \n\n} \n```", "```ts\nimport { Injectable } from '@angular/core'; \nimport { Http }  from '@angular/http'; \nimport { User } from '../poto/user'; \nimport { Observable } from 'rxjs/Rx'; \nimport 'rxjs/Rx'; \nimport { resolve } from 'dns'; \nimport { reject } from 'q'; \n\n@Injectable() \nexport class APIService { \n\n  private userURL:string = \"assets/users.json\"; \n\n  constructor(private http: Http) { } \n\n  /** \n   * Return a Promise to a USer matching id \n   * @param  {string}            email \n   * @param  {string}            password \n   * @return {Promise<User>}    \n   */ \n  public getUser(email:string, password:string):Promise<User>{ \n      console.log('getUser', email, password); \n\n        return this.http.get(this.userURL) \n        /** \n         * Transforms the result of the http get, which is observable \n         * into one observable by item. */ \n        .flatMap(res => res.json().users) \n        /** \n         * Filters users by their email & password \n         */ \n        .filter((user:any)=>{ \n            console.log(\"filter\", user); \n            return (user.email === email && user.password == password) \n        }) \n        .toPromise() \n        /** \n         * Map the json user item to the User model \n        */ \n        .then((user:any) => { \n            console.log(\"map\", user);  \n            return new User( \n                email, \n                password \n            ) \n        }); \n  }  \n\n   /** \n   * Post an user Promise to a User \n   * @param  {string}            email \n   * @param  {string}            password \n   * @return {Promise<User>}    \n   */ \n  public postUser(email:string, password:string):Promise<User>{ \n\n    return new Promise<User>((resolve, reject) => { \n        resolve(new User( \n            email, \n            password \n        )); \n    }); \n  } \n\n} \n```", "```ts\n{ \n    \"users\":[{ \n        \"email\":\"mathieu.nayrolles@gmail.com\", \n        \"password\":\"password\" \n    }] \n} \n```", "```ts\n@Component({\n templateUrl: 'user.html'\n })\n export class UserComponent{\n\n private model:UserModel;\n\n public UserComponent(api:APIService){\n\n this.model = new UserModel(api);\n }\n\n public signinClick(email:string, password:string){\n this.model.signin(email, password);\n }\n\n public signupClick(email:string, password:string){\n this.model.signup(email, password);\n }\n\n }\n```", "```ts\n\n <h1>Signin</h1>\n\n <form action=\"#\" onsubmit=\"signinClick(this.email.value, this.password.value); return false;\">\n\n email: <input name=\"email\" type=\"text\" id=\"email\">\n password: <input name=\"password\" type=\"password\" id=\"password\">\n <input [hidden]=\"model.loading\" type=\"submit\">\n <i [hidden]=\"!model.loading\" class=\"fa fa-spinner\" aria-hidden=\"true\"></i>\n </form>\n\n <h1>Signup</h1>\n\n <form action=\"#\" onsubmit=\"signupClick(this.email.value, this.password.value); return false;\">\n\n email: <input name=\"email\" type=\"text\" id=\"email\">\n password: <input name=\"password\" type=\"password\" id=\"password\">\n <input [hidden]=\"model.loading\" type=\"submit\">\n <i [hidden]=\"!model.loading\" class=\"fa fa-spinner\" aria-hidden=\"true\"></i>\n </form>\n```", "```ts\n\n export interface IModel{\n\n protected get(POTO):POTO;\n protected put(POTO):POTO;\n protected post(POTO):POTO;\n protected delete(POTO):boolean;\n protected patch(POTO):POTO;\n\n }\n```", "```ts\n\n export class AbstractModel<T extends POTO> implements IModel{\n protected T domainModel;\n\n public AbstractModel(protected api:APIService){}\n\n protected get(POTO):T{\n //this.api.get ...\n };\n protected put(T):T{\n //this.api.put...\n };\n protected post(T):T{\n //this.api.post...\n };\n protected delete(T):boolean{\n //this.api.delete...\n };\n protected patch(T):T{\n //this.api.patch...\n };\n }\n\n export class UserModel extends AbstractModel<User>{\n\n public AbstractModel(api:APIService){\n super(api);\n }\n\n public signin(email:string, password:string){\n\n this._loading = true;\n\n this.get(new User(email, password)).then(\n\n user => {\n this.user = user;\n this._loading = false;\n }\n );\n }\n\n public signup(email:string, password:string){\n\n this._loading = true;\n this.post(new User(email, password)).then(\n user => {\n this.user = user;\n this._loading = false;\n } \n );\n }\n //Only the code specialized for the UI ! \n }\n```", "```ts\nexport class UserController{\n\n public UserComponent(protected model:UserModel){\n }\n\n public signin(email:string, password:string){\n this.model.signin(email, password);\n }\n\n public signup(email:string, password:string){\n this.model.signup(email, password);\n }\n\n }\n```", "```ts\nexport class LoginPage extends UserController{\n\n public LoginPage(api:APIService){\n super(new UserModel(api));\n }\n\n //Only what's different on mobile !\n\n }\n```", "```ts\n@Component({\n templateUrl: 'login.html'\n })\n export class LoginComponent extends UserController{\n\n public UserComponent(api:APIService){\n\n super(new UserModel(api));\n }\n\n //Only what's different on browser !\n\n }\n```", "```ts\nexport interface IAppState { \n    logged: boolean; \n} \n```", "```ts\nimport { Injectable } from '@angular/core'; \nimport { Action } from 'redux'; \n\n@Injectable() \nexport class LoginAction { \n  static LOGIN = 'LOGIN'; \n  static LOGOUT = 'LOGOUT'; \n\n  loggin(): Action { \n    return { type: LoginAction.LOGIN }; \n  } \n\n  logout(): Action { \n    return { type: LoginAction.LOGOUT }; \n  } \n} \n```", "```ts\nimport { Action } from 'redux'; \nimport { LoginAction } from './app.actions'; \n\nexport interface IAppState { \n    logged: boolean; \n} \n\nexport const INITIAL_STATE: IAppState = { \n  logged: false, \n}; \n\nexport function rootReducer(lastState: IAppState, action: Action): IAppState { \n  switch(action.type) { \n    case LoginAction.LOGIN: return { logged: !lastState.logged }; \n    case LoginAction.LOGOUT: return { logged: !lastState.logged }; \n  } \n\n  // We don't care about any other actions right now. return lastState; \n}\n```", "```ts\nimport { Component, OnDestroy } from '@angular/core'; \n\nimport { NgRedux } from '@angular-redux/store'; \nimport { LoginAction } from './app.actions'; \nimport { IAppState } from \"./store\"; \nimport { APIService } from './api.service'; \n\n@Component({ \n  selector: 'app-root', \n  templateUrl: './app.component.html', \n  styleUrls: ['./app.component.css'] \n}) \nexport class AppComponent implements OnDestroy {  \n  title = 'app'; \n  subscription; \n  logged: boolean; \n\n  constructor(                           \n    private ngRedux: NgRedux<IAppState>, \n    private api:APIService) { \n\n      this.subscription = ngRedux.select<boolean>('logged') \n      .subscribe(logged => this.logged = logged);    \n    }  \n\n  login(email:string, password:string) { \n    this.api.login(email, password); \n  } \n\n  logout() { \n    this.api.logout(); \n  } \n\n  ngOnDestroy() {                     \n    this.subscription.unsubscribe();  \n  }     \n} \n```", "```ts\nconstructor(                           \n    private ngRedux: NgRedux<IAppState>, \n    private api:APIService) { \n\n      this.subscription = ngRedux.select<boolean>('logged') \n      .subscribe(logged => this.logged = logged);    \n    } \n```", "```ts\n login(email:string, password:string) { \n    this.api.login(email, password); \n  } \n\n  logout() { \n    this.api.logout(); \n  } \n```", "```ts\n ngOnDestroy() {                     \n    this.subscription.unsubscribe();  \n  } \n```", "```ts\n<div style=\"text-align:center\"> \n  <p>{{logged}}</p> \n  <button (click)=\"login('foo', 'bar')\">Login</button> \n  <button (click)=\"logout()\">Logout</button> \n</div> \n```", "```ts\nimport { Injectable } from '@angular/core'; \nimport { Http }  from '@angular/http'; \nimport { User } from './user'; \nimport 'rxjs/Rx'; \nimport { NgRedux } from '@angular-redux/store'; \nimport { LoginAction } from './app.actions'; \nimport {IAppState } from './store'; \n\n@Injectable() \nexport class APIService { \n\n  private userURL:string = \"assets/users.json\"; \n\n  constructor( \n      private http: Http,  \n      private ngRedux: NgRedux<IAppState>,  \n      private actions: LoginAction) { } \n\n  /** \n   * Return a Promise to a USer matching id \n   * @param  {string}            email \n   * @param  {string}            password \n   * @return {Promise<User>}    \n   */ \n  public login(email:string, password:string){ \n        console.log('login', email, password); \n\n        this.http.get(this.userURL) \n        /** \n         * Transforms the result of the http get, which is observable \n         * into one observable by item. */ \n        .flatMap(res => res.json().users) \n        /** \n         * Filters users by their email & password \n         */ \n        .filter((user:any)=>{ \n            console.log(\"filter\", user); \n            return (user.email === email && user.password == password) \n        }) \n        .toPromise() \n        /** \n         * Map the json user item to the User model \n        */ \n        .then((user:any) => { \n            console.log(\"map\", user);  \n            this.ngRedux.dispatch(this.actions.loggin()); \n        }); \n  }  \n\n   /** \n   * Logout a User \n   */ \n  public logout(){ \n        this.ngRedux.dispatch(this.actions.logout()); \n  } \n\n} \n```", "```ts\nthis.ngRedux.dispatch(this.actions.loggin()); \n```", "```ts\nthis.ngRedux.dispatch(this.actions.logout()); \n```", "```ts\nimport { BrowserModule } from '@angular/platform-browser'; \nimport { NgModule } from '@angular/core'; \nimport { HttpModule } from '@angular/http'; \n\nimport { NgReduxModule, NgRedux } from '@angular-redux/store'; \nimport { AppComponent } from './app.component'; \n\nimport { rootReducer, IAppState, INITIAL_STATE } from './store'; \nimport { LoginAction } from './app.actions'; \nimport { APIService } from './api.service'; \n\n@NgModule({ \n  declarations: [ \n    AppComponent \n  ], \n  imports: [ \n    NgReduxModule, \n    HttpModule, \n  ], \n  providers: [APIService, LoginAction], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule {  \n\n  constructor(ngRedux: NgRedux<IAppState>) { \n    // Tell @angular-redux/store about our rootReducer and our initial state. // It will use this to create a redux store for us and wire up all the \n    // events. ngRedux.configureStore( \n      rootReducer, \n      INITIAL_STATE); \n  } \n} \n```"]