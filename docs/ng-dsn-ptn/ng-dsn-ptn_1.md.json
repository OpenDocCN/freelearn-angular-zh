["```ts\nvar r = new XMLHttpRequest();  \nr.open(\"POST\", \"webservice\", true); \nr.onreadystatechange = function () { \n   if (r.readyState != 4 || r.status != 200) return;  \n   console.log(r.responseText); \n}; \nr.send(\"a=1&b=2&c=3\"); \n```", "```ts\n<?hh \nclass MyClass { \n  public function alpha(): int { \n    return 1; \n  } \n\n  public function beta(): string { \n    return 'hi test'; \n  } \n} \n\nfunction f(MyClass $my_inst): string { \n  // Fix me! return $my_inst->alpha(); \n} \n```", "```ts\n$ curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n$ sudo apt-get install -y Node.js\n```", "```ts\n$ curl https://deb.nodesource.com/setup_6.x > node.sh \n$ sudo chmod +x node.sh \n$ vim node.sh //Comment out all apt-get update \n//Save the file $ sudo apt-get update \n$ ./node.sh \n$ sudo apt-get update \n$ sudo apt-get install -y Node.js \n```", "```ts\n$ node -v \nV8.9.0 \n\n$ npm -v \n5.5.1  \n```", "```ts\n    $ npm install -g TypeScript\n```", "```ts\n    $ tsc -v\n    Version 2.6.1\n\n```", "```ts\n    tsc --out myTranspiledFile.js myTypeScriptFile.ts\n\n```", "```ts\n    node myTranspiledFile.js\n\n```", "```ts\n    $ npm install -g ts-node\n    $ ts-node -v\n    3.3.0\n```", "```ts\nconsole.log('Hello World'); \n```", "```ts\n    $ ts-node hello.ts \n    Hello World\n\n```", "```ts\nclass Person{\nname:String;\n}\n```", "```ts\nvar p:Person = new Person();\np.name = \"Mathieu\"\n```", "```ts\ninterface People{ \n   name:string; \n} \n\nclass Employee implements People{ \n   manager:Manager; \n   title:string; \n} \n\nclass Manager extends Employee{ \n   team:Employee[]; \n} \n```", "```ts\nInterface People { \n\n   name: string; \n   presentSelf():void; \n} \n\nclass Employee implements People { \n\n   name: string; \n   manager: Manager; \n   title: string; \n\n   presentSelf():void{ \n\n         console.log( \n\n               \"I am\", this.name,  \n               \". My job is title and my boss is\",  \n               this.manager.name \n\n         ); \n   } \n} \n\nclass Manager extends Employee { \n\n   team: Employee[]; \n\n   presentSelf(): void { \n         super.presentSelf(); \n\n         console.log(\"I also manage\", this.team.toString()); \n   } \n} \n```", "```ts\nvar foo = 123; \nif (true) { \n    var foo = 456; \n} \nconsole.log(foo); // 456\n```", "```ts\nlet foo = 123; \nif (true) { \n    let foo = 456; \n} \nconsole.log(foo); // 123 \n```", "```ts\ninterface ICustomerMerge \n{ \n   MiddleName: string; \n} \ninterface ICustomerMerge \n{ \n   Id: number; \n} \nclass CustomerMerge implements ICustomerMerge \n{ \n   id: number; \n   MiddleName: string; \n} \n```", "```ts\nclass User{ \n   private name:string; \n   public  getSetName(name?:string):any{ \n         if(name !== undefined){ \n               this.name = name; \n         }else{ \n               return this.name \n         } \n   } \n} \n```", "```ts\nclass User{\nprivate name:_string = \"Mathieu\";\nget name():String{\nreturn this._name;\n}\nset name(name:String){\nthis._name = name;\n}\n}\n```", "```ts\nvar user:User = new User():\nif(user.name === \"Mathieu\") { //getter\n user.name = \"Paul\" //setter\n}\n```", "```ts\nclass User{ \n\n   id:number; \n   email:string; \n   name:string; \n   lastname:string; \n   country:string; \n   registerDate:string; \n   key:string; \n\n   constructor(id: number,email: string,name: string, \n         lastname: string,country: string,registerDate:  \n         string,key: string){ \n\n         this.id = id; \n         this.email = email; \n         this.name = name; \n         this.lastname = lastname; \n         this.country = country; \n         this.registerDate = registerDate; \n         this.key = key; \n   } \n} \n```", "```ts\nclass User{ \n   constructor(private id: number,private email: string,private name: string, \n\n         private lastname: string,private country: string, private            registerDate: string,private key: string){} \n} \n```", "```ts\nclass People{\ngender: \"male\" | \"female\";\n}\n```", "```ts\nclass People{\ngender:Gender;\n}\nenum Gender{\nMALE, FEMALE\n}\n```", "```ts\nclass Animal{ \n   flags:AnimalFlags = AnimalFlags.None \n} \n\nenum AnimalFlags { \n    None           = 0, \n    HasClaws       = 1 << 0, \n    CanFly         = 1 << 1, \n} \n\nfunction printAnimalAbilities(animal) { \n    var animalFlags = animal.flags; \n    if (animalFlags & AnimalFlags.HasClaws) { \n        console.log('animal has claws'); \n    } \n    if (animalFlags & AnimalFlags.CanFly) { \n        console.log('animal can fly'); \n    } \n    if (animalFlags == AnimalFlags.None) { \n        console.log('nothing'); \n    } \n} \n\nvar animal = { flags: AnimalFlags.None }; \nprintAnimalAbilities(animal); // nothing \nanimal.flags |= AnimalFlags.HasClaws; \nprintAnimalAbilities(animal); // animal has claws \nanimal.flags &= ~AnimalFlags.HasClaws; \nprintAnimalAbilities(animal); // nothing \nanimal.flags |= AnimalFlags.HasClaws | AnimalFlags.CanFly; \nprintAnimalAbilities(animal); // animal has claws, animal can fly \n```", "```ts\nclass User{\n constructor(private lastName:string,         private firstName:string){\n }\n\n hello(){\n console.log(\"Hi I am\", this.firstName,         this.lastName);\n }\n}\n```", "```ts\nlet userFromJSONAPI: User = JSON.parse('[*{\"lastName\":\"Nayrolles\",\"firstName\":\"Mathieu\"}]'*)[0];\n```", "```ts\n    json.ts:19\n    userFromJSONAPI.hello();\n     ^\n    TypeError: userFromUJSONAPI.hello is not a function\n     at Object.<anonymous> (json.ts:19:18)\n     at Module._compile (module.js:541:32)\n     at Object.loader (/usr/lib/node_modules/ts-node/src/ts-node.ts:225:14)\n     at Module.load (module.js:458:32)\n     at tryModuleLoad (module.js:417:12)\n     at Function.Module._load (module.js:409:3)\n     at Function.Module.runMain (module.js:575:10)\n     at Object.<anonymous> (/usr/lib/node_modules/ts-node/src/bin/ts-node.ts:110:12)\n     at Module._compile (module.js:541:32)\n     at Object.Module._extensions..js (module.js:550:10)\n\n```", "```ts\nlet validUser = JSON.parse('[{\"lastName\":\"Nayrolles\",\"firstName\":\"Mathieu\"}]') \n.map((json: any):User => { \nreturn new User(json.lastName, json.firstName); \n})[0]; \n```", "```ts\nclass InstanceLoader { \n    static getInstance<T>(context: Object, name: string, rawJson:any): T { \n        var instance:T = Object.create(context[name].prototype); \n        for(var attr in instance){ \n         instance[attr] = rawJson[attr]; \n         console.log(attr); \n        } \n        return <T>instance; \n    } \n} \nInstanceLoader.getInstance<User>(this, 'User', JSON.parse('[{\"lastName\":\"Nayrolles\",\"firstName\":\"Mathieu\"}]')[0]) \n```", "```ts\n    ReferenceError: window is not defined\n```", "```ts\ninterface Animal{ eat():void; sleep():void; }\n```", "```ts\nclass Mammal implements Animal{ \n\n   constructor(private name:string){ \n         console.log(this.name, \"is alive\"); \n   } \n\n   eat(){ \n         console.log(\"Like a mammal\"); \n   } \n\n   sleep(){ \n         console.log(\"Like a mammal\"); \n   } \n} \n```", "```ts\nclass Dog extends Mammal{ \n   eat(){ \n         console.log(\"Like a dog\") \n   } \n} \n```", "```ts\nlet mammal: Mammal = new Mammal(\"Mammal\"); \nlet dolly: Dog = new Dog(\"Dolly\"); \nlet prisca: Mammal = new Dog(\"Prisca\");  \nlet abobination: Dog = new Mammal(\"abomination\"); //-> Wait. WHAT ?! function makeThemEat (animal:Animal):void{ \n   animal.eat(); \n}\n```", "```ts\n    ts-node class-inheritance-polymorhism.ts\n\n    Mammal is alive \n    Dolly is alive\n Prisca is alive\n abomination is alive\n Like a mammal\n Like a dog\n Like a dog\n Like a mammal\n```", "```ts\nvar __extends = (this && this.__extends) || function (d, b) { \n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; \n    function __() { this.constructor = d; } \n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __()); \n}; \nvar Mammal = (function () { \n    function Mammal() { \n    } \n    Mammal.prototype.eat = function () { \n        console.log(\"Like a mammal\"); \n    }; \n    Mammal.prototype.sleep = function () { \n        console.log(\"Like a mammal\"); \n    }; \n    return Mammal; \n}()); \nvar Dog = (function (_super) { \n    __extends(Dog, _super); \n    function Dog() { \n        _super.apply(this, arguments); \n    } \n    Dog.prototype.eat = function () { \n        console.log(\"Like a dog\"); \n    }; \n    return Dog; \n}(Mammal)); \nfunction makeThemEat(animal) { \n    animal.eat(); \n} \nvar mammal = new Mammal(); \nvar dog = new Dog(); \nvar labrador = new Mammal(); \nmakeThemEat(mammal); \nmakeThemEat(dog); \nmakeThemEat(labrador); \n```", "```ts\nfunction makeThemEat<T extends Dog>(dog:T):void{ \n   dog.eat(); \n} \n\nmakeThemEat<Mammal>(abomination); \n```"]