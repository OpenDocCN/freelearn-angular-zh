["```ts\n a \n b c \n d e f \n g h i j \n\n```", "```ts\nexport class FloydComponent implements OnInit { \n\n private floydString:string = \"\"; \n private static startOfAlphabet = 97; \n\n constructor() { } \n\n ngOnInit() { \n } \n\n onClick(rows:number){ \n\n let currentLetter = FloydComponent.startOfAlphabet; \n for (let i = 0; i < rows; i++) { \n for (let j = 0; j < i; j++) { \n this.floydString += String.fromCharCode(currentLetter) + \" \"; \n currentLetter++; \n } \n this.floydString += \"\\n\\r\"; \n } \n } \n}\n```", "```ts\nimport { Component } from '@angular/core'; \n@Component({ \n selector: 'floyd', \n template: \n `<p> \n <input #checkbox type=\"checkbox\" value=\"even\">Even?<br> \n <input #rows type=\"text\" name=\"rows\"> \n <button (click)=\"onClick(rows.value, checkbox.checked)\">CLICK</button> \n </p> \n <pre> \n\n {{floydString}} \n </pre> \n ` \n}) \nexport class FloydComponent { \n```", "```ts\n <p> \n <input #rows type=\"text\" name=\"rows\"> \n <button (click)=\"onClick(rows.value)\">CLICK</button> \n </p> \n <pre> \n {{floydString}} \n </pre>\n```", "```ts\n a \n b c \n d e f \n g h i j \n\n```", "```ts\n a \n b c \n d e f \n g h i j \n```", "```ts\nimport { Injectable } from '@angular/core'; \n\n@Injectable() \nexport class TriangleService { \n\n private static startOfAlphabet = 97; \n\n constructor() {} \n\n /** \n * Computes a Floyd Triangle of letter.\n * Here's an example for rows = 5 \n * \n * a \n * b c \n * d e f \n * g h i j \n * \n * Adapted from http://www.programmingsimplified.com/c-program-print-floyd-triangle \n * \n * @param  {number} rows \n * @return {string}\n */ \n public floydTriangle(rows:number):string{ \n\n let currentLetter = TriangleService.startOfAlphabet; \n let resultString = \"\"; \n\n for (let i = 0; i < rows; i++) { \n for (let j = 0; j < i; j++) { \n resultString += String.fromCharCode(currentLetter) + \" \"; \n currentLetter++; \n } \n resultString += \"\\n\\r\"; \n } \n\n return resultString; \n } \n\n /** \n * Computes a Even Floyd Triangle of letter. \n * Here's an example for rows = 7 \n *       a \n *      b c \n *     d e f \n *    g h i j \n *   k l m n o \n *  p q r s t u \n * v w x y z { | \n * \n * @param  {number} rows \n * @return {string} \n */ \n public evenFloydTriangle(rows:number):string{ \n\n let currentLetter = TriangleService.startOfAlphabet; \n let resultString = \"\"; \n\n for (let i = 0; i < rows; i++) { \n\n for (let j = 0; j <= (rows-i-2); j++) { \n resultString += \" \"; \n } \n\n for (let j = 0; j <= i; j++) { \n resultString += String.fromCharCode(currentLetter) + \" \"; \n currentLetter++; \n } \n\n resultString+=\"\\n\\r\"; \n } \n\n return resultString; \n } \n } \n\n```", "```ts\nimport { TriangleService } from './app/triangle.service' \n\nbootstrap(FloydComponent, [TriangleService]); \n```", "```ts\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core'; \nimport { TriangleService } from '../triangle.service' \n\n@Component({ \n selector: 'floyd', \n template:   `<p> \n <input #checkbox type=\"checkbox\" value=\"even\">Even?<br> \n <input #rows type=\"text\" name=\"rows\"> \n <button (click)=\"onClick(rows.value, checkbox.checked)\">CLICK</button> \n </p> \n <pre> \n\n {{floydString}} \n </pre> \n `, \n styleUrls: ['./floyd.component.css'], \n providers: [TriangleService], \n encapsulation: ViewEncapsulation.None \n}) \nexport class FloydComponent implements OnInit { \n```", "```ts\n constructor(private triangleService:TriangleService) { \n }\n```", "```ts\n<input #rows type=\"text\" name=\"rows\"> \n <button (click)=\"onClick(rows.value, checkbox.checked)\">CLICK</button> \n```", "```ts\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core'; \nimport { TriangleService } from '../triangle.service' \n\n@Component({ \n selector: 'floyd', \n template:   `<p> \n <input #checkbox type=\"checkbox\" value=\"even\">Even?<br> \n <input #rows type=\"text\" name=\"rows\"> \n <button (click)=\"onClick(rows.value, checkbox.checked)\">CLICK</button> \n </p> \n <pre> \n {{floydString}} \n </pre> \n `, \n styleUrls: ['./floyd.component.css'], \n providers: [TriangleService], \n encapsulation: ViewEncapsulation.None \n}) \nexport class FloydComponent implements OnInit { \n\n private floydString:string = \"\"; \n private static startOfAlphabet = 97; \n\n constructor(private triangleService:TriangleService) { } \n\n ngOnInit() { \n } \n\n onClick(rows:number, checked:boolean){ \n\n if(checked){ \n this.floydString = this.triangleService.evenFloydTriangle(rows); \n }else{ \n this.floydString = this.triangleService.floydTriangle(rows); \n } \n } \n} \n\n```", "```ts\nimport { Component } from '@angular/core'; \nimport { TriangleService } from '../triangle.service'; \n@Component({ \n selector: 'floyd', \n template: \n `<p> \n <input #checkbox type=\"checkbox\" value=\"even\">Even?<br> \n <input #rows type=\"text\" name=\"rows\"> \n <button (click)=\"onClick(rows.value, checkbox.checked)\">CLICK</button> \n </p> \n <pre> \n\n {{floydString}} \n </pre> \n `, \n providers:   [TriangleService] \n}) \nexport class FloydComponent { \n\n private floydString:string = \"\"; \n private color:\"yellow\" | \"red\"; \n\n constructor(private triangleService:TriangleService) { \n\n } \n\n onClick(rows:number, even:boolean){ \n\n if(even){ \n this.floydString = this.triangleService.evenFloydTriangle(rows); \n }else{ \n this.floydString = this.triangleService.floydTriangle(rows); \n } \n\n } \n\n} \n```", "```ts\nimport { Directive, Input, ElementRef, HostListener } from '@angular/core'; \n\n@Directive({ \n selector: '[AngularPre]' \n}) \nexport class AngularPre { \n\n @Input() \n highlightColor:string; \n\n constructor(private el: ElementRef) { \n el.nativeElement.style.border = \"1px solid black\"; \n el.nativeElement.style.backgroundColor = this.highlightColor; \n } \n\n @HostListener('mouseenter') onMouseEnter() { \n this.highlight(this.highlightColor); \n } \n\n @HostListener('mouseleave') onMouseLeave() { \n this.highlight(null); \n } \n\n private highlight(color: string) { \n this.el.nativeElement.style.backgroundColor = color; \n } \n\n}\n```", "```ts\n<pre AngularPre [highlightColor]=\"color\"> \n {{floydString}} \n</pre> \n```", "```ts\nexport class FloydComponent { \n\n private floydString:string = \"\"; \n private color:\"yellow\" | \"red\"; \n\n constructor(private triangleService:TriangleService) { \n\n } \n\n onClick(rows:number, even:boolean){ \n\n if(even){ \n this.floydString = this.triangleService.evenFloydTriangle(rows); \n this.color = \"red\"; \n }else{ \n this.floydString = this.triangleService.floydTriangle(rows); \n this.color = \"yellow\"; \n } \n\n } \n\n} \nonClick modifies the color variable \n```", "```ts\nimport { Pipe, PipeTransform } from '@angular/core'; \n\n@Pipe({ \n name: 'paragraph' \n}) \nexport class ParagraphPipe implements PipeTransform { \n\n transform(value: string): string { \n\n return value.replace( \n new RegExp(\"\\n\\r\", 'g'), \n \"\u00b6 \\n\\r\" \n ); \n } \n\n} \n```", "```ts\ntransform(value: any, args?:any): any \n```", "```ts\ntransform(value: string): string \n```", "```ts\n `<p> \n\n <input #checkbox type=\"checkbox\" value=\"even\">Even?<br> \n\n <input #rows type=\"text\" name=\"rows\"> \n\n <button (click)=\"onClick(rows.value, checkbox.checked)\">CLICK</button> \n\n </p> \n\n <pre AngularPre [highlightColor]=\"color\"> \n\n {{floydString | paragraph}} \n\n </pre> \n```", "```ts\n transform(value: string, paragrapheSymbol:string): string { \n\n return value.replace( \n\n new RegExp(\"\\n\\r\", 'g'), \n\n paragrapheSymbol + \"\\n\\r\" \n\n ); \n\n } \n\n```", "```ts\n{{floydString | paragraph: \"\u00b6\"}} \n\n```", "```ts\ntransform(value: string, replace: {from:string, to:string}): string \nTo call it inside the FloydComponent we can do the following: \n\n{{floydString | replaceAll: {from:'\\\\n\\\\r', to:'\u00b6 \\\\n\\\\r'} }}\n```", "```ts\nimport { Pipe, PipeTransform } from '@angular/core'; \n\n@Pipe({ \n name: 'replaceAll' \n}) \nexport class ReplaceAllPipe implements PipeTransform { \n\n transform(value: string, replace: {from:string, to:string}): string { \n\n return value.replace( \n new RegExp(replace.from, 'g'), \n replace.to \n ); \n\n } \n\n} \n```", "```ts\n@Component({ \n selector: 'floyd', \n template:   `<p> \n <input #checkbox type=\"checkbox\" value=\"even\">Even?<br> \n <input #rows type=\"text\" name=\"rows\"> \n <button (click)=\"onClick(rows.value, checkbox.checked)\">CLICK</button> \n </p> \n <pre AngularPre [highlightColor]=\"color\"> \n {{floydString | replaceAll: {from:'\\\\n\\\\r', to:'\u00b6 \\\\n\\\\r'} }} \n </pre> \n `, \n styleUrls: ['./floyd.component.css'], \n providers: [TriangleService], \n encapsulation: ViewEncapsulation.None \n}) \nexport class FloydComponent implements OnInit {\n```", "```ts\n{{floydString | paragraph:'\u00b6' | replaceAll: {from:'\u00b6', to:'\u00b6 piped'} }} \n```", "```ts\nnpm install -g angular-cli \n```", "```ts\nng new MyApp \n```", "```ts\nsrc \n\n\u251c\u2500\u2500 app \n\n\u2502   \u251c\u2500\u2500 environment.ts \n\n\u2502   \u251c\u2500\u2500 index.ts \n\n\u2502   \u251c\u2500\u2500 my-app.component.css \n\n\u2502   \u251c\u2500\u2500 my-app.component.html \n\n\u2502   \u251c\u2500\u2500 my-app.component.spec.ts \n\n\u2502   \u251c\u2500\u2500 my-app.component.ts \n\n\u2502   \u2514\u2500\u2500 shared \n\n\u2502       \u2514\u2500\u2500 index.ts \n\n\u251c\u2500\u2500 favicon.ico \n\n\u251c\u2500\u2500 index.html \n\n\u251c\u2500\u2500 main.ts \n\n\u251c\u2500\u2500 system-config.ts \n\n```", "```ts\n\u251c\u2500\u2500 tsconfig.json \n\n\u2514\u2500\u2500 typings.d.ts \n```", "```ts\n<!doctype html> \n<html lang=\"en\"> \n<head> \n <meta charset=\"utf-8\"> \n <title>Chap2</title> \n <base href=\"/\"> \n\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"> \n</head> \n<body> \n <app-root></app-root> \n</body> \n</html> \n\n```", "```ts\nimport { enableProdMode } from '@angular/core'; \nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic'; \n\nimport { AppModule } from './app/app.module'; \nimport { environment } from './environments/environment'; \n\nif (environment.production) { \n enableProdMode(); \n} \n\nplatformBrowserDynamic().bootstrapModule(AppModule) \n .catch(err => console.log(err)); \n\n```", "```ts\nng generate component Floyd \n```", "```ts\nsrc/app \n\n\u251c\u2500\u2500 environment.ts \n\n\u251c\u2500\u2500 Floyd \n\n\u2502   \u251c\u2500\u2500 floyd.component.css \n\n\u2502   \u251c\u2500\u2500 floyd.component.html \n\n\u2502   \u251c\u2500\u2500 floyd.component.spec.ts \n\n\u2502   \u251c\u2500\u2500 floyd.component.ts \n\n\u2502   \u2514\u2500\u2500 index.ts \n\n\u251c\u2500\u2500 index.ts \n\n\u251c\u2500\u2500 my-app.component.css \n\n\u251c\u2500\u2500 my-app.component.html \n\n\u251c\u2500\u2500 my-app.component.spec.ts \n\n\u251c\u2500\u2500 my-app.component.ts \n\n\u2514\u2500\u2500 shared \n\n \u2514\u2500\u2500 index.ts \n```"]