["```ts\n<p-dataTable [value]=\"browsers\">\n <p-column field=\"engine\" header=\"Engine\"></p-column>\n  <p-column field=\"browser\" header=\"Browser\"></p-column>\n  <p-column field=\"platform\" header=\"Platform\"></p-column>\n  <p-column field=\"grade\" header=\"Grade\"></p-column>\n</p-dataTable>\n\n```", "```ts\n@Injectable()\nexport class BrowserService {\n\nconstructor(private http: Http) { }\n\ngetBrowsers(): Observable<Browser[]> {\n return this.http.get('/assets/data/browsers.json')\n    .map(response => response.json().data as Browser[]);\n  }\n}\n\n```", "```ts\nbrowsers: Browser[];\n\nconstructor(private browserService: BrowserService) { }\n\nngOnInit() {\n  this.browserService.getBrowsers().subscribe((browsers: any) \n    => this.browsers =  browsers);\n}\n\n```", "```ts\n<p-dataTable [value]=\"basicBrowsers\">\n <p-header>\n    <div class=\"algin-left\">\n      <p-multiSelect [options]=\"columnOptions\" [(ngModel)]=\"cols\">\n      </p-multiSelect>\n    </div>\n  </p-header>\n  <p-column *ngFor=\"let col of cols\" [field]=\"col.field\" [header]=\"col.header\"></p-column>\n</p-dataTable>\n\n```", "```ts\nthis.cols = [\n  {field: 'engine', header: 'Engine'},\n  {field: 'browser', header: 'Browser'},\n  {field: 'platform', header: 'Platform'},\n  {field: 'grade', header: 'Grade'}\n];\n\n```", "```ts\n<p-dataTable [value]=\"basicBrowsers\" selectionMode=\"single\"  \n  [(selection)]=\"selectedBrowser\">\n  // Content goes here\n</p-dataTable>\n\n```", "```ts\n<p-dataTable [value]=\"basicBrowsers\" selectionMode=\"multiple\" \n  [(selection)]=\"selectedBrowsers\">\n  // Content goes here\n</p-dataTable>\n\n```", "```ts\n<p-dataTable [value]=\"basicBrowsers\" [(selection)]=\"selectedBrowser\">\n <p-header> RadioButton selection (Single Selection)</p-header>\n  <p-column [style]=\"{'width':'38px'}\" selectionMode=\"single\">\n  </p-column>\n  //Content goes here\n</p-dataTable>\n\n```", "```ts\n<p-dataTable [value]=\"basicBrowsers\" [(selection)]=\"selectedBrowser\">\n <p-header> Multiple Selection </p-header>\n  <p-column [style]=\"{'width':'38px'}\" selectionMode=\"multiple\">\n  </p-column>\n  //Content goes here\n</p-dataTable>\n\n```", "```ts\n<p-dataTable [value]=\"browsers\" (onSort)=\"onSort($event)\">\n  <p-column field=\"engine\" header=\"Engine\" [sortable]=\"true\">\n  </p-column>\n  <p-column field=\"browser\" header=\"Browser\" [sortable]=\"true\">\n  </p-column>\n  <p-column field=\"platform\" header=\"Platform\" [sortable]=\"true\">\n  </p-column>\n  <p-column field=\"grade\" header=\"Grade\" [sortable]=\"true\">\n  </p-column>\n</p-dataTable>\n\n```", "```ts\n<div class=\"ui-widget-header align-globalfilter\">\n <i class=\"fa fa-search search-globalfilter\"></i>\n  <input #gb type=\"text\" pInputText size=\"50\" \n  placeholder=\"Global Filter\">\n</div>\n<p-dataTable [value]=\"browsers\" [rows]=\"10\" [paginator]=\"true\"   \n  [globalFilter]=\"gb\" #datatable (onFilter)=\"onFilter($event)\">\n  <p-header>List of Browsers</p-header>\n  <p-column field=\"browser\" header=\"Browser (contains)\" [filter]=\"true\" \n    [filterMatchMode]=\"contains\"  filterPlaceholder=\"Search\"></p-column>\n  <p-column field=\"platform\" header=\"Platform (startsWith)\" \n    [filter]=\"true\"\n  filterPlaceholder=\"Search\"></p-column>\n  <p-column field=\"rating\" header=\"Rating ({{browserFilter||'No \n    Filter'}}\" \n    [filter]=\"true\"  filterMatchMode=\"equals\" [style]=\"\n    {'overflow':'visible'}\">\n    <ng-template pTemplate=\"filter\" let-col>\n      <i class=\"fa fa-close\"\n  (click)=\"ratingFilter=null; \n        datatable.filter(null,col.field,col.filterMatchMode)\"></i>\n      <p-slider [styleClass]=\"'slider-layout'\"\n [(ngModel)]=\"ratingFilter\" [min]=\"1\" [max]=\"10\"\n  (onSlideEnd)=\"datatable.filter\n        ($event.value,col.field,col.filterMatchMode)\">\n      </p-slider>\n    </ng-template>\n  </p-column>\n  <p-column field=\"engine\" header=\"Engine (Custom)\" [filter]=\"true\"\n filterMatchMode=\"equals\" [style]=\"{'overflow':'visible'}\">\n    <ng-template pTemplate=\"filter\" let-col>\n      <p-dropdown [options]=\"engines\" [style]=\"{'width':'100%'}\"\n  (onChange)=\"datatable.filter($event.value,col.field,\n        col.filterMatchMode)\"  styleClass=\"ui-column-filter\">\n      </p-dropdown>\n    </ng-template>\n  </p-column>\n  <p-column field=\"grade\" header=\"Grade (Custom)\" [filter]=\"true\"\n filterMatchMode=\"in\" [style]=\"{'overflow':'visible'}\">\n    <ng-template pTemplate=\"filter\" let-col>\n      <p-multiSelect [options]=\"grades\" defaultLabel=\"All grades\"\n  (onChange)=\"datatable.filter($event.value,col.field,\n        col.filterMatchMode)\"  styleClass=\"ui-column-filter\">\n      </p-multiSelect>\n    </ng-template>\n  </p-column>\n</p-dataTable>\n\n```", "```ts\ndatatable.filter($event.value, col.field, col.filterMatchMode)\n\n```", "```ts\n<p-dataTable [value]=\"browsers\" [rows]=\"10\" [paginator]=\"true\" \n  [pageLinks]=\"3\" [rowsPerPageOptions]=\"[10,15,20]\" \n  paginatorPosition=\"both\"(onPage)=\"onPage($event)\">\n  <p-column field=\"engine\" header=\"Engine\"></p-column>\n  <p-column field=\"browser\" header=\"Browser\"></p-column>\n  <p-column field=\"platform\" header=\"Platform\"></p-column>\n  <p-column field=\"grade\" header=\"Grade\"></p-column>\n</p-dataTable>\n\n```", "```ts\n<p-dataTable [value]=\"basicBrowsers\">\n <p-column field=\"engine\" header=\"Engine\"></p-column>\n  <p-column field=\"browser\" header=\"Browser\"></p-column>\n  <p-column field=\"platform\" header=\"Platform\"></p-column>\n  <p-column field=\"grade\" header=\"Grade\">\n    <ng-template let-col let-browser=\"rowData\" pTemplate=\"body\">\n      <span [style.color]=\"'Green'\" *ngIf=\"browser[col.field]=='A'\"> \n        {{browser[col.field]}}</span>\n      <span [style.color]=\"'Blue'\" *ngIf=\"browser[col.field]=='B'\"> \n        {{browser[col.field]}}</span>\n      <span [style.color]=\"'Red'\" *ngIf=\"browser[col.field]=='C'\">\n        {{browser[col.field]}}</span>\n    </ng-template>\n  </p-column>\n  <p-column styleClass=\"col-button\">\n    <ng-template pTemplate=\"header\">\n      <button type=\"button\" pButton icon=\"fa-refresh\"></button>\n    </ng-template>\n    <ng-template let-browser=\"rowData\" pTemplate=\"body\">\n      <button type=\"button\" pButton (click)=\"selectBrowser(browser)\" \n        icon=\"fa-search\"></button>\n    </ng-template>\n  </p-column>\n</p-dataTable>\n\n```", "```ts\n<p-dataTable [value]=\"basicBrowsers\" resizableColumns=\"true\"  \n  columnResizeMode=\"expand\">\n <p-column field=\"engine\" header=\"Engine\"></p-column>\n  <p-column field=\"browser\" header=\"Browser\"></p-column>\n  <p-column field=\"platform\" header=\"Platform\"></p-column>\n  <p-column field=\"grade\" header=\"Grade\"></p-column>\n</p-dataTable>\n\n```", "```ts\n<p-dataTable [value]=\"browsers\" reorderableColumns=\"true\">\n <p-column field=\"engine\" header=\"Engine\"></p-column>\n  <p-column field=\"browser\" header=\"Browser\"></p-column>\n  <p-column field=\"platform\" header=\"Platform\"></p-column>\n  <p-column field=\"grade\" header=\"Grade\"></p-column>\n</p-dataTable>\n\n```", "```ts\n<p-dataTable [value]=\"browsers\" [editable]=\"true\">\n <p-column field=\"browser\" header=\"Browser\" [editable]=\"true\">\n  </p-column>\n  <p-column field=\"platfrom\" header=\"Platform\" [editable]=\"false\">\n  </p-column>\n  <p-column field=\"engine\" header=\"Engine\" [editable]=\"true\">\n    <ng-template let-col let-browser=\"rowData\" pTemplate=\"editor\">\n      <p-dropdown [(ngModel)]=\"browser[col.field]\" [options]=\"engines\"  \n        [autoWidth]=\"false\"  required=\"true\"></p-dropdown>\n    </ng-template>\n  </p-column>\n  <p-column field=\"grade\" header=\"Grade\" [editable]=\"true\">\n  </p-column>\n</p-dataTable>\n\n```", "```ts\n<button pButton type=\"button\" (click)=\"toggle()\" \n  [class]=\"responsive-toggle\"\n label=\"Toggle\" icon=\"fa-list\">\n</button>\n<p-dataTable [value]=\"browsers\" [rows]=\"5\" [paginator]=\"true\" \n  [pageLinks]=\"3\" [responsive]=\"true\" [stacked]=\"stacked\">\n  <p-header>Responsive</p-header>\n  <p-column field=\"engine\" header=\"Engine\"></p-column>\n  <p-column field=\"browser\" header=\"Browser\"></p-column>\n  <p-column field=\"platform\" header=\"Platform\"></p-column>\n  <p-column field=\"grade\" header=\"Grade\"></p-column>\n</p-dataTable>\n\n```", "```ts\ntoggle() {\n this.stacked = !this.stacked;\n}\n\n```", "```ts\n<p-dataTable [value]=\"basicBrowsers\">\n <p-headerColumnGroup>\n    <p-row>\n      <p-column header=\"Browser\" rowspan=\"3\"></p-column>\n      <p-column header=\"Details\" colspan=\"4\"></p-column>\n    </p-row>\n    <p-row>\n      <p-column header=\"Environment\" colspan=\"2\"></p-column>\n      <p-column header=\"Performance\" colspan=\"2\"></p-column>\n    </p-row>\n    <p-row>\n      <p-column header=\"Engine\"></p-column>\n      <p-column header=\"Platform\"></p-column>\n      <p-column header=\"Rating\"></p-column>\n      <p-column header=\"Grade\"></p-column>\n    </p-row>\n  </p-headerColumnGroup>\n\n  <p-column field=\"browser\"></p-column>\n  <p-column field=\"engine\"></p-column>\n  <p-column field=\"platform\"></p-column>\n  <p-column field=\"rating\"></p-column>\n  <p-column field=\"grade\"></p-column>\n\n  <p-footerColumnGroup>\n    <p-row>\n      <p-column footer=\"*Please note that Chrome browser \n        details not included\"\n colspan=\"5\"></p-column>\n    </p-row>\n  </p-footerColumnGroup>\n</p-dataTable>\n\n```", "```ts\n<p-dataTable [value]=\"browsers\" sortField=\"browser\"  \n  rowGroupMode=\"subheader\" groupField=\"browser\"  \n  expandableRowGroups=\"true\" [sortableRowGroup]=\"false\">\n  <p-header>Toggleable Row Groups with Footers</p-header>\n  <ng-template pTemplate=\"rowgroupheader\" let-rowData> \n    {{rowData['browser']}}\n </ng-template>\n  <p-column field=\"engine\" header=\"Engine\"></p-column>\n  <p-column field=\"platform\" header=\"Platform\"></p-column>\n  <p-column field=\"rating\" header=\"rating\">\n    <ng-template let-col let-browser=\"rowData\" pTemplate=\"body\">\n      <span>{{browser[col.field]}} 'Stars'</span>\n    </ng-template>\n  </p-column>\n  <ng-template pTemplate=\"rowgroupfooter\" let-browser>\n    <td colspan=\"3\" style=\"text-align:right\">Chrome browsers are not \n      included</td>\n  </ng-template>\n</p-dataTable>\n\n```", "```ts\n<p-dataTable [value]=\"browsers\" sortField=\"engine\"  \n  rowGroupMode=\"subheader\"\n groupField=\"engine\" [styleClass]=\"'rowgroup-padding'\">\n  <p-header>Subheader</p-header>\n  <ng-template pTemplate=\"rowgroupheader\" let-rowData>\n    {{rowData['engine']}}\n </ng-template>\n  <p-column field=\"browser\" header=\"Browser\" sortable=\"true\">\n  </p-column>\n  <p-column field=\"platform\" header=\"Platform\" sortable=\"true\">\n  </p-column>\n  <p-column field=\"grade\" header=\"Grade\" sortable=\"true\">\n  </p-column>\n</p-dataTable>\n\n```", "```ts\n<p-dataTable [value]=\"browsers\" sortField=\"engine\"   \n  rowGroupMode=\"rowspan\"\n [styleClass]=\"'rowgroup-padding'\">\n  <p-header>RowSpan</p-header>\n  <p-column field=\"engine\" header=\"Engine\" sortable=\"true\"></p-column>\n  <p-column field=\"platform\" header=\"Platform\" sortable=\"true\">\n  </p-column>\n  <p-column field=\"browser\" header=\"Browser\" sortable=\"true\">\n  </p-column>\n  <p-column field=\"grade\" header=\"Grade\" sortable=\"true\"></p-column>\n</p-dataTable>\n\n```", "```ts\n<p-dataTable [value]=\"browsers\" [lazy]=\"true\" [rows]=\"10\" \n  [paginator]=\"true\" [totalRecords]=\"totalRecords\" \n  (onLazyLoad)=\"loadBrowsersLazy($event)\">\n  <p-header>List of browsers</p-header>\n  <p-column field=\"engine\" header=\"Engine\" [sortable]=\"true\" \n  [filter]=\"true\">\n  </p-column>\n  <p-column field=\"browser\" header=\"Browser\" [sortable]=\"true\" \n  [filter]=\"true\">  \n  </p-column>\n  <p-column field=\"platform\" header=\"Platform\" [sortable]=\"true\" \n  [filter]=\"true\">\n  </p-column>\n <p-column field=\"grade\" header=\"Grade\" [sortable]=\"true\" \n  [filter]=\"true\">\n  </p-column>\n</p-dataTable>\n\n```", "```ts\nloadBrowsersLazy(event: LazyLoadEvent) {\n //event.first = First row offset //event.rows = Number of rows per page //event.sortField = Field name to sort with //event.sortOrder = Sort order as number, 1 for asc and -1 for dec //filters: FilterMetadata object having field as \n  //key and filter value, \n  //filter matchMode as value    this.browserService.getBrowsers().subscribe((browsers: any) =>\n    this.browsers = browsers.slice(event.first, \n    (event.first + event.rows)));\n}\n\n```", "```ts\n<p-dataTable [value]=\"basicBrowsers\" expandableRows=\"true\"   \n  [expandedRows]=\"expandedRows\">\n  <p-column expander=\"true\" styleClass=\"col-icon\" header=\"Toggle\">\n  </p-column>\n  <p-column field=\"engine\" header=\"Engine\"></p-column>\n  <p-column field=\"browser\" header=\"Browser\"></p-column>\n  <p-column field=\"platform\" header=\"Platform\"></p-column>\n  <p-column field=\"grade\" header=\"Grade\"></p-column>\n  <ng-template let-browser pTemplate=\"rowexpansion\">\n    <div class=\"ui-grid ui-grid-responsive ui-fluid \n      rowexpansion-layout\">\n      <div class=\"ui-grid-row\">\n        <div class=\"ui-grid-col-9\">\n          <div class=\"ui-grid ui-grid-responsive ui-grid-pad\">\n            <div class=\"ui-grid-row\">\n              <div class=\"ui-grid-col-2 label\">Engine:</div>\n              <div class=\"ui-grid-col-10\">{{browser.engine}}</div>\n            </div>\n            <div class=\"ui-grid-row\">\n              <div class=\"ui-grid-col-2 label\">Browser:</div>\n              <div class=\"ui-grid-col-10\">{{browser.browser}}</div>\n            </div>\n            <div class=\"ui-grid-row\">\n              <div class=\"ui-grid-col-2 label\">Platform:</div>\n              <div class=\"ui-grid-col-10\">{{browser.platform}}</div>\n            </div>\n            <div class=\"ui-grid-row\">\n              <div class=\"ui-grid-col-2 label\">Version:</div>\n              <div class=\"ui-grid-col-10\">{{browser.version}}</div>\n            </div>\n            <div class=\"ui-grid-row\">\n              <div class=\"ui-grid-col-2 label\">Rating:</div>\n              <div class=\"ui-grid-col-10\">{{browser.rating}}</div>\n            </div>\n            <div class=\"ui-grid-row\">\n              <div class=\"ui-grid-col-2 label\">Grade:</div>\n              <div class=\"ui-grid-col-10\">{{browser.grade}}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</p-dataTable>\n\n```", "```ts\n<p-dataTable #dt [value]=\"basicBrowsers\" exportFilename=\"browsers\"   \n  csvSeparator=\";\">\n <p-header>\n    <div class=\"ui-helper-clearfix\">\n    <button type=\"button\" pButton icon=\"fa-file-o\" iconPos=\"left\" label=\"CSV\" (click)=\"dt.exportCSV()\" style=\"float:left\"></button>\n    </div>\n  </p-header>\n  <p-column field=\"engine\" header=\"Engine\"></p-column>\n  <p-column field=\"browser\" header=\"Browser\"></p-column>\n  <p-column field=\"platform\" header=\"Platform\"></p-column>\n  <p-column field=\"grade\" header=\"Grade\"></p-column>\n</p-dataTable>\n\n```", "```ts\n<p-dataList [value]=\"basicBrowsers\">\n <ng-template let-browser pTemplate=\"item\">\n    <div class=\"ui-grid ui-grid-responsive ui-fluid\" \n      class=\"content-layout\">\n      <div class=\"ui-grid-row\">\n        <div class=\"ui-grid-col-3\">\n          <img src=\"/assets/data/images/{{browser.code}}.png\" \n            width=\"100\" height=\"80\"/>\n        </div>\n        <div class=\"ui-grid-col-9\">\n          <div class=\"ui-grid ui-grid-responsive ui-fluid\">\n            <div class=\"ui-grid-row\">\n              <div class=\"ui-grid-col-2\">Engine: </div>\n              <div class=\"ui-grid-col-10\">{{browser.engine}}</div>\n            </div>\n            <div class=\"ui-grid-row\">\n              <div class=\"ui-grid-col-2\">Browser: </div>\n              <div class=\"ui-grid-col-10\">{{browser.browser}}</div>\n            </div>\n            <div class=\"ui-grid-row\">\n              <div class=\"ui-grid-col-2\">Platform: </div>\n              <div class=\"ui-grid-col-10\">{{browser.platform}}</div>\n            </div>\n            <div class=\"ui-grid-row\">\n              <div class=\"ui-grid-col-2\">Version: </div>\n              <div class=\"ui-grid-col-10\">{{browser.version}}</div>\n            </div>\n            <div class=\"ui-grid-row\">\n              <div class=\"ui-grid-col-2\">Grade: </div>\n              <div class=\"ui-grid-col-10\">{{browser.grade}}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</p-dataList>\n\n```", "```ts\nbasicBrowsers: Browser[];\n\nconstructor(private browserService: BrowserService) { }\n\nngOnInit() {\n  this.browserService.getBrowsers().subscribe(\n    (browsers:any) => this.basicBrowsers = browsers.slice(0,4));\n}\n\n```", "```ts\n<p-dataList [value]=\"advancedBrowsers\" [paginator]=\"true\" [rows]=\"5\"\n (onPage)=\"onPagination($event)\" [rowsPerPageOptions]=\"[5,10,15]\"\n [paginatorPosition]=\"both\" [emptyMessage]=\"'No records found'\">\n  <p-header>\n    List of Browsers\n  </p-header>\n    .... // Content\n <p-footer>\n    Note: Grades are 3 types.A,B and C.\n </p-footer> </p-dataList>\n\n```", "```ts\n<p-dataList [value]=\"lazyloadingBrowsers\" [paginator]=\"true\" [rows]=\"5\"   \n  [lazy]=\"true\"\n (onLazyLoad)=\"loadData($event)\" [totalRecords]=\"totalRecords\">\n  ... // Content\n</p-dataList>\n\n```", "```ts\nloadData(event:any) {\n let start = event.first;//event.first = First row offset\n  let end = start + event.rows;//event.rows = Number of rows per page\n  this.browserService.getBrowsers().subscribe((browsers: any) =>\n this.lazyloadingBrowsers = browsers.slice(start,end));\n}\n\n```", "```ts\n<p-pickList [source]=\"sourceCountries\" [target]=\"targetCountries\"\n [sourceStyle]=\"{'height':'350px'}\" [targetStyle]=\"{'height':'350px'}\">\n  <ng-template let-country pTemplate=\"item\">\n    <div class=\"ui-helper-clearfix\">\n      <img src=\"/assets/data/images/country/\n        {{country.code.toLowerCase()}}.png\" />\n      <span>{{country.flag}} - {{country.name}}({{country.dial_code}})\n </span>\n    </div>\n </ng-template>\n</p-pickList>\n\n```", "```ts\nsourceCountries: Country[];\ntargetCountries: Country[];\n\nconstructor(private countryService: CountryService) { }\n\nngOnInit() {\n this.countryService.getCountries().subscribe(\n    (countries: Country[]) => \n  {\n    this.sourceCountries = countries;\n  });\n  this.targetCountries = [];\n}\n\n```", "```ts\n<p-pickList [source]=\"sourceCountries\"  [target]=\"targetCountries\"   filterBy=\"name, code\">\n  ...\n</p-pickList>\n\n```", "```ts\n<p-pickList [source]=\"sourceCountries\" [target]=\"targetCountries\"   \n  sourceHeader=\"Available\" targetHeader=\"Selected\" [dragdrop]=\"true\" \n  dragdropScope=\"name\">\n   ...\n</p-pickList>\n\n```", "```ts\n<p-orderList [value]=\"countries\" header=\"Favourite countries\" >\n <ng-template let-country pTemplate=\"item\">\n    <div class=\"ui-helper-clearfix\">\n      <img src=\"/assets/data/images/country/\n        {{country.code.toLowerCase()}}.png\" />\n      <span class=\"content-format\">\n        {{country.flag}} {{country.name}}({{country.dial_code}})\n </span>\n    </div>\n  </ng-template>\n</p-orderList>\n\n```", "```ts\ncountries: Country[];\n\nconstructor(private countryService: CountryService) { }\n\nngOnInit() {\n this.countryService.getCountries().subscribe((countries: Country[]) =>\n  {\n    this.countries = countries;\n  });\n}\n\n```", "```ts\n<p-orderList [value]=\"countries\" filterBy=\"name, code\">\n ...\n</p-orderList>\n\n```", "```ts\n<p-orderList [value]=\"countries\" [dragdrop]=\"true\" dragdropScope=\"name\">\n  ...\n</p-orderList>\n\n```", "```ts\n<p-dataGrid [value]=\"basicBrowsers\">\n <ng-template let-browser pTemplate=\"item\">\n    <div style=\"padding:3px\" class=\"ui-g-12 ui-md-3\">\n      <p-panel [header]=\"browser.browser\" [style]=\"{'text-\n        align':'center'}\">\n        <img src=\"/assets/data/images/{{browser.code}}.png\" \n          width=\"50\"height=\"50\"> \n        <div class=\"car-detail\">{{browser.engine}} - \n          {{browser.version}}\n </div>\n        <hr class=\"ui-widget-content\" style=\"border-top:0\">\n        <i class=\"fa fa-search\" (click)=\"selectBrowser(browser)\"\n style=\"cursor:pointer\"></i>\n      </p-panel>\n    </div>\n  </ng-template>\n</p-dataGrid>\n\n```", "```ts\nbasicBrowsers: Browser[];\n\nconstructor(private browserService: BrowserService) { }\n\nngOnInit() {\n this.browserService.getBrowsers().subscribe((browsers: any) =>\n this.basicBrowsers = browsers.slice(0, 12));\n}\n\n```", "```ts\nloadData(event: any) {\n let start = event.first; //event.first = First row offset\n  let end = start + event.rows; //event.rows = Number of rows per page\n  this.browserService.getBrowsers().subscribe((browsers: any) =>\n this.lazyloadingBrowsers = browsers.slice(start,end));\n}\n\n```", "```ts\n<p-dataScroller [value]=\"basicBrowsers\" [rows]=\"5\">\n <ng-template let-browser pTemplate=\"item\">\n    <div class=\"ui-grid ui-grid-responsive ui-fluid\" \n      class=\"content-layout\">\n      <div class=\"ui-grid-row\">\n        <div class=\"ui-grid-col-3\">\n          <img src=\"/assets/data/images/{{browser.code}}.png\" \n            width=\"100\" height=\"80\"/>\n        </div>\n        <div class=\"ui-grid-col-9\">\n          <div class=\"ui-grid ui-grid-responsive ui-fluid\">\n            <div class=\"ui-grid-row\">\n              <div class=\"ui-grid-col-2\">Engine: </div>\n              <div class=\"ui-grid-col-10\">{{browser.engine}}</div>\n            </div>\n            // Other content goes here\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</p-dataScroller>\n\n```", "```ts\n<p-dataScroller [value]=\"advancedBrowsers\" [rows]=\"5\" [loader]=\"loadButton\">\n  // Content goes here </p-dataScroller>\n<p-dataScroller [value]=\"advancedBrowsers\" [rows]=\"5\" [loader]=\"loadButton\">\n\n```", "```ts\n<p-dataScroller [value]=\"lazyloadingBrowsers\" [rows]=\"5\"\n [lazy]=\"true\" (onLazyLoad)=\"loadData($event)\">\n  //Content goes here </p-dataScroller>\n\n```", "```ts\nloadData(event: any) {\n let start = event.first; //event.first = First row offset\n  let end = start + event.rows; //event.rows = Number of rows per page\n  this.browserService.getBrowsers().subscribe((browsers: any) =>\n this.lazyloadingBrowsers = browsers.slice(start, end));\n}\n\n```", "```ts\n<p-tree [value]=\"basicTree\"></p-tree>\n\n```", "```ts\n\"data\":\n[\n  {\n    \"label\": \"Asia\",\n    \"data\": \"Documents Folder\",\n    \"expandedIcon\": \"fa-folder-open\",\n    \"collapsedIcon\": \"fa-folder\",\n    \"children\": [{\n      \"label\": \"India\",\n      \"data\": \"Work Folder\",\n      \"expandedIcon\": \"fa-folder-open\",\n      \"collapsedIcon\": \"fa-folder\",\n      \"children\": [{\n \"label\": \"Goa\", \"icon\": \"fa-file-word-o\",\n \"data\": \"Beaches& Old Goa colonial architecture\"},\n          {\"label\": \"Mumbai\", \"icon\": \"fa-file-word-o\", \"data\": \n \"Shopping,Bollywood\"},\n          {\"label\": \"Hyderabad\", \"icon\": \"fa-file-word-o\", \n \"data\": \"Golconda Fort\"}\n      ]\n    },\n      {\n        \"label\": \"Singapore\",\n        \"data\": \"Home Folder\",\n        \"expandedIcon\": \"fa-folder-open\",\n        \"collapsedIcon\": \"fa-folder\",\n        \"children\": [{\n \"label\": \"Woodlands\", \"icon\": \"fa-file-word-o\", \n \"data\": \"Parks,Sea food\"}]\n      },\n    ]\n  }\n...\n]\n\n```", "```ts\n@Injectable()\nexport class TreeNodeService {\n\n  constructor(private http: Http) { }\n\n  getTouristPlaces(): Observable<any[]> {\n    return this.http.get('/assets/data/cities.json')\n      .map(response => response.json().data);\n  }\n}\n\n```", "```ts\nbasicTree: TreeNode[];\n\nconstructor(private nodeService: TreeNodeService) { }\n\nngOnInit() {\n this.nodeService.getTouristPlaces().subscribe(\n    (places: any) => this.basicTree = places);\n}\n\n```", "```ts\n<p-tree [value]=\"singleSelectionTree\" selectionMode=\"single\" [(selection)]=\"selectedPlace\"  (onNodeSelect)=\"nodeSelect($event)\" (onNodeUnselect)=\"nodeUnselect($event)\"></p-tree>\n<div>Selected Node: {{selectedPlace ? selectedPlace.label : 'none'}}</div>\n\n```", "```ts\n<p-tree [value]=\"checkboxSelectionTree\" selectionMode=\"checkbox\"\n [(selection)]=\"selectMultiplePlaces\"></p-tree>\n<div>Selected Nodes: <span *ngFor=\"let place of selectMultiplePlaces\">{{place.label}} </span></div>\n\n```", "```ts\n<p-tree #expandingTree [value]=\"programmaticTree\"></p-tree>\n<div>\n <button pButton type=\"text\" label=\"Expand all\" (click)=\"expandAll()\">\n   </button>\n  <button pButton type=\"text\" label=\"Collapse all\" (click)=\"collapseAll()\"></button>\n</div>\n\n```", "```ts\nexpandAll() {\n this.programmaticTree.forEach( (node: any) => {\n    this.expandRecursive(node, true);\n  } );\n}\n\ncollapseAll() {\n this.programmaticTree.forEach((node: any) => {\n    this.expandRecursive(node, false);\n  } );\n}\n\nexpandRecursive(node: TreeNode, isExpand: boolean) {\n  node.expanded = isExpand;\n  if (node.children) {\n    node.children.forEach( childNode => {\n      this.expandRecursive(childNode, isExpand);\n    } );\n  }\n}\n\n```", "```ts\n<p-treeTable [value]=\"basicTreeTable\">\n <p-header>Basic</p-header>\n  <p-column field=\"name\" header=\"Name\"></p-column>\n  <p-column field=\"days\" header=\"Days\"></p-column>\n  <p-column field=\"type\" header=\"Type\"></p-column>\n</p-treeTable>\n\n```", "```ts\n{\n  \"data\": [\n    {\n      \"data\": {\n        \"name\": \"Asia\",\n        \"days\": \"15\",\n        \"type\": \"Continent\"\n  },\n      \"children\": [\n        {\n          \"data\": {\n            \"name\": \"India\",\n            \"days\": \"6\",\n            \"type\": \"Country\"\n  },\n          \"children\": [\n            {\n              \"data\": {\n                \"name\": \"Goa\",\n                \"days\": \"2\",\n                \"type\": \"City\"\n  }...\n            }]\n          }]\n     } }\n  ...\n}\n\n```", "```ts\n<p-treeTable [value]=\"singleSelectionTreeTable\" selectionMode=\"single\"   \n  [(selection)]=\"selectedTouristPlace   \n  (onNodeSelect)=\"nodeSelect($event)\"   \n  (onNodeUnselect)=\"nodeUnselect($event)\" \n  (onRowDblclick)=\"onRowDblclick($event)\" >\n    <p-header>Singe Selection</p-header>\n    <p-column field=\"name\" header=\"Name\"></p-column>\n    <p-column field=\"days\" header=\"Days\"></p-column>\n    <p-column field=\"type\" header=\"Type\"></p-column>\n</p-treeTable>\n\n```", "```ts\n<p-treeTable [value]=\"checkboxSelectionTreeTable\" selectionMode=\"checkbox\"\n [(selection)]=\"selectedMultiTouristPlaces\">\n  <p-header>Checkbox Selection</p-header>\n  <p-column field=\"name\" header=\"Name\"></p-column>\n  <p-column field=\"days\" header=\"Days\"></p-column>\n  <p-column field=\"type\" header=\"Type\"></p-column>\n</p-treeTable>\n\n```", "```ts\n<p-treeTable [value]=\"templateTreeTable\">\n <p-header>Editable Cells with Templating</p-header>\n  <p-column field=\"name\" header=\"Name\">\n    <ng-template let-node=\"rowData\" pTemplate=\"body\">\n      <input type=\"text\" [(ngModel)]=\"node.data.name\" \n        class=\"edit-input\">\n    </ng-template>\n  </p-column>\n  <p-column field=\"days\" header=\"Days\">\n    <ng-template let-node=\"rowData\" pTemplate=\"body\">\n      <input type=\"text\" [(ngModel)]=\"node.data.days\" \n        class=\"edit-input\">\n    </ng-template>\n  </p-column>\n  <p-column field=\"type\" header=\"Type\">\n    <ng-template let-node=\"rowData\" pTemplate=\"body\">\n      <input type=\"text\" [(ngModel)]=\"node.data.type\" \n        class=\"edit-input\">\n    </ng-template>\n  </p-column>\n</p-treeTable>\n\n```", "```ts\n<!-- Schedule CSS resources--> <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.1.0/\nfullcalendar.min.css\">\n<!-- Schedule Javascript resources--> <script src=\"https://code.jquery.com/jquery-2.2.4.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.1.0/\nfullcalendar.min.js\"></script>\n\n```", "```ts\n<p-schedule [events]=\"events\" [height]=\"700\" \n  [styleClass]=\"'schedule-width'\">\n</p-schedule> \n\n```", "```ts\nexport class MyEvent {\n id: number;\n  title: string;\n  start: string;\n  end: string;\n  allDay: boolean = true;\n}\n\n```", "```ts\n@Injectable()\nexport class EventService {\n\n  constructor(private http: Http) { }\n\n  getEvents(): Observable<any> {\n    return this.http.get('/assets/data/scheduleevents.json')\n      .map(response => response.json().data);\n  }\n}\n\n```", "```ts\nevents: any[];\n\nconstructor(private eventService: EventService) { }\n\nngOnInit() {\n this.eventService.getEvents().subscribe((events: any) => \n  {this.events = events;});\n}\n\n```", "```ts\n{\n  left: 'title', \n  center: '',\n  right: 'today prev,next' }\n\n```", "```ts\n<p-schedule [events]=\"events\" [header]=\"headerConfig\" [height]=\"700\"\n [styleClass]=\"'schedule-width'\"></p-schedule>\n\n```", "```ts\nthis.headerConfig = {\n left: 'prev,next today',\n  center: 'title',\n  right: 'month,agendaWeek,agendaDay' };\n\n```", "```ts\n<p-schedule [events]=\"events\" (onViewRender)=\"loadEvents($event)\" [height]=\"700\" [styleClass]=\"'schedule-width'\"></p-schedule>\n\n```", "```ts\nloadEvents(event: any) {\n let start = event.view.start;\n  let end = event.view.end;\n  // In real time the service call filtered based on  \n  //start and end dates\n  this.eventService.getEvents().subscribe((events: any) =>\n  {this.events = events;});\n}\n\n```", "```ts\n<p-schedule [events]=\"events\" #schedule></p-schedule>\n<button type=\"button\" pButton (click)=\"next(schedule)\"></p-button>\n\n```", "```ts\nnext(schedule) {\n  schedule.next();\n}\n\n```"]