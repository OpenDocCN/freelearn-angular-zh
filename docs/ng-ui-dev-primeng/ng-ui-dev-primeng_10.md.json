["```ts\nnpm install jasmine-core --save-dev\n\n```", "```ts\nnpm install @types/jasmine --save-dev\n\n```", "```ts\ndescribe(\"Test matchers:\", function() {\n  it(\"Compare two values with 'toBe' matcher\", function() {\n    var a = 5;\n    var b = 2 + 3;\n\n    expect(a).toBe(b);\n    expect(a).not.toBe(null);\n  });\n});\n\n```", "```ts\ndescribe(\"Usage of beforeEach and afterAll\", function() {\n  var foo = 0;\n\n  beforeEach(function() {\n    foo += 1;\n  });\n\n  afterAll(function() {\n    foo = 0;\n  });\n\n  it(\"Check if foo == 1\", function() {\n    expect(foo).toEqual(1);\n  });\n\n  it(\"Check if foo == 2\", function() {\n    expect(foo).toEqual(2);\n  });\n});\n\n```", "```ts\n\"devDependencies\": {\n  ...\n  \"karma\": \"~1.7.0\",\n  \"karma-chrome-launcher\": \"~2.1.1\",\n  \"karma-jasmine\": \"~1.1.0\",\n  \"karma-jasmine-matchers\": \"~3.7.0\",\n  \"karma-mocha-reporter\": \"~2.2.3\",\n  \"karma-phantomjs-launcher\": \"~1.0.4\",\n  \"karma-sourcemap-loader\": \"~0.3.7\",\n  \"karma-webpack\": \"~2.0.3\",\n  \"phantomjs-prebuilt\": \"~2.1.14\"\n}\n\n```", "```ts\nlet webpackConfig = require('./webpack.test.js');\n\nmodule.exports = config => { \n  config.set({\n    autoWatch: false,\n    singleRun: true,\n    browsers: ['Chrome', 'PhantomJS'],\n    basePath: '.',\n    files: ['spec-bundle.js'],\n    exclude: [],\n    frameworks: ['jasmine', 'jasmine-matchers'],\n    logLevel: config.LOG_INFO,\n    phantomJsLauncher: {exitOnResourceError: true},\n    port: 9876,\n    colors: true,\n    preprocessors: {\n      'spec-bundle.js': ['webpack', 'sourcemap']\n    },\n    reporters: ['mocha'],\n    webpack: webpackConfig,\n    webpackServer: {noInfo: true}\n  });\n};\n\n```", "```ts\nvar ContextReplacementPlugin = require(\"webpack/lib/ContextReplacementPlugin\");\n\nmodule.exports = {\n  devtool: 'inline-source-map',\n  resolve: {extensions: ['.ts', '.js', '.json']},\n  module: {\n    rules: [\n      {test: /\\.ts$/, loaders: ['awesome-typescript-loader', \n        'angular2-template-loader']},\n      {test: /\\.json$/, loader: 'json-loader'},\n      {test: /\\.(css|html)$/, loader: 'raw-loader'}\n    ]\n  },\n  plugins: [\n    new ContextReplacementPlugin(\n      /angular(\\\\|\\/)core(\\\\|\\/)@angular/,\n      path.resolve(__dirname, '../src')\n    )\n  ]\n};\n\n```", "```ts\nrequire('core-js/es6');\nrequire('core-js/es7/reflect');\nrequire('zone.js/dist/zone');\nrequire('zone.js/dist/long-stack-trace-zone');\nrequire('zone.js/dist/proxy');\nrequire('zone.js/dist/sync-test');\nrequire('zone.js/dist/jasmine-patch');\nrequire('zone.js/dist/async-test');\nrequire('zone.js/dist/fake-async-test');\nrequire('rxjs/Rx');\n\nconst coreTesting = require('@angular/core/testing');\nconst browserTesting = require('@angular/platform-browser-dynamic/testing');\n\n// Initialize the test environment\ncoreTesting.TestBed.resetTestEnvironment();\ncoreTesting.TestBed.initTestEnvironment(\n  browserTesting.BrowserDynamicTestingModule,\n  browserTesting.platformBrowserDynamicTesting()\n);\n\n// Let the browser show a full stack trace when an error happens\nError.stackTraceLimit = Infinity;\n// Let's set the timeout for the async function calls to 3 sec. \n// (default is 5 sec.)\njasmine.DEFAULT_TIMEOUT_INTERVAL = 3000;\n\n// Find all files with .spec.ts extensions\nconst context = require.context('../src/', true, /\\.spec\\.ts$/);\n\n// For each file, call the context function that will require \n//the file and load it up here.\ncontext.keys().forEach(context);\n\n```", "```ts\n\"scripts\": {\n  ...\n  \"test\": \"karma start ./config/karma.conf.js\",\n  \"test:headless\": \"karma start ./config/karma.conf.js \n    --browsers PhantomJS\",\n  \"test:chrome\": \"karma start ./config/karma.conf.js \n    --browsers Chrome\"\n}\n\n```", "```ts\ndescribe('MyService', () => {\n  let service;\n\n  beforeEach(() => TestBed.configureTestingModule({\n    providers: [MyService]\n  }));\n\n  beforeEach(inject([MyService], s => {\n    service = s;\n  }));\n\n  it('should return the city Bern', () => {\n    expect(service.getCities()).toContain('Bern');\n  });\n});\n\n```", "```ts\nit('do something', async(() => {\n  // make asynchronous operation here, e.g. call a REST service\n}), 3000));\n\n```", "```ts\nit('do something', async(inject([SomeService], s => {\n  ...\n})));\n\n```", "```ts\nchangeSomethingAsync1();\n...\ntick();\nexpect(something).toBeDefined();\n\nchangeSomethingAsync2();\n...\ntick();\nexpect(something).toBeNull();\n\n```", "```ts\n<label  for=\"username\">Username:</label>\n<input  id=\"username\" name=\"username\" type=\"text\" pInputText \n       [(ngModel)]=\"username\"/>\n\n```", "```ts\nimport {TestBed, async, ComponentFixture} from '@angular/core/testing';\nimport {By} from '@angular/platform-browser';\nimport {DebugElement} from '@angular/core';\nimport {SectionComponent} from './section.component';\nimport {FormsModule} from '@angular/forms';\n\ndescribe('Component: SectionComponent', () => {\n let fixture: ComponentFixture<SectionComponent>;\n  let sectionComponent: SectionComponent;\n  let element: any;\n  let debugElement: DebugElement;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [FormsModule],\n      declarations: [SectionComponent]\n    });\n\n    fixture = TestBed.createComponent(SectionComponent);\n    sectionComponent = fixture.componentInstance;\n    element = fixture.nativeElement;\n    debugElement = fixture.debugElement;\n  });\n\n afterEach(() => {\n if (fixture) {fixture.destroy();}\n  });\n   it('should render `James Bond`', async(() => {\n    sectionComponent.username = 'James Bond';\n\n    // trigger change detection\n  fixture.detectChanges();\n\n    // wait until fixture is stable and check then the name\n  fixture.whenStable().then(() => {\n      // first approach shows one possible way to check the result\n  expect(element.querySelector('input[name=username]').value)\n        .toBe('James Bond');\n      // second approach shows another possible way to check the result\n  expect(debugElement.query(By.css('input[name=username]'))\n        .nativeElement.value).toBe('James Bond');\n    });\n  }));\n});\n\n```", "```ts\nclass ComponentFixture<T> {\n  componentInstance: T;\n  nativeElement: any;\n  debugElement: DebugElement;\n  detectChanges(): void;\n whenStable(): Promise<any>;\n  ...\n}\n\n```", "```ts\nconst spy = spyOn(someComponent, 'showDetails');\n\n// do some interactions\n...\nfixture.detectChanges();\n\nfixture.whenStable().then(() => {\n  expect(spy).toHaveBeenCalled();\n});\n\n```", "```ts\n@Injectable()\nexport class CountryService {\n  constructor(private http: Http) { }\n\n  getCountries(): Observable<Country[]> {\n    return this.http.get('/assets/data/countries.json')\n      .map(response => response.json().data as Country[]);\n  }\n}\n\n```", "```ts\ninterface Country {\n  name: any;\n  dial_code?: any;\n  code?: any;\n}\n\n```", "```ts\nimport {TestBed, inject} from '@angular/core/testing';\nimport {HttpModule, XHRBackend, Response, ResponseOptions} \n from '@angular/http';\nimport {MockBackend, MockConnection} from '@angular/http/testing';\nimport {CountryService} from './country.service';\nimport Country from './country';\n\ndescribe('CountryService (MockBackend)', () => {\n let mockbackend: MockBackend, service: CountryService;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpModule],\n      providers: [CountryService, MockBackend,\n        {provide: XHRBackend, useClass: MockBackend}\n      ]\n    })\n  });\n\n  beforeEach(inject([CountryService, MockBackend],\n    (cs: CountryService, mb: MockBackend) => {\n    service = cs;\n    mockbackend = mb;\n  }));\n   it('should return mocked response', () => {\n    let israel: Country = {'name': 'Israel', \n 'dial_code': '+972', 'code': 'IL'};\n    let angola: Country = {'name': 'Angola', \n 'dial_code': '+244', 'code': 'AO'};\n    let response = [israel, angola];\n\n    mockbackend.connections.subscribe((connection: MockConnection) => {\n      connection.mockRespond(new Response(new ResponseOptions({\n        status: 200, body: JSON.stringify(response)\n      })));\n    });\n\n    service.getCountries().subscribe(countries => {\n      expect(countries.length).toBe(2);\n      expect(countries).toContain(israel);\n      expect(countries).toContain(angola);\n    });\n  });\n});\n\n```", "```ts\nnpm install karma-webpack-grep --save-dev\n\n```", "```ts\nlet grep = require('karma-webpack-grep');\n\nmodule.exports = config => {\n  webpackConfig.plugins = (webpackConfig.plugins || []).concat(grep({\n    grep: config.grep,\n    basePath: '.',\n    testContext: '../src/'\n  }));\n\n  config.set({\n    // the same settings as before\n    ...\n  });\n};\n\n```", "```ts\nkarma start ./config/karma.conf.js --grep some/path\n\n```", "```ts\n\"scripts\": {\n  ...\n  \"test:headless:grep\": \"karma start ./config/karma.conf.js\n    --browsers PhantomJS --autoWatch true --singleRun false --grep\",\n  \"test:chrome:grep\": \"karma start ./config/karma.conf.js\n    --browsers Chrome --autoWatch true --singleRun false --grep\"\n}\n\n```", "```ts\nnpm run test:chrome:grep -- app/section/section.component.spec.ts\nnpm run test:chrome:grep -- app/section/service/country.service.spec.ts\n\n```", "```ts\nSTART:\n  CountryService (MockBackend)\n    V should return mocked response\n\nFinished in 0.014 secs / 0.331 secs @ 14:33:58 GMT+0200\n\nSUMMARY:\nV 1 test completed\n\n```", "```ts\nnpm run test:chrome:grep -- app/section\n\n```", "```ts\nnpm install protractor -g\n\n```", "```ts\nwebdriver-manager update\n\n```", "```ts\nnpm install jasmine-spec-reporter --save-dev\n\n```", "```ts\nvar path = require('path');\nvar SpecReporter = require('jasmine-spec-reporter').SpecReporter;\n\nexports.config = {\n  allScriptsTimeout: 11000,\n  specs: ['../e2e/**/*.e2e-spec.ts'],\n  capabilities: {'browserName': 'chrome'},\n  directConnect: true,\n  baseUrl: 'http://localhost:3000/',\n  framework: 'jasmine',\n  jasmineNodeOpts: {\n    showColors: true,\n    defaultTimeoutInterval: 30000,\n    print: function () { }\n  },\n  beforeLaunch: function () {\n    require('ts-node').register({\n      project: path.resolve(__dirname, '../e2e')\n    });\n  },\n  onPrepare() {\n    jasmine.getEnv().addReporter(new SpecReporter());\n  }\n};\n\n```", "```ts\nprotractor ./config/protractor.conf.js\n\n```", "```ts\n\"scripts\": {\n  ...\n  \"pree2e\": \"webdriver-manager update\",\n  \"e2e\": \"protractor ./config/protractor.conf.js\"\n}\n\n```", "```ts\nsuites: {\n  homepage: '../e2e/homepage/**/*.e2e-spec.ts',\n  payment: '../e2e/payment/**/*.e2e-spec.ts'\n}\n\n```", "```ts\nprotractor ./config/protractor.conf.js --suite homepage\n\n```", "```ts\ndescribe('Google page', function() {\n  it('should have a title', function() {\n    browser.get('https://www.google.com');\n    expect(browser.getTitle()).toEqual('Google');\n  });\n});\n\n```", "```ts\nexpect(browser.getCurrentUrl()).toContain('/admin');\n\n```", "```ts\nelement(by.css('h1'));\n\n```", "```ts\nelement(by.id('id'))\n\n```", "```ts\nelement(by.tagName('div'))\n\n```", "```ts\nexpect(element(by.css('.info')).isDisplayed()).toBe(true);\n\n```", "```ts\nexpect(element(by.tagName('button')).isEnabled()).toBe(true);\n\n```", "```ts\nit('should display the correct row count', () => {\n  const pcount = element.all(by.css('table tr')).count();\n  pcount.then((count) => {\n    console.log(`Table has ${count} rows`);\n  });\n  expect(pcount).toEqual(20);\n});\n\n```", "```ts\nimport {browser, element, by, ElementFinder} from 'protractor';\nimport {promise} from 'selenium-webdriver';\n\nexport class LoginPage {\n  nameInput: ElementFinder;\n  passwordInput: ElementFinder;\n  submitButton: ElementFinder;\n\n  constructor() {\n    this.nameInput = element(by.css('.name'));\n    this.passwordInput = element(by.css('.password'));\n    this.submitButton = element(by.css('button[type=\"submit\"]'));\n  }\n\n  navigateTo() {\n    browser.get('http://www.mywebshop.com');\n  };\n\n  login(name: string, password: string) {\n    this.nameInput.sendKeys(name);\n    this.passwordInput.sendKeys(password);\n    this.submitButton.click();\n  };\n\n  isUserLoggedIn(): promise.Promise<boolean> {\n    return element(by.css('.userProfile')).isDisplayed(); \n  }\n}\n\n```", "```ts\ndescribe('Web shop user', function() {\n  it('should log in successfully', function() {\n    let loginPage = new LoginPage();\n    loginPage.navigateTo();\n    loginPage.login('Max Mustermann', 'mysecret');\n\n    expect(loginPage.isUserLoggedIn()).toBeTruthy();\n  });\n});\n\n```", "```ts\nimport {browser, element, by, ElementFinder} from 'protractor';\nimport {promise} from 'selenium-webdriver';\n\nexport class FirstViewPage {\n  nameInput: ElementFinder;\n  submitButton: ElementFinder;\n\n  constructor() {\n    this.nameInput = element(by.css('input[name=\"username\"]'));\n    this.submitButton = element(by.css('button[type=\"submit\"]'));\n  }\n\n  navigateTo() {\n    browser.get('http://localhost:3000/chapter9/first-view');\n  };\n\n  typeUsername(name: string) {\n    this.nameInput.sendKeys(name);\n  };\n\n  confirm() {\n    this.submitButton.click();\n  };\n\n  getTitle(): promise.Promise<string> {\n    return element(by.css('h1')).getText();\n  }\n}\n\n```", "```ts\nexport class ConfirmDialogPageElement {\n  element: ElementFinder;\n\n  constructor(by: By) {\n    this.element = element(by);\n  }\n\n  isDisplayed(): promise.Promise<boolean> {\n    return this.element.isDisplayed();\n  }\n\n  confirm() {\n    this.clickButton('fa-check');\n  }\n\n  cancel() {\n    this.clickButton('fa-close');\n  }\n\n  private clickButton(icon: string) {\n    let button = this.element.$('button .' + \n      icon).element(by.xpath('..'));\n    button.click();\n  }\n}\n\n```", "```ts\ndescribe('FirstView', () => {\n  let page: FirstViewPage;\n\n  beforeEach(() => {\n    page = new FirstViewPage();\n    page.navigateTo();\n  });\n\n  it('should contain proper title', () => { \n    expect(page.getTitle()).toContain('first view');\n  });\n\n  it('should change the view when no input exists', () => { \n    page.confirm();\n    expect(browser.getCurrentUrl()).not.toMatch(/\\/first-view$/);\n  });\n\n  it('should display confirmation dialog when input exists', () => {\n    page.typeUsername('Admin');\n    page.confirm();\n\n    let confirmDialog = new ConfirmDialogPageElement(\n        by.css('p-confirmdialog')); \n    expect(confirmDialog.isDisplayed()).toBeTruthy();\n  });\n\n  it('should navigate to another view on confirm', () => {\n    page.typeUsername('Admin');\n    page.confirm();\n\n    let confirmDialog = new ConfirmDialogPageElement(\n        by.css('p-confirmdialog'));\n    confirmDialog.confirm(); \n    expect(browser.getCurrentUrl()).not.toMatch(/\\/first-view$/);\n  });\n\n  it('should stay on the same view on cancel', () => {\n    page.typeUsername('Admin');\n    page.confirm();\n\n    let confirmDialog = new ConfirmDialogPageElement(\n        by.css('p-confirmdialog'));\n    confirmDialog.cancel(); \n    expect(browser.getCurrentUrl()).toMatch(/\\/first-view$/);\n  });\n});\n\n```", "```ts\nng.probe($0).componentInstance.employees = [];\n\n```", "```ts\nng.probe($0).injector.get(ng.coreTokens.ApplicationRef).tick();\n\n```", "```ts\nproviders: [{\n  provide: 'PaymentEndpoint',\n  useValue: 'http://someendpoint.com/v1/payment/'\n}]\n\n```", "```ts\nlet element = document.querySelector('.some');\nlet endpoint = ng.probe(element).injector.get('PaymentEndpoint');\n\n```", "```ts\nng.probe($0).triggerEventHandler('click');\n\n```"]