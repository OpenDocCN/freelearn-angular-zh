["```ts\n<p-fileUpload name=\"demofiles[]\" url=\"http://demoserver.com/upload\">\n</p-fileUpload>\n\n```", "```ts\n<p-fileUpload mode=\"basic\" name=\"demofiles[]\"  \n              url=\"http://demoserver.com/upload\">\n</p-fileUpload>\n\n```", "```ts\n<p-fileUpload name=\"demofiles[]\" url=\"http://demoserver.com/upload\" \n              [multiple]=\"true\" [auto]=\"true\">\n</p-fileUpload>\n\n```", "```ts\njson-server db.json --port 3004\n\n```", "```ts\n{\n  \"fake-backend\": {}\n}\n\n```", "```ts\n<p-fileUpload name=\"demofiles[]\" url=\"http://localhost:3004/\n              fake-backend\">\n</p-fileUpload>\n\n```", "```ts\n<p-fileUpload name=\"demofiles[]\" url=\"http://localhost:3004/\n              fake-backend\" multiple=\"true\" accept=\"image/*\"     \n              maxFileSize=\"50000\">\n</p-fileUpload>\n\n```", "```ts\n<p-fileUpload name=\"demofiles[]\" url=\"http://localhost:3004/\n              fake-backend\"\n              multiple=\"true\" accept=\"image/*\" maxFileSize=\"50000\"\n              invalidFileSizeMessageSummary=\"{0} has wrong size, \"\n              invalidFileSizeMessageDetail=\"it exceeds {0}.\"\n              invalidFileTypeMessageSummary=\"{0} has wrong file type, \"\n              invalidFileTypeMessageDetail=\"it doesn't match: {0}.\"\n              chooseLabel=\"Select file\"\n              uploadLabel=\"Upload it!\"\n              cancelLabel=\"Abort\">\n</p-fileUpload>\n\n```", "```ts\n<p- name=\"demofiles[]\" url=\"http://localhost:3004/fake-backend\"\n    multiple=\"true\" accept=\".pdf\" maxFileSize=\"1000000\">\n  <ng-template pTemplate=\"toolbar\">\n    <div style=\"font-size: 0.9em; margin-top: 0.5em;\">\n      Please select your PDF documents\n    </div>\n  </ng-template>\n  <ng-template let-file pTemplate=\"file\">\n    <div style=\"margin: 0.5em 0 0.5em 0;\">\n      <i class=\"fa fa-file-pdf-o\" aria-hidden=\"true\"></i>\n      {{file.name}}\n    </div>\n  </ng-template>\n  <ng-template pTemplate=\"content\">\n    <i class=\"fa fa-cloud-upload\" aria-hidden=\"true\"></i>\n    Drag and drop files onto this area\n  </ng-template>\n</p-fileUpload>\n\n```", "```ts\n<p-fileUpload name=\"demofiles[]\" url=\"http://localhost:3004/\n              fake-backend\" accept=\"image/*\" maxFileSize=\"1000000\"\n              (onBeforeSend)=\"onBeforeSend($event)\" \n              (onUpload)=\"onUpload($event)\">\n</p-fileUpload>\n\n```", "```ts\nonBeforeSend(event: any) {\n  (<XMLHttpRequest>event.xhr).setRequestHeader('jwt', 'xyz123');\n}\n\n```", "```ts\nuploadMsgs: Message[] = [];\nuploadedFiles: any[] = [];\n\nonUpload(event: any) {\n  for (let file of event.files) {\n    this.uploadedFiles.push(file);\n  }\n\n  // produce a message for growl notification\n  this.uploadMsgs = [];\n  this.uploadMsgs.push({severity: 'info', \n    summary: 'File Uploaded', detail: ''});\n}\n\n```", "```ts\n<p-fileUpload name=\"demofiles[]\" customUpload=\"true\"\n              (uploadHandler)=\"smartUploader($event)\">\n</p-fileUpload>\n\n```", "```ts\n<p-dataGrid [value]=\"availableDocs\">\n  <p-header>\n    Available Documents\n  </p-header>\n  <ng-template let-doc pTemplate=\"item\">\n    <div class=\"ui-g-12 ui-md-4\" pDraggable=\"docs\"\n      dragHandle=\".ui-panel-titlebar\" dragEffect=\"move\"\n      (onDragStart)=\"dragStart($event, doc)\" \n        (onDragEnd)=\"dragEnd($event)\">\n      <p-panel [header]=\"doc.title\" [style]=\"{'text-align':'center'}\">\n        <img src=\"/assets/data/images/docs/{{doc.extension}}.png\">\n      </p-panel>\n    </div>\n  </ng-template>\n</p-dataGrid>\n\n```", "```ts\nclass DragDropComponent {\n  availableDocs: Document[];\n  deletedDocs: Document[];\n  draggedDoc: Document;\n\n  constructor(private docService: DocumentService) { }\n\n  ngOnInit() {\n    this.deletedDocs = [];\n    this.docService.getDocuments().subscribe((docs: Document[]) =>\n      this.availableDocs = docs);\n  }\n\n  dragStart(event: any, doc: Document) {\n    this.draggedDoc = doc;\n  }\n\n  dragEnd(event: any) {\n    this.draggedDoc = null;\n  }\n\n  ...\n}\n\n```", "```ts\ninterface Document {\n  id: string;\n  title: string;\n  size: number;\n  creator: string;\n  creationDate: Date;\n  extension: string;\n}\n\n```", "```ts\nbody .ui-panel .ui-panel-titlebar {\n  cursor: move;\n}\n\n```", "```ts\n<div pDroppable=\"docs\" (onDrop)=\"drop($event)\" \n     [ngClass]=\"{'dragged-doc': draggedDoc}\">\n  <p-dataTable [value]=\"deletedDocs\">\n    <p-header>Recycle Bin</p-header>\n    <p-column field=\"title\" header=\"Title\"></p-column>\n    <p-column field=\"size\" header=\"Size (bytes)\"></p-column>\n    <p-column field=\"creator\" header=\"Creator\"></p-column>\n    <p-column field=\"creationDate\" header=\"Creation Date\">\n      <ng-template let-col let-doc=\"rowData\" pTemplate=\"body\">\n        {{doc[col.field].toLocaleDateString()}}\n      </ng-template>\n    </p-column>\n  </p-dataTable>\n</div>\n\n```", "```ts\ndrop(event: any) {\n  if (this.draggedDoc) {\n    // add draggable element to the deleted documents list \n    this.deletedDocs = [...this.deletedDocs, this.draggedDoc];\n    // remove draggable element from the available documents list\n    this.availableDocs = this.availableDocs.filter(\n      (e: Document) => e.id !== this.draggedDoc.id);\n    this.draggedDoc = null;\n  }\n}\n\n```", "```ts\n.dragged-doc {\n  border: solid 2px red;\n}\n\n```", "```ts\nclass GalleriaComponent {\n  images: any[];\n\n  ngOnInit() {\n    this.images = [];\n\n    this.images.push({\n      source: '/assets/data/images/cars/Yeni.png',\n      alt: 'This is a first car',\n      title: 'Yeni Vollkswagen CC'\n    });\n    this.images.push({\n      source: '/assets/data/images/cars/Golf.png',\n      alt: 'This is a second car',\n      title: 'Golf'\n    });\n\n    ... // more image definitions\n  }\n}\n\n```", "```ts\n<p-galleria [images]=\"images\" panelWidth=\"400\" panelHeight=\"320\"\n            [autoPlay]=\"false\" [showCaption]=\"true\">\n</p-galleria>\n\n```", "```ts\n<p-galleria [images]=\"images\" panelWidth=\"400\" panelHeight=\"320\"\n            effect=\"bounce\" [effectDuration]=\"150\">\n</p-galleria>\n\n```", "```ts\n<p-galleria [images]=\"images\" panelWidth=\"400\" panelHeight=\"220\"\n            [autoPlay]=\"false\" [showCaption]=\"true\"\n            (onImageClicked)=\"onImageClicked($event)\">\n</p-galleria>\n\n```", "```ts\nonImageClicked($event: any) {\n  window.open($event.image.source, '_blank');\n}\n\n```", "```ts\nexport interface Employee {\n  id: string;\n  firstName: string;\n  lastName: string;\n  profession: string;\n  department: string;\n}\n\n```", "```ts\n@Injectable()\nexport class EmployeeService { \n  private static handleError(error: Response | any) {\n    // error handling is done as recommended \n    //in the official Angular documentation\n    // https://angular.io/docs/ts/latest/guide/server-\n    //communication.html#!#always-handle-errors\n    ...\n  }\n\n  constructor(private http: Http) { }\n\n  getEmployees(): Observable<Employee[]> {\n    return this.http.get('/fake-backend/employees')\n      .map(response => response.json() as Employee[])\n      .catch(EmployeeService.handleError);\n  }\n\n  createEmployee(employee: Employee): Observable<Employee> {\n    return this.http.post('/fake-backend/employees', employee)\n      .map(response => response.json() as Employee)\n      .catch(EmployeeService.handleError);\n  }\n\n  updateEmployee(employee: Employee): Observable<any> {\n    return this.http.put('/fake-backend/employees', employee)\n      .map(response => response.json())\n      .catch(EmployeeService.handleError);\n  }\n\n  deleteEmployee(id: string): Observable<any> {\n    return this.http.delete('/fake-backend/employees/' + id)\n      .map(response => response.json())\n      .catch(EmployeeService.handleError);\n  }\n}\n\n```", "```ts\n<p-dataTable [value]=\"employees\" selectionMode=\"single\"  \n             [(selection)]=\"selectedEmployee\"  \n             [paginator]=\"true\" rows=\"15\" \n             [responsive]=\"true\" \n             [alwaysShowPaginator]=\"false\">\n  <p-column field=\"firstName\" header=\"First Name\" [sortable]=\"true\">\n  </p-column>\n  <p-column field=\"lastName\" header=\"Last Name\" [sortable]=\"true\">\n  </p-column>\n  <p-column field=\"profession\" header=\"Profession\" [sortable]=\"true\">\n  </p-column>\n  <p-column field=\"department\" header=\"Department\" [sortable]=\"true\">\n  </p-column>\n  <p-footer>\n    <button pButton type=\"button\" label=\"Add\" icon=\"fa-plus\" \n      (click)=\"add()\"> </button>\n    <button pButton type=\"button\" label=\"Edit\" icon=\"fa-pencil\" \n      (click)=\"edit()\" [disabled]=\"!selectedEmployee\"></button>\n    <button pButton type=\"button\" label=\"Remove\" icon=\"fa-trash-o\" \n    (click)=\"remove()\" [disabled]=\"!selectedEmployee\"></button>\n  </p-footer>\n</p-dataTable>\n\n```", "```ts\nexport class DataTableCrudComponent implements OnInit, \n  OnDestroy {\n  employees: Employee[];\n selectedEmployee: Employee;\n employeeForDialog: Employee;\n displayDialog: boolean;\n msgs: Message[] = [];\n\n get$: Subscription;\n add$: Subscription;\n edit$: Subscription;\n delete$: Subscription;\n\n constructor(private employeeService: EmployeeService) { }\n\n ngOnInit(): void {\n this.get$ = this.employeeService.getEmployees().subscribe(\n      employees => this.employees = employees,\n      error => this.showError(error)\n    );\n  }\n\n ngOnDestroy() {\n this.get$.unsubscribe();\n    this.add$.unsubscribe();\n    this.edit$.unsubscribe();\n    this.delete$.unsubscribe();\n  }\n\n  ...\n\n  private showError(errMsg: string) {\n    this.msgs = [];\n    this.msgs.push({severity: 'error', \n                    summary: 'Sorry, an error occurred', \n                    detail: errMsg});\n  }\n\n  private showSuccess(successMsg: string) {\n    this.msgs = [];\n    this.msgs.push({severity: 'success', detail: successMsg});\n  }\n}\n\n```", "```ts\nadd() {\n  // create an empty employee\n  this.employeeForDialog = {\n    id: null, firstName: null, lastName: null, profession: null,\n    department: null\n  }; \n  this.displayDialog = true;\n}\n\nedit() {\n  // create a clone of the selected employee\n  this.employeeForDialog = Object.assign({}, this.selectedEmployee);\n  this.displayDialog = true;\n}\n\n```", "```ts\nsave() {\n  if (this.employeeForDialog.id) {\n    // update\n    this.edit$ = \n      this.employeeService.updateEmployee(this.employeeForDialog)\n      .finally(() => {\n        this.employeeForDialog = null;\n        this.displayDialog = false;\n      })\n      .subscribe(() => {\n          this.employees.some((element: Employee, index: number) => {\n            if (element.id === this.employeeForDialog.id) {\n              this.employees[index] = Object.assign({}, \n              this.employeeForDialog);\n              this.employees = [...this.employees];\n              this.selectedEmployee = this.employees[index];\n              return true;\n            }\n          });\n          this.showSuccess('Employee was successfully updated');\n        },\n        error => this.showError(error)\n      );\n  } else {\n    // create\n    this.add$ = \n      this.employeeService.createEmployee(this.employeeForDialog)\n      .finally(() => {\n        this.employeeForDialog = null;\n        this.selectedEmployee = null;\n        this.displayDialog = false;\n      })\n      .subscribe((employee: Employee) => {\n          this.employees = [...this.employees, employee];\n          this.showSuccess('Employee was successfully created');\n        },\n        error => this.showError(error)\n      );\n  }\n}\n\n```", "```ts\nremove() {\n  this.delete$ = \n  this.employeeService.deleteEmployee(this.selectedEmployee.id)\n    .finally(() => {\n      this.employeeForDialog = null;\n      this.selectedEmployee = null;\n    })\n    .subscribe(() => {\n        this.employees = this.employees.filter(\n          (element: Employee) => element.id !== \n          this.selectedEmployee.id);\n        this.showSuccess('Employee was successfully removed');\n      },\n      error => this.showError(error)\n    );\n}\n\n```", "```ts\n<div pDefer (onLoad)=\"loadData()\">\n  <ng-template>\n    deferred content\n  </ng-template>\n</div>\n\n```", "```ts\n<div pDefer (onLoad)=\"loadData()\">\n  <ng-template>\n    <p-dataTable [value]=\"employees\">\n      <p-column field=\"firstName\" header=\"First Name\"></p-column>\n      <p-column field=\"lastName\" header=\"Last Name\"></p-column>\n      <p-column field=\"profession\" header=\"Profession\"></p-column>\n      <p-column field=\"department\" header=\"Department\"></p-column>\n    </p-dataTable>\n  </ng-template>\n</div>\n\n```", "```ts\nloadData(): void {\n  this.employeeService.getEmployees().subscribe(\n    employees => this.employees = employees,\n    error => this.showError(error)\n  );\n}\n\n```", "```ts\n<p-blockUI [blocked]=\"blocked\" [target]=\"pnl\">\n  // any custom content or empty\n</p-blockUI>\n\n<p-panel #pnl header=\"Panel Header\">\n  Content of Panel\n</p-panel>\n\n```", "```ts\n<p-dataTable ... #dtable>\n  ...\n</p-dataTable>\n\n<p-blockUI [blocked]=\"blockedTable\" [target]=\"dtable\">\n  <div class=\"center\">\n    <div class=\"box\">\n      <div class=\"content\">\n        <img src=\"/assets/data/images/loader.svg\"/>\n        <h1>Loading...</h1>\n      </div>\n    </div>\n  </div>\n</p-blockUI>\n\n<p-blockUI [blocked]=\"blockedPage\">\n  <div class=\"center\">\n    <div class=\"box\">\n      <div class=\"content\">\n        <img src=\"/assets/data/images/loader.svg\"/>\n        <h1>Loading...</h1>\n      </div>\n    </div>\n  </div>\n</p-blockUI>\n\n```", "```ts\nexport class DataTableCrudComponent {\n  ...\n  selectedEmployee: Employee;\n  blockedTable: boolean;\n  blockedPage: boolean;\n\n  reload() {\n    this.blockedPage = true;\n    this.employeeService.getEmployees()\n      .finally(() => {this.blockedPage = false;})\n      .subscribe(...);\n  }\n\n  remove() {\n    this.blockedTable = true;\n    this.employeeService.deleteEmployee(this.selectedEmployee.id)\n      .finally(() => {this.blockedTable = false; \n        this.selectedEmployee = null;})\n      .subscribe(...);\n    }\n}\n\n```", "```ts\n<p-growl [value]=\"msgs\"></p-growl>\n\n<h3>Static value</h3>\n<p-progressBar [value]=\"40\"></p-progressBar>\n\n<h3>Dynamic value</h3>\n<p-progressBar [value]=\"value\"></p-progressBar>\n\n```", "```ts\nexport class ProgressBarComponent implements OnInit, OnDestroy {\n  msgs: Message[];\n  value: number;\n  interval$: Subscription;\n\n  ngOnInit() {\n    const interval = Observable.interval(800).take(100);\n    this.interval$ = interval.subscribe(\n      x => this.value = x + 1,\n      () => {/** no error handling */ },\n      () => this.msgs = [{severity: 'info', summary: 'Success', \n        detail: 'Process completed'}]\n    );\n  }\n\n  ngOnDestroy() {\n    this.interval$.unsubscribe();\n  }\n}\n\n```", "```ts\n<p-colorPicker [(ngModel)]=\"color1\"></p-colorPicker>\n\n```", "```ts\ncolor1: string;\ncolor2: any = {r: 100, g: 120, b: 140};\ncolor3: any = {h: 80, s: 50, b: 40};\n\n```", "```ts\n<p-colorPicker [(ngModel)]=\"color3\" inline=\"true\"\n (onChange)=\"change($event)\"></p-colorPicker>\n\n```", "```ts\nchange(event){\n    this.msgs = [];\n    this.msgs.push({severity: 'success', \n summary: 'The color is changed from ColorPicker',\n detail: 'The selected color is ' + event.value});\n}\n\n```", "```ts\nexport interface CanDeactivate<T> {\n  canDeactivate(component: T, route: ActivatedRouteSnapshot,                 \n    state: RouterStateSnapshot):\n    Observable<boolean> | Promise<boolean> | boolean;\n}\n\n```", "```ts\n<h1>This is the first view</h1>\n\n<form novalidate (ngSubmit)=\"onSubmit(f)\" #f=\"ngForm\">\n  <label for=\"username\">Username:</label>\n  <input id=\"username\" name=\"username\" type=\"text\" \n    pInputText [(ngModel)]=\"username\"/>\n  <button type=\"submit\" pButton label=\"Confirm\"></button>\n</form>\n\n<p-confirmDialog header=\"Confirmation\" icon=\"fa fa-question-circle\" \n  width=\"400\">\n</p-confirmDialog>\n\n```", "```ts\nexport class FirstViewComponent {\n  dirty: boolean;\n  username: string;\n\n  constructor(private router: Router) { }\n\n  onSubmit(f: FormGroup) {\n    this.dirty = f.dirty;\n    this.router.navigate(['/chapter9/second-view']);\n  }\n}\n\n```", "```ts\nthis.confirmationService.confirm({\n  message: 'You have unsaved changes. \n  Are you sure you want to leave this page?',\n  accept: () => {\n    // logic to perform a confirmation\n  },\n  reject: () => {\n    // logic to cancel a confirmation\n  }\n});\n\n```", "```ts\n@Injectable()\nexport class UnsavedChangesGuard implements \n  CanDeactivate<FirstViewComponent> {\n\n  constructor(private confirmationService: ConfirmationService) { }\n\n  canDeactivate(component: FirstViewComponent) {\n    // Allow navigation if the form is unchanged\n    if (!component.dirty) { return true; }\n\n    return Observable.create((observer: Observer<boolean>) => {\n      this.confirmationService.confirm({\n        message: 'You have unsaved changes. \n        Are you sure you want to leave this page?',\n        accept: () => {\n          observer.next(true);\n          observer.complete();\n        },\n        reject: () => {\n          observer.next(false);\n          observer.complete();\n        }\n      });\n    });\n  }\n}\n\n```", "```ts\n{path: 'chapter9/first-view', component: FirstViewComponent, \n  canDeactivate: [UnsavedChangesGuard]}\n\n```", "```ts\nreturn new Promise((resolve, reject) => {\n  this.confirmationService.confirm({\n    message: \"You have unsaved changes. \n    Are you sure you want to leave this page?\",\n    accept: () => {\n      resolve(true);\n    },\n    reject: () => {\n      resolve(false);\n    }\n  });\n});\n\n```", "```ts\n<p-steps [model]=\"items\" [(activeIndex)]=\"activeIndex\"></p-steps>\n\n```", "```ts\n<pe-steps [(activeIndex)]=\"activeIndex\" (change)=\"onChange($event)\">\n  <pe-step label=\"First Step\">\n    // content of the first step\n  </pe-step> \n  <pe-step label=\"Second Step\">\n    // content of the second step\n  </pe-step> \n  <pe-step label=\"Third Step\">\n    // content of the third step\n  </pe-step>\n</pe-steps>\n\n```", "```ts\n@Component({\n  selector: 'pe-step',\n  styles: ['.pe-step-container {padding: 45px 25px 45px 25px; \n           margin-bottom: 20px;}'],\n  template: `\n    <div *ngIf=\"active\" [ngClass]=\"'ui-widget-content ui-corner-all\n         pe-step-container'\" [class]=\"styleClass\">\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class StepComponent {\n  @Input() styleClass: string;\n  @Input() label: string;\n  active: boolean = false;\n}\n\n```", "```ts\n@Component({\n  selector: 'pe-steps',\n  template: `\n    <p-steps [model]=\"items\" [(activeIndex)]=\"activeIndex\"\n      [class]=\"styleClass\" [readonly]=\"false\"></p-steps> \n      <ng-content></ng-content>\n      <button pButton type=\"text\" *ngIf=\"activeIndex > 0\"\n        (click)=\"previous()\" icon=\"fa-hand-o-left\" label=\"Previous\">\n      </button>\n      <button pButton type=\"text\" *ngIf=\"activeIndex \n        < items.length - 1\"\n        (click)=\"next()\" icon=\"fa-hand-o-right\" \n          iconPos=\"right\" label=\"Next\"> \n      </button>\n  `\n})\nexport class StepsComponent implements AfterContentInit, OnChanges {\n  @Input() activeIndex: number = 0;\n  @Input() styleClass: string;\n  @Input() stepClass: string;\n  @Output() activeIndexChange: EventEmitter<any> = new EventEmitter();\n  @Output() change = new EventEmitter();\n  items: MenuItem[] = [];\n  @ContentChildren(StepComponent) steps: QueryList<StepComponent>;\n\n  ngAfterContentInit() {\n    this.steps.toArray().forEach((step: StepComponent, \n      index: number) => \n      {\n      ...\n      if (index === this.activeIndex) { step.active = true; }\n\n      this.items[index] = {\n        label: step.label,\n        command: (event: any) => {\n          // hide all steps\n          this.steps.toArray().forEach((s: StepComponent) => \n            s.active = false);\n\n          // show the step the user has clicked on.\n          step.active = true;\n          this.activeIndex = index;\n\n          // emit currently selected index (two-way binding)\n          this.activeIndexChange.emit(index);\n          // emit currently selected label\n          this.change.next(step.label);\n        }\n      };\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.steps) { return; }\n\n    for (let prop in changes) {\n      if (prop === 'activeIndex') {\n        let curIndex = changes[prop].currentValue;\n        this.steps.toArray().forEach((step: StepComponent, \n          index: number) => {\n          // show / hide the step\n          let selected = index === curIndex;\n          step.active = selected;\n          if (selected) {\n            // emit currently selected label\n            this.change.next(step.label);\n          }\n        });\n      }\n    }\n  }\n\n  private next() {\n    this.activeIndex++;\n    // emit currently selected index (two-way binding)\n    this.activeIndexChange.emit(this.activeIndex);\n    // show / hide steps and emit selected label\n    this.ngOnChanges({\n      activeIndex: {\n        currentValue: this.activeIndex,\n        previousValue: this.activeIndex - 1,\n        firstChange: false,\n        isFirstChange: () => false\n      }\n    });\n  }\n\n  ...\n}\n\n```", "```ts\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {StepComponent} from './step.component';\nimport {StepsComponent} from './steps.component';\nimport {ButtonModule} from 'primeng/components/button/button';\nimport {StepsModule} from 'primeng/components/steps/steps';\n\n@NgModule({\n  imports: [CommonModule, ButtonModule, StepsModule],\n  exports: [StepComponent, StepsComponent],\n  declarations: [StepComponent, StepsComponent]\n})\nexport class WizardModule { }\n\n```", "```ts\n<pe-steps [(activeIndex)]=\"activeIndex\" (change)=\"onChange($event)\">\n  <pe-step label=\"First Step\">\n    <label for=\"firstname\">First Name:</label>\n    <input id=\"firstname\" name=\"firstname\" type=\"text\" \n      pInputText [(ngModel)]=\"firstName\"/>\n    <button pButton label=\"Go\" (click)=\"next()\"></button>\n  </pe-step> \n  <pe-step label=\"Second Step\">\n    <label for=\"lastname\">Last Name:</label>\n    <input id=\"lastname\" name=\"lastname\" type=\"text\" \n      pInputText [(ngModel)]=\"lastName\"/>\n    <button pButton label=\"Go\" (click)=\"next()\"></button>\n  </pe-step> \n  <pe-step label=\"Third Step\">\n    <label for=\"address\">Address:</label>\n    <input id=\"address\" name=\"address\" type=\"text\" \n      pInputText [(ngModel)]=\"address\"/>\n    <button pButton label=\"Ok\" (click)=\"ok()\"></button>\n  </pe-step>\n</pe-steps>\n\n<p-growl [value]=\"msgs\"></p-growl>\n\n```", "```ts\nnpm install @ngrx/store @ngrx/core --save\n\n```", "```ts\nexport interface AppStore {\n  employees: Employee[];\n  selectedEmployee: Employee;\n}\n\n```", "```ts\n@Injectable()\nexport class CrudActions {\n  static LOAD_EMPLOYEES = 'LOAD_EMPLOYEES';\n  static CREATE_EMPLOYEE = 'CREATE_EMPLOYEE';\n  static UPDATE_EMPLOYEE = 'UPDATE_EMPLOYEE';\n  static DELETE_EMPLOYEE = 'DELETE_EMPLOYEE';\n\n  loadEmployees(employees: Employee[]): Action {\n    return {type: CrudActions.LOAD_EMPLOYEES, payload: employees};\n  }\n\n  createEmployee(employee: Employee): Action {\n    return {type: CrudActions.CREATE_EMPLOYEE, payload: employee};\n  }\n\n  updateEmployee(employee: Employee): Action {\n    return {type: CrudActions.UPDATE_EMPLOYEE, payload: employee};\n  }\n\n  deleteEmployee(id: string): Action {\n    return {type: CrudActions.DELETE_EMPLOYEE, payload: id};\n  }\n}\n\n```", "```ts\nimport {ActionReducer, Action} from '@ngrx/store';\nimport {AppStore} from './app.store';\nimport {CrudActions} from './crud.actions';\nimport {Employee} from '../model/employee';\n\nconst initialState: AppStore = {employees: [], selectedEmployee: null};\n\nexport const crudReducer: ActionReducer<AppStore> =\n  (state: AppStore = initialState, action: Action): AppStore => {\n switch (action.type) {\n    case CrudActions.LOAD_EMPLOYEES:\n      return {\n        employees: [...action.payload],\n        selectedEmployee: null\n  };\n\n    case CrudActions.DELETE_EMPLOYEE:\n      return {\n        employees: state.employees.filter(\n          (element: Employee) => element.id !== action.payload),\n          selectedEmployee: null\n  };\n\n case CrudActions.CREATE_EMPLOYEE:\n      return {\n        employees: [...state.employees, action.payload],\n        selectedEmployee: null\n  };\n\n case CrudActions.UPDATE_EMPLOYEE:\n      let index = -1;\n      // clone employees array with updated employee\n  let employees = state.employees.map(\n        (employee: Employee, idx: number) => {\n        if (employee.id === action.payload.id) {\n          index = idx;\n          return Object.assign({}, action.payload);\n        }\n        return employee;\n      });\n\n      let selectedEmployee = index >= 0 ? employees[index] : null;\n      return {employees, selectedEmployee};\n\n    default:\n      return state;\n  }\n};\n\n```", "```ts\nimport {StoreModule} from '@ngrx/store';\nimport {CrudActions} from './redux/crud.actions';\nimport {crudReducer} from './redux/crud.reducer';\n\n@NgModule({\n  imports: [\n    ...\n    StoreModule.provideStore({crudReducer})\n  ],\n  providers: [\n    ...\n    CrudActions\n  ],\n  ...\n})\nexport class AppModule { }\n\n```", "```ts\nlet rootReducer = {\n  reducerOne: reducerOne,\n  reducerTwo: reducerTwo, \n  reducerThree: reducerThree,\n  ...\n}\n\nStoreModule.provideStore(rootReducer);\n\n```", "```ts\nconstructor(private http: Http, private crudActions: CrudActions) { }\n\ngetEmployees(): Observable<Action> {\n  return this.http.get('/fake-backend/employees')\n    .map(response => response.json() as Employee[])\n    .map(employees => this.crudActions.loadEmployees(employees))\n    .catch(EmployeeService.handleError);\n}\n\ncreateEmployee(employee: Employee): Observable<Action> {\n  return this.http.post('/fake-backend/employees', employee)\n    .map(response => response.json() as Employee)\n    .map(createdEmployee => \n      this.crudActions.createEmployee(createdEmployee))\n    .catch(EmployeeService.handleError);\n}\n\nupdateEmployee(employee: Employee): Observable<Action> {\n  return this.http.put('/fake-backend/employees', employee)\n    .map(() => this.crudActions.updateEmployee(employee))\n    .catch(EmployeeService.handleError);\n}\n\ndeleteEmployee(id: string): Observable<Action> {\n  return this.http.delete('/fake-backend/employees/' + id)\n    .map(() => this.crudActions.deleteEmployee(id))\n    .catch(EmployeeService.handleError);\n}\n\n```", "```ts\nngOnInit(): void {\n  ...\n\n  this.employeeService.getEmployees().subscribe(\n    action => this.store.dispatch(action),\n    error => this.showError(error)\n  );\n}\n\nremove() {\n  this.employeeService.deleteEmployee(this.selectedEmployee.id)\n    .finally(() => {\n      this.employeeForDialog = null;\n    })\n    .subscribe((action) => {\n        this.store.dispatch(action);\n        this.showSuccess('Employee was successfully removed');\n      },\n      error => this.showError(error)\n    );\n}\n\n```", "```ts\nimport {Store} from '@ngrx/store';\nimport {AppStore} from '../redux/app.store';\n...\n\nconstructor(private store: Store<AppStore>, \n  private employeeService: EmployeeService) { }\n\nngOnInit(): void {\n  this.store.select('crudReducer').subscribe((store: AppStore) => {\n    this.employees = store.employees;\n    this.selectedEmployee = store.selectedEmployee;\n  });\n}\n\n```"]