["```ts\nnpm install -g typescript\n\n```", "```ts\ntsc some.ts another.ts\n\n```", "```ts\nlet success: boolean = true;\n\n```", "```ts\nlet count: number = 20;\n\n```", "```ts\nlet message: string = \"Hello world\";\n\n```", "```ts\nlet ages: number[] = [31, 20, 65];\nlet ages: Array<number> = [31, 20, 65];\n\n```", "```ts\nlet x: [string, number];\nx = [\"age\", 40];    // ok\nx = [40, \"age\"] ;   // error\n\n```", "```ts\nlet some: any = \"some\";\nsome = 10000;\nsome = false;\n\nlet success: boolean = some;\nlet count: number = some;\nlet message: string = some;\n\n```", "```ts\nfunction doSomething(): void {\n  // do something\n}\n\n```", "```ts\nlet x: string = \"foo\";\nx = null;    // error\nlet y: string | null = \"foo\";\ny = null;    // ok\n\n```", "```ts\nlet element = <HTMLCanvasElement> document.getElementById('canvas');\nlet element = document.getElementById('canvas') as HTMLCanvasElement;\n\n```", "```ts\ninterface Person {\n  name: string\n  children?: number\n  isMarried(): boolean\n  (): void\n}\n\n```", "```ts\ninterface Dictionary {\n  [index: number]: string\n}\n\n```", "```ts\nclass Dog {\n private name: string;    // can only be accessed within this class\n readonly owner: string = \"Max\";    // can not be modified\n constructor(name: string) {this.name = name;}\n protected sayBark() { }\n}\n\nlet dog = new Dog(\"Sam\");\ndog.sayBark();  // compiler error because method 'sayBark' is protected and\n                // only accessible within class 'Dog' and its subclasses.\n\n```", "```ts\ninterface Animal {\n  name: string;\n}\n\nclass Dog implements Animal {\n  name: string;\n  // do specific things\n}\n\nclass Sheepdog extends Dog {\n  // do specific things }\n\n```", "```ts\nclass Dog {\n  constructor(private name: string) { }\n\n  // you can now access the property name by this.name\n}\n\n```", "```ts\nenum Color {\n  Red,\n  Green,\n  Blue }\n\nvar color = Color.Red;    // color has value 0\n\n```", "```ts\nfunction add(x: number, y: number): number {\n  return x + y;\n}\n\n```", "```ts\nvar fetchName: (division: Division, customer: Customer) => string;\n\n```", "```ts\nfetchName = function (division: Division, customer: Customer): string {\n  // do something\n}\n\n```", "```ts\nfunction filter(arr: number[], callback: (item: number) => boolean): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (callback(arr[i])) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\n```", "```ts\nlet result = filter([1, 2, 3, 4], (item: number) => item > 3);\n\n```", "```ts\nfunction doSomething(param1: string, param2?: string) {\n // ... }\n\n```", "```ts\nfunction doSomething(param1: string, param2 = \"some value\") {\n // ... }\n\n```", "```ts\ndoSomething(\"just one value\");\n\n```", "```ts\nfunction reverseAndMerge<T>(arr1: T[], arr2: T[]): T[] {\n  return arr1.reverse().concat(arr2.reverse());\n}\n\nlet arr1: number[] = [1, 2, 3];\nlet arr2: number[] = [4, 5, 6];\nlet arr = reverseAndMerge(arr1, arr2);\n\n```", "```ts\ninterface GenericArrayFn<T> {\n  (arr1: T[], arr2: T[]): T[];\n}\n\nlet arr: GenericArrayFn<number> = reverseAndMerge;\n\n```", "```ts\nclass GenericValue<T> {\n  constructor(private value: T) { }\n  increment: (x: T) => T;\n  decrement: (x: T) => T;\n}\n\nlet genericValue = new GenericValue<number>(5);\ngenericValue.increment = function (x) {return ++x;};\ngenericValue.decrement = function (x) {return --x;};\n\n```", "```ts\n// export data\nexport let color: string = \"red\";\n\n// export function\nexport function sum(num1: number, num2: number) {\n  return num1 + num1;\n}\n\n// export class\nexport class Rectangle {\n  constructor(private length: number, private width: number) { }\n}\n\n```", "```ts\nclass Rectangle {\n  constructor(private height: number, private width: number) { }\n}\n\nexport {Rectangle as rect};\n\n```", "```ts\nimport {sum} from \"./lib.js\";\nimport {Rect, Circle} from \"./lib.js\";\n\nlet sum = sum(1, 2);\nlet rect = new Rect(10, 20);\n\n```", "```ts\nimport * as lib from \"./lib.js\";\n\nlet sum = lib.sum(1, 2);\n\n```", "```ts\nimport {sum as add} from \"./lib.js\";\n\nlet sum = add(1, 2);\n\n```", "```ts\nvar value: string | string[] = 'some';\nlet length = value.length;\n\n```", "```ts\ninterface Bike {\n  gears: number;\n}\n\ninterface Car {\n  gears: number;\n  model: string;\n}\n\nvar transport: Bike | Car = {gears: 1};\ntransport.model = \"Audi\";    // compiler error\n\n```", "```ts\ntype PrimitiveArray = Array<string|number|boolean>;\ntype Callback = () => number;\ntype PrimitiveArrayOrCallback = PrimitiveArray | Callback;\n\n```", "```ts\nfunction doSomething(n: PrimitiveArrayOrCallback): number {\n  ...\n}\n\n```", "```ts\nvar x = \"hello\";\nvar y = 99;\n\n```", "```ts\nlet animal = [new Dog(), new Sheepdog()];\n\n```", "```ts\nclass Fish {\n  kind: string;\n}\n\nlet animal = [new Dog(), new Sheepdog(), new Fish()];\n\n```", "```ts\nlet isEmpty: (param: string) => boolean;\nisEmpty = function(x) {return x === null || x.length === 0};\n\n```", "```ts\nconst log = (target: Object, key: string | symbol, descriptor: PropertyDescriptor) => {\n  // save a reference to the original method\n  var originalMethod = descriptor.value;\n  // replace the original function\n descriptor.value = function(...args: any[]) {\n    console.log(\"Arguments: \", args.join(\", \"));\n    const result = originalMethod.apply(target, args);\n    console.log(\"Result: \", result);\n    return result;\n  }\n return descriptor;\n}\n\nclass Rectangle {\n  @log\n  area(height: number, width: number) {\n    return height * width;\n  }\n}\n\nlet rect = new Rectangle();\nlet area = rect.area(2, 3);\n\n```", "```ts\nclass Rectangle {\n  @log(\"debug\")\n  @persist(\"localStorage\")\n  area(height: number, width: number) {\n    return height * width;\n  }\n}\n\n```", "```ts\nnpm install reflect-metadata --save\n\n```", "```ts\nlet typeOfKey = Reflect.getMetadata(\"design:type\", target, key);\n\n```", "```ts\ndeclare function parseInt(s: string, radix?: number): number;\n\n```", "```ts\nnpm install @types/<library name> --save-dev\n\n```", "```ts\nnpm install @types/jquery --save-dev\n\n```", "```ts\n\"lib\": [\"es2015\", \"dom\"]\n\n```", "```ts\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"noImplicitAny\": true,\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"outDir\": \"dist\",\n    \"lib\": [\"es2015\", \"dom\"]\n  },\n  \"types\": [\"node\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}\n\n```", "```ts\nimport {Injectable, Component} from '@angular/core';\n\n@Injectable()\nexport class ProductService {\n  products: Product[];\n\n  getProducts(): Array<Product> {\n    // retrieve products from somewhere...\n    return products;\n  }\n}\n\n@Component({\n  selector: 'product-count',\n  template: `<h2 class=\"count\">Found {{products.length}} products</h2>`,\n  styles: [`\n    h2.count {\n      height: 80px;\n      width: 400px;\n    }\n  `]\n})\nexport default class ProductComponent {\n  products: Product[] = [];\n\n  constructor(productService: ProductService) {\n    this.products = productService.getProducts();\n  }\n}\n\n```", "```ts\n{provide: MyService, useClass: MyMockService}\n{provide: MyService, useFactory: () => {return new MyMockService()}}\n{provide: MyValue, useValue: 50}\n\n```", "```ts\n<p>Selected car is {{currentCar.model}}</p>\n\n```", "```ts\n<img [src]=\"imageUrl\">\n<button [disabled]=\"formValid\">Submit</button>\n\n```", "```ts\n<button [attr.aria-expanded]=\"expanded\" [attr.aria-controls]=\"controls\">\n  Click me\n</button>\n\n```", "```ts\n<button (click)=\"onSave()\">Save</button>\n\n```", "```ts\n<input [value]=\"name\" (input)=\"name=$event.target.value\">\n\n```", "```ts\n<input [(ngModel)]=\"username\">\n\n```", "```ts\n<input [value]=\"username\" (input)=\"username=$event.target.value\">\n\n```", "```ts\n<input #username>\n<button (click)=\"submit(username.value)\">Ok</button>\n\n```", "```ts\n<form #someForm=\"ngForm\">\n  <input name=\"name\" required [(ngModel)]=\"name\">\n  ...\n  <button type=\"submit\" [disabled]=\"!someForm.form.valid\">Ok</button>\n</form>\n\n```", "```ts\nRelease date: {{releaseDate | date: 'longDate'}}\n// Output: \"August 30, 2017\"\n\n```", "```ts\n<div *ngIf=\"show\">\n  <h2>ngIf</h2>\n</div>\n\n```", "```ts\n<div *ngIf=\"showAngular; else showWorld\">\n  Hello Angular\n</div>\n<ng-template #showWorld>\n  Hello World\n</ng-template>\n\n```", "```ts\n<ui>\n  <li *ngFor=\"let person of people\">\n    {{person.name}}\n  </li>\n</ui>\n\n```", "```ts\n<div [ngSwitch]=\"choice\">\n  <h2 *ngSwitchCase=\"'one'\">One</h3>\n  <h2 *ngSwitchCase=\"'two'\">Two</h3>\n  <h2 *ngSwitchDefault>Many</h3>\n</div>\n\n```", "```ts\n<div [ngClass]=\"{selected: isSelected, disabled: isDisabled}\">\n\n```", "```ts\n<div [ngStyle]=\"{'color': 'red', 'font-weight': 'bold', 'border-top': borderTop}\">\n\n```", "```ts\n@Component({\n  selector: 'todo-child',\n  template: `<h2>{{todo.title}}</h2>`\n})\nexport class TodoChildComponent {\n  @Input() todo: Todo;\n}\n\n```", "```ts\n<todo-child [todo]=\"todo\"></todo-child>\n\n```", "```ts\n@Component({\n  selector: 'confirmation-child',\n  template: `\n    <button (click)=\"accept(true)\">Ok</button>\n    <button (click)=\"accept(false)\">Cancel</button>\n  `\n})\nexport class ConfirmationChildComponent {\n  @Output() onAccept = new EventEmitter<boolean>();\n\n  accept(accepted: boolean) {\n    this.onAccept.emit(accepted);\n  }\n}\n\n```", "```ts\n@Component({\n  selector: 'confirmation-parent',\n  template: `\n    Accepted: {{accepted}}\n    <confirmation-child (onAccept)=\"onAccept($event)\"></confirmation-child>\n  `\n})\nexport class ConfirmationParentComponent {\n  accepted: boolean = false;\n\n  onAccept(accepted: boolean) {\n    this.accepted = accepted;\n  }\n}\n\n```", "```ts\nconstructor(private http: Http) {}\n\ngetCars(): Obvervable<Car[]> {\n  return this.http.get(\"../data/cars.json\")\n    .map(response => response.json().data as Car[]);\n}\n\n```", "```ts\n@Injectable()\nexport class TodoService {\n  private subject = new Subject();\n\n  toggle(todo: Todo) {\n    this.subject.next(todo);\n  }\n\n  subscribe(onNext, onError, onComplete) {\n    this.subject.subscribe(onNext, onError, onComplete);\n  }\n}\n\n```", "```ts\nexport class TodoComponent {\n  constructor(private todosService: TodosService) {}\n\n  toggle(todo: Todo) {\n    this.todosService.toggle(todo);\n  }\n}\n\nexport class TodosComponent {\n  constructor(private todosService: TodosService) {\n    todosService.subscribe(\n      function(todo: Todo) { // TodoComponent sent todo object },\n      function(e: Error) { // error occurs },\n      function() { // completed }\n    );\n  }\n}\n\n```", "```ts\n<form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\" novalidate>\n  <label for=\"name\">Name</label>\n  <input type=\"text\" id=name\" name=\"name\" required\n         [(ngModel)]=\"name\" #i=\"ngModel\"> \n  <div [hidden]=\"i.valid || i.pristine\">\n    Name is required\n  </div>\n  <button>Submit</button>\n</form>\n\n// Output values and states\nInput value: {{i.value}}\nIs input valid? {{i.valid}}\nInput visited? {{i.touched}}\nInput value changed? {{i.dirty}}\nForm input values: {{f.value | json}}\nIs form valid? {{f.valid}}\nForm visited? {{f.touched}}\nForm input values changed? {{f.dirty}}\n\n```", "```ts\ninput.ng-dirty.ng-invalid {\n  border: solid 1px red;\n}\n\n```", "```ts\nconst router: Routes = [\n  {path: '', redirectTo: 'home', pathMatch: 'full'},\n  {path: 'home', component: HomeComponent},\n  {path: 'books', component: BooksComponent}\n];\n\n```", "```ts\nconst routes:  ModuleWithProviders  =  RouterModule.forRoot(router);\n\n```", "```ts\nproviders: [{provide: LocationStrategy, useClass: HashLocationStrategy}]\n\n```", "```ts\nproviders: [{provide: APP_BASE_HREF, useValue: '/'}]\n\n```", "```ts\n<a [routerLink]=\"['/']\">Home</a>\n<a [routerLink]=\"['/books']\">Books</a>\n\n<router-outlet></router-outlet>\n\n```", "```ts\nimport {Router} from '@angular/router';\n\n...\n\nexport class HomeComponent {\n\n  constructor(private router: Router) { }\n\n  gotoBooks() {\n    this.router.navigate(['/books']);\n  }\n}\n\n```", "```ts\nconst router: Routes = [\n  ...\n  {path: 'books/:id', component: BookComponent}\n];\n\n```", "```ts\nimport {ActivatedRoute} from '@angular/router';\n\n...\n\nexport class BooksComponent {\n  book: string;\n\n  constructor(private route: ActivatedRoute) {\n    this.book = route.snapshot.params['id'];\n  }\n}\n\n```", "```ts\n<router-outlet name=\"author\"></router-outlet>\n\n```", "```ts\n{path: 'author', component: AuthorComponent, outlet: 'author'}\n\n```", "```ts\nimport {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {FormsModule} from '@angular/forms';\nimport {APP_BASE_HREF} from '@angular/common';\n\n// PrimeNG modules needed in this example\nimport {ButtonModule} from 'primeng/components/button/button';\nimport {InputTextModule} from 'primeng/components/inputtext/inputtext';\n\nimport {AppComponent} from './app.component';\nimport {SectionComponent} from './section/section.component';\nimport {routes} from './app-routing.module';\n\n@NgModule({\n  imports: [BrowserModule, BrowserAnimationsModule, FormsModule,\n            routes, ButtonModule, InputTextModule],\n  declarations: [AppComponent, SectionComponent],\n  providers: [{provide: APP_BASE_HREF, useValue: '/'}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n```", "```ts\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {AppModule} from './app';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n```", "```ts\nimport {platformBrowser} from '@angular/platform-browser';\nimport {AppModuleNgFactory} from './app.ngfactory';\n\nplatformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n\n```", "```ts\n{path: \"section\", loadChildren: \"app/section/section.module#SectionModule\"}\n\n```", "```ts\nimport {Component, OnInit, OnChanges, SimpleChange} from '@angular/core';\n\n@Component({\n  selector: 'greeting-component',\n  template: `<h1>Hello {{text}}</h1>`\n})\nexport class GreetingComponent implements OnInit, OnChanges {\n  @Input text: string;\n\n  constructor() { }\n\n  ngOnInit() {\n    text = \"Angular\";\n  }\n\n  ngOnChanges(changes: {[propertyName: string]: SimpleChange}) {\n    console.log(changes.text);\n    // changes = {'text': {currentValue: 'World', previousValue: {}}}\n    // changes = {'text': {currentValue: 'Angular', \n                  previousValue: 'World'}}\n  }\n}\n\n```", "```ts\n<greeting-component [text]=\"World\"></greeting-component>\n\n```", "```ts\nexport @Component({\n  selector: 'greeting-component',\n  template: `<div><ng-content></ng-content> {{text}}</div>`\n})\nclass GreetingComponent {\n  @Input text: string;\n}\n\n```", "```ts\n<greeting-component [text]=\"World\"><b>Hello</b></greeting-component>\n\n```", "```ts\nnpm install systemjs --save\n\n```", "```ts\n<script src=\"../node_modules/typescript/lib/typescript.js\"></script>\n<script src=\"../node_modules/core-js/client/shim.min.js\"></script>\n<script src=\"../node_modules/zone.js/dist/zone.js\"></script>\n<script src=\"../node_modules/systemjs/dist/system.src.js\"></script>\n<script src=\"../systemjs.config.js\"></script>\n\n<script>\n  System.import('app').catch(function (err) {\n    console.error(err);\n  });\n</script>\n\n```", "```ts\nSystem.config({\n  transpiler: 'typescript',\n  typescriptOptions: {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true\n  },\n  map: {\n    '@angular/animations':\n      'node_modules/@angular/animations/bundles/animations.umd.min.js',\n    '@angular/common':\n      'node_modules/@angular/common/bundles/common.umd.min.js',\n    '@angular/compiler':\n      'node_modules/@angular/compiler/bundles/compiler.umd.min.js',\n    '@angular/core': \n      'node_modules/@angular/core/bundles/core.umd.min.js',\n    '@angular/forms':\n      'node_modules/@angular/forms/bundles/forms.umd.min.js',\n    ...\n    'rxjs': 'node_modules/rxjs',\n    'app': 'src'\n  },\n  meta: {\n    '@angular/*': {'format': 'cjs'}\n  },\n  packages: {\n    'app': {\n      main: 'main',\n      defaultExtension: 'ts'\n    },\n    'rxjs': {main: 'Rx'}\n});\n\n```", "```ts\nnpm install primeng --save\n\n```", "```ts\nSystem.config({\n  ...\n  map: {\n    ...\n    'primeng': 'node_modules/primeng'\n  },\n  packages: {\n    'primeng': {\n      defaultExtension: 'js'\n    },\n    ...\n  }\n});\n\n```", "```ts\nimport  {AccordionModule, MenuItem} from 'primeng/primeng';\n\n```", "```ts\nimport {AccordionModule} from 'primeng/components/accordion/accordion';\nimport {MenuItem} from 'primeng/components/common/api';\n\n```", "```ts\nimport {ButtonModule} from 'primeng/components/button/button';\nimport {InputTextModule} from 'primeng/components/inputtext/inputtext';\n\n```", "```ts\n<link rel=\"stylesheet\" type=\"text/css\"\n      href=\"../node_modules/primeng/resources/themes/bootstrap/theme.css\"/>\n<link rel=\"stylesheet\" type=\"text/css\"\n      href=\"../node_modules/primeng/resources/primeng.min.css\"/>\n<link rel=\"stylesheet\" type=\"text/css\"\n      href=\"src/assets/icons/css/font-awesome.min.css\"/>\n\n```", "```ts\nentry: {\n  'main': './main.jit.ts',\n  'polyfill': './polyfill.ts'\n}\n\n```", "```ts\nentry: {\n  'main': './main.aot.ts',\n  'polyfill': './polyfill.ts'\n}\n\n```", "```ts\noutput: {\n  filename: '[name].js',\n  chunkFilename: '[name].js'\n}\n\n```", "```ts\noutput: {\n  filename: '[name].[chunkhash].js',\n  chunkFilename: '[name].[chunkhash].js'\n}\n\n```", "```ts\nmodule: {\n  rules: [\n    {test: /.json$/, loader: 'json-loader'},\n    {test: /.html$/, loader: 'raw-loader'},\n    ...\n  ]\n}\n\n```", "```ts\n{test: /.ts$/, loaders: ['awesome-typescript-loader', 'angular2-template-loader']}\n\n```", "```ts\n{test: /.ts$/, loader: '@ngtools/webpack'}\n\n```", "```ts\nplugins: [\n  new CommonsChunkPlugin({\n    name: 'manifest',\n    minChunks: Infinity\n  }),\n  ...\n]\n\n```", "```ts\nnew AotPlugin({\n  tsConfigPath: './tsconfig.json',\n  entryModule: path.resolve(__dirname, '..') + \n               '/src/app/app.module#AppModule'\n})\n\n```", "```ts\nnew UglifyJsPlugin({\n  compress: {\n    dead_code: true,\n    unused: true,\n    warnings: false,\n    screw_ie8: true\n  },\n  ...\n})\n\n```", "```ts\n\"primeng\": \"~2.0.2\",\n\"font-awesome\": \"~4.7.0\"\n\n```", "```ts\n{test: /.css$/, loader: ExtractTextPlugin.extract({\n fallback: \"style-loader\",\n    use: \"css-loader\"\n  })\n},\n{test: /.scss/, loader: ExtractTextPlugin.extract({\n fallback: \"style-loader\",\n    use: ['css-loader', 'sass-loader']\n  }),\n  exclude: /^_.*.scss/ }\n...\nplugins: [\n new ExtractTextPlugin({\n    filename: \"[name].css\"  // file name of the bundle\n  }),\n  ...\n]\n\n```", "```ts\n// vendor files (imported from node_modules)\n@import \"~primeng/resources/themes/bootstrap/theme.css\";\n@import \"~primeng/resources/primeng.min.css\";\n@import \"~font-awesome/css/font-awesome.min.css\";\n\n// base project stuff (common settings)\n@import \"global\";\n\n// specific styles for components\n@import \"../../app/app.component\";\n@import \"../../app/section/section.component\";\n\n```", "```ts\nimport './assets/css/main.scss';\n\n```", "```ts\n\"start\": webpack-dev-server --config config/webpack.dev.js --inline --open\n\"start:prod\": webpack-dev-server --config config/webpack.prod.js --inline --open\n\n```", "```ts\nnpm install -g @angular/cli\n\n```", "```ts\nng new primeng-angularcli-setup --style=scss\n\n```", "```ts\nng serve\n\n```", "```ts\nng build\n\n```", "```ts\nng generate component path/name\n\n```", "```ts\nng generate component shared/message\n\n```", "```ts\ninstalling component\n create src/app/shared/message/message.component.scss\n create src/app/shared/message/message.component.html\n create src/app/shared/message/message.component.spec.ts\n create src/app/shared/message/message.component.ts\n update src/app/app.module.ts \n\n```", "```ts\nng generate service path/name\n\n```", "```ts\nnpm install primeng --save\nnpm install font-awesome --save\n\n```", "```ts\n\"styles\": [\n  \"styles.css\",\n  \"../node_modules/primeng/resources/themes/bootstrap/theme.css\",\n  \"../node_modules/primeng/resources/primeng.min.css\",\n  \"../node_modules/font-awesome/css/font-awesome.min.css\"\n]\n\n```"]