["```ts\ndescribe(\"Test suite\", function() {\n  it(\"contains spec with an expectation\", function() {\n    expect(true).toBe(true);\n  });\n});\n```", "```ts\nng g component auto-list\n```", "```ts\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { AutoListComponent } from './auto-list.component';\n```", "```ts\ndescribe('AutoListComponent', () => {\n    let component: AutoListComponent;\n    let fixture: ComponentFixture<AutoListComponent>;\nbeforeEach(async(() => {\n    TestBed.configureTestingModule({\n    declarations: [ AutoListComponent]\n })\n .compileComponents();\n }));\n\nbeforeEach(() => {\n    fixture = TestBed.createComponent(AutoListComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n});\n```", "```ts\nit('should create', () => {\n expect(component).toBeTruthy();\n });\n```", "```ts\nng test\n```", "```ts\nit(`should have as title 'testing-app'`, () => {\n const fixture = TestBed.createComponent(AppComponent);\n const app = fixture.debugElement.componentInstance;\n expect(app.title).toEqual('AutoStop');\n});\n```", "```ts\nit('should render title in a h1 tag', () => {\n const fixture = TestBed.createComponent(AppComponent);\n fixture.detectChanges();\n const compiled = fixture.debugElement.nativeElement;\n expect(compiled.querySelector('h1').textContent).toContain('Welcome to \n  AutoStop');\n});\n```", "```ts\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n selector: 'app-auto-list',\n templateUrl: './auto-list.component.html',\n styleUrls: ['./auto-list.component.scss']\n})\nexport class AutoListComponent implements OnInit {\n\ncars = [\n { 'id': '1', 'name': 'BMW' },\n { 'id': '2', 'name': 'Force Motors' },\n { 'id': '3', 'name': 'Audi' }\n ];\n\n tab = \"1\";\n\n constructor() { }\n\n ngOnInit() {\n }\n\n findAuto() {\n     console.log(\"Method findAuto has been called\");\n  }\n\n}\n```", "```ts\n<h4 class=\"c2\">ngFor directive</h4>\n<ul class=\"cars-list\">\n <li *ngFor=\"let car of cars\">\n <a [routerLink]=\"[car.id]\">{{ car.name }}</a>\n </li>\n</ul>\n\n<h4 class=\"c1\">ngIf directive</h4>\n<div *ngIf=\"cars.length\" id=\"carLength\">\n <p>You have {{cars.length}} vehicles</p>\n</div>\n\n<h4 class=\"c3\">ngSwitch directive</h4>\n<div [ngSwitch]=\"tab\" class=\"data-tab\">\n <p>This is ngSwitch example</p>\n <div *ngSwitchCase=\"1\">ngSwitch Case 1</div>\n <div *ngSwitchCase=\"2\">ngSwitch Case 2</div>\n</div>\n<hr>\n\n<button (click)=\"findAuto()\" id=\"btn\">Click to findAutoDealers</button>\n```", "```ts\n// ngFor test case to test the count is 4\n it('Should have 3 Brands coming from ngFor directive', async(() => {\n const fixture = TestBed.createComponent(AutoListComponent);\n fixture.detectChanges();\n const el = fixture.debugElement.queryAll(By.css('.cars-list > li'));\n expect(el.length).toBe(3);\n }));\n```", "```ts\n// ngIf test script\n it('Test ngIf directive in component', async(() => {\n const fixture = TestBed.createComponent(AutoListComponent);\n fixture.detectChanges();\n const compiled = fixture.debugElement.nativeElement;\n const el = compiled.querySelector('#carLength');\n fixture.detectChanges();\n const content = el.textContent;\n expect(content).toContain('vehicles', 'vehicles');\n }));\n```", "```ts\n// ngSwitch test script\n it('Test ngSwitch directive in component', async(() => {\n const fixture = TestBed.createComponent(AutoListComponent);\n fixture.detectChanges();\n const compiled = fixture.debugElement.nativeElement;\n const el = compiled.querySelector('.data-tab > div');\n const content = el.textContent;\n expect(content).toContain('ngSwitch Case 1');\n }));\n```", "```ts\n// Test button is clicked\n it('should test the custom directive', async(() => {\n const fixture = TestBed.createComponent(AutoListComponent);\n component = fixture.componentInstance;\n fixture.detectChanges();\n spyOn(component, 'findAuto');\n component.findAuto();\n expect(component.findAuto).toHaveBeenCalled();\n\n}));\n```", "```ts\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n <a class=\"navbar-brand\" href=\"#\">AutoStop </a>\n <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" \n    data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" \n    aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n <span class=\"navbar-toggler-icon\"></span>\n </button>\n\n<div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n <ul class=\"navbar-nav mr-auto\">\n <li class=\"nav-item active\">\n <a class=\"nav-link\" routerLink=\"/list-cars\">Cars <span class=\"sr-only\">\n   (current)</span></a>\n </li>\n <li class=\"nav-item\">\n <a class=\"nav-link\" routerLink=\"/list-trucks\">Trucks</a>\n </li>\n </ul>\n </div>\n</nav>\n```", "```ts\n// Check the app has 2 links\n it('should check routerlink', () => {\n const fixture = TestBed.createComponent(MenuComponent);\n fixture.detectChanges();\n const compiled = fixture.debugElement.nativeElement;\n\nlet linkDes = fixture.debugElement.queryAll(By.css('.nav-link'));\n expect(linkDes.length).toBe(2);\n\n});\n```", "```ts\n// Check the app has first link as \"List Cars\"\n it('should check that the first link is list-cars ', () => {\n const fixture = TestBed.createComponent(MenuComponent);\n fixture.detectChanges();\n const compiled = fixture.debugElement.nativeElement;\n\n let linkDes = fixture.debugElement.queryAll(By.css('.nav-link'));\n\n expect(linkDes[0].properties.href).toBe('/list-cars', '1st link should  \n    go to Dashboard');\n });\n```", "```ts\n// Check the app if \"List Cars\" link exist\n it('should have a link to /list-cars', () => {\n const fixture = TestBed.createComponent(AppComponent);\n fixture.detectChanges();\n const compiled = fixture.debugElement.nativeElement;\n let linkDes = fixture.debugElement.queryAll(By.css('.nav-link'));\n const index = linkDes.findIndex(de => {\n return de.properties['href'] === '/list-cars';\n });\n expect(index).toBeGreaterThan(-1);\n });\n```", "```ts\nng generate service services/dealers\n```", "```ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DealersService {\n  dealers: any;\n\n  constructor(private http : HttpClient) { }\n\n  getDealers(){\n    this.dealers = [\n      { id: 1, name: 'North Auto'},\n      { id: 2, name: 'South Auto'},\n      { id: 3, name: 'East Auto'},\n      { id: 4, name: 'West Auto'},\n    ];\n\n    return this.dealers;\n  }\n\n}\n```", "```ts\nit('Test Dependency Injection to get 4 dealers', () => {\nconst service: DealersService = TestBed.get(DealersService);\nlet dealers = service.getDealers();\nexpect(dealers.length).toBe(4);\n});\n```", "```ts\nit('Test if the first Dealer is North Auto', () => {\nconst service: DealersService = TestBed.get(DealersService);\nlet dealers = service.getDealers();\nexpect(dealers[0].name).toBe('North Auto');\n});\n```", "```ts\nexport class Dealers {\n\n constructor(\n  public username: string = '',\n  public name: string = ''\n ) {};\n\n}\n```", "```ts\ngetDealerObject()\n {\n this.dealerObj= new Dealers('World','Auto');\n return this.dealerObj;\n }\n```", "```ts\n it('Test if the dealer returned from object is World Auto', () => {\n const service: DealersService = TestBed.get(DealersService);\n let dealerObj = service.getDealerObject();\n expect(dealerObj.name).toBe('Auto');\n });\n```", "```ts\n\nit('should return the correct properties', () => {\nvar dealer = new Dealers();\ndealer.username = 'NorthWest';\ndealer.name = 'Auto';\n\nexpect(dealer.username).toBe('NorthWest');\nexpect(dealer.name).toBe('Auto');\n\n});\n```", "```ts\nimport { DealersService } from '../services/dealers.service';\nconstructor(private _dealersService : DealersService) { }\nfindAuto() {\n this.dealers = this._dealersService.getDealers();\n return this.dealers;\n }\n```", "```ts\nimport { DealersService } from '../services/dealers.service';\nbeforeEach(() => {\n fixture = TestBed.createComponent(AutoListComponent);\n component = fixture.componentInstance;\n fixture.detectChanges();\n service = TestBed.get(DealersService);\n });\n```", "```ts\nit('should click a button and call method findAuto', async(() => {\n    const fixture = TestBed.createComponent(AutoListComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    spyOn(component, 'findAuto');\n    let dealers = component.findAuto();\n    expect(dealers.length).toEqual(4);\n\n  }));\n```", "```ts\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders, HttpParams, HttpErrorResponse } from '@angular/common/http';\nreadonly REST_ENDPOINT = 'https://jsonplaceholder.typicode.com/users';\nreadonly DEALER_REST_ENDPOINT = 'https://jsonplaceholder.typicode.com/users/1';\nprivate _carurl = 'http://localhost:3000/cars';\n```", "```ts\ngetAllDealers()\n{\nthis.allDealers = this.http.get(this.REST_ENDPOINT,\n{\nheaders: new HttpHeaders().set('Accept', 'aplication/json')\n});\nreturn this.allDealers;\n}\n\ngetDealerById(){\nlet params = new HttpParams().set('id', '1');\nthis.dealerDetails = this.http.get(this.REST_ENDPOINT, {params});\nreturn this.dealerDetails;\n}\n```", "```ts\nfindAuto() {\n this.dealers = this._dealersService.getDealers();\n return this.dealers;\n }\n\nlistAllDealers(){\n this.allDealers = this._dealersService.getAllDealers();\n }\n\nlistDealerById(){\n this.showDealerInfo = true;\n this.dealerDetail = this._dealersService.getDealerById();\n return this.dealerDetail;\n }\n\ngetCarList() {\n this.carList = this.http.get<Cars[]>(this._carurl);\n }\n```", "```ts\n// Test HTTP Request From Component\n it('Test HTTP Request Method', async(() => {\n const fixture = TestBed.createComponent(AutoListComponent);\n\n component = fixture.componentInstance; \n httpMock = TestBed.get(HttpTestingController);\n\n let carList = component.getCarList();\n\n fixture.detectChanges();\n const req = httpMock.expectOne('http://localhost:3000/cars');\n\n expect(req.request.method).toBe('GET');\n req.flush({});\n\n }));\n```", "```ts\nit('Test HTTP Request GET Method With subscribe', async(() => {\nconst fixture = TestBed.createComponent(AutoListComponent);\ncomponent = fixture.componentInstance;\ncomponent.listDealerById().subscribe(result => \nexpect(result.length).toBeGreaterThan(0));\n\n}));\n```", "```ts\nit('Test if the first Dealer is North Auto', () => {\nconst service: DealersService = TestBed.get(DealersService);\nlet dealers = service.getDealers();\nexpect(dealers[0].name).toBe('North Auto');\n});\n```"]