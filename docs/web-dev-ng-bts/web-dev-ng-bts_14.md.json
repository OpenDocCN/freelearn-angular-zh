["```ts\n ng g directive onFocusBlur\n```", "```ts\n      import { Directive } from '@angular/core';\n      import { HostListener, HostBinding } from '@angular/core';\n\n      @Directive({\n      selector: '[appOnFocusBlur]'\n      })\n      export class OnFocusBlurDirective {\n\n      constructor() { }\n\n      @HostBinding(\"style.background-color\") backgroundColor;\n\n      @HostListener('focus') onFocus() {\n        this.backgroundColor = '#19ffe4';\n      }\n\n      @HostListener('blur') onBlur() {\n        this.backgroundColor = '#ff1934';\n      }\n\n      }\n```", "```ts\n      <input type=\"text\" appOnFocusBlur class=\"nav-search\" >\n```", "```ts\nloginForm = new FormGroup({\n firstName: new FormControl('',[Validators.required, \n Validators.maxLength(15)]),\n lastName: new FormControl('',[Validators.required]),\n });\n```", "```ts\nng g c customFormValidation\n```", "```ts\nng g directive validISBN\n```", "```ts\nimport { Directive } from  '@angular/core'; import { NG_VALIDATORS, ValidationErrors, Validator, FormControl } from  '@angular/forms'; \n@Directive({\n    selector: '[validISBN]',\n    providers: [\n         { provide: NG_VALIDATORS, \n            useExisting: ValidISBNDirective, multi: true }\n    ]\n})  \nexport  class ValidISBNDirective implements Validator { static validateISBN(control: FormControl): ValidationErrors | null {       \n if (control.value.length <  13) {\n return { isbn: 'ISBN number must be 13 digit long' };        }\n if (!control.value.startsWith('Packt')) {\n return { isbn: 'Value should start with Packt' };        }\n return  null;\n    }\n\n    validate(c: FormControl): ValidationErrors | null {        return ValidISBNDirective.validateISBN(c);    }\n}\n```", "```ts\nnpm install angularfire2 \n```", "```ts\nng g service appAuth\n```", "```ts\nimport { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { auth } from 'firebase/app';\nimport { Router } from '@angular/router';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class AppAuthService {\n\n    private authUser:any;\n    private authState:any;\n    private loggedInUser = false;\n    private userToken ='';\n\nconstructor(public afAuth: AngularFireAuth, private router :Router) { }\n\nlogin() {\nthis.afAuth.auth.signInWithPopup(new auth.GoogleAuthProvider());\n\nthis.loggedInUser = true;\n\nthis.afAuth.currentUser.getIdToken(true).then(token => this.userToken = token);\n\nthis.afAuth.authState.subscribe((auth) => {\nthis.authState = auth;\n});\n\nthis.router.navigate(['/profile']);\n}\n\nisLoggedInUser(){\nif(this.userToken != '')\nreturn true;\nelse \nreturn false;\n}\n\nlogout() {\nthis.afAuth.auth.signOut();\nthis.loggedInUser = false;\nthis.userToken = '';\n}\n\n}\n```", "```ts\nthis.afAuth.auth.signInWithPopup(new auth.GoogleAuthProvider());\n```", "```ts\n<div *ngIf=\"!_appAuthService.loggedInUser\">\n<form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n\n<label>\nFirst Name:\n<input type=\"text\" formControlName=\"firstName\">\n</label>\n\n<label>\nLast Name:\n<input type=\"text\" formControlName=\"lastName\">\n</label>\n\n<button>Login</button>\n\n</form>\n</div>\n```", "```ts\nonSubmit(){\n this._appAuthService.login();\n console.warn(this.loginForm.value);\n }\n```", "```ts\n<div *ngIf=\"_appAuthService.isLoggedInUser\">\n<p>\nprofile works!\n</p>\n\nUser Token is {{_appAuthService.userToken}}\n</div>\n```", "```ts\n<nav>\n <a routerLink='/login' *ngIf=\"!_appAuthService.isLoggedInUser()\">Login</a>\n <a routerLink='/register'>Register</a>\n <a routerLink='/logout' *ngIf=\"_appAuthService.isLoggedInUser()\">Logout</a>\n</nav>\n```", "```ts\n ngOnInit() {\n this._appAuthService.logout();\n this.router.navigate(['/login']);\n }\n```", "```ts\nng g service services/auth\n```", "```ts\nng g c login\nng g c profile\n```", "```ts\nnpm i bootstrap \n```", "```ts\nnpm i jquery \n```", "```ts\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n <a class=\"navbar-brand\" href=\"#\">Auth0</a>\n <button class=\"navbar-toggler\" type=\"button\" \n    data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" \n    aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" \n    aria-label=\"Toggle navigation\">\n <span class=\"navbar-toggler-icon\"></span>\n </button>\n\n<div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n <ul class=\"navbar-nav mr-auto\">\n      <li class=\"nav-item active\">\n        <a class=\"nav-link\" href=\"#\">Home \n         <span class=\"sr-only\">(current)</span></a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" *ngIf=\"!authService.isLoggedIn();\" \n           (click)=\"authService.login()\">Login</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" *ngIf=\"authService.isLoggedIn();\" >Profile</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" *ngIf=\"!authService.isLoggedIn();\"\n           href=\"#\">Register</a>\n      </li>\n       <li class=\"nav-item\">\n        <a class=\"nav-link\" *ngIf=\"authService.isLoggedIn()\" \n           (click)=\"authService.logout()\">Logout</a>\n      </li>\n    </ul>\n </div>\n</nav>\n```", "```ts\nimport { tokenNotExpired } from 'angular-jwt';\nimport { Auth0Lock} from 'auth0-lock';\n```", "```ts\nvar lock = new Auth0Lock( 'YOUR_CLIENT_ID', 'YOUR_AUTH0_DOMAIN' );\n```", "```ts\npublic _idToken: string;\nprivate _accessToken: string;\nprivate _expiresAt: number;\n\n lock = new Auth0Lock('XvVLuuMQr3kKAR3ECAmBZOiPPyVYehvU','srinix.auth0.com',{\n allowedConnections: [\"Username-Password-Authentication\",\"google-oauth2\"],\n rememberLastLogin: false,\n socialButtonStyle: \"big\",\n languageDictionary: {\"title\":\"Auth0\"},\n language: \"en\",\n responseType: 'token id_token',\n theme: {}\n });\n```", "```ts\nconstructor(private router: Router) {\n\nthis.lock.on('authenticated', (authResult: any) => {\nlocalStorage.setItem(\"userToken\", authResult.accessToken);\nthis.router.navigate(['/profile']); \n});\n\nthis.lock.on('authorization_error', error => {\nconsole.log('something went wrong', error);\n});\n\n}\n```", "```ts\nlogin() {\n this.lock.show(function(err, profile, token){\n console.log(err);\n console.log(profile);\n console.log(token);\n });\n }\n```", "```ts\nlogout(){\nlocalStorage.setItem('userToken','');\nthis.router.navigate(['/']);\n}\n```", "```ts\n isLoggedIn() {\n var token = localStorage.getItem('userToken');\n if(token != '')\n {\n return true;\n }\n else {\n return false;\n }\n }\n```", "```ts\nimport { Component } from '@angular/core';\nimport { AuthService } from './services/auth.service';\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n title = 'Auth0 Tutorial';\n userToken:string;\n\n constructor(private authService: AuthService) {}\n}\n```"]