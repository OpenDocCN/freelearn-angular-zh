["```ts\nlet x = 5;\n if (x === 5) {\n     let x = 10;\n     console.log(x); // this line will output 10 to your console\n     // note, x was allowed to be changed\n }\n console.log(x);\n // this line will output 5 to your console\n // because the change to x was made within a block\n```", "```ts\nvar num: number = 12345; // this is a statically typed variable\nvar num = 12345; // this is a dynamically typed variable\n```", "```ts\n{\n   \u201cpeople\u201d: [\n     {\u201cname\u201d:\u201dPeter\u201d, \u201cage\u201d:40},\n     {\u201cname\u201d:\u201dPaul\u201d, \u201cage\u201d:42},\n     {\u201cname\u201d:\u201dMary\u201d, \u201cage\u201d:38}\n   ]\n }\n```", "```ts\n[\n   {\u201cname\u201d:\u201dPeter\u201d, \u201cage\u201d:40},\n   {\u201cname\u201d:\u201dPaul\u201d, \u201cage\u201d:42},\n   {\u201cname\u201d:\u201dMary\u201d, \u201cage\u201d:38}\n ]\n```", "```ts\nvar myDreamCars = [];\n```", "```ts\nmyDreamCars.push(\"Porsche\");\n```", "```ts\nvar myDreamCars = [\"Porsche\", \"Mercedes\", \"Ferrari\", \"Lamborghini\"];\n```", "```ts\nvar indexOfMercedes = myDreamCars.indexOf(\"Mercedes\");\n```", "```ts\nvar indexOfMercedes = myDreamCars.indexOf(\"Corvette\");\n```", "```ts\nvar mapLangCurve = new Map();\n```", "```ts\nmapLangCurve.set('Python', 'low');\nmapLangCurve.set('Java', 'medium');\nmapLangCurve.set('C++', 'high');\n```", "```ts\nvar mapLangCurve = new Map().\nset('Python', 'low').\nset('Java', 'medium').\nset('C++', 'high');\n```", "```ts\nvar arrLangCurve = [['Python', 'low'], \n['Java', 'medium'], \n['C++', 'high']]; \n```", "```ts\nvar mapLangCurve = new Map(arrLangCurve);\n```", "```ts\nvar langCurveSize = mapLangCurve.size;\n```", "```ts\nvar javaLearningCurve = mapLangCurve.get('Java');\n```", "```ts\nvar blnCurveExists = mapLangCurve.has('C++'); \n```", "```ts\nmapLangCurve.delete('Python');\n```", "```ts\nmapLangCurve.clear();\n```", "```ts\n for (let key of mapLangCurve.keys()) {\n    console.log(key);\n} \n```", "```ts\n for (let value of mapLangCurve.values()) {\n    console.log(value);\n} \n```", "```ts\nfor (let item of mapLangCurve.entries()) {\n    console.log(item[0], item[1]);\n} \n```", "```ts\nvar setCelestialObjects = new Set();\n```", "```ts\nsetCelestialObjects.add('Earth');\nsetCelestialObjects.add('Moon');\nsetCelestialObjects.add('Solar System');setCelestialObjects.add('Milky Way');\nsetCelestialObjects.add('Andromeda');\nsetCelestialObjects.add(['Aries', 'Cassiopeia', 'Orion']);\nsetCelestialObjects.add(7);\n```", "```ts\nvar sizeCelestialObjects = setCelestialObjects.size;\n```", "```ts\nsetCelestialObjects.clear();\n```", "```ts\nsetCelestialObjects.delete('Andromeda');\n```", "```ts\nfor (let element of setCelestialObjects) {\n    console.log(element);\n}\n```", "```ts\nvar setIntegers = new Set();\nsetIntegers.add(1);\nsetIntegers.add(7);\nsetIntegers.add(11);\nsetIntegers.forEach(function(value) {\n    console.log(Math.pow(value, 2));\n});\n```", "```ts\nvar setSquaredIntegers = new Set();\nsetIntegers.forEach(function(value) {\n    setSquaredIntegers.add(Math.pow(value, 2));\n});\n```", "```ts\nvar blnElementExists = setCelestialObjects.has('Moon');\n```", "```ts\nvar myWeakSet = new WeakSet();\n```", "```ts\nvar objA = {};\nvar objB = {};\nvar objC = {};\nmyWeakSet.add(objA); \nmyWeakSet.add(objB); \nmyWeakSet.add(objC);  \nvar lengthMyWeakSet = myWeakSet.length; // lengthMyWeakSet will be set to 3\n```", "```ts\nvar blnSameObject = Object.is(objA, objB);\n```", "```ts\nvar objA = {};\nvar objB = {};\nvar objC = objB; // objB and objC now both point to the same object in memory\nmyWeakSet.add(objA); \nmyWeakSet.add(objB); \nmyWeakSet.add(objC);  \nvar lengthMyWeakSet = myWeakSet.length; // lengthMyWeakSet will be set to 2\n```", "```ts\nclass Car {\n  constructor(make, model) {\n    this.make = make;\n    this.model = model;\n    this.speed = 0;\n  }\n  get speed() {\n    return this._speed;\n  }\n  set speed(value) {\n    this._speed = value;\n  }\n  speedUp() {\n    this.speed += 10;\n  }\n  slowDown() {\n    this.speed -= 10;\n  }\n}\n```", "```ts\nvar myG6 = new Car('Pontiac', 'G6');\n```", "```ts\nmyG6.speed; // this returns 0, which is the value it was initialized to\n```", "```ts\nmyG6.speedUp(); // this increases our speed by 10 mph\nmyG6.speedUp(); // this increases our speed by another 10 mph\nmyG6.speedUp(); // this increases our speed yet again, by 10 mph\nmyG6.speedUp(); // this increases our speed, one last time, by ... you guessed it, 10 mph\n```", "```ts\nmyG6.speed; // this now returns 40 \n```", "```ts\nmyG6.slowDown(); // this decreases our speed by 10 mph\nmyG6.slowDown(); // this decreases our speed by another 10 mph\n```", "```ts\nmyG6.speed; // this now returns 20\n```", "```ts\nclass Animal implements Species {\n}  \ninterface Species {\n  name: string;\n  isExtinct: boolean;\n} \n```", "```ts\ninterface Species {\n name?: string;\n  isExtinct?: boolean;\n} \n```", "```ts\nclass Employee {\n  constructor(name) {\n    this.name = name;\n    this.title = \"an employee\";\n  }\n  annouceThyself() {\n    return `Hi. My name is ${this.name} and I am ${this.title}.`;\n  }\n}\nclass Manager extends Employee {\n  constructor(name) {\n    super(name);\n    this.title = \"a manager\";\n  }\n}\n```", "```ts\nvar emp = new Employee(\"Goofy\");\nconsole.log(emp.annouceThyself()); \n//  Hi. My name is Goofy and I am an employee.\n```", "```ts\nvar mgr = new Manager(\"Mickey\");\nconsole.log(mgr.annouceThyself()); \n//  Hi. My name is Mickey and I am a manager.\n```", "```ts\nconst author = {\n  firstName: 'Aki',\n  lastName: 'Iskandar',\n  topics: ['Angular', 'JavaScript', 'TypeScript', 'Bootstrap', 'Node'],\n  cities: ['Calgary', 'Cleveland'],\n  publisher: 'Packt'\n}\n```", "```ts\nconst firstName = author.firstName;\nconst lastName = author.lastName;\nconst publisher = author.publisher;\n```", "```ts\nconst {firstName, lastName, publisher} = author;\n```", "```ts\nconsole.log(publisher);  //  Packt\n```", "```ts\nlet myArray = [5, 10, 15, 20, 25;\n  for (var item of myArray) {\n  console.log(item);\n}\n```", "```ts\nfunction iq(target) {\n  Object.defineProperty(target.prototype, 'iq', {value: () => \"Genius\"})\n}\n@iq\nclass Person {\n}\nlet readerOfMyBook = new Person();\nconsole.log(readerOfMyBook.iq());  // prints out \"Genius\" to the console\n```", "```ts\nfunction alpha1() {\n  console.log(\"Alpha 1 was called\");\n}\nfunction alpha2() {\n  console.log(\"Alpha 2 was called\");\n}\nexport {alpha1, alpha2};\n```", "```ts\nimport {alpha1, alpha2} from ./alphafunctions;  \nalpha1();  //  \"Alpha 1 was called\" is written to the console\n```", "```ts\nexport default function alpha1() {\n  console.log(\"Alpha 1 was called\");\n}\nfunction alpha2() {\n  console.log(\"Alpha 2 was called\");\n}\nexport {alpha1, alpha2};\n```", "```ts\nimport alpha1, {alpha2} from ./alphafunctions;  \n```"]