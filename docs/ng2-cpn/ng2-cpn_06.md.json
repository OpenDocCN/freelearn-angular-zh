["```ts\n[app.component.ts]\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'child-component',\n  inputs:   ['title'],\n  template: `<h2>{{ title }}</h2>`\n})\n\nexport class ChildComponent {}\n\n@Component({\n  selector: 'app-root',\n  template: ` \n    <h1>Component Interactions</h1>\n    <child-component [title]=\"title\" ></child-component>\n  `\n})\nexport class AppComponent {\n  private title: string = \"Sub title for child\";\n}\n```", "```ts\n[app.module.ts]\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { AppComponent, ChildComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ChildComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```ts\n[app.component.ts]\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'child-component',\n  template: `<h2>{{ title }}</h2>`\n})\nexport class ChildComponent {\n  @Input() private title: string;\n}\n\n@Component({\n  selector: 'app-root',\n  template: ` \n    <h1>Component Interactions</h1>\n    <child-component [title]=\"title\"></child-component>\n  `\n})\nexport class AppComponent {\n  private title: string = 'Sub title for child';\n}\n```", "```ts\n[app.component.ts]\nimport { Component, Input, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'child-component',\n  template: `<h2 (click)=\"titleClicked.emit()\">{{ title }}</h2>`\n})\nexport class ChildComponent {\n  @Input() private title: string;\n  @Output() private titleClicked = new EventEmitter<any>();\n}\n\n@Component({\n  selector: 'app-root',\n  template: ` \n    <h1>Component Interactions</h1>\n    <child-component [title]=\"title\" \n    (titleClicked)=\"clickHandler()\"></child-component>\n  `\n})\nexport class AppComponent {\n  private title: string = 'Sub title for child';\n  clickHandler() {\n    console.log('Clicked!');\n  }\n}\n```", "```ts\n[app.component.ts]\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'child-component',\n  template: `\n    <h2>Content Header</h2>\n    <p *ngIf=\"flag\">Toggleable Content</p>\n  `\n})\nexport class ChildComponent {\n  private flag: boolean = false;\n  toggle() {\n    this.flag = !this.flag;\n  }\n}\n\n@Component({\n  selector  : 'app-root',\n  template  : ` \n    <h1>Component Interactions</h1>\n    <button (click)=\"child.toggle()\">Toggle Child</button>\n    <child-component #child></child-component>\n  `\n})\nexport class AppComponent {}\n```", "```ts\n[app.component.ts]\nimport { Component, ViewChild } from '@angular/core';\n\n@Component({\n  selector: 'child-component',\n  template: `\n    <h2>Content Header</h2>\n    <p *ngIf=\"flag\">Toggleable Content</p>\n  `\n})\nexport class ChildComponent {\n  private flag: boolean = false;\n  toggle(){\n    this.flag = !this.flag;\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  template: ` \n    <h1>Component Interactions</h1>\n    <button (click)=\"toggle()\">Toggle Child</button>\n    <child-component></child-component>\n  `\n})\nexport class AppComponent {\n  @ViewChild(ChildComponent)\n  private childComponent: ChildComponent;\n  toggle(){\n    this.childComponent.toggle();\n  }\n}\n```", "```ts\n[app.component.ts]\nimport { Component, ViewChildren, QueryList } from '@angular/core';\n\n@Component({\n  selector: 'child-component',\n  template: `\n    <h2>Content Header</h2>\n    <p *ngIf=\"flag\">Toggleable Content</p>\n  `\n})\nexport class ChildComponent {\n  private flag: boolean = false;\n\n  toggle(){\n    this.flag = !this.flag;\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  template: ` \n    <h1>Component Interactions</h1>\n    <button (click)=\"toggle()\">Toggle Child</button>\n    <child-component></child-component>\n    <child-component></child-component>\n    <child-component></child-component>\n  `\n})\nexport class AppComponent {\n  @ViewChildren(ChildComponent)\n  private children: QueryList<ChildComponent>;\n  toggle(){\n    this.children.forEach(child => child.toggle())\n  }\n}\n```"]