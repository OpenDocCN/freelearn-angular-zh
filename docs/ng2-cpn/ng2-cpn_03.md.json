["```ts\nclass User {\n  constructor(id){\n    this.id = id;\n  }\n\n  getUserInfo(){\n    return this.userInfo;\n  }\n}\n```", "```ts\nclass Product {\n  private id: number;\n  private color: string;\n\n  constructor(id:number, color:string) {\n    this.id = id;\n    this.color = color;\n  }\n}\n```", "```ts\nclass Product {\n  constructor(id, color) {\n    this.id = id;\n    this.color = color;\n  }\n}\n```", "```ts\nvar Product = (function () {\n  function Product(id, color) {\n    this.id = id;\n    this.color = color;\n  }\n  return Product;\n})();\n```", "```ts\n[user.ts]\nexport function getRandomNumber() {\n  return Math.random();\n}\n\nexport class User {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nexport const id = 12345;\n```", "```ts\n// import only the function from the module\nimport { getRandomNumber } from './user';\n\n// import both the function and the class from the module\nimport { getRandomNumber, Person } from './user';\n\n// import the function and bind it to a random variable\nimport { getRandomNumber as random } from './user';\n\n// import everything from the module and\n// bind it to a userModule variable\nimport * as UserModule from './user';\n```", "```ts\n[user.ts]\nexport default class User {\n  constructor(name) {\n    this.name = name;\n  }\n}\n```", "```ts\nimport UserModule from './user.ts';\n```", "```ts\nclass Product {}\n```", "```ts\nclass Product {\n\n  color;\n  price;\n\n  constructor(color, price) {\n    this.color = color;\n    this.price = price;\n  }\n\n  getProductDetails() {\n    return this.color + this.price;\n  }\n}\n```", "```ts\nclass Product {\n  color;\n  price;\n\n  constructor(color, price) {\n    this.color = color;\n    this.price = price;\n  }\n\n  getProductDetails() {\n    return `${this.color}, ${this.price}`;\n  }\n}\n\nclass Ebook extends Product {\n  size;\n\n  constructor(color, price, size) {\n    super(color, price);\n    this.size = size;\n  }\n\n  getProductDetails(){\n    return `${this.color}, ${this.price}, ${this.size}`;\n  }\n}\n```", "```ts\n// strings\nlet name: string = \"bob\";\n\n// boolean\nlet isLoggedIn: boolean = true;\n\n// number\nlet height: number = 24;\nlet width: number = 12;\n\n// arrays\nlet colors: string[] = ['red', 'green', 'blue'];\nlet colors: Array<string> = ['red', 'green', 'blue'];\n```", "```ts\n// value can be any type, init with a number\nlet value: any = 10;\n\n// different types can assigned\nvalue = false;\nvalue = \"this value is a string\";\n```", "```ts\n// this function doesn't returns\nfunction setId(id:string): void {\n  this.id = id;\n}\n```", "```ts\n// default behavior, value of color will be 2;\nenum Color {Red, Green, Blue}\nlet color: Color = Color.Blue;\n\n// manual initialize, value of color will be 6;\nenum Color {Red = 2, Green = 4, Blue = 6}\nlet color: Color = Color.Blue;\n```", "```ts\nclass Model {}\nclass Account extends Model {}\nclass Controller {\n  model:Model;\n  constructor(model:Model) {\n    this.model = Model;\n  }\n}\nnew Controller(Account);\n```", "```ts\ninterface Model {\n  get(query:string): any[];\n}\n\nclass Account implements Model {\n  get(query:string):any[] {\n    return [];\n  }\n}\n\nclass Controller {\n model:Model;\n constructor(model:Model) {\n  this.model = Model;\n }\n}\n```", "```ts\n// decorator function\nfunction AddMetadata (...args) {\n  return function (target){\n    target.metadata = [...args];\n  }\n}\n\n// decorator applied\n@AddMetadata({ metadata: 'some values'})\nclass Model {\n}\n```"]