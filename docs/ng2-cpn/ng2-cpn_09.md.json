["```ts\n[app.component.ts]\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<h1>Angular2 components</h1>`\n})\nexport class AppComponent {}\n```", "```ts\n[text-marker.ts]\nimport { Directive, ElementRef, Renderer } from '@angular/core';\n\n@Directive({\n  selector: '[text-marker]'\n})\nexport class TextMarker {\n  constructor(element: ElementRef, renderer: Renderer) {\n    renderer.setElementStyle(element.nativeElement,\n      'text-decoration', 'underline');\n  }\n}\n```", "```ts\n[app.component.ts]\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<h1 text-marker>Angular2 components</h1>`\n}) \nexport class AppComponent {}\n```", "```ts\n[app.module.ts]\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { AppComponent } from './app.component';\nimport { TextMarker } from './text-marker';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n     TextMarker\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```ts\n[text-marker.ts]\nimport { \nDirective, ElementRef, Renderer, HostListener \n} from '@angular/core';\n\n@Directive({\n selector: '[text-marker]'\n})\nexport class TextMarker {\n  constructor(private element: ElementRef, \n  private renderer: Renderer) { }\n\n  @HostListener('mouseenter')\n  markText() {\n    this.renderer.setElementStyle(\n      this.element.nativeElement,\n      'text-decoration',\n      'underline'\n    );\n  }\n\n  @HostListener('mouseleave')\n  unmarkText() {\n    this.renderer.setElementStyle(\n      this.element.nativeElement,\n      'text-decoration',\n      ''\n    );\n  }\n}\n```", "```ts\n[text-marker.ts]\nimport {\n  Directive,\n  ElementRef,\n  Renderer, Input,\n  HostListener\n} from '@angular/core';\n\n@Directive({\n  selector: '[text-marker]'\n})\nexport class TextMarker {\n  @Input('text-marker') \n  private color: string;\n\n  constructor(\n    private element: ElementRef, \n    private renderer: Renderer\n  ){ }\n\n  @HostListener('mouseenter')\n  onEnter() {\n    this.applyStyle(this.color, true);\n  }\n  @HostListener('mouseleave')\n  onExit() {\n    this.applyStyle('', false);\n  }\n\n  private applyStyle(\n    color:string, mark:boolean) {\n\n      // apply underline\n      this.renderer.setElementStyle(\n        this.element.nativeElement,\n        'text-decoration',\n        mark ? 'underline' : ''\n      );\n\n      // apply color\n      this.renderer.setElementStyle(\n        this.element.nativeElement\n        'color', color\n      );\n  }\n}\n```", "```ts\n[app.component.ts]\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<h1 text-marker=\"red\">Angular2 components</h1>`\n})\nexport class AppComponent {}\n```", "```ts\n[only-if.ts]\nimport { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[onlyIf]'\n})\nexport class OnlyIf {\n}\n```", "```ts\n[only-if.ts]\nimport {\n  Directive,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\n\n@Directive({\n  selector: '[onlyIf]'\n})\nexport class OnlyIf {\n  constructor(private _templateRef: TemplateRef,\n              private _viewContainerRef: ViewContainerRef)\n  {  }\n}\n```", "```ts\n[only-if.ts]\nimport {\n  Directive,\n  Input,\n  TemplateRef,\n  ViewContainerRef\n} from 'angular/core';\n\n@Directive({\n  selector: '[onlyIf]'\n})\nexport class OnlyIf {\n  constructor(private _templateRef: TemplateRef<any>,\n              private _viewContainerRef: ViewContainerRef) {  }\n\n  @Input()\n  set onlyIf(condition:boolean) {\n    if (condition) {\n      this._viewContainerRef.createEmbeddedView(this._templateRef);\n    } else {\n      this._viewContainerRef.clear();\n    }\n  }\n}\n```", "```ts\n[app.component.ts]\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <input type=\"checkbox\" [(ngModel)]=\"condition\">\n    <p *onlyIf=\"condition\">\n      This content will shown only if the condition is true\n    </p>\n  `\n}) \nexport class AppComponent {}\n```"]