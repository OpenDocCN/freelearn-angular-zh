["```ts\n    ...\n    export class AppComponent {\n    \u00a0\u00a0title = 'ad-attribute-directive';\n    \u00a0\u00a0searchText = '';\n    }\n    ```", "```ts\n    \u2026\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0<input [(ngModel)]=\"searchText\" type=\"text\" \u00a0\u00a0\u00a0\u00a0class=\"form-control\" placeholder=\"Search Text\" \u00a0\u00a0\u00a0\u00a0aria-label=\"Username\" aria-describedby=\u00a0\u00a0\u00a0\u00a0\"basic-addon1\">\n    \u00a0\u00a0</div>\n    ```", "```ts\n     ng g d directives/highlight\n    ```", "```ts\n     import { Directive, Input } from '@angular/core';\n    @Directive({\n    \u00a0\u00a0selector: '[appHighlight]'\n    })\n    export class HighlightDirective {\n    \u00a0\u00a0@Input() highlightText = '';\n    \u00a0\u00a0@Input() highlightColor = 'yellow';\n    \u00a0\u00a0constructor() { }\n    }\n    ```", "```ts\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0...\n    \u00a0\u00a0<p class=\"text-content\" appHighlight \u00a0\u00a0[highlightText]=\"searchText\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0</p>\n    </div>\n    ```", "```ts\n    import { Directive, Input, SimpleChanges, OnChanges } from '@angular/core';\n    @Directive({\n    \u00a0\u00a0selector: '[appHighlight]'\n    })\n    export class HighlightDirective implements OnChanges {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnChanges(changes: SimpleChanges) {\n    \u00a0\u00a0\u00a0\u00a0if (changes.highlightText.firstChange) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0const { currentValue } = changes.highlightText;\n    \u00a0\u00a0\u00a0\u00a0console.log(currentValue);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { Directive, Input, SimpleChanges, OnChanges, ElementRef } from '@angular/core';\n    @Directive({\n    \u00a0\u00a0selector: '[appHighlight]'\n    })\n    export class HighlightDirective implements OnChanges {\n    \u00a0\u00a0@Input() highlightText = '';\n    \u00a0\u00a0@Input() highlightColor = 'yellow';\n    \u00a0\u00a0constructor(private el: ElementRef) { }\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ngOnChanges(changes: SimpleChanges) {\n    \u00a0\u00a0\u00a0\u00a0if (changes.highlightText.firstChange) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0const { currentValue } = changes.highlightText;\n    \u00a0\u00a0\u00a0\u00a0if (currentValue) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const regExp = new RegExp(`(${currentValue})`, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'gi')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.el.nativeElement.innerHTML = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.el.nativeElement.innerHTML.replace \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(regExp, `<span style=\"background-color: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0${this.highlightColor}\">\\$1</span>`)\n    \u00a0\u00a0\u00a0\u00a0}\n     }\n    ```", "```ts\n    ...\n    export class HighlightDirective implements OnChanges {\n    \u00a0\u00a0@Input() highlightText = '';\n    \u00a0\u00a0@Input() highlightColor = 'yellow';\n    \u00a0\u00a0originalHTML = '';\n    \u00a0\u00a0constructor(private el: ElementRef) { }\n    \u00a0\u00a0ngOnChanges(changes: SimpleChanges) {\n    \u00a0\u00a0\u00a0\u00a0if (changes.highlightText.firstChange) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.originalHTML = this.el.nativeElement.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0innerHTML;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0const { currentValue } = changes.highlightText;\n    \u00a0\u00a0\u00a0\u00a0if (currentValue) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const regExp = new RegExp(`(${currentValue})`, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'gi')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.el.nativeElement.innerHTML = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.originalHTML.replace(regExp, `<span \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style=\"background-color: ${this.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0highlightColor}\">\\$1</span>`)\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    export class HighlightDirective implements OnChanges {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnChanges(changes: SimpleChanges) {\n    \u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0if (currentValue) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const regExp = new RegExp(`(${currentValue})`, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'gi')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.el.nativeElement.innerHTML = this.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0originalHTML.replace(regExp, `<span \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style=\"background-color: ${this.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0highlightColor}\">\\$1</span>`)\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.el.nativeElement.innerHTML = \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.originalHTML;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ng g directive directives/read-time\n    ```", "```ts\n    ...\n    <div class=\"content\" role=\"main\" id=\"mainContent\" appReadTime>\n    ...\n    </div>\n    ```", "```ts\n    import { Directive, Input } from '@angular/core';\n    export interface ReadTimeConfig {\n    \u00a0\u00a0wordsPerMinute: number;\n    }\n    @Directive({\n    \u00a0\u00a0selector: '[appReadTime]'\n    })\n    export class ReadTimeDirective {\n    \u00a0\u00a0@Input() configuration: ReadTimeConfig = {\n    \u00a0\u00a0\u00a0\u00a0wordsPerMinute: 200\n    \u00a0\u00a0}\n    \u00a0\u00a0constructor() { }\n    }\n    ```", "```ts\n    import { Directive, Input, ElementRef, OnInit } from '@angular/core';\n    ...\n    export class ReadTimeDirective implements OnInit {\n    \u00a0\u00a0@Input() configuration: ReadTimeConfig = {\n    \u00a0\u00a0\u00a0\u00a0wordsPerMinute: 200\n    \u00a0\u00a0}\n    \u00a0\u00a0constructor(private el: ElementRef) { }\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0const text = this.el.nativeElement.textContent;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    export class ReadTimeDirective implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0const text = this.el.nativeElement.textContent;\n    \u00a0\u00a0\u00a0\u00a0const time = this.calculateReadTime(text);\n    \u00a0\u00a0}\n    \u00a0\u00a0calculateReadTime(text: string) {\n    \u00a0\u00a0\u00a0\u00a0const wordsCount = text.split(/\\s+/g).length;\n    \u00a0\u00a0\u00a0\u00a0const minutes = wordsCount / this.configuration.\u00a0\u00a0\u00a0\u00a0wordsPerMinute;\n    \u00a0\u00a0\u00a0\u00a0return Math.ceil(minutes);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    @Directive({\n    \u00a0\u00a0selector: '[appReadTime]'\n    })\n    export class ReadTimeDirective implements OnInit {\n    ...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0const text = this.el.nativeElement.textContent;\n    \u00a0\u00a0\u00a0\u00a0const time = this.calculateReadTime(text);\n    \u00a0\u00a0\u00a0\u00a0const timeStr = this.createTimeString(time);\n    \u00a0\u00a0\u00a0\u00a0console.log(timeStr);\n    \u00a0\u00a0}\n    ...\n    \u00a0\u00a0createTimeString(timeInMinutes) {\n    \u00a0\u00a0\u00a0\u00a0if (timeInMinutes === 1) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return '1 minute';\n    \u00a0\u00a0\u00a0\u00a0} else if (timeInMinutes < 1) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return '< 1 minute';\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return `${timeInMinutes} minutes`;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { Directive, Input, ElementRef, OnInit, Output, EventEmitter } from '@angular/core';\n    ...\n    export class ReadTimeDirective implements OnInit {\n    \u00a0\u00a0@Input() configuration: ReadTimeConfig = {\n    \u00a0\u00a0\u00a0\u00a0wordsPerMinute: 200\n    \u00a0\u00a0}\n    \u00a0\u00a0@Output() readTimeCalculated = new \u00a0\u00a0EventEmitter<string>();\n    \u00a0\u00a0constructor(private el: ElementRef) { }\n    ...\n    }\n    ```", "```ts\n    ...\n    export class ReadTimeDirective {\n    ...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0const text = this.el.nativeElement.textContent;\n    \u00a0\u00a0\u00a0\u00a0const time = this.calculateReadTime(text);\n    \u00a0\u00a0\u00a0\u00a0const timeStr = this.createTimeString(time);\n    \u00a0\u00a0\u00a0\u00a0this.readTimeCalculated.emit(timeStr);\n    \u00a0\u00a0}\n    ...\n    }\n    ```", "```ts\n    ...\n    export class AppComponent {\n    \u00a0\u00a0readTime: string;\n    \u00a0\u00a0onReadTimeCalculated(readTimeStr: string) {\n    \u00a0\u00a0\u00a0\u00a0this.readTime = readTimeStr;\n    } \n    }\n    ```", "```ts\n    ...\n    <div class=\"content\" role=\"main\" id=\"mainContent\" appReadTime (readTimeCalculated)=\"onReadTimeCalculated($event)\">\n    ...\n    </div>\n    ```", "```ts\n    <div class=\"content\" role=\"main\" id=\"mainContent\" appReadTime (readTimeCalculated)=\"onReadTimeCalculated($event)\">\n    \u00a0\u00a0<h4>Read time = {{readTime}}</h4>\n    \u00a0\u00a0<p class=\"text-content\">\n    \u00a0\u00a0\u00a0\u00a0Silent sir say desire fat him letter. Whatever \u00a0\u00a0\u00a0\u00a0settling goodness too and honoured she building \u00a0\u00a0\u00a0\u00a0answered her. ...\n    \u00a0\u00a0</p>\n    ...\n    </div>\n    ```", "```ts\n    ng g directive directives/scroll-to\n    ```", "```ts\n    import { Directive, Input } from '@angular/core';\n    @Directive({\n    \u00a0\u00a0selector: '[appScrollTo]'\n    })\n    export class ScrollToDirective {\n    \u00a0\u00a0@Input() target = '';\n    \u00a0\u00a0constructor() { }\n    }\n    ```", "```ts\n    ...\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0<div class=\"page-links\">\n    \u00a0\u00a0\u00a0\u00a0<h4 class=\"page-links__heading\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Links\n    \u00a0\u00a0\u00a0\u00a0</h4>\n    \u00a0\u00a0\u00a0\u00a0<a class=\"page-links__link\" appScrollTo \u00a0\u00a0\u00a0\u00a0target=\"#resources\">Resources</a>\n    \u00a0\u00a0\u00a0\u00a0<a class=\"page-links__link\" appScrollTo \u00a0\u00a0\u00a0\u00a0target=\"#nextSteps\">Next Steps</a>\n    \u00a0\u00a0\u00a0\u00a0<a class=\"page-links__link\" appScrollTo \u00a0\u00a0\u00a0\u00a0target=\"#moreContent\">More Content</a>\n    \u00a0\u00a0\u00a0\u00a0<a class=\"page-links__link\" appScrollTo \u00a0\u00a0\u00a0\u00a0target=\"#furtherContent\">Further Content</a>\n    \u00a0\u00a0\u00a0\u00a0<a class=\"page-links__link\" appScrollTo \u00a0\u00a0\u00a0\u00a0target=\"#moreToRead\">More To Read</a>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0...\n    \u00a0\u00a0<div class=\"to-top-button\">\n    \u00a0\u00a0\u00a0\u00a0<a appScrollTo target=\"#toolbar\" class=\u00a0\u00a0\u00a0\u00a0\"material-icons\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyboard_arrow_up\n    \u00a0\u00a0\u00a0\u00a0</a>\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    import { Directive, Input, HostListener } from '@angular/core';\n    @Directive({\n    \u00a0\u00a0selector: '[appScrollTo]'\n    })\n    export class ScrollToDirective {\n    \u00a0\u00a0@Input() target = '';\n    \u00a0\u00a0@HostListener('click')\n    \u00a0\u00a0onClick() {\n    \u00a0\u00a0\u00a0\u00a0console.log(this.target);\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class ScrollToDirective {\n    \u00a0\u00a0@Input() target = '';\n    \u00a0\u00a0@HostListener('click')\n    \u00a0\u00a0onClick() {\n    \u00a0\u00a0\u00a0\u00a0const targetElement = document.querySelector \u00a0\u00a0\u00a0\u00a0(this.target);\n    \u00a0\u00a0\u00a0\u00a0targetElement.scrollIntoView();\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class ScrollToDirective {\n    \u00a0\u00a0@Input() target = '';\n    \u00a0\u00a0@HostListener('click')\n    \u00a0\u00a0onClick() {\n    \u00a0\u00a0\u00a0\u00a0const targetElement = document.querySelector \u00a0\u00a0\u00a0\u00a0(this.target);\n    \u00a0\u00a0\u00a0\u00a0targetElement.scrollIntoView({behavior: 'smooth'});\n    \u00a0\u00a0}\n    \u00a0\u00a0constructor() { }\n    }\n    ```", "```ts\n    ng g directive directives/if-not\n    ```", "```ts\n    ...\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0...\n    \u00a0\u00a0<div class=\"page-section\" id=\"resources\" \u00a0\u00a0*appIfNot=\"visibility === VISIBILITY.On\">\n    \u00a0\u00a0\u00a0\u00a0<!-- Resources -->\n    \u00a0\u00a0\u00a0\u00a0<h2>Content to show when visibility is off</h2>\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    import { Directive, Input } from '@angular/core';\n    @Directive({\n    \u00a0\u00a0selector: '[appIfNot]'\n    })\n    export class IfNotDirective {\n    \u00a0\u00a0constructor() { }\n    \u00a0\u00a0@Input() set appIfNot(value: boolean) {\n    \u00a0\u00a0\u00a0\u00a0console.log(`appIfNot value is ${value}`);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n    @Directive({\n    \u00a0\u00a0selector: '[appIfNot]'\n    })\n    export class IfNotDirective {\n    \u00a0\u00a0constructor(private templateRef: TemplateRef<any>, \u00a0\u00a0private viewContainerRef: ViewContainerRef) { }\n    \u00a0\u00a0@Input() set appIfNot(value: boolean) {\n    \u00a0\u00a0\u00a0\u00a0console.log(`appIfNot value is ${value}`);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    export class IfNotDirective {\n    \u00a0\u00a0constructor(private templateRef: TemplateRef<any>, \u00a0\u00a0private viewContainerRef: ViewContainerRef) { }\n    \u00a0\u00a0@Input() set appIfNot(value: boolean) {\n    \u00a0\u00a0\u00a0\u00a0if (value === false) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.viewContainerRef.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createEmbeddedView(this.templateRef);\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.viewContainerRef.clear()\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    \u2026\n    <div class=\"content\" role=\"main\">\n     ...\n    \u00a0\u00a0<div class=\"page-section\">\n    \u00a0\u00a0\u00a0\u00a0<h2>Bucket <i class=\"material-icons\">shopping_cart \u00a0\u00a0\u00a0\u00a0</i></h2>\n    \u00a0\u00a0\u00a0\u00a0<div class=\"fruits\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"fruits__item\" *ngFor=\"let item of \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bucket;\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"fruits__item__title\">{{item.name}}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"fruits__item__delete-icon\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(click)=\"deleteFromBucket(item)\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"material-icons\">delete</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<ng-template #bucketEmptyMessage>\n    \u00a0\u00a0\u00a0\u00a0<div class=\"fruits__no-items-msg\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0No items in bucket. Add some fruits!\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</ng-template>\n    </div>\n    ```", "```ts\n    ...\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0...\n    \u00a0\u00a0<div class=\"page-section\">\n    \u00a0\u00a0\u00a0\u00a0<h2>Bucket <i class=\"material-icons\">shopping_cart \u00a0\u00a0\u00a0\u00a0</i></h2>\n    \u00a0\u00a0\u00a0\u00a0<div class=\"fruits\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div *ngIf=\"bucket.length > 0; else \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bucketEmptyMessage\" class=\"fruits__item\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*ngFor=\"let item of bucket;\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"fruits__item__title\">{{item.name}}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"fruits__item__delete-icon\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(click)=\"deleteFromBucket(item)\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"material-icons\">delete</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    ...\n    </div>\n    ```", "```ts\n    ...\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0...\n    \u00a0\u00a0<div class=\"page-section\">\n    \u00a0\u00a0\u00a0\u00a0<h2>Bucket <i class=\"material-icons\">shopping_cart \u00a0\u00a0\u00a0\u00a0</i></h2>\n    \u00a0\u00a0\u00a0\u00a0<div class=\"fruits\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ng-container *ngIf=\"bucket.length > 0; else \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bucketEmptyMessage\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"fruits__item\" *ngFor=\"let item \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of bucket;\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"fruits__item__title\">{{item.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name}}</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"fruits__item__delete-icon\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(click)=\"deleteFromBucket(item)\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"material-icons\">delete</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</ng-container>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    ...\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0...\n    \u00a0\u00a0<p class=\"text-content\" appHighlight \u00a0\u00a0[highlightColor]=\"'#dcdcdc'\" \u00a0\u00a0[highlightText]=\"searchText\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0</p>\n    </div>\n    ```", "```ts\n    {\n    \u00a0\u00a0\"compileOnSave\": false,\n    \u00a0\u00a0\"compilerOptions\": {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0},\n    \u00a0\u00a0\"angularCompilerOptions\": {\n    \u00a0\u00a0\u00a0\u00a0\"strictInputTypes\": true\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    {\n    \u00a0\u00a0\"compileOnSave\": false,\n    \u00a0\u00a0\"compilerOptions\": {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0},\n    \u00a0\u00a0\"angularCompilerOptions\": {\n    \u00a0\u00a0\u00a0\u00a0\"strictInputTypes\": true,\n    \u00a0\u00a0\u00a0\u00a0\"strictNullChecks\": true,\n    \u00a0\u00a0\u00a0\u00a0\"strictNullInputTypes\": true\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0...\n    \u00a0\u00a0<p class=\"text-content\" appHighlight \u00a0\u00a0[highlightColor]=\"null\" [highlightText]=\"searchText\">\n    \u00a0\u00a0\u00a0...\n    </div>\n    ```", "```ts\n    {\n    \u00a0\u00a0\"compileOnSave\": false,\n    \u00a0\u00a0\"compilerOptions\": {\n    \u00a0\u00a0\u00a0...\n    \u00a0\u00a0},\n    \u00a0\u00a0\"angularCompilerOptions\": {\n    \u00a0\u00a0\u00a0\u00a0\"strictNullChecks\": true,\n    \u00a0\u00a0\u00a0\u00a0\"strictTemplates\": true\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { Component } from '@angular/core';\n    import { HighlightColor } from './directives/highlight.directive';\n    @Component({\n    \u00a0\u00a0selector: 'app-root',\n    \u00a0\u00a0templateUrl: './app.component.html',\n    \u00a0\u00a0styleUrls: ['./app.component.scss']\n    })\n    export class AppComponent {\n    \u00a0\u00a0searchText = '';\n    \u00a0\u00a0hColor: HighlightColor = HighlightColor.LightCoral;\n    }\n    ```", "```ts\n    <div class=\"content\" role=\"main\">\n    ...\n    \u00a0\u00a0<p class=\"text-content\" appHighlight \u00a0\u00a0[highlightColor]=\"hColor\" [highlightText]=\"searchText\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0</p>\n    </div>\n    ```"]