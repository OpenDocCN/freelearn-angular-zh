["```ts\n    npm install @ngrx/store@12.0.0 --save\n    ```", "```ts\n    ...\n    import { StoreModule } from '@ngrx/store';\n    @NgModule({\n    \u00a0\u00a0declarations: [\n    \u00a0\u00a0\u00a0\u00a0AppComponent\n    \u00a0\u00a0],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0BrowserModule,\n    \u00a0\u00a0\u00a0\u00a0AppRoutingModule,\n    \u00a0\u00a0\u00a0\u00a0FormsModule,\n    \u00a0\u00a0\u00a0\u00a0BrowserAnimationsModule,\n    \u00a0\u00a0\u00a0\u00a0StoreModule.forRoot({})\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [],\n    \u00a0\u00a0bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```", "```ts\n    import { createAction, props } from '@ngrx/store';\n    import { IFruit } from '../interfaces/fruit.interface';\n    export const addItemToBucket = createAction(\n    \u00a0\u00a0'[Bucket] Add Item',\n    \u00a0\u00a0props<IFruit>()\n    );\n    export const removeItemFromBucket = createAction(\n    \u00a0\u00a0'[Bucket] Remove Item',\n    \u00a0\u00a0props<IFruit>()\n    );\n    ```", "```ts\n    import { Action, createReducer, on } from '@ngrx/store';\n    import { IFruit } from '../interfaces/fruit.interface';\n    import * as AppActions from './app.actions';\n    ```", "```ts\n    import { Action, createReducer, on } from '@ngrx/store';\n    import { IFruit } from '../interfaces/fruit.interface';\n    import * as AppActions from './app.actions';\n\n    export interface AppState {\n    \u00a0\u00a0bucket: IFruit[];\n    }\n\n    const initialState: AppState = {\n    \u00a0\u00a0bucket: []\n    }\n    ```", "```ts\n    ...\n    const initialState: AppState = {\n    \u00a0\u00a0bucket: []\n    }\n    const appReducer = createReducer(\n    \u00a0\u00a0initialState,\n    \u00a0\u00a0on(AppActions.addItemToBucket, (state, fruit) => \u00a0\u00a0({ ...state, bucket: [fruit, ...state.bucket] })),\n    \u00a0\u00a0on(AppActions.removeItemFromBucket, (state, fruit) => {\n    \u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...state,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bucket: state.bucket.filter(bucketItem => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return bucketItem.id !== fruit.id;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}) }\n    \u00a0\u00a0}),\n    );\n\n    export function reducer(state: AppState = initialState, action: Action) {\n    \u00a0\u00a0return appReducer(state, action);\n    }\n    ```", "```ts\n    export function reducer(state: AppState = initialState, action: Action) {\n    \u00a0\u00a0console.log('state', state);\n    \u00a0\u00a0console.log('action', action);\n    \u00a0\u00a0return appReducer(state, action);\n    }\n    ```", "```ts\n    ...\n    import { StoreModule } from '@ngrx/store';\n    import * as appStore from './store/app.reducer';\n    @NgModule({\n    \u00a0\u00a0declarations: [\n    \u00a0\u00a0\u00a0\u00a0AppComponent\n    \u00a0\u00a0],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0StoreModule.forRoot({app: appStore.reducer})\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [],\n    \u00a0\u00a0bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```", "```ts\n    ...\n    import { Store } from '@ngrx/store';\n    import { AppState } from 'src/app/store/app.reducer';\n    import { addItemToBucket, removeItemFromBucket } from 'src/app/store/app.actions';\n    export class BucketComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0constructor(\n    \u00a0\u00a0\u00a0\u00a0private bucketService: BucketService,\n    \u00a0\u00a0\u00a0\u00a0private store: Store<AppState>\n    \u00a0\u00a0) { }\n    \u00a0\u00a0ngOnInit(): void {...}\n    \u00a0\u00a0addSelectedFruitToBucket() {\n    const newItem: IFruit = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: Date.now(),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: this.selectedFruit\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0this.bucketService.addItem(newItem);\n    \u00a0\u00a0\u00a0\u00a0this.store.dispatch(addItemToBucket(newItem));\n    \u00a0\u00a0}\n    \u00a0\u00a0deleteFromBucket(fruit: IFruit) {\n    \u00a0\u00a0\u00a0\u00a0this.bucketService.removeItem(fruit);\n    \u00a0\u00a0\u00a0\u00a0this.store.dispatch(removeItemFromBucket(fruit));\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    npm install @ngrx/store-devtools@12.0.0 --save\n    ```", "```ts\n    ...\n    import * as appStore from './store/app.reducer';\n    import { StoreDevtoolsModule } from '@ngrx/store-devtools';\n    @NgModule({\n    \u00a0\u00a0declarations: [\n    \u00a0\u00a0\u00a0\u00a0AppComponent\n    \u00a0\u00a0],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0StoreModule.forRoot({app: appStore.reducer}),\n    \u00a0\u00a0\u00a0\u00a0StoreDevtoolsModule.instrument({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxAge: 25, // Retains last 25 states\n    \u00a0\u00a0\u00a0\u00a0}),\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [],\n    \u00a0\u00a0bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```", "```ts\n    npm install --save @ngrx/effects@12.0.0\n    ```", "```ts\n    import { createAction, props } from '@ngrx/store';\n    import { IUser } from '../core/interfaces/user.interface';\n    export const APP_ACTIONS = {\n    \u00a0\u00a0GET_USERS: '[Users] Get Users',\n    \u00a0\u00a0GET_USERS_SUCCESS: '[Users] Get Users Success',\n    \u00a0\u00a0GET_USERS_FAILURE: '[Users] Get Users Failure',\n    }\n    export const getUsers = createAction(\n    \u00a0\u00a0APP_ACTIONS.GET_USERS,\n    );\n    export const getUsersSuccess = createAction(\n    \u00a0\u00a0APP_ACTIONS.GET_USERS_SUCCESS,\n    \u00a0\u00a0props<{users: IUser[]}>()\n    );\n    export const getUsersFailure = createAction(\n    \u00a0\u00a0APP_ACTIONS.GET_USERS_FAILURE,\n    \u00a0\u00a0props<{error: string}>()\n    );\n    ```", "```ts\n    import { Injectable } from '@angular/core';\n    import { Actions, createEffect, ofType } from '@ngrx/effects';\n    import { of } from 'rxjs';\n    import { map, mergeMap, catchError } from 'rxjs/operators';\n    import { UserService } from '../core/services/user.service';\n    import { APP_ACTIONS, getUsersFailure, getUsersSuccess } from './app.actions';\n    @Injectable()\n    export class AppEffects {\n    \u00a0\u00a0constructor(\n    \u00a0\u00a0\u00a0\u00a0private actions$: Actions,\n    \u00a0\u00a0\u00a0\u00a0private userService: UserService\n    \u00a0\u00a0) {}\n    }\n    ```", "```ts\n    ...\n    @Injectable()\n    export class AppEffects {\n    \u00a0\u00a0getUsers$ = createEffect(() =>\n    \u00a0\u00a0\u00a0\u00a0this.actions$.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ofType(APP_ACTIONS.GET_USERS),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mergeMap(() => this.userService.getUsers()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(users => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return getUsersSuccess({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0users\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catchError((error) => of(getUsersFailure({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0error\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0);\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    import { EffectsModule } from '@ngrx/effects';\n    import { AppEffects } from './store/app.effects';\n    @NgModule({\n    \u00a0\u00a0declarations: [...],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0StoreDevtoolsModule.instrument({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxAge: 25, // Retains last 25 states\n    \u00a0\u00a0\u00a0\u00a0}),\n    \u00a0\u00a0\u00a0\u00a0EffectsModule.forRoot([AppEffects])\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [],\n    \u00a0\u00a0bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```", "```ts\n    ...\n    import { AppState } from '../store/app.reducer';\n    import { Store } from '@ngrx/store';\n    import { getUsers } from '../store/app.actions';\n    @Component({...})\n    export class HomeComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0users$: Observable<IUser[]>;\n    \u00a0\u00a0constructor(\n    \u00a0\u00a0\u00a0\u00a0private userService: UserService,\n    \u00a0\u00a0\u00a0\u00a0private store: Store<AppState>\n    \u00a0\u00a0) {}\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0this.store.dispatch(getUsers())\n    \u00a0\u00a0\u00a0\u00a0this.users$ = this.userService.getUsers();\n    \u00a0\u00a0}\n    \u00a0\u00a0ngOnDestroy() {}\n    }\n    ```", "```ts\n    import { Action, createReducer, on } from '@ngrx/store';\n    import { IUser } from '../core/interfaces/user.interface';\n    import { getUsersSuccess } from './app.actions';\n    export interface AppState {\n    \u00a0\u00a0users: IUser[];\n    }\n    const initialState: AppState = {\n    \u00a0\u00a0users: []\n    }\n    const appReducer = createReducer(\n    \u00a0\u00a0initialState,\n    \u00a0\u00a0on(getUsersSuccess, (state, action) => ({\n    \u00a0\u00a0\u00a0\u00a0...state,\n    \u00a0\u00a0\u00a0\u00a0users: action.users\n    \u00a0\u00a0}))\n    );\n    export function reducer(state: AppState = initialState, action: Action) {\n    \u00a0\u00a0return appReducer(state, action);\n    }\n    ```", "```ts\n    ...\n    @Component({...})\n    export class HomeComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0users$: Observable<IUser[]>;\n    \u00a0\u00a0constructor(\n    \u00a0\u00a0private userService: UserService, \u2190 Remove this\n    \u00a0\u00a0\u00a0\u00a0private store: Store<AppState>\n    \u00a0\u00a0) {}\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0this.store.dispatch(getUsers());\n    \u00a0\u00a0\u00a0\u00a0this.users$ = this.userService.getUsers();\u00a0\u00a0\u2190 Remove \u00a0\u00a0\u00a0\u00a0this\n    \u00a0\u00a0}\n    \u00a0\u00a0ngOnDestroy() {}\n    }\n    ```", "```ts\n    import { createSelector, createFeatureSelector } from '@ngrx/store';\n    import { AppState } from './app.reducer';\n    export const selectApp = createFeatureSelector<AppState>('app');\n    export const selectUsers = createSelector(\n    \u00a0\u00a0selectApp,\n    \u00a0\u00a0(state: AppState) => state.users\n    );\n    ```", "```ts\n    ...\n    import { getUsers } from '../store/app.actions';\n    import { selectUsers } from '../store/app.selectors';\n    @Component({...})\n    export class HomeComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0this.users$ = this.store.select(selectUsers);\n    \u00a0\u00a0\u00a0\u00a0this.store.dispatch(getUsers())\n    \u00a0\u00a0}\n    \u00a0\u00a0ngOnDestroy() {}\n    }\n    ```", "```ts\n    ...\n    import { ActivatedRoute } from '@angular/router';\n    import { Observable } from 'rxjs/internal/Observable';\n    @Component({...})\n    export class UserDetailComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0user: IUser = null; \u2190 Remove this\n    \u00a0\u00a0similarUsers: IUser[] = []; \u2190 Remove this\n    \u00a0\u00a0user$: Observable<IUser> = null; \u2190 Add this\n    \u00a0\u00a0similarUsers$: Observable<IUser[]> = null; \u2190 Add this\n    \u00a0\u00a0isComponentAlive: boolean;\n    \u00a0\u00a0constructor( ) {}\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0this.isComponentAlive = true;\n    \u00a0\u00a0}\n    \u00a0\u00a0ngOnDestroy() {\n    \u00a0\u00a0\u00a0\u00a0this.isComponentAlive = false;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <div class=\"user-detail\">\n    \u00a0\u00a0<div class=\"main-content user-card\">\n    \u00a0\u00a0\u00a0\u00a0<app-user-card *ngIf=\"user$ | async as user; \u00a0\u00a0\u00a0\u00a0else loader\" [user]=\"user\"></app-user-card>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"secondary-container\">\n    \u00a0\u00a0\u00a0\u00a0<h4>Similar Users</h4>\n    \u00a0\u00a0\u00a0\u00a0<div class=\"similar-users\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ng-container *ngIf=\"similarUsers$ | async \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0as similarUsers; else loader\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<app-user-card class=\"user-card\" *ngFor=\"let user \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of similarUsers\" [user]=\"user\"></app-user-card>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</ng-container>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    </div>\n    ...\n    ```", "```ts\n    ...\n    import { IUser } from '../core/interfaces/user.interface';\n    export const selectUsers = createSelector(...);\n    export const selectCurrentUser = (uuid) => createSelector(\n    \u00a0\u00a0selectUsers,\n    \u00a0\u00a0(users: IUser[]) => users ? users.find(user => {\n    \u00a0\u00a0\u00a0\u00a0return user.login.uuid === uuid;\n    \u00a0\u00a0}) : null\n    );\n    export const selectSimilarUsers = (uuid) => createSelector(\n    \u00a0\u00a0selectUsers,\n    \u00a0\u00a0(users: IUser[]) => users ? users.filter(user => {\n    \u00a0\u00a0\u00a0\u00a0return user.login.uuid !== uuid;\n    \u00a0\u00a0}): null\n    );\n    ```", "```ts\n    ...\n    import { takeWhile } from 'rxjs/operators';\n    import { Store } from '@ngrx/store';\n    import { AppState } from '../store/app.reducer';\n    import { selectCurrentUser, selectSimilarUsers } from '../store/app.selectors';\n    import { ActivatedRoute } from '@angular/router';\n    ```", "```ts\n    @Component({...})\n    export class UserDetailComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0constructor(\n    \u00a0\u00a0\u00a0\u00a0private route: ActivatedRoute,\n    \u00a0\u00a0\u00a0\u00a0private store: Store<AppState>\n    \u00a0\u00a0) {}\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0this.isComponentAlive = true;\n    \u00a0\u00a0\u00a0\u00a0this.route.paramMap.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile(() => !!this.isComponentAlive)\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0.subscribe(params => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const uuid = params.get('uuid');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.user$ = this.store.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0select(selectCurrentUser(uuid))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.similarUsers$ = this.store.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0select(selectSimilarUsers(uuid))\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    import { first, takeWhile } from 'rxjs/operators';\n    import { Store } from '@ngrx/store';\n    import { AppState } from '../store/app.reducer';\n    import { selectCurrentUser, selectSimilarUsers, selectUsers } from '../store/app.selectors';\n    import { getUsers } from '../store/app.actions';\n    @Component({...})\n    export class UserDetailComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0\u2026\n    \u00a0\u00a0\u00a0\u00a0this.getUsersIfNecessary();\n    \u00a0\u00a0}\n    \u00a0\u00a0getUsersIfNecessary() {\n    \u00a0\u00a0\u00a0\u00a0this.store.select(selectUsers)\n    \u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0first ()\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0.subscribe((users) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (users === null) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.store.dispatch(getUsers())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n\u00a0\u00a0app: {\n\u00a0\u00a0\u00a0\u00a0users: []\n\u00a0\u00a0}\n```", "```ts\n    npm install @ngrx/component-store@12.0.0 --save\n    ```", "```ts\n    ...\n    import { IBucketService } from '../interfaces/bucket-service';\n    import { ComponentStore } from '@ngrx/component-store';\n    export interface BucketState {\n    \u00a0\u00a0bucket: IFruit[]\n    }\n    @Injectable({\n    \u00a0\u00a0providedIn: 'root'\n    })\n    export class BucketService extends ComponentStore<BucketState>\u00a0\u00a0implements IBucketService {\n    \u00a0\u00a0bucketSource = new BehaviorSubject([]);\n    \u00a0\u00a0bucket$: Observable<IFruit[]> = \u00a0\u00a0this.bucketSource.asObservable();\n    \u00a0\u00a0constructor() {\n    \u00a0\u00a0\u00a0\u00a0super({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bucket: []\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class BucketService extends ComponentStore<BucketState>\u00a0\u00a0implements IBucketService {\n    \u00a0\u00a0bucketSource = new BehaviorSubject([]);\n    \u00a0\u00a0readonly bucket$: Observable<IFruit[]> = \u00a0\u00a0this.select(state => state.bucket);\n    \u00a0\u00a0constructor() {\n    \u00a0\u00a0\u00a0\u00a0super({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bucket: []\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    \u00a0\u00a0loadItems() {\n    \u00a0\u00a0\u00a0\u00a0const bucket = JSON.parse(window.localStorage.\u00a0\u00a0\u00a0\u00a0getItem('bucket') || '[]');\n    \u00a0\u00a0\u00a0\u00a0this.bucketSource.next(bucket); \u2190 Remove this\n    \u00a0\u00a0\u00a0\u00a0this.setState({ \u2190 Add this\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bucket\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0readonly addItem = this.updater((state, fruit: IFruit) \u00a0\u00a0=> {\n    \u00a0\u00a0\u00a0\u00a0const bucket = [fruit, ...state.bucket]\n    \u00a0\u00a0\u00a0\u00a0window.localStorage.setItem('bucket', \u00a0\u00a0\u00a0\u00a0JSON.stringify(bucket));\n    \u00a0\u00a0\u00a0\u00a0return ({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bucket\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0});\n    ```", "```ts\n    \u00a0\u00a0readonly removeItem = this.updater((state, fruit: \u00a0\u00a0IFruit) => {\n    \u00a0\u00a0\u00a0\u00a0const bucket = state.bucket.filter(item => \u00a0\u00a0\u00a0\u00a0item.id !== fruit.id);\n    \u00a0\u00a0\u00a0\u00a0window.localStorage.setItem('bucket', \u00a0\u00a0\u00a0\u00a0JSON.stringify(bucket));\n    \u00a0\u00a0\u00a0\u00a0return ({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bucket\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0});\n    ```", "```ts\n    import { Injectable } from '@angular/core';\n    import { IFruit } from 'src/app/interfaces/fruit.interface';\n    import { BucketService } from 'src/app/services/bucket.service';\n    ...\n    export class EmployeeBucketService extends BucketService {\n    \u00a0\u00a0constructor() {\n    \u00a0\u00a0\u00a0\u00a0super();\n    \u00a0\u00a0}\n    \u00a0\u00a0readonly removeItem = this.updater((state, _: IFruit) \u00a0\u00a0=> {\n    \u00a0\u00a0\u00a0\u00a0alert('Employees can not delete items');\n    \u00a0\u00a0\u00a0\u00a0return state;\n    \u00a0\u00a0});\n    }\n    ```", "```ts\n    import { Injectable } from '@angular/core';\n    import { BehaviorSubject \u2190 Remove this, Observable } from 'rxjs';\n    ...\n    export class BucketService extends ComponentStore<BucketState>\u00a0\u00a0implements IBucketService {\n    \u00a0\u00a0bucketSource = new BehaviorSubject([]); \u2190 Remove\n    \u00a0\u00a0readonly bucket$: Observable<IFruit[]> = \u00a0\u00a0this.select((state) => state.bucket);\n    \u00a0\u00a0constructor() {\n    \u00a0\u00a0\u00a0\u00a0super({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bucket: []\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    ...\n    }\n    ```", "```ts\n    npm install @ngrx/router-store@12.0.0 --save\n    ```", "```ts\n    ...\n    import { StoreRouterConnectingModule, routerReducer } from '@ngrx/router-store';\n    @NgModule({\n    \u00a0\u00a0declarations: [...],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0BrowserModule,\n    \u00a0\u00a0\u00a0\u00a0AppRoutingModule,\n    \u00a0\u00a0\u00a0\u00a0HttpClientModule,\n    \u00a0\u00a0\u00a0\u00a0StoreModule.forRoot({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: appStore.reducer,\n    \u00a0\u00a0router: routerReducer\n    \u00a0\u00a0\u00a0\u00a0}),\n     StoreRouterConnectingModule.forRoot(),\n    \u00a0\u00a0\u00a0\u00a0StoreDevtoolsModule.instrument({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxAge: 25, // Retains last 25 states\n    \u00a0\u00a0\u00a0\u00a0}),\n    \u00a0\u00a0\u00a0\u00a0EffectsModule.forRoot([AppEffects])\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [],\n    \u00a0\u00a0bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```", "```ts\n    ...\n    import { getUsersSuccess } from './app.actions';\n    import { RouterReducerState } from '@ngrx/router-store'\n    export interface AppState {\n    \u00a0\u00a0users: IUser[];\n    \u00a0\u00a0router: RouterReducerState<any>;\n    }\n    const initialState: AppState = {\n    \u00a0\u00a0users: null,\n    \u00a0\u00a0router: null\n    }\n    ...\n    ```", "```ts\n    ...\n    import { getSelectors, RouterReducerState } from '@ngrx/router-store';\n    export const selectApp = createFeatureSelector<AppState>('app');\n    export const selectUsers = createSelector(\n    \u00a0\u00a0selectApp,\n    \u00a0\u00a0(state: AppState) => state.users\n    );\n    ...\n    export const selectRouter = createFeatureSelector<\n    \u00a0\u00a0AppState,\n    \u00a0\u00a0RouterReducerState<any>\n    >('router');\n    const { selectRouteParam } = getSelectors(selectRouter);\n    export const selectUserUUID = selectRouteParam('uuid');\n    export const selectCurrentUser = createSelector(\n    \u00a0\u00a0selectUserUUID,\n    \u00a0\u00a0selectUsers,\n    \u00a0\u00a0(uuid, users: IUser[]) => users ? users.find(user => {\n    \u00a0\u00a0\u00a0\u00a0return user.login.uuid === uuid;\n    \u00a0\u00a0}) : null\n    );\n    export const selectSimilarUsers = createSelector(\n    \u00a0\u00a0selectUserUUID,\n    \u00a0\u00a0selectUsers,\n    \u00a0\u00a0(uuid, users: IUser[]) => users ? users.filter(user => \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0return user.login.uuid !== uuid;\n    \u00a0\u00a0}): null\n    );\n    ```", "```ts\n    ...\n    export class UserDetailComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0this.route.paramMap.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile(() => !!this.isComponentAlive)\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0.subscribe(params => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const uuid = params.get('uuid');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.user$ = this.store.select(selectCurrentUser)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.similarUsers$ = this.store.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0select(selectSimilarUsers)\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    import { Observable } from 'rxjs/internal/Observable';\n    import { first } from 'rxjs/operators';\n    import { Store } from '@ngrx/store';\n    ...\n    export class UserDetailComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0constructor(\n    \u00a0\u00a0\u00a0\u00a0private store: Store<AppState>\n    ) {}\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0this.isComponentAlive = true;\n    \u00a0\u00a0\u00a0\u00a0this.getUsersIfNecessary();\n    \u00a0\u00a0\u00a0\u00a0this.user$ = this.store.select(selectCurrentUser)\n    \u00a0\u00a0\u00a0\u00a0this.similarUsers$ = this.store.\u00a0\u00a0\u00a0\u00a0select(selectSimilarUsers)\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```"]