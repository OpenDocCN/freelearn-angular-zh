["```ts\n    import { InjectionToken } from '@angular/core';\n    import { User } from '../interfaces/user.interface';\n    export class Greeter implements User {\n    \u00a0\u00a0...\n    }\n    export const GREETER = new InjectionToken('Greeter', {\n    \u00a0\u00a0providedIn: 'root',\n    \u00a0\u00a0factory: () => Greeter\n    });\n    ```", "```ts\n    import { Inject, Injectable } from '@angular/core';\n    import { GREETER, Greeter } from '../classes/greeter.class';\n    @Injectable({\n    \u00a0\u00a0providedIn: 'root'\n    })\n    export class UserService {\n    \u00a0\u00a0...\n    } \n    ```", "```ts\n    ...\n    export class UserService {\n    \u00a0\u00a0...\n    \u00a0\u00a0constructor(@Inject(GREETER) public greeter: typeof \u00a0\u00a0\u00a0Greeter) { }\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class UserService {\n    \u00a0\u00a0...\n    \u00a0\u00a0getUser() {\n    \u00a0\u00a0\u00a0\u00a0const user = this.users[Math.floor(Math.random() \u00a0\u00a0\u00a0\u00a0* this.users.length)]\n    \u00a0\u00a0\u00a0\u00a0return new this.greeter(user);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { Injectable } from '@angular/core';\n    import { Logger } from '../interfaces/logger';\n    @Injectable({ \n    \u00a0\u00a0providedIn: 'root' \u2190 Remove\n    })\n    export class LoggerService implements Logger {\n    \u00a0\u00a0...\n    } \n    ```", "```ts\n    import { Component, OnInit, Input, OnChanges, SimpleChanges, Optional } from '@angular/core';\n    ...\n    export class VcLogsComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0constructor(@Optional() private loggerService: \u00a0\u00a0LoggerService) {\n    \u00a0\u00a0\u00a0\u00a0this.logger = this.loggerService;\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    } \n    ```", "```ts\n    ...\n    export class VcLogsComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0constructor(@Optional() private loggerService: \u00a0\u00a0LoggerService) {\n    \u00a0\u00a0\u00a0\u00a0if (!this.loggerService) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.logger = console;\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.logger = this.loggerService;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    \u00a0\u00a0... \n    ```", "```ts\n    import { Injectable } from '@angular/core';\n    import { BehaviorSubject, Observable } from 'rxjs';\n    @Injectable({\n    \u00a0\u00a0providedIn: 'root'\n    })\n    export class NotificationsService {\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    import { NotificationsButtonComponent } from './components/notifications-button/notifications-button.component';\n    import { NotificationsService } from './services/notifications.service'; \u2190 Remove this\n    @NgModule({\n    \u00a0\u00a0declarations: [... ],\n    \u00a0\u00a0imports: [...],\n    \u00a0\u00a0providers: [\n    \u00a0\u00a0\u00a0\u00a0NotificationsService \u2190 Remove this\n    \u00a0\u00a0],\n    \u00a0\u00a0bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```", "```ts\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n    import { VersioningRoutingModule } from './versioning-routing.module';\n    import { VersioningComponent } from './versioning.component';\n    import { NotificationsManagerComponent } from './components/notifications-manager/notifications-manager.component';\n    import { NotificationsService } from '../services/notifications.service'; \u2190 Remove this\n    @NgModule({\n    \u00a0\u00a0declarations: [VersioningComponent, \u00a0\u00a0NotificationsManagerComponent],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0CommonModule,\n    \u00a0\u00a0\u00a0\u00a0VersioningRoutingModule,\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [\n    \u00a0\u00a0\u00a0\u00a0NotificationsService\u00a0\u00a0\u2190 Remove this\n    \u00a0\u00a0]\n    })\n    export class VersioningModule { }\n    ```", "```ts\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n    import { VersioningRoutingModule } from './versioning-routing.module';\n    import { VersioningComponent } from './versioning.component';\n    import { NotificationsManagerComponent } from './components/notifications-manager/notifications-manager.component';\n    import { NotificationsService } from '../services/notifications.service';\n    @NgModule({\n    \u00a0\u00a0declarations: [VersioningComponent, \u00a0\u00a0NotificationsManagerComponent],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0CommonModule,\n    \u00a0\u00a0\u00a0\u00a0VersioningRoutingModule,\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [\n    \u00a0\u00a0\u00a0\u00a0NotificationsService\n    \u00a0\u00a0]\n    })\n    export class VersioningModule { }\n    ```", "```ts\n    import { Injectable, SkipSelf } from '@angular/core';\n    ...\n    export class NotificationsService {\n    \u00a0\u00a0...\n    \u00a0\u00a0constructor(@SkipSelf() existingService: \u00a0\u00a0NotificationsService) {\n    \u00a0\u00a0\u00a0\u00a0if (existingService) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw Error ('The service has already been provided \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0in the app. Avoid providing it again in child \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0modules');\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    } \n    ```", "```ts\n    import { Injectable, Optional, SkipSelf } from '@angular/core';\n    ...\n    export class NotificationsService {\n    \u00a0\u00a0...\n    \u00a0\u00a0constructor(@Optional() @SkipSelf() existingService: \u00a0\u00a0NotificationsService) {\n    \u00a0\u00a0\u00a0\u00a0if (existingService) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw Error ('The service has already been provided \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0in the app. Avoid providing it again in child \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0modules');\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    } \n    ```", "```ts\n    ...\n    import { NotificationsManagerComponent } from './components/notifications-manager/notifications-manager.component';\n    import { NotificationsService } from '../services/notifications.service'; \u2190 Remove this\n    @NgModule({\n    \u00a0\u00a0declarations: [...],\n    \u00a0\u00a0imports: [...],\n    \u00a0\u00a0providers: [\n    \u00a0\u00a0\u00a0\u00a0NotificationsService \u2190 Remove this\n    \u00a0\u00a0]\n    })\n    export class VersioningModule { }\n    ```", "```ts\n    ng g m services\n    ```", "```ts\n     import { ModuleWithProviders, NgModule } from  '@angular/core';\n    import { CommonModule } from '@angular/common';\n    import { NotificationsService } from '../services/notifications.service';\n    @NgModule({\n    \u00a0\u00a0\u00a0\u00a0...\n    })\n    export class ServicesModule {\n    \u00a0\u00a0static forRoot(): ModuleWithProviders<ServicesModule> {\n    \u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ngModule: ServicesModule,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0providers: [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NotificationsService\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0]\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { NotificationsButtonComponent } from './components/notifications-button/notifications-button.component';\n    import { NotificationsService } from './services/notifications.service'; \u2190 Remove this\n    import { ServicesModule } from './services/services.module';\n    @NgModule({\n    \u00a0\u00a0declarations: [\n    \u00a0\u00a0\u00a0\u00a0AppComponent,\n    \u00a0\u00a0\u00a0\u00a0NotificationsButtonComponent\n    \u00a0\u00a0],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0BrowserModule,\n    \u00a0\u00a0\u00a0\u00a0AppRoutingModule,\n    \u00a0\u00a0\u00a0\u00a0ServicesModule.forRoot()\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [\n    \u00a0\u00a0\u00a0\u00a0NotificationsService \u2190 Remove this\n    \u00a0\u00a0],\n    \u00a0\u00a0bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```", "```ts\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n    import { VersioningRoutingModule } from './versioning-routing.module';\n    import { VersioningComponent } from './versioning.component';\n    import { NotificationsManagerComponent } from './components/notifications-manager/notifications-manager.component';\n    import { NotificationsService } from '../services/notifications.service'; \u2190 Remove\n    @NgModule({\n    \u00a0\u00a0declarations: [VersioningComponent, \u00a0\u00a0NotificationsManagerComponent],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0CommonModule,\n    \u00a0\u00a0\u00a0\u00a0VersioningRoutingModule,\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [\n    \u00a0\u00a0\u00a0\u00a0NotificationsService \u2190 Remove\n    \u00a0\u00a0]\n    })\n    export class VersioningModule { }\n    ```", "```ts\n    ng g service employee/services/employee-bucket\n    ```", "```ts\n    import { Injectable } from '@angular/core';\n    import { BucketService } from 'src/app/services/bucket.service';\n    @Injectable({\n    \u00a0\u00a0providedIn: 'root'\n    })\n    export class EmployeeBucketService extends BucketService {\n    \u00a0\u00a0constructor() {\n    \u00a0\u00a0\u00a0\u00a0super();\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { Injectable } from '@angular/core';\n    import { BucketService } from 'src/app/services/bucket.service';\n    @Injectable({\n    \u00a0\u00a0providedIn: 'root'\n    })\n    export class EmployeeBucketService extends BucketService {\n    \u00a0\u00a0constructor() {\n    \u00a0\u00a0\u00a0\u00a0super();\n    \u00a0\u00a0}\n    \u00a0\u00a0removeItem() {\n    \u00a0\u00a0\u00a0\u00a0alert('Employees can not delete items');\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { NgModule } from '@angular/core';\n    ...\n    import { BucketService } from '../services/bucket.service';\n    import { EmployeeBucketService } from './services/employee-bucket.service';\n    @NgModule({\n    \u00a0\u00a0declarations: [...],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0...\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [{\n    \u00a0\u00a0\u00a0\u00a0provide: BucketService,\n    \u00a0\u00a0\u00a0\u00a0useClass: EmployeeBucketService\n    \u00a0\u00a0}]\n    })\n    export class EmployeeModule { }\n    ```", "```ts\n    import { InjectionToken } from '@angular/core';\n    export interface IAppConfig {\n    \u00a0\u00a0canDeleteItems: boolean;\n    }\n    export const APP_CONFIG = new InjectionToken<IAppConfig>('APP_CONFIG');\n    export const AppConfig: IAppConfig = {\n    \u00a0\u00a0canDeleteItems: true\n    }\n    ```", "```ts\n    ...\n    import { AppConfig, APP_CONFIG } from './constants/app-config';\n    @NgModule({\n    \u00a0\u00a0declarations: [\n    \u00a0\u00a0\u00a0\u00a0AppComponent\n    \u00a0\u00a0],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [{\n    \u00a0\u00a0\u00a0\u00a0provide: APP_CONFIG,\n    \u00a0\u00a0\u00a0\u00a0useValue: AppConfig\n    \u00a0\u00a0}],\n    \u00a0\u00a0bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```", "```ts\n    import { Component, Inject, OnInit } from '@angular/core';\n    ...\n    import { IAppConfig, APP_CONFIG } from '../../../constants/app-config';\n    ...\n    export class BucketComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0constructor(private bucketService: BucketService, \u00a0\u00a0@Inject(APP_CONFIG) private config: IAppConfig) { }\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class BucketComponent implements OnInit {\n    \u00a0\u00a0$bucket: Observable<IFruit[]>;\n    \u00a0\u00a0selectedFruit: Fruit = '' as null;\n    \u00a0\u00a0fruits: string[] = Object.values(Fruit);\n    \u00a0\u00a0canDeleteItems: boolean;\n    \u00a0\u00a0constructor(private bucketService: BucketService, \u00a0\u00a0@Inject(APP_CONFIG) private config: IAppConfig) { }\n    \u00a0\u00a0ngOnInit(): void {\n    \u00a0\u00a0\u00a0\u00a0this.$bucket = this.bucketService.$bucket;\n    \u00a0\u00a0\u00a0\u00a0this.bucketService.loadItems();\n    \u00a0\u00a0\u00a0\u00a0this.canDeleteItems = this.config.canDeleteItems;\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    <div class=\"buckets\" *ngIf=\"$bucket | async as bucket\">\n    \u00a0\u00a0<h4>Bucket <i class=\"material-icons\">shopping_cart \u00a0\u00a0</i></h4>\n    \u00a0\u00a0<div class=\"add-section\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"fruits\">\n    \u00a0\u00a0\u00a0\u00a0<ng-container *ngIf=\"bucket.length > 0; else \u00a0\u00a0\u00a0\u00a0bucketEmptyMessage\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"fruits__item\" *ngFor=\"let item of \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bucket;\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"fruits__item__title\">{{item.name}}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div *ngIf=\"canDeleteItems\" class=\"fruits__\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0item__delete-icon\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(click)=\"deleteFromBucket(item)\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"material-icons\">delete</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</ng-container>\n    \u00a0\u00a0</div>\n    </div>\n    <ng-template #bucketEmptyMessage>\n    \u00a0\u00a0...\n    </ng-template>\n    ```", "```ts\n    import { IAppConfig } from '../../constants/app-config';\n    export const EmployeeConfig: IAppConfig = {\n    \u00a0\u00a0canDeleteItems: false\n    } \n    ```", "```ts\n    ...\n    import { EmployeeComponent } from './employee.component';\n    import { APP_CONFIG } from '../constants/app-config';\n    import { EmployeeConfig } from './constants/employee-config';\n    @NgModule({\n    \u00a0\u00a0declarations: [EmployeeComponent],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [{\n    \u00a0\u00a0\u00a0\u00a0provide: APP_CONFIG,\n    \u00a0\u00a0\u00a0\u00a0useValue: EmployeeConfig\n    \u00a0\u00a0}]\n    })\n    export class EmployeeModule { }\n    ```"]