["```ts\n    export class AppComponent {\n    \u00a0\u00a0notificationsCount = 0;\n    }\n    ```", "```ts\n    import { Component, OnInit, Input } from '@angular/core';\n    @Component({\n    \u00a0\u00a0selector: 'app-notifications-manager',\n    \u00a0\u00a0templateUrl: './notifications-manager.component.html',\n    \u00a0\u00a0styleUrls: ['./notifications-manager.component.scss']\n    })\n    export class NotificationsManagerComponent implements OnInit {\n    \u00a0\u00a0@Input() count = 0\n    \u00a0\u00a0constructor() { }\n    \u00a0\u00a0ngOnInit(): void {\n    \u00a0\u00a0}\n    \u00a0\u00a0addNotification() {\n    \u00a0\u00a0\u00a0\u00a0this.count++;\n    \u00a0\u00a0}\n    \u00a0\u00a0removeNotification() {\n    \u00a0\u00a0\u00a0\u00a0if (this.count == 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0this.count--;\n    \u00a0\u00a0} \n    \u00a0\u00a0resetCount() {\n    \u00a0\u00a0\u00a0\u00a0this.count = 0;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n     <div class=\"notif-manager\">\n    \u00a0\u00a0<div class=\"notif-manager__count\">\n    \u00a0\u00a0\u00a0\u00a0Notifications Count: {{count}}\n    \u00a0\u00a0</div>\n    \u00a0\u00a0...\n    </div>\n    ```", "```ts\n     <div class=\"content\" role=\"main\">\n    \u00a0\u00a0<app-notifications-manager\n    \u00a0\u00a0\u00a0\u00a0[count]=\"notificationsCount\">\n    \u00a0\u00a0</app-notifications-manager>\n    </div>\n    ```", "```ts\n    export class AppComponent {\n    \u00a0\u00a0notificationsCount = 10;\n    }\n    ```", "```ts\n    import { Component, OnInit, Input } from '@angular/core';\n    ...\n    export class NotificationsButtonComponent implements OnInit {\n    \u00a0\u00a0@Input() count = 0;\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    <!-- Toolbar -->\n    <div class=\"toolbar\" role=\"banner\">\n    \u00a0\u00a0...\n    \u00a0\u00a0<span>@Component Inputs and Outputs</span>\n    \u00a0\u00a0<div class=\"spacer\"></div>\n    \u00a0\u00a0<div class=\"notif-bell\">\n    \u00a0\u00a0\u00a0\u00a0<app-notifications-button \u00a0\u00a0\u00a0\u00a0[count]=\"notificationsCount\">\n    \u00a0\u00a0\u00a0\u00a0</app-notifications-button>\n    \u00a0\u00a0</div>\n    </div>\n    ...\n    ```", "```ts\n    <div class=\"bell\">\n    \u00a0\u00a0<i class=\"material-icons\">notifications</i>\n    \u00a0\u00a0<div class=\"bell__count\">\n    \u00a0\u00a0\u00a0\u00a0<div class=\"bell__count__digits\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{count}}\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n    ...\n    export class NotificationsManagerComponent implements OnInit {\n    \u00a0\u00a0@Input() count = 0\n    \u00a0\u00a0@Output() countChanged = new EventEmitter<number>();\n    \u00a0\u00a0...\n    \u00a0\u00a0addNotification() {\n    \u00a0\u00a0\u00a0\u00a0this.count++;\n    \u00a0\u00a0\u00a0\u00a0this.countChanged.emit(this.count);\n    \u00a0\u00a0}\n    \u00a0\u00a0removeNotification() {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0this.count--;\n    \u00a0\u00a0\u00a0\u00a0this.countChanged.emit(this.count);\n    \u00a0\u00a0}\n    \u00a0\u00a0resetCount() {\n    \u00a0\u00a0\u00a0\u00a0this.count = 0;\n    \u00a0\u00a0\u00a0\u00a0this.countChanged.emit(this.count);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0<app-notifications-manager \u00a0\u00a0(countChanged)=\"updateNotificationsCount($event)\" \u00a0\u00a0[count]=\"notificationsCount\"></app-notifications-\u00a0\u00a0manager>\n    </div>\n    ```", "```ts\n    export class AppComponent {\n    \u00a0\u00a0notificationsCount = 10;\n    \u00a0\u00a0updateNotificationsCount(count: number) {\n    \u00a0\u00a0\u00a0\u00a0this.notificationsCount = count;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ng g service services/Notifications\n    ```", "```ts\n    import { Injectable } from '@angular/core';\n    import { BehaviorSubject } from 'rxjs';\n    @Injectable({\n    \u00a0\u00a0providedIn: 'root'\n    })\n    export class NotificationsService {\n    \u00a0\u00a0private count: BehaviorSubject<number> = new \u00a0\u00a0BehaviorSubject<number>(0);\n    \u00a0\u00a0constructor() { }\n    }\n    ```", "```ts\n    import { Injectable } from '@angular/core';\n    import { BehaviorSubject, Observable } from 'rxjs';\n    ...\n    export class NotificationsService {\n    \u00a0\u00a0private count: BehaviorSubject<number> = new \u00a0\u00a0BehaviorSubject<number>(0);\n    \u00a0\u00a0count$: Observable<number> = this.count.asObservable();\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    import { Component, OnInit } from '@angular/core';\n    import { Observable } from 'rxjs';\n    import { NotificationsService } from '../services/notifications.service';\n    ...\n    export class NotificationsManagerComponent implements OnInit {\n    \u00a0\u00a0notificationsCount$: Observable<number>;\n    \u00a0\u00a0constructor(private notificationsService: \u00a0\u00a0NotificationsService) { }\n\n    \u00a0\u00a0ngOnInit(): void {\n    \u00a0\u00a0\u00a0\u00a0this.notificationsCount$ = this.notificationsService.\u00a0\u00a0\u00a0\u00a0count$;\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class NotificationsManagerComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0addNotification() {\n    \u00a0\u00a0\u00a0\u00a0// this.notificationsCount++;\n    \u00a0\u00a0}\n    \u00a0\u00a0removeNotification() {\n    \u00a0\u00a0\u00a0\u00a0// if (this.notificationsCount == 0) {\n    \u00a0\u00a0\u00a0\u00a0//\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0// }\n    \u00a0\u00a0\u00a0\u00a0// this.notificationsCount--;\n    \u00a0\u00a0}\n    \u00a0\u00a0resetCount() {\n    \u00a0\u00a0\u00a0\u00a0// this.notificationsCount = 0;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <div class=\"notif-manager\">\n    \u00a0\u00a0<div class=\"notif-manager__count\">\n    \u00a0\u00a0\u00a0\u00a0Notifications Count: {{notificationsCount$ | async}}\n    \u00a0\u00a0</div>\n    \u00a0\u00a0...\n    </div>\n    ```", "```ts\n    import { Component, OnInit } from '@angular/core';\n    import { NotificationsService } from '../services/notifications.service';\n    import { Observable } from 'rxjs';\n     ...\n    export class NotificationsButtonComponent implements OnInit {\n    \u00a0\u00a0notificationsCount$: Observable<number>;\n    \u00a0\u00a0constructor(private notificationsService: \u00a0\u00a0NotificationsService) { }\n\n    \u00a0\u00a0ngOnInit(): void {\n    \u00a0\u00a0\u00a0\u00a0this.notificationsCount$ = this.notificationsService.\u00a0\u00a0\u00a0\u00a0count$;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <div class=\"bell\">\n    \u00a0\u00a0<i class=\"material-icons\">notifications</i>\n    \u00a0\u00a0<div class=\"bell__count\">\n    \u00a0\u00a0\u00a0\u00a0<div class=\"bell__count__digits\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{notificationsCount$ | async}}\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    ...\n    export class NotificationsService {\n    \u00a0\u00a0private count: BehaviorSubject<number> = new \u00a0\u00a0BehaviorSubject<number>(10);\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class NotificationsService {\n    \u00a0\u00a0\u2026\n    \u00a0\u00a0constructor() {}\n    \u00a0\u00a0setCount(countVal) {\n    \u00a0\u00a0\u00a0\u00a0this.count.next(countVal);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    import { first } from 'rxjs/operators';\n    ...\n    export class NotificationsManagerComponent implements OnInit {\n    \u00a0\u00a0ngOnInit(): void {\n    \u00a0\u00a0\u00a0\u00a0this.notificationsCount$ = this.notificationsService.\u00a0\u00a0\u00a0\u00a0count$;\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    \u00a0\u00a0getCountValue(callback) {\n    \u00a0\u00a0\u00a0\u00a0this.notificationsCount$\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0first()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0).subscribe(callback)\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    import { Component, OnInit } from '@angular/core';\n    import { Observable } from 'rxjs';\n    import { NotificationsService } from '../services/notifications.service';\n    import { first } from 'rxjs/operators';\n\n    ...\n    export class NotificationsManagerComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0addNotification() {\n    \u00a0\u00a0\u00a0\u00a0this.getCountValue((countVal) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.notificationsService.setCount(++countVal)\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class NotificationsManagerComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0removeNotification() {\n    \u00a0\u00a0\u00a0\u00a0this.getCountValue((countVal) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (countVal === 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.notificationsService.setCount(--countVal);\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    \u00a0\u00a0resetCount() {\n    \u00a0\u00a0\u00a0\u00a0this.notificationsService.setCount(0);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    export class VcLogsComponent implements OnInit {\n    \u00a0\u00a0@Input() vName;\n    \u00a0\u00a0logs: string[] = [];\n    \u00a0\u00a0constructor() { }\n    ...\n    }\n    ```", "```ts\n    <h5>Latest Version = {{vName}}</h5>\n    <div class=\"logs\">\n    \u00a0\u00a0<div class=\"logs__item\" *ngFor=\"let log of logs\">\n    \u00a0\u00a0\u00a0\u00a0{{log}}\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    h5 {\n    \u00a0\u00a0text-align: center;\n    }\n    .logs {\n    \u00a0\u00a0padding: 1.8rem;\n    \u00a0\u00a0background-color: #333;\n    \u00a0\u00a0min-height: 200px;\n    \u00a0\u00a0border-radius: 14px;\n    \u00a0\u00a0&__item {\n    \u00a0\u00a0\u00a0\u00a0color: lightgreen;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    export class VcLogsComponent implements OnInit {\n    \u00a0\u00a0_vName: string;\n    @Input() \n    \u00a0\u00a0get vName() {\n    \u00a0\u00a0\u00a0\u00a0return this._vName;\n    \u00a0\u00a0};\n    \u00a0\u00a0set vName(name: string) {\n    \u00a0\u00a0\u00a0this._vName = name;\n    \u00a0\u00a0}\n    \u00a0\u00a0logs: string[] = [];\n    \u00a0\u00a0constructor() { }\n    ...\n    }\n    ```", "```ts\n    export class VcLogsComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0set vName(name: string) {\n    \u00a0\u00a0\u00a0\u00a0if (!name) return;\n    \u00a0\u00a0\u00a0\u00a0if (!this._vName) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.logs.push('initial version is ${name.trim()}')\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0this._vName = name;\n    \u00a0\u00a0}\n    ...\n    }\n    ```", "```ts\n    export class VcLogsComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0set vName(name: string) {\n    \u00a0\u00a0\u00a0\u00a0if (!name) return;\n    \u00a0\u00a0\u00a0\u00a0if (!this._vName) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.logs.push('initial version is ${name.trim()}')\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.logs.push('version changed to ${name.trim()}')\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0this._vName = name;\n    \u00a0\u00a0}\n    ```", "```ts\n    export class VcLogsComponent implements OnInit {\n    \u00a0\u00a0@Input() vName;\n    \u00a0\u00a0logs: string[] = [];\n    \u00a0\u00a0constructor() { }\n    ...\n    }\n    ```", "```ts\n    <h5>Latest Version = {{vName}}</h5>\n    <div class=\"logs\">\n    \u00a0\u00a0<div class=\"logs__item\" *ngFor=\"let log of logs\">\n    \u00a0\u00a0\u00a0\u00a0{{log}}\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    h5 {\n    \u00a0\u00a0text-align: center;\n    }\n    .logs {\n    \u00a0\u00a0padding: 1.8rem;\n    \u00a0\u00a0background-color: #333;\n    \u00a0\u00a0min-height: 200px;\n    \u00a0\u00a0border-radius: 14px;\n    \u00a0\u00a0&__item {\n    \u00a0\u00a0\u00a0\u00a0color: lightgreen;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\n    ...\n    export class VcLogsComponent implements OnInit, OnChanges {\n    \u00a0\u00a0@Input() vName;\n    \u00a0\u00a0logs: string[] = [];\n    \u00a0\u00a0constructor() {}\n    \u00a0\u00a0ngOnInit(): void {}\n    \u00a0\u00a0ngOnChanges(changes: SimpleChanges) {\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    export class VcLogsComponent implements OnInit, OnChanges {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnChanges(changes: SimpleChanges) {\n    \u00a0\u00a0\u00a0\u00a0const currValue = changes.vName.currentValue;\n    \u00a0\u00a0\u00a0\u00a0if (changes.vName.isFirstChange()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.logs.push('initial version is \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0${currValue.trim()}')\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    export class VcLogsComponent implements OnInit, OnChanges {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnChanges(changes: SimpleChanges) {\n    \u00a0\u00a0\u00a0\u00a0const currValue = changes.vName.currentValue;\n    \u00a0\u00a0\u00a0\u00a0if (changes.vName.isFirstChange()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.logs.push('initial version is \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0${currValue.trim()}')\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.logs.push('version changed to \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0${currValue.trim()}')\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0...\n    \u00a0\u00a0<app-gallery #gallery></app-gallery>\n    </div>\n    ```", "```ts\n    import { Component } from '@angular/core';\n    import { GalleryComponent } from './components/gallery/gallery.component';\n    ...\n    export class AppComponent {\n    \u00a0\u00a0...\n    \u00a0\u00a0addNewPicture(gallery: GalleryComponent) {\n    \u00a0\u00a0\u00a0\u00a0console.log('added new picture');\n    \u00a0\u00a0}\n    \u00a0\u00a0removeFirstPicture(gallery: GalleryComponent) {\n    \u00a0\u00a0\u00a0\u00a0console.log('removed first picture');\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    \u2026\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0<div class=\"gallery-actions\">\n    \u00a0\u00a0\u00a0\u00a0<button class=\"btn btn-primary\" \u00a0\u00a0\u00a0\u00a0(click)=\"addNewPicture(gallery)\">Add Picture</button>\n    \u00a0\u00a0\u00a0\u00a0<button class=\"btn btn-danger\" \u00a0\u00a0\u00a0\u00a0(click)=\"removeFirstPicture(gallery)\">Remove \u00a0\u00a0\u00a0\u00a0First</button>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0...\n    </div>\n    ```", "```ts\n    ...\n    export class AppComponent {\n    \u00a0\u00a0...\n    \u00a0\u00a0addNewPicture(gallery: GalleryComponent) {\n    \u00a0\u00a0\u00a0\u00a0gallery.pictures.unshift(gallery.generateImage());\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class AppComponent {\n    \u00a0\u00a0\u00a0...\n    \u00a0\u00a0removeFirstPicture(gallery: GalleryComponent) {\n    \u00a0\u00a0\u00a0\u00a0gallery.pictures.shift();\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { Component } from '@angular/core';\n    import { GalleryComponent } from './components/gallery/gallery.component';\n    ...\n    export class AppComponent {\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    import { Component, ViewChild } from '@angular/core';\n    import { GalleryComponent } from './components/gallery/gallery.component';\n    export class AppComponent {\n    \u00a0\u00a0title = 'cc-view-child';\n    \u00a0\u00a0@ViewChild(GalleryComponent) gallery;\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class AppComponent {\n    \u00a0\u00a0title = 'cc-view-child';\n    \u00a0\u00a0@ViewChild(GalleryComponent) gallery: GalleryComponent;\n    \u00a0\u00a0addNewPicture() {\n    \u00a0\u00a0\u00a0\u00a0this.gallery.pictures.unshift(\u00a0\u00a0\u00a0\u00a0this.gallery.generateImage());\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class AppComponent {\n    ...\n    \u00a0\u00a0removeFirstPicture() {\n    \u00a0\u00a0\u00a0\u00a0this.gallery.pictures.shift();\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <div class=\"card-container\" #vrf></div>\n    ```", "```ts\n    import { Component, OnInit, Input, ComponentFactoryResolver } from '@angular/core';\n    ...\n    export class SocialCardComponent implements OnInit {\n    \u00a0\u00a0@Input() type: SocialCardType;\n    \u00a0\u00a0cardTypes = SocialCardType;\n    \u00a0\u00a0constructor(private componentFactoryResolver: \u00a0\u00a0ComponentFactoryResolver) { }\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    import { Component, OnInit, Input, ComponentFactoryResolver, ViewChild, ViewContainerRef } from '@angular/core';\n    ...\n    export class SocialCardComponent implements OnInit {\n    \u00a0\u00a0@Input() type: SocialCardType;\n    \u00a0\u00a0@ViewChild('vrf', {read: ViewContainerRef}) vrf: \u00a0\u00a0ViewContainerRef;\n    \u00a0\u00a0cardTypes = SocialCardType;\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    import { Component, OnInit, OnChanges, Input, ComponentFactoryResolver, ViewChild, ViewContainerRef, SimpleChanges } from '@angular/core';\n    ...\n    export class SocialCardComponent implements OnInit, OnChanges {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnChanges(changes: SimpleChanges) {\n    \u00a0\u00a0\u00a0\u00a0if (changes.type.currentValue !== undefined) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('card type changed to: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0${changes.type.currentValue}')\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import {...} from '@angular/core';\n    import { SocialCardType } from 'src/app/constants/social-card-type';\n    import { FbCardComponent } from '../fb-card/fb-card.component';\n    import { TwitterCardComponent } from '../twitter-card/twitter-card.component';\n    ...\n    export class SocialCardComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnChanges(changes: SimpleChanges) {\n    \u00a0\u00a0\u00a0\u00a0if (changes.type.currentValue !== undefined) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.loadDynamicComponent(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0changes.type.currentValue)\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    \u00a0\u00a0loadDynamicComponent(type: SocialCardType) {\n    \u00a0\u00a0\u00a0\u00a0let component;\n    \u00a0\u00a0\u00a0\u00a0switch (type) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case SocialCardType.Facebook:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0component = FbCardComponent;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case SocialCardType.Twitter:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0component = TwitterCardComponent;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    export class SocialCardComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0loadDynamicComponent(type: SocialCardType) {\n    \u00a0\u00a0\u00a0\u00a0let component;\n    \u00a0\u00a0\u00a0\u00a0switch (type) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0const componentFactory = this.componentFactory \u00a0\u00a0\u00a0\u00a0Resolver.resolveComponentFactory(component);\n    \u00a0\u00a0\u00a0\u00a0this.vrf.createComponent(componentFactory);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n...\nexport class SocialCardComponent implements OnInit {\n\u00a0\u00a0...\n\u00a0\u00a0loadDynamicComponent(type: SocialCardType) {\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0const componentFactory = this.\u00a0\u00a0\u00a0\u00a0componentFactoryResolver.\u00a0\u00a0\u00a0\u00a0resolveComponentFactory(component);\n\u00a0\u00a0\u00a0\u00a0this.vrf.clear();\n\u00a0\u00a0\u00a0\u00a0this.vrf.createComponent(componentFactory);\n\u00a0\u00a0}\n}\n```"]