["```ts\n    ng g c components/release-form\n    ```", "```ts\n    <div class=\"version-control\">\n    \u00a0\u00a0<app-release-form></app-release-form>\n    \u00a0\u00a0<app-release-logs [logs]=\"releaseLogs\"></app-release-\u00a0\u00a0logs>\n    </div>\n    ```", "```ts\n    :host {\n    \u00a0\u00a0...\n    \u00a0\u00a0min-width: 400px;\n    \u00a0\u00a0.version-control {\n    \u00a0\u00a0\u00a0\u00a0display: flex;\n    \u00a0\u00a0\u00a0\u00a0justify-content: center;\n    \u00a0\u00a0}\n    \u00a0\u00a0app-release-logs,\n    \u00a0\u00a0app-release-form {\n    \u00a0\u00a0\u00a0\u00a0flex: 1;\n    \u00a0\u00a0}\n    \u00a0\u00a0app-release-form {\n    \u00a0\u00a0\u00a0\u00a0margin-right: 20px;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { Component, OnInit } from '@angular/core';\n    import { IReleaseLog } from 'src/app/classes/release-log';\n    import { Apps } from 'src/app/constants/apps';\n    ...\n    export class ReleaseFormComponent implements OnInit {\n    \u00a0\u00a0apps = Object.values(Apps);\n    \u00a0\u00a0newLog: IReleaseLog = {\n    \u00a0\u00a0\u00a0\u00a0app: Apps.CALENDAR,\n    \u00a0\u00a0\u00a0\u00a0version: '0.0.0'\n    \u00a0\u00a0};\n    \u00a0\u00a0constructor() { }\n    \u00a0\u00a0ngOnInit(): void {\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <form>\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0<label for=\"appName\">Select App</label>\n    \u00a0\u00a0\u00a0\u00a0<select class=\"form-control\" id=\"appName\" required>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<option value=\"\">--Choose--</option>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<option *ngFor=\"let app of apps\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[value]=\"app\">{{app}}</option>\n    \u00a0\u00a0\u00a0\u00a0</select>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0<label for=\"versionNumber\">Version Number</label>\n    \u00a0\u00a0\u00a0\u00a0<input type=\"text\" class=\"form-control\" \u00a0\u00a0\u00a0\u00a0id=\"versionNumber\" aria-describedby=\"versionHelp\" \u00a0\u00a0\u00a0\u00a0placeholder=\"Enter version number\">\n    \u00a0\u00a0\u00a0\u00a0<small id=\"versionHelp\" class=\"form-text \u00a0\u00a0\u00a0\u00a0text-muted\">Use semantic versioning (x.x.x)</small>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<button type=\"submit\" class=\"btn btn-primary\">\u00a0\u00a0Submit</button>\n    </form>\n    ```", "```ts\n    ...\n    import { ReleaseFormComponent } from './components/release-form/release-form.component';\n    import { FormsModule } from '@angular/forms';\n    @NgModule({\n    \u00a0\u00a0declarations: [...],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0BrowserModule,\n    \u00a0\u00a0\u00a0\u00a0AppRoutingModule,\n    \u00a0\u00a0\u00a0\u00a0FormsModule\n    \u00a0\u00a0],\n    \u00a0\u00a0...\n    })\n    export class AppModule { }\n    ```", "```ts\n    <form #releaseForm=\"ngForm\">\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0<label for=\"appName\">Select App</label>\n    \u00a0\u00a0\u00a0\u00a0<select name=\"app\" [(ngModel)]=\"newLog.app\" \u00a0\u00a0\u00a0\u00a0class=\"form-control\" id=\"appName\" required>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<option value=\"\">--Choose--</option>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<option *ngFor=\"let app of apps\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[value]=\"app\">{{app}}</option>\n    \u00a0\u00a0\u00a0\u00a0</select>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0<label for=\"versionNumber\">Version Number</label>\n    \u00a0\u00a0\u00a0\u00a0<input name=\"version\" [(ngModel)]=\"newLog.version\" \u00a0\u00a0\u00a0\u00a0type=\"text\" class=\"form-control\" id=\"versionNumber\" \u00a0\u00a0\u00a0\u00a0aria-describedby=\"versionHelp\" placeholder=\"Enter \u00a0\u00a0\u00a0\u00a0version number\">\n    \u00a0\u00a0\u00a0\u00a0<small id=\"versionHelp\" class=\"form-text text-\u00a0\u00a0\u00a0\u00a0muted\">Use semantic versioning (x.x.x)</small>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<button type=\"submit\" class=\"btn btn-primary\">\u00a0\u00a0Submit</button>\n    </form>\n    ```", "```ts\n    import { Component, EventEmitter, OnInit, Output } from '@angular/core';\n    import { NgForm } from '@angular/forms';\n    import { IReleaseLog, ReleaseLog } from 'src/app/classes/release-log';\n    ...\n    export class ReleaseFormComponent implements OnInit {\n    \u00a0\u00a0@Output() newReleaseLog = new \u00a0\u00a0EventEmitter<ReleaseLog>();\n    \u00a0\u00a0apps = Object.values(Apps);\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit(): void {\n    \u00a0\u00a0}\n    \u00a0\u00a0formSubmit(form: NgForm): void {\n    \u00a0\u00a0\u00a0\u00a0const { app, version } = form.value;\n    \u00a0\u00a0\u00a0\u00a0const newLog: ReleaseLog = new ReleaseLog(app, \u00a0\u00a0\u00a0\u00a0version)\n    \u00a0\u00a0\u00a0\u00a0this.newReleaseLog.emit(newLog);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <form\u00a0\u00a0#releaseForm=\"ngForm\" (ngSubmit)=\"formSubmit(releaseForm)\">\n    \u00a0\u00a0...\n    </form>\n    ```", "```ts\n    <div class=\"version-control\">\n    \u00a0\u00a0<app-release-form (newReleaseLog)=\"addNewReleaseLog \u00a0\u00a0($event)\"></app-release-form>\n    \u00a0\u00a0<app-release-logs [logs]=\"releaseLogs\"></app-release-\u00a0\u00a0logs>\n    </div>\n    ```", "```ts\n    ...\n    export class VersionControlComponent implements OnInit {\n    \u00a0\u00a0releaseLogs: ReleaseLog[] = [];\n    \u00a0\u00a0...\n    \u00a0\u00a0addNewReleaseLog(log: ReleaseLog) {\n    \u00a0\u00a0\u00a0\u00a0this.releaseLogs.unshift(log);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <form\u00a0\u00a0#releaseForm=\"ngForm\" (ngSubmit)=\"formSubmit(releaseForm)\">\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0<label for=\"appName\">Select App</label>\n    \u00a0\u00a0\u00a0\u00a0<select #nameInput=\"ngModel\" name=\"app\" \u00a0\u00a0\u00a0\u00a0[(ngModel)]=\"newLog.app\" class=\"form-control\" \u00a0\u00a0\u00a0\u00a0id=\"appName\" required>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<option value=\"\">--Choose--</option>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<option *ngFor=\"let app of apps\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[value]=\"app\">{{app}}</option>\n    \u00a0\u00a0\u00a0\u00a0</select>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0<label for=\"versionNumber\">Version Number</label>\n    \u00a0\u00a0\u00a0\u00a0<input #versionInput=\"ngModel\" name=\"version\" \u00a0\u00a0\u00a0\u00a0[(ngModel)]=\"newLog.version\" type=\"text\" \u00a0\u00a0\u00a0\u00a0class=\"form-control\" id=\"versionNumber\" aria-\u00a0\u00a0\u00a0\u00a0describedby=\"versionHelp\" placeholder=\"Enter \u00a0\u00a0\u00a0\u00a0version number\" required>\n    \u00a0\u00a0\u00a0\u00a0<small id=\"versionHelp\" class=\"form-text \u00a0\u00a0\u00a0\u00a0text-muted\">Use semantic versioning (x.x.x)</small>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<button type=\"submit\" class=\"btn btn-primary\">\u00a0\u00a0Submit</button>\n    </form>\n    ```", "```ts\n    <form\u00a0\u00a0#releaseForm=\"ngForm\" (ngSubmit)=\"formSubmit(releaseForm)\">\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0<label for=\"appName\">Select App</label>\n    \u00a0\u00a0\u00a0\u00a0<select #nameInput=\"ngModel\" name=\"app\" \u00a0\u00a0\u00a0\u00a0[(ngModel)]=\"newLog.app\" class=\"form-control\" \u00a0\u00a0\u00a0\u00a0id=\"appName\" required>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<option value=\"\">--Choose--</option>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<option *ngFor=\"let app of apps\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[value]=\"app\">{{app}}</option>\n    \u00a0\u00a0\u00a0\u00a0</select>\n    \u00a0\u00a0\u00a0\u00a0<div [hidden]=\"nameInput.valid || nameInput.pristine\" \u00a0\u00a0\u00a0\u00a0class=\"alert alert-danger\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Please choose an app\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<button type=\"submit\" class=\"btn btn-primary\">Submit \u00a0\u00a0</button>\n    </form>\n    ```", "```ts\n    ...\n    import { Apps } from 'src/app/constants/apps';\n    import { REGEXES } from 'src/app/constants/regexes';\n    ...\n    export class ReleaseFormComponent implements OnInit {\n    \u00a0\u00a0@Output() newReleaseLog = new \u00a0\u00a0EventEmitter<ReleaseLog>();\n    \u00a0\u00a0apps = Object.values(Apps);\n    \u00a0\u00a0versionInputRegex = REGEXES.SEMANTIC_VERSION;\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    <form\u00a0\u00a0#releaseForm=\"ngForm\" (ngSubmit)=\"formSubmit(releaseForm)\">\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0<label for=\"versionNumber\">Version Number</label>\n    \u00a0\u00a0\u00a0\u00a0<input #versionInput=\"ngModel\" \u00a0\u00a0\u00a0\u00a0[pattern]=\"versionInputRegex\" name=\"version\" \u00a0\u00a0\u00a0\u00a0[(ngModel)]=\"newLog.version\" type=\"text\" \u00a0\u00a0\u00a0\u00a0class=\"form-control\" id=\"versionNumber\" aria-\u00a0\u00a0\u00a0\u00a0describedby=\"versionHelp\" placeholder=\"Enter \u00a0\u00a0\u00a0\u00a0version number\" required>\n    \u00a0\u00a0\u00a0\u00a0<small id=\"versionHelp\" class=\"form-text \u00a0\u00a0\u00a0\u00a0text-muted\">Use semantic versioning (x.x.x)</small>\n    \u00a0\u00a0\u00a0\u00a0<div\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[hidden]=\"versionInput.value && \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(versionInput.valid || versionInput.pristine)\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class=\"alert alert-danger\"\n    \u00a0\u00a0\u00a0\u00a0>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Please write an appropriate version number\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<button type=\"submit\" class=\"btn btn-primary\">\u00a0\u00a0Submit</button>\n    </form>\n    ```", "```ts\n    :host {\n    \u00a0\u00a0/* Error messages */\n    \u00a0\u00a0.alert {\n    \u00a0\u00a0\u00a0\u00a0margin-top: 16px;\n    \u00a0\u00a0}\n    \u00a0\u00a0/* Valid form input */\n    \u00a0\u00a0.ng-valid[required], .ng-valid.required\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0border-bottom: 3px solid #259f2b;\n    \u00a0\u00a0}\n    \u00a0\u00a0/* Invalid form input */\n    \u00a0\u00a0.ng-invalid:not(form)\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0border-bottom: 3px solid #c92421;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <form #releaseForm=\"ngForm\" (ngSubmit)=\"formSubmit(releaseForm)\">\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<button type=\"submit\" [disabled]=\"releaseForm.invalid\" \u00a0\u00a0class=\"btn btn-primary\">Submit</button>\n    </form>\n    ```", "```ts\n    npm run test\n    ```", "```ts\n    import { ComponentFixture, TestBed } from '@angular/core/testing';\n    import { FormsModule } from '@angular/forms';\n    import { ReleaseFormComponent } from './release-form.component';\n    describe('ReleaseFormComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0beforeEach(async () => {\n    \u00a0\u00a0\u00a0\u00a0await TestBed.configureTestingModule({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0declarations: [ ReleaseFormComponent ],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imports: [ FormsModule ]\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0.compileComponents();\n    \u00a0\u00a0});\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should create', () => {\n    \u00a0\u00a0\u00a0\u00a0expect(component).toBeTruthy();\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\n    ...\n    @Component({\n    \u00a0\u00a0selector: 'app-release-form',\n    \u00a0\u00a0templateUrl: './release-form.component.html',\n    \u00a0\u00a0styleUrls: ['./release-form.component.scss']\n    })\n    export class ReleaseFormComponent implements OnInit {\n    \u00a0\u00a0@Output() newReleaseLog = new \u00a0\u00a0EventEmitter<ReleaseLog>();\n    \u00a0\u00a0@ViewChild('releaseForm') releaseForm: NgForm;\n    \u00a0\u00a0apps = Object.values(Apps);\n    \u00a0\u00a0versionInputRegex = REGEXES.SEMANTIC_VERSION;\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    import { ComponentFixture, TestBed, fakeAsync } from '@angular/core/testing';\n    import { ReleaseFormComponent } from './release-form.component';\n    describe('ReleaseFormComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should create', () => {\n    \u00a0\u00a0\u00a0\u00a0expect(component).toBeTruthy();\n    \u00a0\u00a0});\n    \u00a0\u00a0it('should submit a new release log with the correct \u00a0\u00a0input values', fakeAsync( () => {\n    \u00a0\u00a0\u00a0\u00a0expect(true).toBeFalsy();\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\n    ...\n    import { ReleaseLog } from 'src/app/classes/release-log';\n    ...\n    it('should submit a new release log with the correct input values', fakeAsync(async () => {\n    \u00a0\u00a0\u00a0\u00a0const submitButton = fixture.nativeElement.\u00a0\u00a0\u00a0\u00a0querySelector('button[type=\"submit\"]');\n    \u00a0\u00a0\u00a0\u00a0const CALENDAR_APP = component.apps[2];\n    \u00a0\u00a0\u00a0\u00a0spyOn(component.newReleaseLog, 'emit');\n    \u00a0\u00a0\u00a0\u00a0await fixture.whenStable(); // wait for Angular \u00a0\u00a0\u00a0\u00a0to configure the form\n    \u00a0\u00a0\u00a0\u00a0component.releaseForm.controls[\u00a0\u00a0\u00a0\u00a0'version'].setValue('2.2.2');\n    \u00a0\u00a0\u00a0\u00a0component.releaseForm.controls[\u00a0\u00a0\u00a0\u00a0'app'].setValue(CALENDAR_APP);\n    \u00a0\u00a0\u00a0\u00a0submitButton.click();\n    \u00a0\u00a0\u00a0\u00a0const expectedReleaseLog = new ReleaseLog(CALENDAR_\u00a0\u00a0\u00a0\u00a0APP, '2.2.2');\n    \u00a0\u00a0\u00a0\u00a0expect(component.newReleaseLog.emit)\u00a0\u00a0\u00a0\u00a0.toHaveBeenCalledWith(expectedReleaseLog);\n    \u00a0\u00a0}));\n    ```", "```ts\n    ...\n    describe('ReleaseFormComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should submit a new release log with the correct \u00a0\u00a0input values', fakeAsync(async () => {\n    \u00a0\u00a0\u00a0\u00a0const submitButton = fixture.nativeElement.\u00a0\u00a0\u00a0\u00a0querySelector('button[type=\"submit\"]');\n    \u00a0\u00a0\u00a0\u00a0const CALENDAR_APP = component.apps[2];\n    \u00a0\u00a0\u00a0\u00a0spyOn(component.newReleaseLog, 'emit');\n    \u00a0\u00a0\u00a0\u00a0await fixture.whenStable(); // wait for Angular \u00a0\u00a0\u00a0\u00a0to configure the form\n    \u00a0\u00a0\u00a0\u00a0const expectedError = 'Invalid version provided. \u00a0\u00a0\u00a0\u00a0Please provide a valid version as \u00a0\u00a0\u00a0\u00a0(major.minor.patch)';\n    \u00a0\u00a0\u00a0\u00a0component.releaseForm.controls[\u00a0\u00a0\u00a0\u00a0'version'].setValue('x.x.x');\n    \u00a0\u00a0\u00a0\u00a0component.releaseForm.controls[\u00a0\u00a0\u00a0\u00a0'app'].setValue(CALENDAR_APP);\n    \u00a0\u00a0\u00a0\u00a0expect(() => component.formSubmit(component.\u00a0\u00a0\u00a0\u00a0releaseForm))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.toThrowError(expectedError);\n    \u00a0\u00a0\u00a0\u00a0fixture.detectChanges();\n    \u00a0\u00a0\u00a0\u00a0expect(submitButton.hasAttribute(\u00a0\u00a0\u00a0\u00a0'disabled')).toBe(true);\n    \u00a0\u00a0\u00a0\u00a0expect(component.newReleaseLog.emit)\u00a0\u00a0\u00a0\u00a0.not.toHaveBeenCalled();\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\n    ...\n    describe('ReleaseFormComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should disable the submit button when we \u00a0\u00a0don\\'t have an app selected', fakeAsync(async () => {\n    \u00a0\u00a0\u00a0\u00a0const submitButton = fixture.nativeElement.\u00a0\u00a0\u00a0\u00a0querySelector('button[type=\"submit\"]');\n    \u00a0\u00a0\u00a0\u00a0spyOn(component.newReleaseLog, 'emit');\n    \u00a0\u00a0\u00a0\u00a0await fixture.whenStable(); // wait for Angular \u00a0\u00a0\u00a0\u00a0to configure the form\n    \u00a0\u00a0\u00a0\u00a0component.releaseForm.controls[\u00a0\u00a0\u00a0\u00a0'version'].setValue('2.2.2');\n    \u00a0\u00a0\u00a0\u00a0component.releaseForm.controls[\u00a0\u00a0\u00a0\u00a0'app'].setValue(null);\n    \u00a0\u00a0\u00a0\u00a0fixture.detectChanges();\n    \u00a0\u00a0\u00a0\u00a0expect(submitButton.hasAttribute(\u00a0\u00a0\u00a0\u00a0'disabled')).toBe(true);\n    \u00a0\u00a0\u00a0\u00a0expect(component.newReleaseLog.emit \u00a0\u00a0\u00a0\u00a0).not.toHaveBeenCalled();\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\nexpect(() => component.formSubmit(component.releaseForm))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.toThrowError(expectedError);\n```", "```ts\n    ...\n    import { ReleaseFormComponent } from './components/release-form/release-form.component';\n    import { ReactiveFormsModule } from '@angular/forms';\n    @NgModule({\n    \u00a0\u00a0declarations: [...],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0BrowserModule,\n    \u00a0\u00a0\u00a0\u00a0AppRoutingModule,\n    \u00a0\u00a0\u00a0\u00a0ReactiveFormsModule\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [],\n    \u00a0\u00a0bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```", "```ts\n    ...\n    import { FormControl, FormGroup, Validators } from '@angular/forms';\n    import { REGEXES } from 'src/app/constants/regexes';\n    @Component(...)\n    export class ReleaseFormComponent implements OnInit {\n    \u00a0\u00a0apps = Object.values(Apps);\n    \u00a0\u00a0versionInputRegex = REGEXES.SEMANTIC_VERSION;\n    \u00a0\u00a0releaseForm = new FormGroup({\n    \u00a0\u00a0\u00a0\u00a0app: new FormControl('', [Validators.required]),\n    \u00a0\u00a0\u00a0\u00a0version: new FormControl('', [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Validators.required,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Validators.pattern(REGEXES.SEMANTIC_VERSION)\n    \u00a0\u00a0\u00a0\u00a0]),\n    \u00a0\u00a0})\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    <form [formGroup]=\"releaseForm\">\n    \u00a0\u00a0...\n    </form>\n    ```", "```ts\n    <form [formGroup]=\"releaseForm\">\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0<select formControlName=\"app\" class=\"form-control\" \u00a0\u00a0\u00a0\u00a0id=\"appName\" required>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0</select>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0<input formControlName=\"version\" type=\"text\" \u00a0\u00a0\u00a0\u00a0class=\"form-control\" id=\"versionNumber\" aria-\u00a0\u00a0\u00a0\u00a0describedby=\"versionHelp\" placeholder=\"Enter \u00a0\u00a0\u00a0\u00a0version number\">\n    \u00a0\u00a0\u00a0\u00a0<small id=\"versionHelp\" class=\"form-text \u00a0\u00a0\u00a0\u00a0text-muted\">Use semantic versioning (x.x.x)</small>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0...\n    </form>\n    ```", "```ts\n    <form [formGroup]=\"releaseForm\" (ngSubmit)=\"formSubmit(releaseForm)\">\n    \u00a0\u00a0...\n    </form>\n    ```", "```ts\n    import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n    ...\n    import { ReleaseLog } from 'src/app/classes/release-log';\n    ...\n    @Component(...)\n    export class ReleaseFormComponent implements OnInit {\n    \u00a0\u00a0@Output() newReleaseLog = new \u00a0\u00a0EventEmitter<ReleaseLog>();\n    \u00a0\u00a0apps = Object.values(Apps);\n    \u00a0\u00a0...\n    \u00a0\u00a0formSubmit(form: FormGroup): void {\n    \u00a0\u00a0\u00a0\u00a0const { app, version } = form.value;\n    \u00a0\u00a0\u00a0\u00a0console.log({app, version});\n    \u00a0\u00a0\u00a0\u00a0const newLog: ReleaseLog = new ReleaseLog(app, \u00a0\u00a0\u00a0\u00a0version)\n    \u00a0\u00a0\u00a0\u00a0this.newReleaseLog.emit(newLog);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <div class=\"version-control\">\n    \u00a0\u00a0<app-release-form (newReleaseLog)=\"addNewReleaseLog \u00a0\u00a0($event)\"></app-release-form>\n    \u00a0\u00a0<app-release-logs [logs]=\"releaseLogs\">\u00a0\u00a0</app-release-logs>\n    </div>\n    ```", "```ts\n    import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n    import { FormControl, FormGroup, Validators } from '@angular/forms';\n    ...\n    import { REGEXES } from 'src/app/constants/regexes';\n    @Component({...})\n    export class ReleaseFormComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0versionInputRegex = REGEXES.SEMANTIC_VERSION;\n    \u00a0\u00a0releaseForm = new FormGroup({\n    \u00a0\u00a0\u00a0\u00a0app: new FormControl('', Validators.required),\n    \u00a0\u00a0\u00a0\u00a0version: new FormControl('', [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Validators.required,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Validators.pattern(this.versionInputRegex)\n    \u00a0\u00a0\u00a0\u00a0]),\n    \u00a0\u00a0})\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    <form [formGroup]=\"releaseForm\" (ngSubmit)=\"formSubmit(releaseForm)\">\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0<label for=\"appName\">Select App</label>\n    \u00a0\u00a0\u00a0\u00a0<select formControlName=\"app\" class=\"form-control\" \u00a0\u00a0\u00a0\u00a0id=\"appName\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0</select>\n    \u00a0\u00a0\u00a0\u00a0<div\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[hidden]=\"releaseForm.get('app').valid || \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0releaseForm.get('app').pristine\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class=\"alert alert-danger\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Please choose an app\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0<small id=\"versionHelp\" class=\"form-text \u00a0\u00a0\u00a0\u00a0text-muted\">Use semantic versioning (x.x.x)</small>\n    \u00a0\u00a0\u00a0\u00a0<div [hidden]=\"releaseForm.get('version').valid || \u00a0\u00a0\u00a0\u00a0releaseForm.get('version').pristine\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class=\"alert alert-danger\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Please write an appropriate version number\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<button type=\"submit\" class=\"btn btn-primary\">Submit \u00a0\u00a0</button>\n    </form>\n    ```", "```ts\n    :host {\n    \u00a0\u00a0/* Error messages */\n    \u00a0\u00a0.alert {\n    \u00a0\u00a0\u00a0\u00a0margin-top: 16px;\n    \u00a0\u00a0}\n    \u00a0\u00a0/* Valid form input */\n    \u00a0\u00a0.ng-valid:not(form),\n    \u00a0\u00a0.ng-valid.required {\n    \u00a0\u00a0\u00a0\u00a0border-bottom: 3px solid #259f2b;\n    \u00a0\u00a0}\n    \u00a0\u00a0/* Invalid form input */\n    \u00a0\u00a0.ng-invalid:not(form) {\n    \u00a0\u00a0\u00a0\u00a0border-bottom: 3px solid #c92421;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <form [formGroup]=\"releaseForm\" (ngSubmit)=\"formSubmit(releaseForm)\">\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<button type=\"submit\" [disabled]=\"releaseForm.invalid\" \u00a0\u00a0class=\"btn btn-primary\">Submit</button>\n    </form>\n    ```", "```ts\n[hidden]=\"releaseForm.get(CONTROL_NAME).valid || releaseForm.get(CONTROL_NAME).pristine\"\n```", "```ts\n    ...\n    import { compareVersion } from 'src/app/utils';\n    import { AbstractControl, AsyncValidatorFn, ValidationErrors } from '@angular/forms';\n    import { Observable, of } from 'rxjs';\n    @Injectable({...})\n    export class VersionService {\n    \u00a0\u00a0...\n    \u00a0\u00a0versionValidator(appNameControl: AbstractControl): \u00a0\u00a0AsyncValidatorFn {\n    \u00a0\u00a0\u00a0\u00a0// code here\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    versionValidator(appNameControl: AbstractControl): AsyncValidatorFn {\n    \u00a0\u00a0return (control: AbstractControl): \u00a0\u00a0Observable<ValidationErrors> => {\n    \u00a0\u00a0// if we don't have an app selected, do not validate\n    \u00a0\u00a0if (!appNameControl.value) {\n    \u00a0\u00a0\u00a0\u00a0return of(null);\n    \u00a0\u00a0}\n    \u00a0\u00a0return this.getVersionLog().pipe(\n    \u00a0\u00a0\u00a0\u00a0map(vLog => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const newVersion = control.value;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const previousVersion = vLog[appNameControl.value];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// check if the new version is greater than \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0previous version\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return compareVersion(newVersion, previousVersion) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=== 1 ? null : {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newVersionRequired: previousVersion\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0}))\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n    import { FormControl, FormGroup, Validators } from '@angular/forms';\n    import { IReleaseLog, ReleaseLog } from 'src/app/classes/release-log';\n    import { Apps } from 'src/app/constants/apps';\n    import { REGEXES } from 'src/app/constants/regexes';\n    import { VersionService } from 'src/app/core/services/version.service';\n    @Component({...})\n    export class ReleaseFormComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0constructor(private versionService: VersionService) { }\n    \u00a0\u00a0ngOnInit(): void {\n    \u00a0\u00a0\u00a0\u00a0this.releaseForm.get('version')\u00a0\u00a0\u00a0\u00a0.setAsyncValidators(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.versionService.versionValidator(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.releaseForm.get('app')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    <form [formGroup]=\"releaseForm\" (ngSubmit)=\"formSubmit(releaseForm)\">\n    \u00a0\u00a0<ng-container *ngIf=\"releaseForm.get('version') \u00a0\u00a0as versionControl\">\n    \u00a0\u00a0\u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0<button type=\"submit\" [disabled]=\"releaseForm.\u00a0\u00a0\u00a0\u00a0invalid\" class=\"btn btn-primary\">Submit</button>\n    \u00a0\u00a0</ng-container>\n    </form>\n    ```", "```ts\n    <form [formGroup]=\"releaseForm\" (ngSubmit)=\"formSubmit(releaseForm)\">\n    \u00a0\u00a0<ng-container *ngIf=\"releaseForm.get('version') \u00a0\u00a0as versionControl\">\n    \u00a0\u00a0\u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label for=\"versionNumber\">Version Number</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input formControlName=\"version\" type=\"text\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class=\"form-control\" id=\"versionNumber\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0aria-describedby=\"versionHelp\" placeholder=\"Enter \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0version number\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div *ngIf=\"(versionControl.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getError('newVersionRequired') && \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0!versionControl.pristine)\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class=\"alert alert-danger\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The version number should be greater \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0than the last version '{{versionControl.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0errors['newVersionRequired']}}'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0<button [disabled]=\"releaseForm.invalid\" \u00a0\u00a0\u00a0\u00a0class=\"btn btn-primary\">Submit</button>\n    \u00a0\u00a0</ng-container>\n    </form>\n    ```", "```ts\n    <form [formGroup]=\"releaseForm\" (ngSubmit)=\"formSubmit(releaseForm)\">\n    \u00a0\u00a0<ng-container *ngIf=\"releaseForm.get('version') \u00a0\u00a0as versionControl\">\n    \u00a0\u00a0\u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0<div class=\"form-group\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0<button *ngIf=\"versionControl.status \u00a0\u00a0\u00a0\u00a0!== 'PENDING'; else loader\" type=\"submit\" \u00a0\u00a0\u00a0\u00a0[disabled]=\"releaseForm.invalid\" class=\"btn \u00a0\u00a0\u00a0\u00a0\u00a0btn-primary\">Submit</button>\n    \u00a0\u00a0</ng-container>\n    \u00a0\u00a0<ng-template #loader>\n    \u00a0\u00a0\u00a0\u00a0Please wait...\n    \u00a0\u00a0</ng-template>\n    </form>\n    ```", "```ts\n    \u00a0\u00a0formSubmit(form: FormGroup): void {\n    \u00a0\u00a0\u00a0\u00a0if (form.get('version').status === 'PENDING') {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0const { app, version } = form.value;\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0}\n    ```", "```ts\n    import { Component, OnInit, Output, EventEmitter, OnDestroy } from '@angular/core';\n    ...\n    import { takeWhile } from 'rxjs/operators';\n    ...\n    @Component({...})\n    export class ReleaseFormComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0@Output() newReleaseLog = new \u00a0\u00a0EventEmitter<IReleaseLog>();\n    \u00a0\u00a0isComponentAlive = false;\n    \u00a0\u00a0apps = Object.values(Apps);\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit(): void {\n    \u00a0\u00a0\u00a0\u00a0this.isComponentAlive = true;\n    \u00a0\u00a0\u00a0\u00a0this.releaseForm.get \u00a0\u00a0\u00a0\u00a0('version').setAsyncValidators(...)\n    \u00a0\u00a0\u00a0\u00a0this.releaseForm.get('app').valueChanges\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(takeWhile(() => this.isComponentAlive))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.subscribe(() => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.releaseForm.get \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0('version').updateValueAndValidity();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    \u00a0\u00a0ngOnDestroy() {\n    \u00a0\u00a0\u00a0\u00a0this.isComponentAlive = false;\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    yarn test\n    ```", "```ts\n    import { ComponentFixture, TestBed } from '@angular/core/testing';\n    import { ReleaseLog } from 'src/app/classes/release-log';\n    ...\n    describe('ReleaseFormComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should submit a new release log with the correct \u00a0\u00a0input values', (() => {\n    \u00a0\u00a0\u00a0\u00a0const app = component.apps[2];\n    \u00a0\u00a0\u00a0\u00a0const version = '2.2.2';\n    \u00a0\u00a0\u00a0\u00a0const expectedReleaseLog = new ReleaseLog(app, \u00a0\u00a0\u00a0\u00a0version);\n    \u00a0\u00a0\u00a0\u00a0spyOn(component.newReleaseLog, 'emit');\n    \u00a0\u00a0\u00a0\u00a0component.releaseForm.setValue({ app, version });\n    \u00a0\u00a0\u00a0\u00a0component.formSubmit(component.releaseForm);\n    \u00a0\u00a0\u00a0\u00a0expect(component.newReleaseLog.emit)\u00a0\u00a0\u00a0\u00a0.toHaveBeenCalledWith(expectedReleaseLog);\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\n    ...\n    describe('ReleaseFormComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should throw an error for a new release log with \u00a0\u00a0the incorrect version values', (() => {\n    \u00a0\u00a0\u00a0\u00a0const submitButton = fixture.nativeElement.\u00a0\u00a0\u00a0\u00a0querySelector('button[type=\"submit\"]');\n    \u00a0\u00a0\u00a0\u00a0const app = component.apps[2];\n    \u00a0\u00a0\u00a0\u00a0const version = 'x.x.x';\n    \u00a0\u00a0\u00a0\u00a0spyOn(component.newReleaseLog, 'emit');\n    \u00a0\u00a0\u00a0\u00a0const expectedError = 'Invalid version provided. \u00a0\u00a0\u00a0\u00a0Please provide a valid version as (major.minor.\u00a0\u00a0\u00a0\u00a0patch)';\n    \u00a0\u00a0\u00a0\u00a0component.releaseForm.setValue({ app, version });\n    \u00a0\u00a0\u00a0\u00a0expect(() => component.formSubmit(component.\u00a0\u00a0\u00a0\u00a0releaseForm))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.toThrowError(expectedError);\n    \u00a0\u00a0\u00a0\u00a0expect(submitButton.hasAttribute(\u00a0\u00a0\u00a0\u00a0'disabled')).toBe(true);\n    \u00a0\u00a0\u00a0\u00a0expect(component.newReleaseLog.emit \u00a0\u00a0\u00a0\u00a0).not.toHaveBeenCalled();\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\n    ...\n    describe('ReleaseFormComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should disable the submit button when we \u00a0\u00a0don\\'t have an app selected', (() => {\n    \u00a0\u00a0\u00a0\u00a0const submitButton = fixture.nativeElement.\u00a0\u00a0\u00a0\u00a0querySelector('button[type=\"submit\"]');\n    \u00a0\u00a0\u00a0\u00a0spyOn(component.newReleaseLog, 'emit');\n    \u00a0\u00a0\u00a0\u00a0const app = '';\n    \u00a0\u00a0\u00a0\u00a0const version = '2.2.2';\n    \u00a0\u00a0\u00a0\u00a0component.releaseForm.setValue({ app, version });\n    \u00a0\u00a0\u00a0\u00a0submitButton.click();\n    \u00a0\u00a0\u00a0\u00a0fixture.detectChanges();\n    \u00a0\u00a0\u00a0\u00a0expect(submitButton.hasAttribute(\u00a0\u00a0\u00a0\u00a0'disabled')).toBe(true);\n    \u00a0\u00a0\u00a0\u00a0expect(component.newReleaseLog.emit \u00a0\u00a0\u00a0\u00a0).not.toHaveBeenCalled();\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\nexpect(() => component.formSubmit(component.releaseForm))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.toThrowError(expectedError);\n```", "```ts\n    ...\n    import { debounceTime, takeWhile } from 'rxjs/operators';\n    @Component({...})\n    export class HomeComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0searchDebounceTime = 300;\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0this.searchUsers();\n    \u00a0\u00a0\u00a0\u00a0this.searchForm.get('username').valueChanges\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0debounceTime(this.searchDebounceTime),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile(() => !!this.componentAlive)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.subscribe(() => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.searchUsers();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { HttpClientModule } from '@angular/common/http';\n    import { waitForAsync, ComponentFixture, discardPeriodicTasks, fakeAsync, TestBed, tick } from '@angular/core/testing';\n    import { HomeComponent } from './home.component';\n    describe('HomeComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should not send an http request before the \u00a0\u00a0debounceTime of 300ms', fakeAsync(async () => {\n    \u00a0\u00a0\u00a0\u00a0spyOn(component, 'searchUsers');\n    \u00a0\u00a0\u00a0\u00a0component.searchForm.get(\u00a0\u00a0\u00a0\u00a0'username').setValue('iri');\n    \u00a0\u00a0\u00a0\u00a0tick(component.searchDebounceTime - 10); \u00a0\u00a0\u00a0\u00a0// less than desired debounce time\n    \u00a0\u00a0\u00a0\u00a0expect(component.searchUsers \u00a0\u00a0\u00a0\u00a0).not.toHaveBeenCalled();\n    \u00a0\u00a0\u00a0\u00a0discardPeriodicTasks();\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\n    ...\n    describe('HomeComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should send an http request after the debounceTime \u00a0\u00a0of 300ms', fakeAsync(async () => {\n    \u00a0\u00a0\u00a0\u00a0spyOn(component, 'searchUsers');\n    \u00a0\u00a0\u00a0\u00a0component.searchForm.get(\u00a0\u00a0\u00a0\u00a0'username').setValue('iri');\n    \u00a0\u00a0\u00a0\u00a0tick(component.searchDebounceTime + 10); // more \u00a0\u00a0\u00a0\u00a0than desired debounce time\n    \u00a0\u00a0\u00a0\u00a0expect(component.searchUsers \u00a0\u00a0\u00a0\u00a0).toHaveBeenCalled();\n    \u00a0\u00a0\u00a0\u00a0discardPeriodicTasks();\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\n    ng g c components/rating\n    ```", "```ts\n    <div class=\"rating\">\n    \u00a0\u00a0<div\n    \u00a0\u00a0\u00a0\u00a0class=\"rating__star\"\n    \u00a0\u00a0\u00a0\u00a0[ngClass]=\"{'rating__star--active': (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(!isMouseOver && value\u00a0\u00a0>= star) ||\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(isMouseOver && hoveredRating\u00a0\u00a0>= star)\n    \u00a0\u00a0\u00a0\u00a0)}\"\n    \u00a0\u00a0\u00a0\u00a0(mouseenter)=\"onRatingMouseEnter(star)\"\n    \u00a0\u00a0\u00a0\u00a0(mouseleave)=\"onRatingMouseLeave()\"\n    \u00a0\u00a0\u00a0\u00a0(click)=\"selectRating(star)\"\n    \u00a0\u00a0\u00a0\u00a0*ngFor=\"let star of [1, 2, 3, 4, 5]; let i = index;\">\n    \u00a0\u00a0\u00a0\u00a0<i class=\"fa fa-star\"></i>\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    .rating {\n    \u00a0\u00a0display: flex;\n    \u00a0\u00a0margin-bottom: 10px;\n    \u00a0\u00a0&__star {\n    \u00a0\u00a0\u00a0\u00a0cursor: pointer;\n    \u00a0\u00a0\u00a0\u00a0color: grey;\n    \u00a0\u00a0\u00a0\u00a0padding: 0 6px;\n    \u00a0\u00a0\u00a0\u00a0&:first-child {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0padding-left: 0;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0&:last-child {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0padding-right: 0;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0&--active {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color: orange;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    export class RatingComponent implements OnInit {\n    \u00a0\u00a0value = 2;\n    \u00a0\u00a0hoveredRating = 2;\n    \u00a0\u00a0isMouseOver = false;\n\n    \u00a0\u00a0...\n    \u00a0\u00a0onRatingMouseEnter(rating: number) {\n    \u00a0\u00a0\u00a0\u00a0this.hoveredRating = rating;\n    \u00a0\u00a0\u00a0\u00a0this.isMouseOver = true;\n    \u00a0\u00a0}\n    \u00a0\u00a0onRatingMouseLeave() {\n    \u00a0\u00a0\u00a0\u00a0this.hoveredRating = null;\n    \u00a0\u00a0\u00a0\u00a0this.isMouseOver = false;\n    \u00a0\u00a0}\n    \u00a0\u00a0selectRating(rating: number) {\n    \u00a0\u00a0\u00a0\u00a0this.value = rating;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <div class=\"home\">\n    \u00a0\u00a0<div class=\"review-container\">\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0<form class=\"input-container\" [formGroup]=\u00a0\u00a0\u00a0\u00a0\"reviewForm\" (ngSubmit)=\"submitReview(reviewForm)\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"mb-3\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label for=\"ratingInput\" class=\"form-\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label\">Rating</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<app-rating formControlName=\"rating\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</app-rating>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"mb-3\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button id=\"submitBtn\" [disabled]=\"reviewForm.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0invalid\" class=\"btn btn-dark\" type=\"submit\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Submit</button>\n    \u00a0\u00a0\u00a0\u00a0</form>\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    import { Component, OnInit } from '@angular/core';\n    import { ControlValueAccessor } from '@angular/forms';\n    @Component({...})\n    export class RatingComponent implements OnInit, ControlValueAccessor {\n    \u00a0\u00a0...\n    \u00a0\u00a0constructor() { }\n    \u00a0\u00a0onChange: any = () => { };\n    \u00a0\u00a0onTouched: any = () => { };\n    \u00a0\u00a0ngOnInit(): void {\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    \u00a0\u00a0registerOnChange(fn: any){\n    \u00a0\u00a0\u00a0\u00a0this.onChange = fn;\n    \u00a0\u00a0}\n    \u00a0\u00a0registerOnTouched(fn: any) {\n    \u00a0\u00a0\u00a0\u00a0this.onTouched = fn;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { Component, Input, OnInit } from '@angular/core';\n    import { ControlValueAccessor } from '@angular/forms';\n    @Component({...})\n    export class RatingComponent implements OnInit, ControlValueAccessor {\n    \u00a0\u00a0...\n    \u00a0\u00a0isMouseOver = false;\n    \u00a0\u00a0@Input() disabled = false;\n    \u00a0\u00a0constructor() { }\n    \u00a0\u00a0...\n    \u00a0\u00a0setDisabledState(isDisabled: boolean): void {\n    \u00a0\u00a0\u00a0\u00a0this.disabled = isDisabled;\n    \u00a0\u00a0}\n    \u00a0\u00a0writeValue(value: number) {\n    \u00a0\u00a0\u00a0\u00a0this.value = value;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    @Component({...})\n    export class RatingComponent implements OnInit, ControlValueAccessor {\n    \u00a0\u00a0...\n    \u00a0\u00a0isMouseOver = false;\n    \u00a0\u00a0@Input() disabled = true;\n    \u00a0\u00a0...\n\n    \u00a0\u00a0onRatingMouseEnter(rating: number) {\n    \u00a0\u00a0\u00a0\u00a0if (this.disabled) return;\n    \u00a0\u00a0\u00a0\u00a0this.hoveredRating = rating;\n    \u00a0\u00a0\u00a0\u00a0this.isMouseOver = true;\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    \u00a0\u00a0selectRating(rating: number) {\n    \u00a0\u00a0\u00a0\u00a0if (this.disabled) return;\n    \u00a0\u00a0\u00a0\u00a0this.value = rating;\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    @Component({...})\n    export class RatingComponent implements OnInit, ControlValueAccessor {\n    \u00a0\u00a0...\n    \u00a0\u00a0@Input() disabled = false;\n    \u00a0\u00a0constructor() { }\n    \u00a0\u00a0...\n    \u00a0\u00a0selectRating(rating: number) {\n    \u00a0\u00a0\u00a0\u00a0if (this.disabled) return;\n    \u00a0\u00a0\u00a0\u00a0this.value = rating;\n    \u00a0\u00a0\u00a0\u00a0this.onChange(rating);\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    import { Component, forwardRef, Input, OnInit } from '@angular/core';\n    import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n    @Component({\n    \u00a0\u00a0selector: 'app-rating',\n    \u00a0\u00a0templateUrl: './rating.component.html',\n    \u00a0\u00a0styleUrls: ['./rating.component.scss'],\n    \u00a0\u00a0providers: [{\n    \u00a0\u00a0\u00a0\u00a0provide: NG_VALUE_ACCESSOR,\n    \u00a0\u00a0\u00a0\u00a0useExisting: forwardRef(() => RatingComponent),\n    \u00a0\u00a0\u00a0\u00a0multi: true\n    \u00a0\u00a0}]\n    })\n    export class RatingComponent implements OnInit, ControlValueAccessor {\n    \u00a0\u00a0...\n    }\n    ```", "```ts\nonChange: any = () => { };\nonTouched: any = () => { };\n```", "```ts\nregisterOnChange(fn: any){\n\u00a0\u00a0this.onChange = fn;\n}\nregisterOnTouched(fn: any) {\n\u00a0\u00a0this.onTouched = fn;\n}\n```", "```ts\nselectRating(rating: number) {\n\u00a0\u00a0if (this.disabled) return;\n\u00a0\u00a0this.value = rating;\n\u00a0\u00a0this.onChange(rating);\n}\n```", "```ts\nwriteValue(value: number) {\n\u00a0\u00a0this.value = value;\n}\n```", "```ts\n@Component({\n\u00a0\u00a0selector: 'app-rating',\n\u00a0\u00a0templateUrl: './rating.component.html',\n\u00a0\u00a0styleUrls: ['./rating.component.scss'],\n\u00a0\u00a0providers: [{\n\u00a0\u00a0\u00a0\u00a0provide: NG_VALUE_ACCESSOR,\n\u00a0\u00a0\u00a0\u00a0useExisting: forwardRef(() => RatingComponent),\n\u00a0\u00a0\u00a0\u00a0multi: true\n\u00a0\u00a0}]\n})\nexport class RatingComponent implements OnInit, ControlValueAccessor {}\n```", "```ts\n<app-rating formControlName=\"rating\"></app-rating>\n```"]