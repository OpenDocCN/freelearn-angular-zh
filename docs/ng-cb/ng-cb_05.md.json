["```ts\n    import { Component } from '@angular/core';\n    import { interval, Subscription } from 'rxjs';\n    import { map } from 'rxjs/operators';\n    @Component({...})\n    export class AppComponent {\n    ...\n    \u00a0\u00a0startStream() {\n    \u00a0\u00a0\u00a0\u00a0this.subscription = streamSource\n    \u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(output => output % this.inputStreamData.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0length),\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0.subscribe(input => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.outputStreamData.push(input);\n    \u00a0\u00a0\u00a0\u00a0});\n    ...\n    }\n    ```", "```ts\n    \u00a0\u00a0startStream() {\n    \u00a0\u00a0\u00a0\u00a0const streamSource = interval(1500);\n    \u00a0\u00a0\u00a0\u00a0this.subscription = streamSource\n    \u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(output => output % this.inputStreamData.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0length),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(index => this.inputStreamData[index])\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0.subscribe(element => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.outputStreamData.push(element);\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0startStream() {\n    \u00a0\u00a0\u00a0\u00a0const streamSource = interval(1500);\n    \u00a0\u00a0\u00a0\u00a0const cartoonStreamSource = interval(1000)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(output => output % this.cartoonsStreamData.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0length),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(index => this.cartoonsStreamData[index]),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0this.subscription = streamSource\n    \u00a0\u00a0\u00a0\u00a0.pipe(...)\n    \u00a0\u00a0\u00a0\u00a0.subscribe(...);\n    \u00a0\u00a0}\n    ```", "```ts\n    export class AppComponent {\n    \u00a0\u00a0subscription: Subscription = null;\n    \u00a0\u00a0inputStreamData = ['john wick', 'inception', \u00a0\u00a0'interstellar'];\n    \u00a0\u00a0cartoonsStreamData = ['thunder cats', 'Dragon Ball Z', \u00a0\u00a0'Ninja Turtles'];\n    \u00a0\u00a0outputStreamData = [];\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0<div class=\"input-stream\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"input-stream__item\" *ngFor=\"let item \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of inputStreamData\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{item}}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<hr/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"input-stream__item\" *ngFor=\"let item \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of cartoonsStreamData\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{item}}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    ```", "```ts\n    ...\n    import { map, merge } from 'rxjs/operators';\n    export class AppComponent {\n    \u00a0\u00a0...\n    \u00a0\u00a0startStream() {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0this.subscription = streamSource\n    \u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(output => output % this.inputStreamData.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0length),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(index => this.inputStreamData[index]),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0merge(cartoonStreamSource)\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0.subscribe(element => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.outputStreamData.push(element);\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0}\n    }\n    ```", "```ts\ncombinedStreamData = [{\n\u00a0\u00a0\u00a0\u00a0type: 'movie',\n\u00a0\u00a0\u00a0\u00a0title: 'john wick'\n\u00a0\u00a0}, {\n\u00a0\u00a0\u00a0\u00a0type: 'cartoon',\n\u00a0\u00a0\u00a0\u00a0title: 'Thunder Cats'\n\u00a0\u00a0}, {\n\u00a0\u00a0\u00a0\u00a0type: 'movie',\n\u00a0\u00a0\u00a0\u00a0title: 'inception'\n\u00a0\u00a0}, {\n\u00a0\u00a0\u00a0\u00a0type: 'cartoon',\n\u00a0\u00a0\u00a0\u00a0title: 'Dragon Ball Z'\n\u00a0\u00a0}, {\n\u00a0\u00a0\u00a0\u00a0type: 'cartoon',\n\u00a0\u00a0\u00a0\u00a0title: 'Ninja Turtles'\n\u00a0\u00a0}, {\n\u00a0\u00a0\u00a0\u00a0type: 'movie',\n\u00a0\u00a0\u00a0\u00a0title: 'interstellar'\n\u00a0\u00a0}];\n```", "```ts\n    import { Component } from '@angular/core';\n    import { interval, partition, merge, Subscription } from 'rxjs';\n    ```", "```ts\n    import { Component } from '@angular/core';\n    import { interval, partition, merge, Subscription } from 'rxjs';\n    import { map, tap } from 'rxjs/operators';\n    export class AppComponent {\n    \u00a0\u00a0\u2026\n    \u00a0\u00a0outputStreamData = [];\n    \u00a0\u00a0movies= []\n    \u00a0\u00a0cartoons= [];\n    \u00a0\u00a0startStream() {\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    <div class=\"cards-container\">\n    \u00a0\u00a0\u00a0\u00a0<div class=\"input-stream\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0<div class=\"output-stream\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<h6>Movies</h6>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"input-stream__item\" *ngFor=\"let movie \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of movies\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{movie}}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0<div class=\"output-stream\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<h6>Cartoons</h6>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"input-stream__item\" *ngFor=\"let cartoon \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of cartoons\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{cartoon}}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    ```", "```ts\n    startStream() {\n    \u00a0\u00a0\u00a0\u00a0const streamSource = interval(1500).pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(input => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const index = input % this.combinedStreamData.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0length;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.combinedStreamData[index];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0const [moviesStream, cartoonsStream] = partition(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0streamSource, item => item.type === 'movie'\n    \u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0this.subscription = streamSource\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.subscribe(input => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.outputStreamData.push(input);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0}\n    ```", "```ts\n    startStream() {\n    \u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0this.subscription = merge(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0moviesStream.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tap(movie => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.movies.push(movie.title);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cartoonsStream.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tap(cartoon => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.cartoons.push(cartoon.title);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.subscribe(input => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.outputStreamData.push(input);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0}\n    ```", "```ts\n    ...\n    @Component({...})\n    export class AppComponent {\n    \u00a0\u00a0...\n    \u00a0\u00a0outputStreamData = []; \u2190 Remove\n    \u00a0\u00a0movies = [];\n    \u00a0\u00a0cartoons = [];\n    \u00a0\u00a0ngOnInit() {}\n    \u00a0\u00a0startStream() {\n    \u00a0\u00a0\u00a0\u00a0const streamSource = interval(1500).pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(...)\n    \u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0const [moviesStream, cartoonsStream] = \u00a0\u00a0\u00a0\u00a0partition(...);\n    \u00a0\u00a0\u00a0\u00a0this.subscription = merge(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0moviesStream.pipe(...),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cartoonsStream.pipe(...)\n    \u00a0\u00a0\u00a0\u00a0).subscribe((output) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(output);\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class HomeComponent implements OnInit {\n    \u00a0\u00a0...\n    \u00a0\u00a0startStream() {\n    \u00a0\u00a0\u00a0\u00a0const streamSource = interval(1500);\n    \u00a0\u00a0\u00a0\u00a0this.subscription = streamSource.subscribe(input => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.outputStreamData.push(input);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('stream output', input)\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0}\n    \u00a0\u00a0stopStream() {...}\n    }\n    ```", "```ts\n    import { Component, OnInit, OnDestroy } from '@angular/core';\n    ...\n    @Component({\n    \u00a0\u00a0selector: 'app-home',\n    \u00a0\u00a0templateUrl: './home.component.html',\n    \u00a0\u00a0styleUrls: ['./home.component.scss']\n    })\n    export class HomeComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0}\n    \u00a0\u00a0ngOnDestroy() {\n    \u00a0\u00a0\u00a0\u00a0this.stopStream();\n    \u00a0\u00a0}\n    \u00a0\u00a0startStream() {\n    \u00a0\u00a0\u00a0\u00a0const streamSource = interval(1500);\n    \u00a0\u00a0\u00a0\u00a0this.subscription = streamSource.subscribe(input => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.outputStreamData.push(input);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('stream output', input)\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0}\n    \u00a0\u00a0stopStream() {\n    \u00a0\u00a0\u00a0\u00a0this.subscription.unsubscribe();\n    \u00a0\u00a0\u00a0\u00a0this.subscription = null;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\nstartStream() {\n\u00a0\u00a0\u00a0\u00a0const streamSource = interval(1500);\n\u00a0\u00a0\u00a0\u00a0const secondStreamSource = interval(3000);\n\u00a0\u00a0\u00a0\u00a0const fastestStreamSource = interval(500);\n\u00a0\u00a0\u00a0\u00a0streamSource.subscribe(input => {...});\n\u00a0\u00a0\u00a0\u00a0secondStreamSource.subscribe(input => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.outputStreamData.push(input);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('second stream output', input)\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0fastestStreamSource.subscribe(input => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.outputStreamData.push(input);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('fastest stream output', input)\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0}\n\u00a0\u00a0stopStream() {\n\u00a0\u00a0}\n```", "```ts\n    ...\n    export class HomeComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0isComponentAlive: boolean;\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    import { Component, OnInit, OnDestroy } from '@angular/core';\n    import { interval } from 'rxjs/internal/observable/interval';\n    import { Subscription } from 'rxjs/internal/Subscription';\n    import { takeWhile } from 'rxjs/operators';\n    ```", "```ts\n    startStream() {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0streamSource\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile(() => !!this.isComponentAlive)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0).subscribe(input => {...});\n    \u00a0\u00a0\u00a0\u00a0secondStreamSource\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile(() => !!this.isComponentAlive)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0).subscribe(input => {...});\n    \u00a0\u00a0\u00a0\u00a0fastestStreamSource\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile(() => !!this.isComponentAlive)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0).subscribe(input => {...});\n    \u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0this.isComponentAlive = true;\n    \u00a0\u00a0}\n    \u00a0\u00a0ngOnDestroy() {\n    \u00a0\u00a0\u00a0\u00a0this.stopStream();\n    \u00a0\u00a0}\n    \u00a0\u00a0startStream() {\n    \u00a0\u00a0\u00a0\u00a0this.isComponentAlive = true;\n    \u00a0\u00a0\u00a0\u00a0const streamSource = interval(1500);\n    \u00a0\u00a0\u00a0\u00a0const secondStreamSource = interval(3000);\n    \u00a0\u00a0\u00a0\u00a0const fastestStreamSource = interval(500);\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0stopStream() {\n    \u00a0\u00a0\u00a0\u00a0this.isComponentAlive = false;\n    \u00a0\u00a0}\n    ```", "```ts\n    ...\n    import { Observable } from 'rxjs';\n    ...\n    export class HomeComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0isComponentAlive: boolean;\n    \u00a0\u00a0subscription: Subscription = null \u2190 Remove this;\n    \u00a0\u00a0inputStreamData = ['john wick', 'inception', \u00a0\u00a0'interstellar']; \n    \u00a0\u00a0streamsOutput$: Observable<number[]> \u2190 Add this\n    \u00a0\u00a0outputStreamData = []\n    \u00a0\u00a0constructor() { }\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    import { Component, OnInit, OnDestroy } from '@angular/core';\n    import { merge, Observable } from 'rxjs';\n    import { map, takeWhile } from 'rxjs/operators';\n    ...\n    export class HomeComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0startStream() {\n    \u00a0\u00a0\u00a0\u00a0const streamSource = interval(1500);\n    \u00a0\u00a0\u00a0\u00a0const secondStreamSource = interval(3000);\n    \u00a0\u00a0\u00a0\u00a0const fastestStreamSource = interval(500);\n    \u00a0\u00a0\u00a0\u00a0this.streamsOutput$ = merge(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0streamSource,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secondStreamSource,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fastestStreamSource\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    startStream() {\n    \u00a0\u00a0\u00a0\u00a0const streamSource = interval(1500);\n    \u00a0\u00a0\u00a0\u00a0const secondStreamSource = interval(3000);\n    \u00a0\u00a0\u00a0\u00a0const fastestStreamSource = interval(500);\n    \u00a0\u00a0\u00a0\u00a0this.streamsOutput$ = merge(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0streamSource,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secondStreamSource,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fastestStreamSource\n    \u00a0\u00a0\u00a0\u00a0).pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile(() => !!this.isComponentAlive),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(output => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.outputStreamData = [...this.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0outputStreamData, output]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.outputStreamData;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0<div class=\"output-stream\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"input-stream__item\" *ngFor=\"let item \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of streamsOutput$ | async\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{{item}}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    ```", "```ts\n    startStream() {\n    \u00a0\u00a0\u00a0\u00a0const streamSource = interval(1500);\n    \u00a0\u00a0\u00a0\u00a0const secondStreamSource = interval(3000);\n    \u00a0\u00a0\u00a0\u00a0const fastestStreamSource = interval(500);\n    \u00a0\u00a0\u00a0\u00a0this.streamsOutput$ = merge(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0streamSource,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secondStreamSource,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fastestStreamSource\n    \u00a0\u00a0\u00a0\u00a0).pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile(() => !!this.isComponentAlive),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(output => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(output)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.outputStreamData = [...this.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0outputStreamData, output]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.outputStreamData;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0}\n    ```", "```ts\n    ...\n    import { combineLatest, Observable } from 'rxjs';\n    ...\n    export class HomeComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0this.applyChanges();\n    \u00a0\u00a0\u00a0\u00a0this.listenToInputChanges(); \u2190 Add this\n    \u00a0\u00a0}\n    \u00a0\u00a0listenToInputChanges() {\n    \u00a0\u00a0\u00a0\u00a0combineLatest([\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.boxForm.get('size').valueChanges,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.boxForm.get('borderRadius').valueChanges,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.boxForm.get(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'backgroundColor').valueChanges,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.boxForm.get('textColor').valueChanges\n    \u00a0\u00a0\u00a0\u00a0]).subscribe(() => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.applyChanges();\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    import { map} from 'rxjs/operators';\n    ...\n    export class HomeComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0boxStyles: {...}; \u2190 Remove this\n    \u00a0\u00a0boxForm = new FormGroup({...});\n    \u00a0\u00a0boxStyles$: Observable<{\n    \u00a0\u00a0\u00a0\u00a0width: string,\n    \u00a0\u00a0\u00a0\u00a0height: string,\n    \u00a0\u00a0\u00a0\u00a0backgroundColor: string,\n    \u00a0\u00a0\u00a0\u00a0color: string\n    \u00a0\u00a0\u00a0\u00a0borderRadius: string\n    \u00a0\u00a0}>;\n    \u00a0\u00a0\u00a0...\n    \u00a0\u00a0listenToInputChanges() {\n    \u00a0\u00a0\u00a0\u00a0this.boxStyles$ = combineLatest([...]).\u00a0\u00a0\u00a0\u00a0pipe(map(([size, borderRadius, backgroundColor, \u00a0\u00a0\u00a0\u00a0textColor]) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0width: `${size}px`,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0height: `${size}px`,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0backgroundColor,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color: textColor,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0borderRadius: `${borderRadius}px`\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}));\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    export class HomeComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0this.applyChanges(); \u2190 Remove this\n    \u00a0\u00a0\u00a0\u00a0this.listenToInputChanges(); \u2190 Add this\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    \u00a0\u00a0setBoxStyles(size, backgroundColor, color, \u00a0\u00a0borderRadius) {...}\u00a0\u00a0\u2190 Remove this\n    \u00a0\u00a0applyChanges() {...} \u2190 Remove this\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    <div class=\"home\" [formGroup]=\"boxForm\" (ngSubmit)=\"applyChanges()\" \u2190 Remove this>\n    \u00a0\u00a0...\n    </div>\n    ```", "```ts\n    <div class=\"row submit-btn-container\" \u2190 Remove this element>\n    \u00a0\u00a0<button class=\"btn btn-primary\" type=\"submit\" \u00a0\u00a0(click)=\"applyChanges()\">Change Styles</button>\n    </div>\n    ```", "```ts\n    ...\n    import { map, startWith } from 'rxjs/operators';\n    @Component({...})\n    export class HomeComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0this.listenToInputChanges();\n    \u00a0\u00a0}\n    \u00a0\u00a0listenToInputChanges() {\n    \u00a0\u00a0\u00a0\u00a0this.boxStyles$ = combineLatest([\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.boxForm\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.get('size')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.valueChanges.pipe(startWith(this.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sizeOptions[0])),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.boxForm\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.get('borderRadius')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.valueChanges.pipe(startWith(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.borderRadiusOptions[0])),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.boxForm\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.get('backgroundColor')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.valueChanges.pipe(startWith(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.colorOptions[1])),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.boxForm\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.get('textColor')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.valueChanges.pipe(startWith(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.colorOptions[0])),\n    \u00a0\u00a0\u00a0\u00a0]).pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map(...);\n    \u00a0\u00a0}\n    \u00a0\u00a0ngOnDestroy() {}\n    }\n    ```", "```ts\n    \u00a0\u00a0...\n    \u00a0\u00a0<div class=\"row\" *ngIf=\"boxStyles$ | async as bStyles\">\n    \u00a0\u00a0\u00a0\u00a0<div class=\"box\" [ngStyle]=\"bStyles\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"box__text\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Hello World!\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0...\n    ```", "```ts\n    <div class=\"user-detail\">\n    \u00a0\u00a0<div class=\"main-content user-card\">\n    \u00a0\u00a0\u00a0\u00a0<app-user-card *ngIf=\"user$ | async as user; else \u00a0\u00a0\u00a0\u00a0loader\" [user]=\"user\"></app-user-card>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"secondary-container\">\n    \u00a0\u00a0\u00a0\u00a0<h4>Similar Users</h4>\n    \u00a0\u00a0\u00a0\u00a0<div class=\"similar-users\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ng-container *ngIf=\"similarUsers$ | async as \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0users; else loader\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<app-user-card class=\"user-card\" *ngFor=\"let user \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of users\" [user]=\"user\"></app-user-card>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</ng-container>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    </div>\n    <ng-template #loader>\n    \u00a0\u00a0<app-loader></app-loader>\n    </ng-template>\n    ```", "```ts\n    ...\n    export class UserDetailComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0user: IUser;\n    \u00a0\u00a0similarUsers: IUser[];\n    \u00a0\u00a0isComponentAlive: boolean;\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    <div class=\"user-detail\">\n    \u00a0\u00a0<div class=\"main-content user-card\">\n    \u00a0\u00a0\u00a0\u00a0<app-user-card *ngIf=\"user; else loader\" \u00a0\u00a0\u00a0\u00a0[user]=\"user\"></app-user-card>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"secondary-container\">\n    \u00a0\u00a0\u00a0\u00a0<h4>Similar Users</h4>\n    \u00a0\u00a0\u00a0\u00a0<div class=\"similar-users\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ng-container *ngIf=\"similarUsers; else loader\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<app-user-card class=\"user-card\" *ngFor=\"let user \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0of similarUsers\" [user]=\"user\"></app-user-card>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</ng-container>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    </div>\n    ...\n    ```", "```ts\n    ...\n    import { takeWhile, flatMap } from 'rxjs/operators';\n    export class UserDetailComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0this.isComponentAlive = true;\n    \u00a0\u00a0\u00a0\u00a0this.route.paramMap.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile(() => !!this.isComponentAlive),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flatMap(params => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.user = null;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.similarUsers = null;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const userId = params.get('uuid');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.userService.getUser(userId)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flatMap((user: IUser) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.user = user;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.userService.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getSimilarUsers(userId);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0).subscribe((similarUsers: IUser[]) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.similarUsers = similarUsers;\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    import { switchMap, takeWhile } from 'rxjs/operators';\n    ```", "```ts\n    ...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0this.componentAlive = true;\n    \u00a0\u00a0\u00a0\u00a0this.searchForm = new FormGroup({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0username: new FormControl('', [])\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0this.searchUsers();\n    \u00a0\u00a0\u00a0\u00a0this.searchForm.get('username').valueChanges\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile(() => !!this.componentAlive),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0switchMap((query) => this.userService.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0searchUsers(query))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.subscribe((users) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.users = users;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    ```", "```ts\n...\nimport { debounceTime, takeWhile } from 'rxjs/operators';\n...\nexport class HomeComponent implements OnInit, OnDestroy {\n\u00a0\u00a0...\n\u00a0\u00a0ngOnInit() {\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0this.searchForm.get('username').valueChanges\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile(() => !!this.componentAlive),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0debounceTime(300),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.subscribe(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.searchUsers();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0}\n\u00a0\u00a0searchUsers() {...}\n\u00a0\u00a0ngOnDestroy() {}\n}\n```"]