["```ts\n    ng new basic-routing-app --routing --style scss\n    ```", "```ts\n    cd basic-routing app\n    ng serve -o\n    ```", "```ts\n    ng g c landing\n    ```", "```ts\n    <router-outlet></router-outlet>\n    ```", "```ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { LandingComponent } from './landing/landing.component';\n    const routes: Routes = [{\n    \u00a0\u00a0path: '',\n    \u00a0\u00a0redirectTo: 'landing',\n    \u00a0\u00a0pathMatch: 'full'\n    }, {\n    \u00a0\u00a0path: 'landing',\n    \u00a0\u00a0component: LandingComponent\n    }];\n    ...\n    ```", "```ts\n    <div class=\"landing\">\n    \u00a0\u00a0<div class=\"landing__header\">\n    \u00a0\u00a0\u00a0\u00a0<div class=\"landing__header__main\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Creating an Angular app with routes using CLI\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0<div class=\"landing__header__links\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"landing__header__links__link\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Home\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"landing__header__links__link\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0About\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"landing__body\">\n    \u00a0\u00a0\u00a0\u00a0Landing Works\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    .landing {\n    \u00a0\u00a0display: flex;\n    \u00a0\u00a0flex-direction: column;\n    \u00a0\u00a0height: 100%;\n    \u00a0\u00a0&__header {\n    \u00a0\u00a0\u00a0\u00a0height: 60px;\n    \u00a0\u00a0\u00a0\u00a0padding: 0 20px;\n    \u00a0\u00a0\u00a0\u00a0background-color: #333;\n    \u00a0\u00a0\u00a0\u00a0color: white;\n    \u00a0\u00a0\u00a0\u00a0display: flex;\n    \u00a0\u00a0\u00a0\u00a0align-items: center;\n    \u00a0\u00a0\u00a0\u00a0justify-content: flex-end;\n    \u00a0\u00a0\u00a0\u00a0&__main {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flex: 1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    .landing {\n    \u00a0\u00a0...\n    \u00a0\u00a0&__header {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0&__links {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0padding: 0 20px;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0display: flex;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&__link {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0margin-left: 16px;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&:hover {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color: #ececec;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cursor: pointer;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    .landing {\n    \u00a0\u00a0...\n    \u00a0\u00a0&__header {\n    \u00a0\u00a0\u00a0...\n    \u00a0\u00a0}\n    \u00a0\u00a0&__body {\n    \u00a0\u00a0\u00a0\u00a0padding: 30px;\n    \u00a0\u00a0\u00a0\u00a0flex: 1;\n    \u00a0\u00a0\u00a0\u00a0display: flex;\n    \u00a0\u00a0\u00a0\u00a0justify-content: center;\n    \u00a0\u00a0\u00a0\u00a0background-color: #ececec;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    html, body {\n    \u00a0\u00a0width: 100%;\n    \u00a0\u00a0height: 100%;\n    \u00a0\u00a0margin: 0;\n    \u00a0\u00a0padding: 0;\n    }\n    ```", "```ts\n    ng g m home\n    ng g c home\n    ng g m about\n    ng g c about\n    ```", "```ts\n    ...\n    import { LandingComponent } from './landing/landing.component';\n    import { HomeModule } from './home/home.module';\n    import { AboutModule } from './about/about.module';\n    @NgModule({\n    \u00a0\u00a0declarations: [...],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0BrowserModule,\n    \u00a0\u00a0\u00a0\u00a0AppRoutingModule,\n    \u00a0\u00a0\u00a0\u00a0HomeModule,\n    \u00a0\u00a0\u00a0\u00a0AboutModule\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [],\n    \u00a0\u00a0bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```", "```ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { AboutComponent } from './about/about.component';\n    import { HomeComponent } from './home/home.component';\n    import { LandingComponent } from './landing/landing.component';\n    const routes: Routes = [{\n    \u00a0\u00a0path: '',\n    \u00a0\u00a0redirectTo: 'landing',\n    \u00a0\u00a0pathMatch: 'full'\n    }, {\n    \u00a0\u00a0path: 'landing',\n    \u00a0\u00a0component: LandingComponent\n    }, {\n    \u00a0\u00a0path: 'home',\n    \u00a0\u00a0component: HomeComponent\n    }, {\n    \u00a0\u00a0path: 'about',\n    \u00a0\u00a0component: AboutComponent\n    }];\n    ...\n    ```", "```ts\n    :host {\n    \u00a0\u00a0display: flex;\n    \u00a0\u00a0width: 100%;\n    \u00a0\u00a0height: 100%;\n    \u00a0\u00a0justify-content: center;\n    \u00a0\u00a0align-items: center;\n    \u00a0\u00a0background-color: #ececec;\n    \u00a0\u00a0font-size: 24px;\n    }\n    ```", "```ts\n    <div class=\"landing\">\n    \u00a0\u00a0<div class=\"landing__header\">\n    \u00a0\u00a0\u00a0\u00a0<div class=\"landing__header__links\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"landing__header__links__link\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0routerLink=\"/home\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Home\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div class=\"landing__header__links__link\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0routerLink=\"/about\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0About\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0<div class=\"landing__body\">\n    \u00a0\u00a0\u00a0\u00a0Landing Works\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    // about-routing.module.ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { AboutComponent } from './about.component';\n    const routes: Routes = [{\n    \u00a0\u00a0path: '',\n    \u00a0\u00a0component: AboutComponent\n    }];\n    @NgModule({\n    \u00a0\u00a0imports: [RouterModule.forChild(routes)],\n    \u00a0\u00a0exports: [RouterModule]\n    })\n    export class AboutRoutingModule { }\n    ```", "```ts\n    // home-routing.module.ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { HomeComponent } from './home.component';\n    const routes: Routes = [{\n    \u00a0\u00a0path: '',\n    \u00a0\u00a0component: HomeComponent\n    }];\n    @NgModule({\n    \u00a0\u00a0imports: [RouterModule.forChild(routes)],\n    \u00a0\u00a0exports: [RouterModule]\n    })\n    export class HomeRoutingModule { }\n    ```", "```ts\n    // home.module.ts\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n    import { HomeComponent } from './home.component';\n    import { HomeRoutingModule } from './home-routing.module';\n    @NgModule({\n    \u00a0\u00a0declarations: [HomeComponent],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0CommonModule,\n    \u00a0\u00a0\u00a0\u00a0HomeRoutingModule\n    \u00a0\u00a0]\n    })\n    export class HomeModule { }\n    ```", "```ts\n    // about.module.ts\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n    import { AboutComponent } from './about.component';\n    import { AboutRoutingModule } from './about-routing.module';\n    @NgModule({\n    \u00a0\u00a0declarations: [AboutComponent],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0CommonModule,\n    \u00a0\u00a0\u00a0\u00a0AboutRoutingModule\n    \u00a0\u00a0]\n    })\n    export class AboutModule { }\n    ```", "```ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { LandingComponent } from './landing/landing.component';\n    const routes: Routes = [{\n    \u00a0\u00a0path: '',\n    \u00a0\u00a0redirectTo: 'landing',\n    \u00a0\u00a0pathMatch: 'full'\n    }, {\n    \u00a0\u00a0path: 'landing',\n    \u00a0\u00a0component: LandingComponent\n    }, {\n    \u00a0\u00a0path: 'home',\n    \u00a0\u00a0loadChildren: () => import('./home/home.module').then \u00a0\u00a0(m => m.HomeModule)\n    }, {\n    \u00a0\u00a0path: 'about',\n    \u00a0\u00a0loadChildren: () => import('./about/about.module').\u00a0\u00a0then(m => m.AboutModule)\n    }];\n    @NgModule({\n    \u00a0\u00a0imports: [RouterModule.forRoot(routes)],\n    \u00a0\u00a0exports: [RouterModule]\n    })\n    export class AppRoutingModule { }\n    ```", "```ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { LandingComponent } from './landing/landing.component';\n    import { HomeModule } from './home/home.module'; \u2190 Remove\n    import { AboutModule } from './about/about.module'; \u2190 Remove\n    @NgModule({\n    \u00a0\u00a0declarations: [\n    \u00a0\u00a0\u00a0\u00a0AppComponent,\n    \u00a0\u00a0\u00a0\u00a0LandingComponent\n    \u00a0\u00a0],\n    \u00a0\u00a0imports: [\n    \u00a0\u00a0\u00a0\u00a0BrowserModule,\n    \u00a0\u00a0\u00a0\u00a0AppRoutingModule,\n    \u00a0\u00a0\u00a0\u00a0HomeModule, \u2190 Remove\n    \u00a0\u00a0\u00a0\u00a0AboutModule \u2190 Remove\n    \u00a0\u00a0],\n    \u00a0\u00a0providers: [],\n    \u00a0\u00a0bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n    ```", "```ts\n    ng g guard guards/Auth\n    ```", "```ts\n    import { Injectable } from '@angular/core';\n    import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\n    import { Observable } from 'rxjs';\n    import { AuthService } from '../services/auth.service';\n    @Injectable({\n    \u00a0\u00a0providedIn: 'root'\n    })\n    export class AuthGuard implements CanActivate {\n    \u00a0\u00a0constructor(private auth: AuthService, private router: \u00a0\u00a0Router) {\u00a0\u00a0}\n    \u00a0\u00a0canActivate(\n    \u00a0\u00a0\u00a0\u00a0route: ActivatedRouteSnapshot,\n    \u00a0\u00a0\u00a0\u00a0state: RouterStateSnapshot): Observable<boolean | \u00a0\u00a0\u00a0\u00a0UrlTree> | Promise<boolean | UrlTree> | boolean | \u00a0\u00a0\u00a0\u00a0UrlTree {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const loggedIn = !!this.auth.isLoggedIn();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!loggedIn) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.router.navigate(['/auth']);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return true;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    import { AuthGuard } from './guards/auth.guard';\n    const routes: Routes = [{...}, {\n    \u00a0\u00a0path: 'auth',\n    \u00a0\u00a0loadChildren: () => import('./auth/auth.module').then \u00a0\u00a0(m => m.AuthModule)\n    }, {\n    \u00a0\u00a0path: 'admin',\n    \u00a0\u00a0loadChildren: () => import('./admin/admin.module').\u00a0\u00a0then(m => m.AdminModule),\n    \u00a0\u00a0canActivate: [AuthGuard]\n    }, {\n    \u00a0\u00a0path: 'employee',\n    \u00a0\u00a0loadChildren: () => import('./employee/employee.\u00a0\u00a0module').then(m => m.EmployeeModule),\n    \u00a0\u00a0canActivate: [AuthGuard]\n    }];\n    ...\n    export class AppRoutingModule { }\n    ```", "```ts\n    ng g guard guards/Employee\n    ng g guard guards/Admin\n    ```", "```ts\n    ...\n    import { UserType } from '../constants/user-type';\n    import { AuthService } from '../services/auth.service';\n    ...\n    export class AdminGuard implements CanActivate {\n    \u00a0\u00a0constructor(private auth: AuthService) {}\n    \u00a0\u00a0canActivate(\n    \u00a0\u00a0\u00a0\u00a0route: ActivatedRouteSnapshot,\n    \u00a0\u00a0\u00a0\u00a0state: RouterStateSnapshot): Observable<boolean | \u00a0\u00a0\u00a0\u00a0UrlTree> | Promise<boolean | UrlTree> | boolean | \u00a0\u00a0\u00a0\u00a0UrlTree {\n    \u00a0\u00a0\u00a0\u00a0return this.auth.loggedInUserType === UserType.Admin;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    import { AdminGuard } from './guards/admin.guard';\n    import { AuthGuard } from './guards/auth.guard';\n    const routes: Routes = [{\n    \u00a0\u00a0path: '',\n     ...\n    }, {\n    \u00a0\u00a0path: 'auth',\n     ...\n    }, {\n    \u00a0\u00a0path: 'admin',\n    \u00a0\u00a0loadChildren: () => import('./admin/admin.module').\u00a0\u00a0then(m => m.AdminModule),\n    \u00a0\u00a0canActivate: [AuthGuard, AdminGuard]\n    }, {\n    \u00a0\u00a0path: 'employee',\n    \u00a0\u00a0...\n    }];\n    ...\n    ```", "```ts\n    ...\n    import { UserType } from '../constants/user-type';\n    import { AuthService } from '../services/auth.service';\n    @Injectable({\n    \u00a0\u00a0providedIn: 'root'\n    })\n    export class EmployeeGuard implements CanActivate {\n    \u00a0\u00a0constructor(private auth: AuthService) {}\n    \u00a0\u00a0canActivate(\n    \u00a0\u00a0\u00a0\u00a0route: ActivatedRouteSnapshot,\n    \u00a0\u00a0\u00a0\u00a0state: RouterStateSnapshot): Observable<boolean | \u00a0\u00a0\u00a0\u00a0UrlTree> | Promise<boolean | UrlTree> | boolean | \u00a0\u00a0\u00a0\u00a0UrlTree {\n    \u00a0\u00a0\u00a0\u00a0return this.auth.loggedInUserType === UserType.\u00a0\u00a0\u00a0\u00a0Employee;\n    \u00a0\u00a0} \n    }\n    ```", "```ts\n    ...\n    import { EmployeeGuard } from './guards/employee.guard';\n    const routes: Routes = [\n    \u00a0\u00a0...\n    , {\n    \u00a0\u00a0path: 'employee',\n    \u00a0\u00a0loadChildren: () => import('./employee/employee.\u00a0\u00a0module').then(m => m.EmployeeModule),\n    \u00a0\u00a0canActivate: [AuthGuard, EmployeeGuard]\n    }];\n    ...\n    ```", "```ts\n    ...\n    import { UserDetailComponent } from './user-detail/user-detail.component';\n    const routes: Routes = [\n    \u00a0\u00a0...\n    , {\n    \u00a0\u00a0path: 'user/:uuid',\n    \u00a0\u00a0component: UserDetailComponent\n    }];\n    ...\n    ```", "```ts\n    import { Component, Input, OnInit } from '@angular/core';\n    import { Router } from '@angular/router';\n    import { IUser } from '../../interfaces/user.interface';\n    @Component({\n    \u00a0\u00a0selector: 'app-user-card',\n    \u00a0\u00a0templateUrl: './user-card.component.html',\n    \u00a0\u00a0styleUrls: ['./user-card.component.scss']\n    })\n    export class UserCardComponent implements OnInit {\n    \u00a0\u00a0@Input('user') user: IUser;\n    \u00a0\u00a0constructor(private router: Router) { }\n    \u00a0\u00a0ngOnInit(): void {\n    \u00a0\u00a0}\n    \u00a0\u00a0cardClicked() {\n    \u00a0\u00a0\u00a0\u00a0this.router.navigate(['\u00a0\u00a0\u00a0\u00a0/user/${this.user.login.uuid}'])\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    import { ActivatedRoute } from '@angular/router';\n    ...\n    export class UserDetailComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0user: IUser;\n    \u00a0\u00a0similarUsers: IUser[];\n    \u00a0\u00a0constructor(\n    \u00a0\u00a0\u00a0\u00a0private userService: UserService,\n    \u00a0\u00a0\u00a0\u00a0private route: ActivatedRoute\n    \u00a0\u00a0) {}\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0}\n    \u00a0\u00a0ngOnDestroy() {\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    export class UserDetailComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0const userId = null;\n    \u00a0\u00a0\u00a0\u00a0this.getUserAndSimilarUsers(userId);\n    \u00a0\u00a0}\n    \u00a0\u00a0getUserAndSimilarUsers(userId) {\n    \u00a0\u00a0\u00a0\u00a0this.userService.getUser(userId)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mergeMap((user: IUser) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.user = user;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.userService.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getSimilarUsers(userId);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0).subscribe((similarUsers: IUser[]) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.similarUsers = similarUsers;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    import { mergeMap, takeWhile } from 'rxjs/operators';\n    import { ActivatedRoute } from '@angular/router';\n    ...\n    export class UserDetailComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0componentIsAlive = false;\n    \u00a0\u00a0constructor(private userService: UserService, private \u00a0\u00a0route: ActivatedRoute ) {}\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0this.componentIsAlive = true;\n    \u00a0\u00a0\u00a0\u00a0this.route.paramMap\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile (() => this.componentIsAlive)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.subscribe((params) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const userId = params.get('uuid');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.getUserAndSimilarUsers(userId);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    \u00a0\u00a0getUserAndSimilarUsers(userId) {...}\n    \u00a0\u00a0ngOnDestroy() {\n    \u00a0\u00a0\u00a0this.componentIsAlive = false;\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    <div class=\"toolbar\" role=\"banner\" id=\"toolbar\">\n    \u00a0\u00a0...\n    </div>\n    <app-loader></app-loader>\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0<div class=\"page-section\">\n    \u00a0\u00a0\u00a0\u00a0<router-outlet></router-outlet>\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    ...\n    export class AppComponent {\n    \u00a0\u00a0isLoadingRoute = false;\n    \u00a0\u00a0// DO NOT USE THE CODE BELOW IN PRODUCTION\n    \u00a0\u00a0// IT WILL CAUSE PERFORMANCE ISSUES\n    \u00a0\u00a0constructor(private auth: AuthService, private router: \u00a0\u00a0Router) {\n    \u00a0\u00a0}\n    \u00a0\u00a0get isLoggedIn() {\n    \u00a0\u00a0\u00a0\u00a0return this.auth.isLoggedIn();\n    \u00a0\u00a0}\n    \u00a0\u00a0logout() {\n    \u00a0\u00a0\u00a0\u00a0this.auth.logout();\n    \u00a0\u00a0\u00a0\u00a0this.router.navigate(['/auth']);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    <app-loader *ngIf=\"isLoadingRoute\"></app-loader>\n    <div class=\"content\" role=\"main\">\n    \u00a0\u00a0<div class=\"page-section\">\n    \u00a0\u00a0\u00a0\u00a0<router-outlet></router-outlet>\n    \u00a0\u00a0</div>\n    </div>\n    ```", "```ts\n    import { Component } from '@angular/core';\n    import { NavigationStart, Router } from '@angular/router';\n    import { AuthService } from './services/auth.service';\n    ...\n    export class AppComponent {\n    \u00a0\u00a0isLoadingRoute = false;\n    \u00a0\u00a0// DO NOT USE THE CODE BELOW IN PRODUCTION\n    \u00a0\u00a0// IT WILL CAUSE PERFORMANCE ISSUES\n    \u00a0\u00a0constructor(private auth: AuthService, private router: \u00a0\u00a0Router) {\n    \u00a0\u00a0\u00a0\u00a0this.router.events.subscribe((event) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (event instanceof NavigationStart) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.isLoadingRoute = true;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    \u00a0\u00a0get isLoggedIn() {...}\n    \u00a0\u00a0logout() {...}\n    }\n    ```", "```ts\n    import { Component } from '@angular/core';\n    import { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router } from '@angular/router';\n    ...\n    export class AppComponent {\n    \u00a0\u00a0...\n    \u00a0\u00a0constructor(private auth: AuthService, private router: \u00a0\u00a0Router) {\n    \u00a0\u00a0\u00a0\u00a0this.router.events.subscribe((event) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (event instanceof NavigationStart) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.isLoadingRoute = true;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0event instanceof NavigationEnd ||\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0event instanceof NavigationError ||\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0event instanceof NavigationCancel\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.isLoadingRoute = false;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    \u00a0\u00a0get isLoggedIn() {...}\n    \u00a0\u00a0logout() {...}\n    }\n    ```", "```ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule, PreloadAllModules } from '@angular/router';\n    const routes: Routes = [...];\n    @NgModule({\n    \u00a0\u00a0imports: [RouterModule.forRoot(routes, {\n    \u00a0\u00a0\u00a0\u00a0preloadingStrategy: PreloadAllModules\n    \u00a0\u00a0})],\n    \u00a0\u00a0exports: [RouterModule]\n    })\n    export class AppRoutingModule { }\n    ```", "```ts\n    ng g s services/custom-preload-strategy\n    ```", "```ts\n    import { Injectable } from '@angular/core';\n    import { PreloadingStrategy } from '@angular/router';\n    @Injectable({\n    \u00a0\u00a0providedIn: 'root'\n    })\n    export class CustomPreloadStrategyService implements PreloadingStrategy {\n    \u00a0\u00a0constructor() { }\n    }\n    ```", "```ts\n    import { Injectable } from '@angular/core';\n    import { PreloadingStrategy, Route } from '@angular/router';\n    import { Observable, of } from 'rxjs';\n    @Injectable({\n    \u00a0\u00a0providedIn: 'root'\n    })\n    export class CustomPreloadStrategyService implements PreloadingStrategy {\n    \u00a0\u00a0constructor() { }\n    \u00a0\u00a0preload(route: Route, load: () => Observable<any>): \u00a0\u00a0Observable<any> {\n    \u00a0\u00a0\u00a0\u00a0return of(null)\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    const routes: Routes = [{...}, {\n    \u00a0\u00a0path: 'auth',\n    \u00a0\u00a0loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule),\n    \u00a0\u00a0data: { shouldPreload: true }\n    }, {\n    \u00a0\u00a0path: 'admin',\n    \u00a0\u00a0loadChildren: () => import('./admin/admin.module').\u00a0\u00a0then(m => m.AdminModule),\n    \u00a0\u00a0data: { shouldPreload: true }\n    }, {\n    \u00a0\u00a0path: 'employee',\n    \u00a0\u00a0loadChildren: () => import('./employee/employee.\u00a0\u00a0module').then(m => m.EmployeeModule),\n    \u00a0\u00a0data: { shouldPreload: false }\n    }];\n    ...\n    ```", "```ts\n    export class CustomPreloadStrategyService implements PreloadingStrategy {\n    \u00a0\u00a0...\n    \u00a0\u00a0loadRoute(route: Route, loadFn: () => Observable<any>): \u00a0\u00a0Observable<any> {\n    \u00a0\u00a0\u00a0\u00a0console.log('Preloading done for route: ${route.\u00a0\u00a0\u00a0\u00a0path}')\n    \u00a0\u00a0\u00a0\u00a0return loadFn();\n    \u00a0\u00a0}\n    \u00a0\u00a0noPreload(route: Route): Observable<any> {\n    \u00a0\u00a0\u00a0\u00a0console.log('No preloading set for: ${route.path}');\n    \u00a0\u00a0\u00a0\u00a0return of(null);\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    ...\n    export class CustomPreloadStrategyService implements PreloadingStrategy {\n    ...\n    \u00a0\u00a0preload(route: Route, load: () => Observable<any>): \u00a0\u00a0Observable<any> {\n    \u00a0\u00a0\u00a0\u00a0try {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const { shouldPreload } = route.data;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return shouldPreload ? this.loadRoute(route, load) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: this.noPreload(route);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0catch (e) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.error(e);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.noPreload(route);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule, PreloadAllModules \u2190 Remove } from '@angular/router';\n    import { CustomPreloadStrategyService } from './services/custom-preload-strategy.service';\n    const routes: Routes = [...];\n    @NgModule({\n    \u00a0\u00a0imports: [RouterModule.forRoot(routes, {\n    \u00a0\u00a0\u00a0\u00a0preloadingStrategy: CustomPreloadStrategyService\n    \u00a0\u00a0})],\n    \u00a0\u00a0exports: [RouterModule]\n    })\n    export class AppRoutingModule { }\n    ```"]