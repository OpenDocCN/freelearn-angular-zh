["```ts\n    npm install --save-dev jest jest-preset-angular @types/jest\n    ```", "```ts\n    npm uninstall karma karma-chrome-launcher karma-jasmine-html-reporter @types/jasmine @types/jasminewd2 jasmine-core jasmine-spec-reporter karma-coverage-istanbul-reporter karma-jasmine\n    ```", "```ts\n    {\n    \u00a0\u00a0...\n    \u00a0\u00a0\"projects\": {\n    \u00a0\u00a0\u00a0\u00a0\"setting-up-jest\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"...\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"prefix\": \"app\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"architect\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"build\": {...},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"serve\": {...},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"extract-i18n\": {...},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"test\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"builder\": \"@angular-builders/jest:run\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"options\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"tsConfig\": \"<rootDir>/src/tsconfig.test.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0json\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"collectCoverage\": false,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"forceExit\": true\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"lint\": {...},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"e2e\": {...}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0},\n    \u00a0\u00a0\"defaultProject\": \"setting-up-jest\"\n    }\n    ```", "```ts\n    import 'jest-preset-angular /setup-jest';\n    ```", "```ts\n    {\n    \u00a0\u00a0\"extends\": \"./tsconfig.json\",\n    \u00a0\u00a0\"compilerOptions\": {\n    \u00a0\u00a0\u00a0\u00a0\"outDir\": \"./out-tsc/spec\",\n    \u00a0\u00a0\u00a0\u00a0\"types\": [\"jest\", \"node\"],\n    \u00a0\u00a0\u00a0\u00a0\"esModuleInterop\": true,\n    \u00a0\u00a0\u00a0\u00a0\"emitDecoratorMetadata\": true\n    \u00a0\u00a0},\n    \u00a0\u00a0\"files\": [\"src/polyfills.ts\"],\n    \u00a0\u00a0\"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n    }\n    ```", "```ts\n    {\n    \u00a0\u00a0\"name\": \"setting-up-jest\",\n    \u00a0\u00a0\"version\": \"0.0.0\",\n    \u00a0\u00a0\"scripts\": {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0\"build\": \"ng build\",\n    \u00a0\u00a0\u00a0\u00a0\"test\": \"jest\",\n    \u00a0\u00a0\u00a0\u00a0\"test:coverage\": \"jest --coverage\",\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0},\n    \u00a0\u00a0\"private\": true,\n    \u00a0\u00a0\"dependencies\": {...},\n    \u00a0\u00a0\"devDependencies\": {...},\n    }\n    ```", "```ts\n    {\n    \u00a0\u00a0...\n    \u00a0\u00a0\"dependencies\": {...},\n    \u00a0\u00a0\"devDependencies\": {...},\n    \u00a0\u00a0\"jest\": {\n    \u00a0\u00a0\u00a0\u00a0\"preset\": \"jest-preset-angular\",\n    \u00a0\u00a0\u00a0\u00a0\"setupFilesAfterEnv\": [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"<rootDir>/jestSetup.ts\"\n    \u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0\u00a0\u00a0\"testPathIgnorePatterns\": [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"<rootDir>/node_modules/\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"<rootDir>/dist/\"\n    \u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0\u00a0\u00a0\"globals\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"ts-jest\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"tsconfig\": \"<rootDir>/tsconfig.spec.json\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"stringifyContentPathRegex\": \"\\\\.html$\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    npm run test\n    ```", "```ts\n    ...\n    describe('CounterComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should show an alert when the counter value goes \u00a0\u00a0above the MAX_VALUE', () => {\n    \u00a0\u00a0\u00a0\u00a0spyOn(window, 'alert');\n    \u00a0\u00a0\u00a0\u00a0component.counter = component.MAX_VALUE;\n    \u00a0\u00a0\u00a0\u00a0component.increment();\n    \u00a0\u00a0\u00a0\u00a0expect(window.alert).toHaveBeenCalledWith('Value too \u00a0\u00a0\u00a0\u00a0high');\n    \u00a0\u00a0\u00a0\u00a0expect(component.counter).toBe(component.MAX_VALUE);\n    \u00a0\u00a0});\n    \u00a0\u00a0it('should show an alert when the counter value goes \u00a0\u00a0above the MAX_VALUE', () => {\n    \u00a0\u00a0\u00a0\u00a0spyOn(window, 'alert');\n    \u00a0\u00a0\u00a0\u00a0component.counter = component.MIN_VALUE;\n    \u00a0\u00a0\u00a0\u00a0component.decrement();\n    \u00a0\u00a0\u00a0\u00a0expect(window.alert).toHaveBeenCalledWith('Value too \u00a0\u00a0\u00a0\u00a0low');\n    \u00a0\u00a0\u00a0\u00a0expect(component.counter).toBe(component.MIN_VALUE);\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    ...\n    describe('CounterComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it.only('should call the localStorage.getItem method on \u00a0\u00a0component init', () => {\n    \u00a0\u00a0\u00a0\u00a0spyOn(localStorage, 'getItem');\n    \u00a0\u00a0\u00a0\u00a0component.ngOnInit();\n    \u00a0\u00a0\u00a0\u00a0expect(localStorage.getItem).toBeCalled();\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    const createLocalStorageMock = () => {\n    \u00a0\u00a0let storage = {};\n    \u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0getItem: (key) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return storage[key] ? storage[key] : null;\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0setItem: (key, value) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0storage[key] = value;\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0};\n    };\n    Object.defineProperty(window, 'localStorage', {\n    \u00a0\u00a0value: createLocalStorageMock(),\n    });\n    ```", "```ts\n    import 'jest-preset-angular';\n    import './jest-global-mocks';\n    ```", "```ts\n    ...\n    describe('CounterComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should call the localStorage.getItem method on \u00a0\u00a0component init', () => {\n    \u00a0\u00a0\u00a0\u00a0spyOn(localStorage, 'getItem');\n    \u00a0\u00a0\u00a0\u00a0component.ngOnInit();\n    \u00a0\u00a0\u00a0\u00a0expect(localStorage.getItem).toBeCalled();\n    \u00a0\u00a0});\n    \u00a0\u00a0it('should retrieve the last saved value from \u00a0\u00a0localStorage on component init', () => {\n    \u00a0\u00a0\u00a0\u00a0localStorage.setItem('counterValue', '12');\n    \u00a0\u00a0\u00a0\u00a0component.ngOnInit();\n    \u00a0\u00a0\u00a0\u00a0expect(component.counter).toBe(12);\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    ...\n    describe('CounterComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should save the new counterValue to localStorage \u00a0\u00a0on increment, decrement and reset', () => {\n    \u00a0\u00a0\u00a0\u00a0spyOn(localStorage, 'setItem');\n    \u00a0\u00a0\u00a0\u00a0component.counter = 0;\n    \u00a0\u00a0\u00a0\u00a0component.increment();\n    \u00a0\u00a0\u00a0\u00a0expect(localStorage.setItem).\u00a0\u00a0\u00a0\u00a0toHaveBeenCalledWith('counterValue', '1');\n    \u00a0\u00a0\u00a0\u00a0component.counter = 20;\n    \u00a0\u00a0\u00a0\u00a0component.decrement();\n    \u00a0\u00a0\u00a0\u00a0expect(localStorage.setItem).\u00a0\u00a0\u00a0\u00a0toHaveBeenCalledWith('counterValue', '19');\n    \u00a0\u00a0\u00a0\u00a0component.reset();\n    \u00a0\u00a0\u00a0\u00a0expect(localStorage.setItem).\u00a0\u00a0\u00a0\u00a0toHaveBeenCalledWith('counterValue', '0');\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    const CounterServiceMock = {\n    \u00a0\u00a0storageKey: 'counterValue',\n    \u00a0\u00a0getFromStorage: jest.fn(),\n    \u00a0\u00a0saveToStorage: jest.fn(),\n    };\n    export default CounterServiceMock;\n    ```", "```ts\n    import { ComponentFixture, TestBed } from '@angular/core/testing';\n    import { CounterService } from 'src/app/core/services/counter.service';\n    import CounterServiceMock from 'src/__mocks__/services/counter.service.mock';\n    ...\n    describe('CounterComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0beforeEach(async () => {\n    \u00a0\u00a0\u00a0\u00a0await TestBed.configureTestingModule({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0declarations: [CounterComponent],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0providers: [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0provide: CounterService,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0useValue: CounterServiceMock,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0\u00a0\u00a0}).compileComponents();\n    \u00a0\u00a0});\n    \u00a0\u00a0...\n    });\n    ```", "```ts\n    ...\n    describe('CounterComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should call the CounterService.getFromStorage \u00a0\u00a0method on component init', () => {\n    \u00a0\u00a0\u00a0\u00a0component.ngOnInit();\n    \u00a0\u00a0\u00a0\u00a0expect(CounterServiceMock.getFromStorage).\u00a0\u00a0\u00a0\u00a0toBeCalled();\n    \u00a0\u00a0});\n    \u00a0\u00a0it('should retrieve the last saved value from \u00a0\u00a0CounterService on component init', () => {\n    \u00a0\u00a0\u00a0\u00a0CounterServiceMock.getFromStorage.\u00a0\u00a0\u00a0\u00a0mockReturnValue(12);\n    \u00a0\u00a0\u00a0\u00a0component.ngOnInit();\n    \u00a0\u00a0\u00a0\u00a0expect(component.counter).toBe(12);\n    \u00a0\u00a0});\n    \u00a0\u00a0it('should save the new counterValue via CounterService \u00a0\u00a0on increment, decrement and reset', () => {\n    \u00a0\u00a0\u00a0\u00a0component.counter = 0;\n    \u00a0\u00a0\u00a0\u00a0component.increment();\n    \u00a0\u00a0\u00a0\u00a0expect(CounterServiceMock.saveToStorage).\u00a0\u00a0\u00a0\u00a0toHaveBeenCalledWith(1);\n    \u00a0\u00a0\u00a0\u00a0component.counter = 20;\n    \u00a0\u00a0\u00a0\u00a0component.decrement();\n    \u00a0\u00a0\u00a0\u00a0expect(CounterServiceMock.saveToStorage).\u00a0\u00a0\u00a0\u00a0toHaveBeenCalledWith(19);\n    \u00a0\u00a0\u00a0\u00a0component.reset();\n    \u00a0\u00a0\u00a0\u00a0expect(CounterServiceMock.saveToStorage).\u00a0\u00a0\u00a0\u00a0toHaveBeenCalledWith(0);\n    \u00a0\u00a0});\n    });\n    ```", "```ts\nconst mockFn = jest.fn();\nmockFn();\nexpect(mockFn).toHaveBeenCalled(); // test passes\n// With a mock implementation:\nconst returnsTrue = jest.fn(() => true);\nconsole.log(returnsTrue()); // true;\nexpect(returnsTrue()).toBe(true); // test passes\n```", "```ts\nexpect(CounterServiceMock.getFromStorage).toBeCalled();\n```", "```ts\nexpect(CounterServiceMock.saveToStorage).toHaveBeenCalledWith(1);\n```", "```ts\n    ...\n    describe('CounterComponent', () => {\n    \u00a0\u00a0let component: CounterComponent;\n    \u00a0\u00a0let fixture: ComponentFixture<CounterComponent>;\n    \u00a0\u00a0let counterService: CounterService;\n    \u00a0\u00a0beforeEach(async () => {...});\n    \u00a0\u00a0beforeEach(() => {\n    \u00a0\u00a0\u00a0\u00a0fixture = TestBed.createComponent(CounterComponent);\n    \u00a0\u00a0\u00a0\u00a0component = fixture.componentInstance;\n    \u00a0\u00a0\u00a0\u00a0fixture.detectChanges();\n    \u00a0\u00a0\u00a0\u00a0counterService = TestBed.inject(CounterService);\n    \u00a0\u00a0});\n    \u00a0\u00a0...\n    });\n    ```", "```ts\n    ...\n    describe('CounterComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should call the localStorage.getItem method on \u00a0\u00a0component init', () => {\n    \u00a0\u00a0\u00a0\u00a0spyOn(counterService, 'getFromStorage');\n    \u00a0\u00a0\u00a0\u00a0component.ngOnInit();\n    \u00a0\u00a0\u00a0\u00a0expect(counterService.getFromStorage).\u00a0\u00a0\u00a0\u00a0toHaveBeenCalled();\n    \u00a0\u00a0});\n    \u00a0\u00a0...\n    });\n    ```", "```ts\n    ...\n    describe('CounterComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should retrieve the last saved value from \u00a0\u00a0localStorage on component init', () => {\n    \u00a0\u00a0\u00a0\u00a0spyOn(counterService, 'getFromStorage').and.\u00a0\u00a0\u00a0\u00a0returnValue(12);\n    \u00a0\u00a0\u00a0\u00a0component.ngOnInit();\n    \u00a0\u00a0\u00a0\u00a0expect(component.counter).toBe(12);\n    \u00a0\u00a0});\n    \u00a0\u00a0...\n    });\n    ```", "```ts\n    ...\n    describe('CounterComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should save the new counterValue to localStorage \u00a0\u00a0on increment, decrement and reset', () => {\n    \u00a0\u00a0\u00a0\u00a0spyOn(counterService, 'saveToStorage');\n    \u00a0\u00a0\u00a0\u00a0component.counter = 0;\n    \u00a0\u00a0\u00a0\u00a0component.increment();\n    \u00a0\u00a0\u00a0\u00a0expect(counterService.saveToStorage).\u00a0\u00a0\u00a0\u00a0toHaveBeenCalledWith(1);\n    \u00a0\u00a0\u00a0\u00a0component.counter = 20;\n    \u00a0\u00a0\u00a0\u00a0component.decrement();\n    \u00a0\u00a0\u00a0\u00a0expect(counterService.saveToStorage).\u00a0\u00a0\u00a0\u00a0toHaveBeenCalledWith(19);\n    \u00a0\u00a0\u00a0\u00a0component.reset();\n    \u00a0\u00a0\u00a0\u00a0expect(counterService.saveToStorage).\u00a0\u00a0\u00a0\u00a0toHaveBeenCalledWith(0);\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    npm install ng-mocks --save\n    # or\n    yarn add ng-mocks\n    ```", "```ts\n    npm run test -- -t 'AppComponent'\n    #or\n    yarn test -- -t 'AppComponent'\n    ```", "```ts\n    ...\n    import { VersionControlComponent } from './components/version-control/version-control.component';\n    ...\n    describe('AppComponent', () => {\n    \u00a0\u00a0beforeEach(waitForAsync(() => {\n    \u00a0\u00a0\u00a0\u00a0TestBed.configureTestingModule({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imports: [RouterTestingModule],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0declarations: [AppComponent, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VersionControlComponent],\n    \u00a0\u00a0\u00a0\u00a0}).compileComponents();\n    \u00a0\u00a0}));\n    \u00a0\u00a0...\n    });\n    ```", "```ts\n    ...\n    import { MockComponent } from 'ng-mocks';\n    ...\n    describe('AppComponent', () => {\n    \u00a0\u00a0beforeEach(waitForAsync(() => {\n    \u00a0\u00a0\u00a0\u00a0TestBed.configureTestingModule({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imports: [RouterTestingModule],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0declarations: [AppComponent, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MockComponent(VersionControlComponent)],\n    \u00a0\u00a0\u00a0\u00a0}).compileComponents();\n    \u00a0\u00a0}));\n    \u00a0\u00a0...\n    });\n    ```", "```ts\n    import { MockBuilder, MockedComponentFixture, MockRender } from 'ng-mocks';\n    import { ReleaseFormComponent } from '../release-form/release-form.component';\n    import { ReleaseLogsComponent } from '../release-logs/release-logs.component';\n    import { VersionControlComponent } from './version-control.component';\n    describe('VersionControlComponent', () => {\n    \u00a0\u00a0let component: VersionControlComponent;\n    \u00a0\u00a0let fixture: MockedComponentFixture \u00a0\u00a0<VersionControlComponent>;\n    \u00a0\u00a0beforeEach(() => {\n    \u00a0\u00a0\u00a0\u00a0return MockBuilder(VersionControlComponent)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.mock(ReleaseFormComponent)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.mock(ReleaseLogsComponent);\n    \u00a0\u00a0});\n    \u00a0\u00a0beforeEach(() => {\n    \u00a0\u00a0\u00a0\u00a0fixture = MockRender(VersionControlComponent);\n    \u00a0\u00a0\u00a0\u00a0component = fixture.point.componentInstance;\n    \u00a0\u00a0});\n    \u00a0\u00a0it('should create', () => {...});\n    });\n    ```", "```ts\n    import {\n    \u00a0\u00a0MockBuilder,\n    \u00a0\u00a0MockedComponentFixture,\n    \u00a0\u00a0MockRender,\n    \u00a0\u00a0ngMocks,\n    } from 'ng-mocks';\n    import { Apps } from 'src/app/constants/apps';\n    ...\n    describe('VersionControlComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should set the [logs] @Input for the \u00a0\u00a0ReleaseLogsComponent', () => {\n    \u00a0\u00a0\u00a0\u00a0const releaseLogsComponent = ngMocks.\u00a0\u00a0\u00a0\u00a0find<ReleaseLogsComponent>(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'app-release-logs'\n    \u00a0\u00a0\u00a0\u00a0).componentInstance;\n    \u00a0\u00a0\u00a0\u00a0const logsStub = [{ app: Apps.DRIVE, version: \u00a0\u00a0\u00a0\u00a0'2.2.2', message: '' }];\n    \u00a0\u00a0\u00a0\u00a0component.releaseLogs = [...logsStub];\n    \u00a0\u00a0\u00a0\u00a0fixture.detectChanges();\n    \u00a0\u00a0\u00a0\u00a0expect(releaseLogsComponent.logs.length).toBe(1);\n    \u00a0\u00a0\u00a0\u00a0expect(releaseLogsComponent.logs).toEqual([...logsStub]);\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    ...\n    describe('VersionControlComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should add the new log when it is created via \u00a0\u00a0ReleaseFormComponent', () => {\n    \u00a0\u00a0\u00a0\u00a0const releaseFormsComponent = ngMocks.\u00a0\u00a0\u00a0\u00a0find<ReleaseFormComponent>('app-release-form').\u00a0\u00a0\u00a0\u00a0componentInstance;\n    \u00a0\u00a0\u00a0\u00a0const releaseLogsComponent = ngMocks.\u00a0\u00a0\u00a0\u00a0find<ReleaseLogsComponent>('app-release-logs').\u00a0\u00a0\u00a0\u00a0componentInstance;\n    \u00a0\u00a0\u00a0\u00a0const newLogStub = { app: Apps.DRIVE, version: \u00a0\u00a0\u00a0'2.2.2', message: '' };\n    \u00a0\u00a0\u00a0\u00a0component.releaseLogs = []; // no logs initially\n    \u00a0\u00a0\u00a0\u00a0releaseFormsComponent.newReleaseLog.emit(newLogStub); \u00a0\u00a0\u00a0\u00a0// add a new log\n    \u00a0\u00a0\u00a0\u00a0fixture.detectChanges(); // detect changes\n    \u00a0\u00a0\u00a0\u00a0expect(component.releaseLogs).toEqual([newLogStub]); \u00a0\u00a0\u00a0\u00a0// VersionControlComponent logs\n    \u00a0\u00a0\u00a0\u00a0expect(releaseLogsComponent.logs).\u00a0\u00a0\u00a0\u00a0toEqual([newLogStub]); // ReleaseLogsComponent logs\n    \u00a0\u00a0});\n    });\n    ```", "```ts\nfixture.debugElement.query(\n\u00a0\u00a0By.css('app-release-form')\n).componentInstance\n```", "```ts\n    npm install --save @angular/cdk@12.0.0\n    ```", "```ts\n    import { ComponentHarness } from '@angular/cdk/testing';\n    export class ReleaseFormComponentHarness extends ComponentHarness {\n    \u00a0\u00a0static hostSelector = 'app-release-form';\n    \u00a0\u00a0protected getSubmitButton = this.\u00a0\u00a0locatorFor('button[type=submit]');\n    \u00a0\u00a0protected getAppNameInput = this.\u00a0\u00a0locatorFor(`#appName`);\n    \u00a0\u00a0protected getAppVersionInput = this.\u00a0\u00a0locatorFor(`#versionNumber`);\n    \u00a0\u00a0protected getVersionErrorEl = async () => {\n    \u00a0\u00a0\u00a0\u00a0const alerts = await this.locatorForAll('.alert.\u00a0\u00a0\u00a0\u00a0alert-danger')();\n    \u00a0\u00a0\u00a0\u00a0return alerts[1];\n    \u00a0\u00a0};\n    }\n    ```", "```ts\n    ...\n    import { HarnessLoader } from '@angular/cdk/testing';\n    import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';\n    describe('VersionControlComponent', () => {\n    \u00a0\u00a0let component: VersionControlComponent;\n    \u00a0\u00a0let fixture: ComponentFixture<VersionControlComponent>;\n    \u00a0\u00a0let harnessLoader: HarnessLoader;\n    \u00a0\u00a0...\n    \u00a0\u00a0beforeEach(() => {\n    \u00a0\u00a0\u00a0\u00a0fixture = TestBed.\u00a0\u00a0\u00a0\u00a0createComponent(VersionControlComponent);\n    \u00a0\u00a0\u00a0\u00a0component = fixture.componentInstance;\n    \u00a0\u00a0\u00a0\u00a0fixture.detectChanges();\n    \u00a0\u00a0\u00a0\u00a0harnessLoader = TestbedHarnessEnvironment.\u00a0\u00a0\u00a0\u00a0loader(fixture);\n    \u00a0\u00a0});\n    \u00a0\u00a0...\n    });\n    ```", "```ts\n    ...\n    export class ReleaseFormComponentHarness extends ComponentHarness {\n    \u00a0\u00a0...\n    \u00a0\u00a0async getSelectedAppName() {\n    \u00a0\u00a0\u00a0\u00a0const appSelectInput = await this.getAppNameInput();\n    \u00a0\u00a0\u00a0\u00a0return appSelectInput.getProperty('value');\n    \u00a0\u00a0}\n    \u00a0\u00a0async clickSubmit() {\n    \u00a0\u00a0\u00a0\u00a0const submitBtn = await this.getSubmitButton();\n    \u00a0\u00a0\u00a0\u00a0return await submitBtn.click();\n    \u00a0\u00a0}\n    \u00a0\u00a0async setNewAppVersion(version: string) {\n    \u00a0\u00a0\u00a0\u00a0const versionInput = await this.getAppVersionInput();\n    \u00a0\u00a0\u00a0\u00a0return await versionInput.sendKeys(version);\n    \u00a0\u00a0}\n    \u00a0\u00a0async isVersionErrorShown() {\n    \u00a0\u00a0\u00a0\u00a0const versionErrorEl = await this.\u00a0\u00a0\u00a0\u00a0getVersionErrorEl();\n    \u00a0\u00a0\u00a0\u00a0const versionErrorText = await versionErrorEl.text();\n    \u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0versionErrorText.trim() === 'Please write an \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0appropriate version number'\n    \u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    import { ReleaseFormComponentHarness } from '../release-form/release-form.component.harness';\n    describe('VersionControlComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should have the first app selected for the new \u00a0\u00a0release log', async () => {\n    \u00a0\u00a0\u00a0\u00a0const rfHarness = await harnessLoader.getHarness(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ReleaseFormComponentHarness\n    \u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0const appSelect = await rfHarness.\u00a0\u00a0\u00a0\u00a0getSelectedAppName();\n    \u00a0\u00a0\u00a0\u00a0expect(appSelect).toBe(Apps.DRIVE);\n    \u00a0\u00a0});\n    \u00a0\u00a0...\n    });\n    ```", "```ts\n    ...\n    describe('VersionControlComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should show error on wrong version number input', \u00a0\u00a0async () => {\n    \u00a0\u00a0\u00a0\u00a0const rfHarness = await harnessLoader.getHarness(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ReleaseFormComponentHarness\n    \u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0await rfHarness.setNewAppVersion('abcd');\n    \u00a0\u00a0\u00a0\u00a0const isErrorshown = await rfHarness.\u00a0\u00a0\u00a0\u00a0isVersionErrorShown();\n    \u00a0\u00a0\u00a0\u00a0expect(isErrorshown).toBeTruthy();\n    \u00a0\u00a0});\n    \u00a0\u00a0...\n    });\n    ```", "```ts\n    import { ComponentHarness } from '@angular/cdk/testing';\n    export class ReleaseLogsComponentHarness extends ComponentHarness {\n    \u00a0\u00a0static hostSelector = 'app-release-logs';\n    \u00a0\u00a0protected getLogsElements = this.locatorForAll \u00a0\u00a0('.logs__item');\n    \u00a0\u00a0async getLogsLength() {\n    \u00a0\u00a0\u00a0\u00a0const logsElements = await this.getLogsElements();\n    \u00a0\u00a0\u00a0\u00a0return logsElements.length;\n    \u00a0\u00a0}\n    \u00a0\u00a0async getLatestLog() {\n    \u00a0\u00a0\u00a0\u00a0const logsElements = await this.getLogsElements();\n    \u00a0\u00a0\u00a0\u00a0return await logsElements[0].text();\n    \u00a0\u00a0}\n    \u00a0\u00a0async validateLatestLog(version, app) {\n    \u00a0\u00a0\u00a0\u00a0const latestLogText = await this.getLatestLog();\n    \u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0latestLogText.trim() === `Version ${version} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0released for app ${app}`\n    \u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    import { ReleaseFormComponentHarness } from '../release-form/release-form.component.harness';\n    import { ReleaseLogsComponentHarness } from '../release-logs/release-logs.component.harness';\n    describe('VersionControlComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should show the new log in the list after adding \u00a0\u00a0submitting a new log', async () => {\n    \u00a0\u00a0\u00a0\u00a0const rfHarness = await harnessLoader.getHarness(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ReleaseFormComponentHarness\n    \u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0const rLogsHarness = await harnessLoader.getHarness(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ReleaseLogsComponentHarness\n    \u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0let logsLength = await rLogsHarness.getLogsLength();\n    \u00a0\u00a0\u00a0\u00a0expect(logsLength).toBe(0); // no logs initially\n    \u00a0\u00a0\u00a0\u00a0const APP = Apps.DRIVE;\n    \u00a0\u00a0\u00a0\u00a0const VERSION = '2.3.6';\n    \u00a0\u00a0\u00a0\u00a0await rfHarness.setNewAppVersion(VERSION);\n    \u00a0\u00a0\u00a0\u00a0await rfHarness.clickSubmit();\n    \u00a0\u00a0\u00a0\u00a0logsLength = await rLogsHarness.getLogsLength();\n    \u00a0\u00a0\u00a0\u00a0expect(logsLength).toBe(1);\n    \u00a0\u00a0\u00a0\u00a0const isNewLogAdded = await rLogsHarness.\u00a0\u00a0\u00a0\u00a0validateLatestLog(VERSION, APP);\n    \u00a0\u00a0\u00a0\u00a0expect(isNewLogAdded).toBe(true);\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    import { HttpClientModule } from '@angular/common/http';\n    import {\n    \u00a0\u00a0ComponentFixture,\n    \u00a0\u00a0fakeAsync,\n    \u00a0\u00a0TestBed,\n    \u00a0\u00a0tick,\n    } from '@angular/core/testing';\n    ...\n    describe('UsersComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should get users back from the API component init', \u00a0\u00a0fakeAsync(() => {\n    \u00a0\u00a0\u00a0\u00a0component.ngOnInit();\n    \u00a0\u00a0\u00a0\u00a0tick(500);\n    \u00a0\u00a0\u00a0\u00a0expect(component.users.length).toBeGreaterThan(0);\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\n    ...\n    import {\n    \u00a0\u00a0DUMMY_USERS,\n    \u00a0\u00a0UserServiceMock,\n    } from 'src/__mocks__/services/user.service.mock';\n    ...\n    describe('UsersComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0beforeEach(async () => {\n    \u00a0\u00a0\u00a0\u00a0await TestBed.configureTestingModule({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0declarations: [UsersComponent, UserCardComponent],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0providers: [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0provide: UserService,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0useClass: UserServiceMock,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imports: [HttpClientModule, ReactiveFormsModule, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RouterTestingModule],\n    \u00a0\u00a0\u00a0\u00a0}).compileComponents();\n    \u00a0\u00a0});\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should get users back from the API component init', \u00a0\u00a0fakeAsync(() => {\n    \u00a0\u00a0\u00a0\u00a0component.ngOnInit();\n    \u00a0\u00a0\u00a0\u00a0tick(500);\n    \u00a0\u00a0\u00a0\u00a0expect(component.users.length).toBe(2);\n    \u00a0\u00a0\u00a0\u00a0expect(component.users).toEqual(DUMMY_USERS);\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\n    ...\n    describe('UsersComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should get the searched users from the API upon \u00a0\u00a0searching', fakeAsync(() => {\n    \u00a0\u00a0\u00a0\u00a0component.searchForm.get('username').\u00a0\u00a0\u00a0\u00a0setValue('hall');\n    \u00a0\u00a0\u00a0\u00a0// the second record in our DUMMY_USERS array has \u00a0\u00a0\u00a0\u00a0the name Mrs Indie Hall\n    \u00a0\u00a0\u00a0\u00a0const expectedUsersList = [DUMMY_USERS[1]];\n    \u00a0\u00a0\u00a0\u00a0component.searchUsers();\n    \u00a0\u00a0\u00a0\u00a0tick(500);\n    \u00a0\u00a0\u00a0\u00a0expect(component.users.length).toBe(1);\n    \u00a0\u00a0\u00a0\u00a0expect(component.users).toEqual(expectedUsersList);\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\n    ...\n    import {..., fakeAsync, tick, } from '@angular/core/testing';\n    ...\n    import { UserServiceMock } from 'src/__mocks__/services/user.service.mock';\n    describe('UserDetailComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0beforeEach(\n    \u00a0\u00a0\u00a0\u00a0waitForAsync(() => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TestBed.configureTestingModule({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0declarations: [...],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imports: [HttpClientModule, RouterTestingModule],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0providers: [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0provide: UserService,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0useClass: UserServiceMock,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}).compileComponents();\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0);\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should get the user based on routeParams on page \u00a0\u00a0load', fakeAsync(() => {\n    \u00a0\u00a0\u00a0\u00a0component.ngOnInit();\n    \u00a0\u00a0\u00a0\u00a0tick(500);\n    \u00a0\u00a0\u00a0\u00a0expect(component.user).toBeTruthy();\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\n    ...\n    @Component({...})\n    export class UserDetailComponent implements OnInit, OnDestroy {\n    \u00a0\u00a0...\n    \u00a0\u00a0ngOnInit() {\n    \u00a0\u00a0\u00a0\u00a0this.isComponentAlive = true;\n    \u00a0\u00a0\u00a0\u00a0this.route.paramMap\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.pipe(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0takeWhile(() => !!this.isComponentAlive),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flatMap((params) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.user = null;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('params', params);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.userService.getUser(userId).\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pipe(...);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.subscribe((similarUsers: IUser[]) => {...});\n    \u00a0\u00a0}\n    \u00a0\u00a0...\n    }\n    ```", "```ts\n    import { convertToParamMap, ParamMap, Params } from '@angular/router';\n    import { ReplaySubject } from 'rxjs';\n    /**\n     * An ActivateRoute test double with a `paramMap`  observable.\n     * Use the `setParamMap()` method to add the next  `paramMap` value.\n     */\n    export class ActivatedRouteMock {\n    \u00a0\u00a0// Use a ReplaySubject to share previous values with \u00a0\u00a0subscribers\n    \u00a0\u00a0// and pump new values into the `paramMap` observable\n    \u00a0\u00a0private subject = new ReplaySubject<ParamMap>();\n    \u00a0\u00a0constructor(initialParams?: Params) {\n    \u00a0\u00a0\u00a0\u00a0this.setParamMap(initialParams);\n    \u00a0\u00a0}\n    \u00a0\u00a0/** The mock paramMap observable */\n    \u00a0\u00a0readonly paramMap = this.subject.asObservable();\n    \u00a0\u00a0/** Set the paramMap observables's next value */\n    \u00a0\u00a0setParamMap(params?: Params) {\n    \u00a0\u00a0\u00a0\u00a0this.subject.next(convertToParamMap(params));\n    \u00a0\u00a0}\n    }\n    ```", "```ts\n    ...\n    import { ActivatedRouteMock } from 'src/__mocks__/activated-route.mock';\n    import {\n    \u00a0\u00a0DUMMY_USERS,\n    \u00a0\u00a0UserServiceMock,\n    } from 'src/__mocks__/services/user.service.mock';\n    ...\n    describe('UserDetailComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0let activatedRoute;\n    \u00a0\u00a0beforeEach(\n    \u00a0\u00a0\u00a0\u00a0waitForAsync(() => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TestBed.configureTestingModule({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0providers: [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{...},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0provide: ActivatedRoute,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0useValue: new ActivatedRouteMock(),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}).compileComponents();\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0);\n    \u00a0\u00a0beforeEach(() => {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0fixture.detectChanges();\n    \u00a0\u00a0\u00a0\u00a0activatedRoute = TestBed.inject(ActivatedRoute);\n    \u00a0\u00a0});\n    \u00a0\u00a0...\n    });\n    ```", "```ts\n    ...\n    describe('UserDetailComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should get the user based on routeParams on page \u00a0\u00a0load', fakeAsync(() => {\n    \u00a0\u00a0\u00a0\u00a0component.ngOnInit();\n    \u00a0\u00a0\u00a0\u00a0activatedRoute.setParamMap({ uuid: DUMMY_USERS[1].\u00a0\u00a0\u00a0\u00a0login.uuid });\n    \u00a0\u00a0\u00a0\u00a0tick(500);\n    \u00a0\u00a0\u00a0\u00a0expect(component.user).toEqual(DUMMY_USERS[1]);\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\n    ...\n    describe('UserDetailComponent', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should get similar user based on routeParams uuid \u00a0\u00a0on page load', fakeAsync(() => {\n    \u00a0\u00a0\u00a0\u00a0component.ngOnInit();\n    \u00a0\u00a0\u00a0\u00a0activatedRoute.setParamMap({ uuid: DUMMY_USERS[1].\u00a0\u00a0\u00a0\u00a0login.uuid }); // the second user's uuid\n    \u00a0\u00a0\u00a0\u00a0const expectedSimilarUsers = [DUMMY_USERS[0]]; // \u00a0\u00a0\u00a0\u00a0the first user\n    \u00a0\u00a0\u00a0\u00a0tick(500);\n    \u00a0\u00a0\u00a0\u00a0expect(component.similarUsers).\u00a0\u00a0\u00a0\u00a0toEqual(expectedSimilarUsers);\n    \u00a0\u00a0}));\n    });\n    ```", "```ts\n    ...\n    describe('MultTablePipe', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should return an empty array if the value of digit \u00a0\u00a0is not valid', () => {\n    \u00a0\u00a0\u00a0\u00a0const digit = 0;\n    \u00a0\u00a0\u00a0\u00a0const limit = 10;\n    \u00a0\u00a0\u00a0\u00a0const outputArray = pipe.transform(null, digit, \u00a0\u00a0\u00a0\u00a0limit);\n    \u00a0\u00a0\u00a0\u00a0expect(outputArray).toEqual([]);\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    ...\n    describe('MultTablePipe', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should return an empty array if the value of limit \u00a0\u00a0is not valid', () => {\n    \u00a0\u00a0\u00a0\u00a0const digit = 10;\n    \u00a0\u00a0\u00a0\u00a0const limit = 0;\n    \u00a0\u00a0\u00a0\u00a0const outputArray = pipe.transform(null, digit, \u00a0\u00a0\u00a0\u00a0limit);\n    \u00a0\u00a0\u00a0\u00a0expect(outputArray).toEqual([]);\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    ...\n    describe('MultTablePipe', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should return the correct multiplication table when \u00a0\u00a0both digit and limit inputs are valid', () => {\n    \u00a0\u00a0\u00a0\u00a0const digit = 10;\n    \u00a0\u00a0\u00a0\u00a0const limit = 2;\n    \u00a0\u00a0\u00a0\u00a0const expectedArray = ['10 * 1 = 10', '10 * 2 = 20'];\n    \u00a0\u00a0\u00a0\u00a0const outputArray = pipe.transform(null, digit, \u00a0\u00a0\u00a0\u00a0limit);\n    \u00a0\u00a0\u00a0\u00a0expect(outputArray).toEqual(expectedArray);\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    ...\n    describe('MultTablePipe', () => {\n    \u00a0\u00a0...\n    \u00a0\u00a0it('should round of the limit if it is provided in \u00a0\u00a0decimals', () => {\n    \u00a0\u00a0\u00a0\u00a0const digit = 10;\n    \u00a0\u00a0\u00a0\u00a0const limit = 3.5;\n    \u00a0\u00a0\u00a0\u00a0const expectedArray = ['10 * 1 = 10', '10 * 2 = 20', \u00a0\u00a0\u00a0\u00a0'10 * 3 = 30']; // rounded off to 3 factors instead \u00a0\u00a0\u00a0\u00a0of 3.5\n    \u00a0\u00a0\u00a0\u00a0const outputArray = pipe.transform(null, digit, \u00a0\u00a0\u00a0\u00a0limit);\n    \u00a0\u00a0\u00a0\u00a0expect(outputArray).toEqual(expectedArray);\n    \u00a0\u00a0});\n    });\n    ```"]