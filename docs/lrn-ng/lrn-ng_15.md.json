["```ts\n//main.js\nimport { Lib } from './lib'; \nLib.doStuff)() // lib.js\n\n//lib.js\nimport { OtherLib } from './otherlib'\nOtherLib.doStuff()\n```", "```ts\nrules: [{\n test: /\\.blaha$/,\n use: 'blaha-loader'\n}]\n```", "```ts\nplugins: [new MyAwesomePlugin()]\n```", "```ts\nnpm install webpack -g\n```", "```ts\n//index.html\n<html></html>\n\n//app.js\nvar math = require('./mathAdd');\nconsole.log('expect 1 and 2 to equal 3, actual =', math(1,2));\n\n//mathAdd.js\nmodule.exports = function(first, second){\n return first + second;\n}\n```", "```ts\nwebpack ./app.js bundle.js\n```", "```ts\n<html>\n <script src=\"bundle.js\"></script>\n</html>\n```", "```ts\nnpm install http-server -g\n```", "```ts\nhttp-server -p 5000\n```", "```ts\nexpect 1 and 2 to equal 3, actual = 3\n```", "```ts\n//webpack.config.js\nmodule.exports =\n{\n entry: \"./app.js\",\n output: { filename : \"bundle.js\" }\n}\n```", "```ts\nmodule.exports = {\n entry: \"./app.js\",\n output: { filename : \"bundle.js\" },\n watch: true\n}\n```", "```ts\nvar math = require('./mathAdd');\nconsole.log('expect 1 and 2 to equal 3, actual =', math(1,2));\n```", "```ts\nnpm install webpack-dev-server -g\n```", "```ts\nvar webpack = require('webpack');\n\nmodule.export = {\n entry: './app.js',\n output: { filename : 'bundle.js' },\n watch: true,\n plugins: [new Webpack.HotModuleReplacementPlugin()]\n}\n```", "```ts\nvar webpack = require('Webpack');\n```", "```ts\nplugins: [new Webpack.HotModuleReplacementPlugin()]\n```", "```ts\nwebpack-dev-server\n```", "```ts\nmodule.exports = {\n entry : {\n app: \"./app.js\",\n vendor: [\"angular\"]\n },\n output: { filename : \"[name].js\" },\n watch: true,\n plugins: [\n new Webpack.HotModuleReplacementPlugin(),\n new Webpack.optimize.CommonsChunkPlugin(\"init\")\n ]\n}\n```", "```ts\nentry: {\n app: \"./app.js\",\n vendor: [\"angular\"]\n}\n```", "```ts\nplugins: [ new Webpack.optimize.CommonsChunkPlugin('init') ]\n```", "```ts\nentry : {\n 'polyfills': './src/polyfills.ts',\n 'vendor': './src/vendor.ts',\n 'app': './src/main.ts'\n}\n```", "```ts\nmodule : {\n rules : [\n {\n test: /\\.HTML$/,\n loader: 'HTML-loader'\n }\n // other rules emitted for brevity\n ]\n} \n```", "```ts\nrequire('directory/' + name + '.js')\n```", "```ts\nnew Webpack.ContextReplacementPlugin(\n /directory\\//, //when trying to resolve a file from this directory\n /(sv-SE|se).js // narrow down the search by only including files\n that match this\n)\n```", "```ts\nentry : {\n 'polyfills': './src/polyfills.ts',\n 'vendor': './src/vendor.ts',\n 'app': './src/main.ts'\n}\n```", "```ts\nplugins: [ new Webpack.optimize.CommonsChunkPlugin('init') ]\n```", "```ts\n<link href=\"app.css\"></link>\n<script src=\"app.bundle.js\"></script>\n<script src=\"page1.bundle.js\"></script>\n<script src=\"page2.bundle.js\"></script>\n<script src=\"common.bundle.js\"></script>\n```", "```ts\nnew HtmlWebpackPlugin({\n template: 'src/index.HTML'\n})\n```", "```ts\noutput: {\n path: helpers.root('dist')\n // other config is omitted\n}\n```", "```ts\ndevtool: 'cheap-module-eval-source-map'\n```", "```ts\nnew Webpack.optimize.UglifyJsPlugin({\n mangle: { keep_fnames : true } // keep file names\n})\n```", "```ts\n preprocessors: {\n './karma-test-shim.js': ['Webpack', 'sourcemap']\n }\n```", "```ts\n var WebpackConfig = require('./webpack.test');\n module.exports = function(config) {\n var _config = {\n Webpack : WebpackConfig\n }\n\n // other config omitted\n config.set(_config);\n }\n```", "```ts\n Error.stackTraceLimit = Infinity;\n\n require('core-js/es6');\n require('core-js/es7/reflect');\n require('zone.js/dist/zone');\n require('zone.js/dist/long-stack-trace-zone');\n require('zone.js/dist/proxy');\n require('zone.js/dist/sync-test');\n require('zone.js/dist/jasmine-patch');\n require('zone.js/dist/async-test');\n require('zone.js/dist/fake-async-test');\n\n var appContext = require.context('./src', true, /\\.spec\\.ts/);\n appContext.keys().forEach(appContext);\n\n var testing = require('@angular/core/testing');\n var browser = require('@angular/platform-browser-dynamic/testing');\n\n testing.TestBed.initTestEnvironment(\n browser.BrowserDynamicTestingModule,\n browser.platformBrowserDynamicTesting()\n );\n```", "```ts\n var appContext = require.context('./scr, true, /\\.spec\\.ts/');\n```", "```ts\ndescribe('should return true', () => {\n it('true is true', () => expect(true).toBe(true) );\n});\n```", "```ts\nnpm run test\n```"]