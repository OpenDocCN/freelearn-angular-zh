["```ts\n// app/timer/timer.widget.component.css\n\n@keyframes pulse {\n 0% {\n transform: scale3d(1, 1, 1);\n }\n 50% {\n transform: scale3d(1.1, 1.1, 1.1);\n }\n 100% {\n transform: scale3d(1, 1, 1);\n }\n}\n\n.pulse {\n animation: pulse 1s infinite;\n}\n\n.task { background: red;\n width: 30px;\n height: 30px;\n border-radius: 50%; }\n```", "```ts\n// app/timer/timer.widget.component.ts\n\nimport { Component } from  \"@angular/core\"; \n@Component({\n selector:  'timer-widget',\n styleUrls: ['timer.widget.component.css'],\n template: `\n <div  class=\"text-center\">\n <div  class=\"task\"  [ngClass]=\"{ pulse: !isPaused }\"></div>\n <h3><small>{{ taskName }}</small></h3>\n <h1> {{ minutes }}:{{ seconds  |  number: '2.0' }} </h1>\n <p>\n <button  (click)=\"togglePause()\"  class=\"btn btn-danger\">\n Toggle\n </button>\n </p>\n </div>` })\nexport  class  TimerWidgetComponent { taskName:  string  =  'task';\n minutes  =  10;\n seconds  =  20;\n isPaused  =  true; \n togglePause() {\n this.isPaused  =  !this.isPaused;\n }\n}\n```", "```ts\nnpm install @angular/animations --save\n```", "```ts\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n imports: [BrowserAnimationsModule]\n})\n```", "```ts\nimport  { trigger, state, style, animate, transition }  from  '@angular/animations';\n```", "```ts\nanimations: [\n trigger('sizeAnimation', [\n state('small', style({\n transform:'scale(1)', \n backgroundColor: 'green'\n })),\n state('large', style({\n transform: '(1.4)', \n backgroundColor: 'red'\n })),\n transition('small => large', animate('100ms ease-in')),\n transition('large => small', animate('100ms ease-out'))\n ])\n]\n```", "```ts\ntrigger('name', [ ... items ]) \n```", "```ts\nstate(\n 'when I change to this value', \n style({ /*apply these style changes*/ }))\n```", "```ts\ntransition(' when I go from this state > to this state ', animate( 100ms ease-in))\n```", "```ts\ntransition('small => large', animate('100ms ease-in')),\ntransition('large => small',animate('100ms ease-out'))\n```", "```ts\n@Component({\n selector:  'example', template:  `\n <button  (click)=\"makeBigger()\">Make bigger</button>\n <button  (click)=\"makeSmaller()\">Make smaller</button>\n <p  class=\"animate\"  [@sizeAnimation]=\"state\">some text</p>\n `\n ,\n animations:  [\n trigger('sizeAnimation', [\n state('small',  style({\n transform:'scale(1)',\n backgroundColor:  'green'})),\n state('large',  style({\n transform:  'scale(1.4)',\n backgroundColor :  'red'\n })),\n transition('small => large',  animate('100ms ease-in')),\n transition('large => small',animate('100ms ease-out'))\n ])\n ],\n styles: [`\n .animate  {\n background:  green;\n width:  100px;\n }\n `] })\nexport  class  ExampleComponent  {\n state:  string;\n\n makeBigger() {\n this.state  =  'large';\n }\n\n makeSmaller() {\n this.state  =  'small';\n }\n}\n```", "```ts\ntransition('* => larger') \n```", "```ts\ntransition(' void => *') \n```", "```ts\n<button  (click)=\"abraCadabra()\">Abracadabra</button> <button  (click)=\"poof()\">Poof</button>   <p  class=\"elem\"  [@flyInOut]=\"state\"  *ngIf=\"showMe\">\n Show me\n</p>\n```", "```ts\ntrigger('flyInOut', [\n state('in', style({transform:  'translateX(0)'})), transition('void => *', [ style({transform:  'translateX(-100%)'}), animate(500) ]),\n transition('* => void', [ animate(500, style({transform:  'translateX(200%)'})) ])\n])\n```", "```ts\nabraCadabra() { this.state  =  'in'; this.showMe  =  true; }\n\npoof() {\n this.showMe  =  false; }  \n```", "```ts\n[@sizeAnimation.start]=animationStarted($event)\n[@sizeAnimation.done]=\"animationDone($event)\"\n[@sizeAnimation]=\"state\"\n```", "```ts\nanimationStarted() {\n // animation started, execute code\n}\n\nanimationDone() {\n // animation ended, execute code\n}\n```", "```ts\nimport { AnimationBuilder } from '@angular/animations';\n\n@Component({})\nexport class Component {\n constructor(\n private animationBuilder:AnimationBuilder,\n private elementRef: ElementRef\n ) {\n }\n}\n```", "```ts\nngOnInit() {\n const animationFactory = this.animationBuilder.build([\n style({ width : '0px' }), // set starter value\n animate(1000, style({ width:  '100px' }))  // animate to this new value ])\n}\n```", "```ts\nconst  elem  =  this.elementRef.nativeElement.querySelector('.text'); const animationPlayer  =  animationFactory.create(elem);\n```", "```ts\n@Component({\n template : `\n <p class=\"text\">Animate this text</p> \n ` \n})\nexport class ExampleComponent {}\n```", "```ts\nanimationPlayer.play();\n```", "```ts\nngOnInit() {\n const animation = this.builder.build([\n style({ \n width : '0px', \n height : '0px' \n }),   // set starter values\n animate(1000, style({ \n width:  '100px', \n height:  '40px' })) ])\n}\n```", "```ts\n@Directive({\n selector : '[highlight]'\n})\nexport class HighlightDirective implements OnInit {\n constructor( \n private elementRef: ElementRef,\n private animationBuilder: AnimationBuilder \n ) {}\n\n ngOnInit() {\n const animation = this.animationBuilder.build([\n style({ width: '0px' }),\n animate(1000, style({ width : '100px' }))\n ]);\n const player = animation.create( this.elementRef.nativeElement );\n player.play();\n }\n}\n```", "```ts\n<p highlight>animate me</p>\n```"]