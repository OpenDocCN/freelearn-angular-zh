["```ts\nApplication bootstrap\nRoot module\n Root component that is Application component\n Component A\n Component B\n Component B-I\n Component B-II\n Component C\n Component D\nFeature module\n Component E\n Component F\nCommon module\n Component G\n Component H\n```", "```ts\n//admin/\n\nadmin.module.ts\nauthentication.service.ts\nlogin.component.ts\neditor.component.ts\n```", "```ts\n<name>.<type>.ts // example login.service.ts\n```", "```ts\n//admin/\n\nadmin.module.ts\nservices/\n authentication.service.ts\ncomponents/\n login.component.ts\n login.component.html\n editor.component.ts\n create-user.component.ts\npipes/\n user.pipe.ts\n```", "```ts\nimport TaskComponent from './task.component';\nimport TaskDetailsComponent from './task-details.component';\n// and so on\nexport {\n TaskComponent,\n TaskDetailsComponent,\n // other constructs to expose\n}\n```", "```ts\nimport { TaskComponent } from './task.component.ts';\n// do something with the component above\n```", "```ts\nimport { NgModule } from  '@angular/core'; import { TaskDetailComponent } from  './task.detail.component'; import { TaskDetailsComponent } from  './task.details.component'; import { TaskComponent } from  './task.component';   @NgModule({\n  declarations: [TaskComponent, TaskDetailsComponent], exports: [TaskComponent, TaskDetailComponent] })\nexport  class  TaskModule { }\n```", "```ts\nimport { TaskDetailComponent } from 'app/tasks/tasks';\n```", "```ts\nimport { TaskModule } from './task.module';\n\n@NgModule({\n  imports: [ TasksModule ]\n // the rest is omitted for brevity\n}) \n```", "```ts\nimport { Component } from  '@angular/core'; import { Playlist } from  './playlist.model'; @Component({\n  selector:  'music-player', templateUrl:  './music-player.component.html' })\nexport  class  MusicPlayerComponent { playlist:  Playlist; constructor() { this.playlist  =  new  Playlist();\n }}\n}\n```", "```ts\nimport { Component } from  '@angular/core'; import { Playlist } from  './playlist.model'; @Component({\n selector: 'music-player',\n templateUrl: './music-player.component.html'\n})\nexport class MusicPlayerComponent {\n constructor(private playlist: Playlist) {}\n}\n```", "```ts\nimport { Component } from  '@angular/core'; import { Playlist } from  './playlist'; @Component({\n  selector:  'music-player', templateUrl:  './music-player.component.html', providers: [Playlist**]** })\nexport  class  MusicPlayerComponent { constructor(private  playlist:  Playlist) {} }\n```", "```ts\n@NgModule({\n declarations: [MusicComponent, MusicPlayerComponent]\n providers: [Playlist, SomeOtherService]\n})\n```", "```ts\nMusicAppComponent\n MusicLibraryComponent\n MusicPlayerComponent\n```", "```ts\nMusicAppComponent\n MusicLibraryComponent\n MusicPlayerComponent(playlist: Playlist)\n```", "```ts\n@Component({\n selector: 'music-player',\n providers: [Playlist]\n})\nexport class MusicPlayerComponent {\n constructor(private playlist: Playlist) {}\n}\n```", "```ts\n@Component({\n selector: 'music-app',\n providers: [Playlist],\n template: '<music-library></music-library>'\n})\nexport class MusicAppComponent {}\n```", "```ts\n@Component({\n selector: 'music-library',\n template: '<music-player></music-player>'\n})\nexport class MusicLibraryComponent {}\n```", "```ts\n@Component({\n selector: 'music-player'\n})\nexport class MusicPlayerComponent {\n constructor(private playlist: playlist) {}\n}\n```", "```ts\n@Component({\n selector: 'music-app',\n viewProviders : [Playlist],\n template: '<music-library></music-library>'\n})\nexport class MusicAppComponent {}\n```", "```ts\nimport {Component, Host} from '@angular/core';\n\n@Component {\n selector: 'music-player'\n}\nexport class MusicPlayerComponent {\n constructor(@Host() playlist:Playlist) {}\n}\n```", "```ts\n@Component({\n selector: 'granddad',\n template: 'granddad <father>'\n providers: [Service]\n})\nexport class GranddadComponent {\n constructor(srv:Service){}\n}\n\n@Component({\n selector: 'father',\n template: 'father <child>'\n})\nexport class FatherComponent {\n constructor(srv:Service) {} // this is fine, as GranddadComponent provides Service\n}\n\n@Component({\n selector: 'child',\n template: 'child'\n})\nexport class ChildComponent {\n  constructor(@Host() srv:Service) {} // will cause an error\n}\n```", "```ts\nMusicAppComponent\n MusicChartsComponent\n MusicPlayerComponent\n MusicLibraryComponent\n MusicPlayerComponent\n```", "```ts\nimport { Component } from '@angular/core';\nimport { Playlist } from './playlist';\n\nimport { TopHitsPlaylist } from './top-hits/playlist';\n\n@Component({\n selector: 'music-charts',\n template: '<music-player></music-player>',\n providers: [{ provide : Playlist, useClass : TopHitsPlaylist }]\n})\nexport class MusicChartsComponent {}\n```", "```ts\nfunction playlistFactory() {\n if(condition) { \n return new Playlist(); \n }\n else { \n return new TopHitsPlaylist(); \n }\n}\n\n@Component({\n selector: 'music-charts',\n template: '<music-player></music-player>',\n providers: [{ provide : Playlist, useFactory : playlistFactory }]\n})\nexport class MusicChartsComponent {}\n```", "```ts\nclass Playlist {\n songs: Song[];\n constructor(songsService: SongsService) {\n this.songs = songsService.fetch();\n }\n}\n```", "```ts\nIt cannot resolve all parameters for Playlist (?). Make sure they all have valid type or annotations.\n```", "```ts\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nclass Playlist {\n songs: string[];\n\n constructor(private songsService: SongsService) {\n this.songs = this.songsService.fetch();\n }\n}\n```", "```ts\nimport { enableProdMode } from  '@angular/core'; import { platformBrowserDynamic } from  '@angular/platform-browser-dynamic'; import { AppModule } from  './app/app.module'; import { environment } from  './environments/environment'; if (environment.production) {\n  enableProdMode(); }\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```", "```ts\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n bootstrap: [AppComponent]\n // the rest omitted for brevity\n})\n```", "```ts\nimport { environment } from './environments/environment';\n// other imports omitted for brevity\nif(environment.production) {\n enableProdMode();\n}\n\n//bootstrap\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```", "```ts\nimport { environment } from './environments/environment';\n```", "```ts\nexport const environment = {\n production: false\n}\n```", "```ts\nexport const environment = {\n production: true\n}\n```", "```ts\nng build --env=prod // uses environment.prod.ts\nng build // by default uses environment.ts \n```", "```ts\n// config omitted for brevity\n\"environments\" : {\n \"dev\": \"environments/environment.ts\",\n \"prod\": \"environments/environment.prod.ts\"\n}\n```", "```ts\napp/\n assets/ // global CSS or image files are stored here\n core/\n (application wide services end up here)\n core.module.ts\n shared/\n shared.module.ts // Angular module for shared context\n timer/\n ( timer-related components and directives )\n timer.module.ts // Angular module for timer context\n tasks/\n ( task-related components and directive )\n task.module.ts // Angular module for task context\n app\n app.component.ts\n app.module.ts // Angular module for app context\n main.ts // here we bootstrap the application\n index.html\n package.json\n tsconfig.json\n typings.json\n\n```", "```ts\n//app/shared/queueable.model.ts\n\nexport interface Queueable {\n queued: boolean;\n}\n```", "```ts\n// app/shared/queued.only.pipe.ts\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { Queueable } from '../interfaces/queuable';\n\n@Pipe({ name : 'queuedOnly' })\nexport class QueuedOnlyPipe implements PipeTransform {\n transform(queueableItems: Queueable[], ...args) :Queueable[] {\n return queuableItems.filter( \n queueableItem:Queueable => queueableItem.queued === args[0]\n )\n }\n}\n```", "```ts\n//app/shared/shared.module.ts\n\nimport { QueuedOnlyPipe } from './pipes/queued-only.pipe';\n\n@NgModule({\n declarations: [QueuedOnlyPipe],\n exports: [QueuedOnlyPipe]\n})\nexport class SharedModule {}\n```", "```ts\nimport { Queueable } from '../shared/queueable';\n\nexport class ProductionService {\n queueable: Queueable;\n}\n```", "```ts\n//app/task/task.model.ts\n\nimport { Queueable } from './queueable';\n\nexport interface Task extends Queueable {\n name: string;\n deadline: Date;\n pomodorosRequired: number;\n}\n```", "```ts\n//app/shared/formatted.time.pipe.ts\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name : 'formattedTime' })\nexport class FormattedTimePipe {\n transform(totalMinutes: number) {\n let minutes: number = totalMinutes % 60;\n let hours: number = Math.floor( totalMinutes / 60 );\n return `${hours}h:${minutes}m`;\n }\n}\n```", "```ts\n//app/shared/shared.module.ts\n\nimport { QueuedOnlyPipe } from './pipes/queued-only.pipe';\nimport { FormattedTimePipe } from './pipes/formatted-time.pipe';\n\n@NgModule({\n declarations: [QueuedOnlyPipe, FormattedTimePipe],\n exports: [QueuedOnlyPipe, FormattedTimePipe]\n})\nexport class SharedModule {}\n```", "```ts\n// app/task/task.module.ts\n\n@NgModule({\n declarations: [TaskComponent],\n providers: [TaskService]\n})\nexport class TaskModule {} \n```", "```ts\n@NgModule({\n declarations: [ProductsComponent]\n providers: [ProductsService] \n})\nexport class ProductsModule {}\n```", "```ts\n//app/app.module.ts\n\n@NgModule({\n imports: [TaskModule, ProductsModule]\n})\nexport class AppModule {}\n```", "```ts\n@NgModule({\n providers: [ProductsService],\n})\nexport class ProductsModule {}\n```", "```ts\n@NgModule({\n providers: [ProductsService]\n})\nexport class CoreModule {}\n```", "```ts\n@NgModule({\n providers: [],\n imports: [CoreModule, ProductsModule, TasksModule]\n})\nexport class AppModule {}\n```", "```ts\n//app/task/task.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../interfaces/task';\n\n@Injectable()\nexport class TaskService {\n taskStore: Task[] = [];\n constructor() {\n const tasks = [\n {\n name : 'task 1',\n deadline : 'Jun 20 2017 ',\n pomodorosRequired : 2\n },\n {\n name : 'task 2',\n deadline : 'Jun 22 2017',\n pomodorosRequired : 3\n }\n ];\n\n this.taskStore = tasks.map( task => {\n return {\n name : task.name,\n deadline : new Date(task.deadline),\n queued : false,\n pomodorosRequired : task.pomodorosRequired\n }\n });\n }\n}\n```", "```ts\n// app/core/settings.service.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class SettingsService {\n timerMinutes: number;\n labelsMap: any;\n pluralsMap: any;\n\n contructor() {\n this.timerMinutes = 25;\n this.labelsMap = {\n timer : {\n start : 'Start Timer',\n pause : 'Pause Timer',\n resume : 'Resume Countdown',\n other : 'Unknown'\n }\n };\n\n this.pluralsMap = {\n tasks : {\n '=0' : 'No pomodoros',\n '=1' : 'One pomodoro',\n 'other' : '# pomodoros'\n }\n }\n }\n}\n```", "```ts\n// app/shared/shared.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { FormattedTimePipe } from './pipes/formatted-time-pipe';\nimport { QueuedOnlyPipe } from './pipes/queued-only-pipe';\n\nimport { SettingsService } from './services/settings.service';\nimport { TaskService } from './services/task.service';\n\n@NgModule({\n declarations: [FormattedTimePipe, QueuedOnlyPipe],\n  providers: [SettingsService, TaskService],\n  exports: [FormattedTimePipe, QueuedOnlyPipe]\n})\nexport class SharedModule {}\n```", "```ts\n// app/app.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  imports: [SharedModule]\n // the rest is omitted for brevity\n})\nexport class AppModule {}\n```", "```ts\n// app/app.component.ts\n\nimport { AppComponent } from './app.component';\n\n@Component({\n selector: 'app',\n template: 'app'\n})\nexport class AppComponent {\n constructor(\n    private settingsService:SettingsService, \n private taskService: TaskService\n ) {}\n}\n```", "```ts\nexport class ExampleComponent implements OnInit {\n ngOnInit() {}\n}\n```", "```ts\nexport class Component {\n field: string;\n constructor(field: string) {\n this.field = field;\n }\n}\n```", "```ts\nexport class Component {\n data:Entity;\n constructor(private http:Http) {\n this.http.get('url')\n .map(mapEntity)\n .subscribe( x => this.data = x);\n }\n}\n```", "```ts\n@Component({\n selector: 'father',\n template: '<child [prop]='title'></child>'\n})\nexport class FatherComponent {\n title: string = 'value';\n}\n\n@Component({\n selector: 'child',\n template: 'child'\n})\nexport class ExampleComponent implements OnInit {\n @Input prop;\n\n constructor(private http:Http) {\n    // prop NOT set, accessing it might lead to an error\n console.log('prop constructor',prop) \n }\n\n ngOnInit() {\n    console.log('prop on init', prop) // prop is set and is safe to use\n }\n}\n```", "```ts\n@Component({\n selector: 'todos',\n template: `\n <div *ngFor=\"let todo of todos\">\n <todo [item]=\"todo\" (remove)=\"remove($event)\">\n </div>\n `\n})\nexport class TodosComponent {\n todos;\n\n constructor() {\n this.todos = [{\n id : 1,\n name : 'clean'\n }, {\n id : 2,\n name : 'code' \n }]\n }\n\n remove(todo) {\n    this.todos = this.todos.filter( t => t.id !== todo.id );\n }\n}\n\n@Component({\n selector: 'todo',\n template: `\n <div *ngIf=\"item\">{{item.name}} <button (click)=\"remove.emit(item)\">Remove</button></div>\n `\n})\nexport class TodoComponent implements OnDestroy {\n @Output() remove = new EventEmitter<any>();\n @Input() item;\n  ngOnDestroy() { console.log('todo item removed from DOM'); }\n}\n```", "```ts\nexport class ExampleComponent implements OnChanges {\n ngOnChanges(changes:  SimpleChanges) { }\n}\n```", "```ts\n{\n 'prop' : { currentValue : 11, previousValue : 10 }\n // below is the remaining changed properties\n}\n```", "```ts\nexport class ExampleComponent {\n prop: string;\n}\n```", "```ts\nexport  class  TodoComponent  implements  OnChanges { @Input() item; ngOnChanges(changes:  SimpleChanges) { for (let  change  in  changes) { console.log(` '${change}' changed from\n '${changes[change].previousValue}' to\n '${changes[change].currentValue}' `\n ) }\n }\n}\n```", "```ts\n<todo [item]=\"todoItem\">\n```", "```ts\nthis.todoItem = { ...this.todoItem, { name : 'coding' });\n```", "```ts\nimport { Component } from  '@angular/core'; import { SettingsService } from  \"../core/settings.service\"; @Component({\n  selector:  'timer-widget', template: ` <div  class=\"text-center\"> <h1> {{ minutes }}:{{ seconds  |  number }}</h1> <p>\n <button  (click)=\"togglePause()\"  class=\"btn btn-danger\"> {{ buttonLabelKey  |  i18nSelect: buttonLabelsMap }} </button>\n </p>\n </div>\n `\n})\nexport  class  TimerWidgetComponent  {\n minutes:  number; seconds:  number; isPaused:  boolean; buttonLabelKey:  string; buttonLabelsMap:  any; constructor(private  settingsService:  SettingsService) { this.buttonLabelsMap  =  this.settingsService.labelsMap.timer; }\n\n ngOnInit() { this.reset(); setInterval(()  =>  this.tick(),  1000); }\n\n reset() { this.isPaused  =  true; this.minutes  =  this.settingsService.timerMinutes  -  1; this.seconds  =  59; this.buttonLabelKey  =  'start'; }\n\n private  tick():  void  { if  (!this.isPaused) { this.buttonLabelKey  =  'pause'; if  (--this.seconds  <  0) {\n this.seconds  =  59;\n if  (--this.minutes  <  0) {\n this.reset();\n }\n }\n }\n }\n\n togglePause():  void  {\n this.isPaused  =  !this.isPaused;\n if  (this.minutes  <  this.settingsService.timerMinutes  ||\n this.seconds  <  59\n ) {\n this.buttonLabelKey  =  this.isPaused  ?  'resume'  :  'pause';\n }\n }\n}\n```", "```ts\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n // tell other constructs in this module about it\n declarations: [TimerWidgetComponent], \n // usable outside of this module\n exports: [TimerWidgetComponent] \n})\nexport class TimerModule() {}\n```", "```ts\nimport { NgModule } from '@angular/core';\nimport { TimerModule } from './timer/timer.module';\n\n@NgModule({\n  imports: [TimerModule]\n // the rest is omitted for brevity\n})\n```", "```ts\nimport { Task } from  './task.model'; import { Input, Directive, HostListener } from  '@angular/core'; @Directive({\n  selector:  '[task]' })\nexport  class  TaskTooltipDirective { private  defaultTooltipText:  string;\n @Input() task:  Task;\n @Input() taskTooltip:  any;\n\n @HostListener('mouseover')\n onMouseOver() {\n if (!this.defaultTooltipText  &&  this.taskTooltip) {\n this.defaultTooltipText  =  this.taskTooltip.innerText;\n }\n this.taskTooltip.innerText  =  this.defaultTooltipText;\n }\n}\n```", "```ts\nimport { Component, Input, OnInit } from '@angular/core';\nimport { Task } from './task.model';\n\n@Component({\n selector: 'task-icons',\n template: `\n <img *ngFor=\"let icon of icons\"\n src=\"/app/shared/assets/img/pomodoro.png\"\n width=\"{{size}}\">`\n})\nexport class TaskIconsComponent implements OnInit {\n @Input() task: Task;\n @Input() size: number;\n icons: Object[] = [];\n\n ngOnInit() {\n this.icons.length = this.task.noRequired;\n this.icons.fill({ name : this.task.name });\n }\n}\n```", "```ts\n// app/task/tasks.component.css\n\nh3, p {\n text-align: center;\n}\n\n.table {\n margin: auto;\n max-width: 860px;\n}\n```", "```ts\n// app/task/tasks.component.html\n\n<div  class=\"container text-center\"> <h3>\n One point = 25 min, {{ queued | i18nPlural: queueHeaderMapping }} \n for today\n <span  class=\"small\" *ngIf=\"queued > 0\">\n (Estimated time : {{ queued * timerMinutes | formattedTime }})\n </span>\n </h3>\n <p>\n <span  *ngFor=\"let queuedTask of tasks | queuedOnly: true\"> <task-icons\n [task]=\"queuedTask\" [taskTooltip]=\"tooltip\"\n size=\"50\">\n </task-icons>\n </span>\n </p>\n <p  #tooltip  [hidden]=\"queued === 0\">\n Mouseover for details\n </p>\n <h4>Tasks backlog</h4>\n <table  class=\"table\">\n <thead>\n <tr>\n <th>Task ID</th>\n <th>Task name</th>\n <th>Deliver by</th>\n <th>Points required</th>\n <th>Actions</th>\n </tr>\n </thead>\n <tbody>\n <tr  *ngFor=\"let task of tasks; let i = index\">\n <th  scope=\"row\">{{ (i+1) }}\n <span  *ngIf=\"task.queued\"  class=\"label label-info\">\n Queued</span>\n </th>\n <td>{{ task.name | slice:0:35 }}\n <span  [hidden]=\"task.name.length < 35\">...</span>\n </td>\n <td>{{ task.deadline | date: 'fullDate' }}\n <span  *ngIf=\"task.deadline < today\"  class=\"label label-danger\">\n Due</span>\n </td>\n <td  class=\"text-center\">{{ task.noRequired }}</td>\n <td>\n <button  type=\"button\"  class=\"btn btn-default btn-xs\"  [ngSwitch]=\"task.queued\"  (click)=\"toggleTask(task)\">\n <ng-template  [ngSwitchCase]=\"false\">\n <i  class=\"glyphicon glyphicon-plus-sign\"></i>\n Add\n </ng-template>\n <ng-template  [ngSwitchCase]=\"true\">\n <i  class=\"glyphicon glyphicon-minus-sign\"></i>\n Remove\n </ng-template>\n <ng-template  ngSwitchDefault>\n <i  class=\"glyphicon glyphicon-plus-sign\"></i>\n Add\n </ng-template>\n </button>\n </td>\n </tr>\n </tbody>\n </table>\n</div>\n```", "```ts\n// app/task/tasks.component.ts\n\nimport { Component, OnInit } from  '@angular/core'; import { TaskService } from  './task.service'; import { Task } from  \"./task.model\"; import { SettingsService } from  \"../core/settings.service\"; @Component({\n  selector:  'tasks', styleUrls: ['tasks.component.css'], templateUrl:  'tasks.component.html' })\nexport  class  TasksComponent  implements  OnInit { today:  Date;\n tasks:  Task[];\n queued:  number;\n queueHeaderMapping:  any;\n timerMinutes:  number; constructor( private  taskService:  TaskService,\n private  settingsService:  SettingsService) {\n this.tasks  =  this.taskService.taskStore;\n this.today  =  new  Date();\n this.queueHeaderMapping  =  this.settingsService.pluralsMap.tasks;\n this.timerMinutes  =  this.settingsService.timerMinutes;\n }\n\n ngOnInit():  void  { this.updateQueued(); }\n\n toggleTask(task:  Task):  void  { task.queued  =  !task.queued;\n this.updateQueued();\n }\n\n private  updateQueued():  void  { this.queued  =  this.tasks\n .filter((Task:  Task)  =>  Task.queued)\n .reduce((no:  number,  queuedTask:  Task)  =>  {\n return  no  +  queuedTask.noRequired;\n },  0);\n }\n}\n```", "```ts\nimport { NgModule } from '@angular/core';\n@NgModule({\n  declarations: [TasksComponent, TaskIconsComponent, TasksTooltipDirective],\n  exports: [TasksComponent],\n providers: [TaskService]\n // the rest omitted for brevity\n})\n```", "```ts\n//app/app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n selector: 'app',\n template: `\n <nav class=\"navbar navbar-default navbar-static-top\">\n <div class=\"container\">\n <div class=\"navbar-header\">\n <strong class=\"navbar-brand\">My App</strong>\n </div>\n </div>\n </nav>\n <tasks></tasks>\n `\n})\nexport class AppComponent {}\n```", "```ts\nimport { NgModule } from '@angular/core';\nimport { TimerModule } from './timer/timer.module';\nimport { TasksModule } from './tasks/tasks.module';\n\n@NgModule({\n imports: [ TimerModule, TasksModule ]\n // omitted for brevity\n})\nexport class AppModule {}\n```"]