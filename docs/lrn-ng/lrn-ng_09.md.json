["```ts\n//index.html\n\n<base href=\"/\">\n```", "```ts\nimport { RouterModule } from  '@angular/router';\n```", "```ts\n@NgModule({\n imports: [RouterModule.forRoot(routes, <optional config>)]\n})\n```", "```ts\nlet routes = [{\n path: 'products',\n component: ProductsComponent \n}, {\n path: '**',\n component: PageNotFound \n}]\n```", "```ts\n//app.component.html\n\n<body>\n <!- header content ->\n <!- router content ->\n <!- footer content ->\n</body>\n```", "```ts\n<body>\n <!- header content ->\n <router-outlet> </router-outlet>\n <!- footer content ->\n</body>\n```", "```ts\n// app/tasks/task-editor.component.ts file\n\nimport { Component } from '@angular/core';\n\n@Component({\n selector: 'tasks-editor',\n templateUrl: 'app/tasks/task-editor.component.html'\n})\nexport default class TaskEditorComponent {\n constructor() {}\n}\n\n// app/tasks/task-editor.component.html file\n\n<form class=\"container\">\n <h3>Task Editor:</h3>\n <div class=\"form-group\">\n <input type=\"text\"\n class=\"form-control\"\n placeholder=\"Task name\"\n required>\n </div>\n <div class=\"form-group\">\n <input type=\"Date\"\n class=\"form-control\"\n required>\n </div>\n <div class=\"form-group\">\n <input type=\"number\"\n class=\"form-control\"\n placeholder=\"Points required\"\n min=\"1\"\n max=\"4\"\n required>\n </div>\n <div class=\"form-group\">\n <input type=\"checkbox\" name=\"queued\">\n <label for=\"queued\"> this task by default?</label>\n </div>\n <p>\n <input type=\"submit\" class=\"btn btn-success\" value=\"Save\">\n <a href=\"/\" class=\"btn btn-danger\">Cancel</a>\n </p>\n</form>\n```", "```ts\nimport { TasksComponent } from './tasks.component';\nimport { TaskEditorComponent } from './task.editor.component';\nimport { TaskTooltipDirective } from './task.tooltip.directive';\n\n@NgModule({\n declarations: [\n TasksComponent,\n TaskEditorComponent,\n TaskTooltipDirective\n ],\n exports: [\n TasksComponent,\n TaskEditorComponent,\n TaskTooltipDirective\n ]\n})\nexport class TaskModule{}\n```", "```ts\n// app/routes.ts file\n\n[{\n path: '',\n component : HomeComponent\n },{ \n path: 'tasks',\n name: 'TasksComponent',\n component: TasksComponent\n }, {\n path: 'tasks/editor',\n name: 'TaskEditorComponent',\n component: TaskEditorComponent\n }, {\n path: 'timer',\n name: 'TimerComponent',\n component: TimerComponent\n }\n]\n```", "```ts\n// app/app.module.ts file\n\nimport { RouterModule } from '@angular/router';\nimport routes from './routes';\n\n@NgModule({\n ...\n imports: [RouterModule.forRoot(routes)]\n ...\n})\n```", "```ts\n/timer\n timer.module.ts\n timer.component.ts\n routes.ts\n/app\n app.module.ts\n app.component.ts\n routes.ts\n/task\n task.module.ts\n task.component.ts\n routes.ts\n ...\n```", "```ts\nimport routes from './routes';\n\n@NgModule({\n imports: [\n RouteModule.forChild(routes)\n ]\n})\nexport class FeatureModule {}\n```", "```ts\n<a  routerLink=\"/\"  routerLinkActive=\"active\">Home</a>\n```", "```ts\n[{\n path : '',\n component : HomeComponent\n}]\n```", "```ts\n<a _ngcontent-c0=\"\" routerlink=\"/\" routerlinkactive=\"active\" ng-reflect-router-link=\"/\" ng-reflect-router-link-active=\"active\" href=\"/\" class=\"active\">Home</a>\n```", "```ts\n<a  routerLink=\"/\"  routerLinkActive=\"active\" >Home</a> <a  routerLink=\"/tasks\"routerLinkActive=\"active\" >Tasks</a>\n<a routerLink=\"/timer\"routerLinkActive=\"active\" >Timer</a> \n```", "```ts\n@Component({\n template : `\n <Button (click)=\"goToTimer()\">Go to timer</Button>\n `\n})\nexport class Component {\n constructor(private router:Router) {}\n\n goToTimer() {\n this.router.navigate(['/timer']);\n }\n}\n```", "```ts\n// app/tasks/tasks.component.html file\n\n@Component({ selector:  'tasks', template: ` <div*ngFor=\"let task of store | async\">\n {{ task.name }}\n <button (click)=\"navigate(task)\">Go to detail</button>\n </div>  `\n})\nexport class TasksComponent {\n constructor(private router: Router) {}\n\n navigate(task:Task) {\n this.router.navigate(['/tasks',task.id]);\n }\n}\n```", "```ts\nthis.router.navigate(['/tasks',task.id]);\n```", "```ts\n<div*ngFor=\"let task of store | async\">\n {{ task.name }}\n <a [routerLink]=\"['/tasks/',task.id]\">Go to detail</a>\n</div>\n```", "```ts\n[\n ...\n {\n path : '/tasks/:id',\n component : TaskDetailComponent\n }\n ...\n]\n```", "```ts\nimport { Component } from  '@angular/core'; @Component({\n  selector:  'task-detail', template: 'task detail' })\nexport  class  TaskDetailComponent {  }\n```", "```ts\nthis.route .params  .subscribe( params  => {\n let id = params['id'];  });  \n```", "```ts\n@Component({\n template: `\n <div *ngIf=\"(task$ | async) as task\">\n {{ task.name }}\n </div>\n `\n})\nexport class TaskDetailComponent implements OnInit {\n task$:Observable<Task>;\n\n constructor(private route:ActivatedRoute) {}\n\n ngOnInit() {\n this.task$ = this.route .params\n .switchMap( params => \n this.taskService.getTask(+params['id'])\n )\n }\n}\n```", "```ts\nexport class TaskService{\n ...\n getTask(id): Observable<Task> {\n return this.http.get(`/tasks/${id}`).map(mapTask);\n }\n}\n```", "```ts\n// for sorting\n/tasks/114?sortOrder=ascending\n\n// for narrowing down the data set\n/tasks/114?page=3&pageSize=10\n```", "```ts\nconstructor(private route: ActivatedRoute) {}\n\ngetData(){\n this.route.queryParamMap\n .switchMap( data  => { let  pageSize  =  data.get('pageSize'); let  page  =  data.get('page'); return  this._service.getTaskLimited(pageSize,page); })\n```", "```ts\n{\n path : 'products',\n component : ProductListComponent\n},\n{\n path : 'products/:id',\n component : ProductsDetail \n},\n{\n path : 'products/:id/orders',\n component : ProductsDetailOrders\n}\n```", "```ts\n{\n path: 'products',\n component : ProductsContainerComponent\n}\n```", "```ts\n{\n path: 'products',\n component : ProductsContainerComponent,\n children : [{\n path : '',\n component : ProductListComponent \n }, {\n path: ':id',\n component : ProductDetailComponent\n }, {\n path : ':id/orders',\n component : ProductsDetailOrders\n }]\n}\n```", "```ts\n/app . // contains router-outlet\n /products \n ProductsContainerComponent // contains router outlet\n ProductListComponent\n ProductDetailComponent\n ProductsDetailOrders\n```", "```ts\n// ProductsContainerComponent template\n<!-- header -->\n<router-outlet></router-outlet>\n<!-- footer -->\n```", "```ts\nthis.router.navigate(['../'], { relativeTo:  this.route });\n```", "```ts\n<router-outlet></router-outlet>\n<router-outlet></router-outlet>\n<router-outlet></router-outlet>\n<router-outlet></router-outlet>\n```", "```ts\n<router-outlet name=\"header\"></router-outlet>\n<router-outlet name=\"body\"></router-outlet>\n```", "```ts\n{ path:  'tasks', component:  JedisShellComponent,\n children : [{\n path: '',\n component : JediHeaderComponent,\n outlet : 'header'\n },\n {\n path: '',\n component : JediComponent,\n outlet : 'body'\n }] }  \n```", "```ts\nstatic data\n<router-outlet name=\"header\"></router-outlet>\n<router-outlet name=\"body\"></router-outlet>\nsome static data after the outlet\n```", "```ts\n{\n path : 'info',\n component : PopupComponent,\n outlet : 'popup'\n}\n```", "```ts\n<router-outlet name=\"popup\"></router-outlet>\n```", "```ts\n@Component({\n template : `\n <button (click)=\"openPopup()\"></button>\n `\n})\nexport class SomeComponent {\n constructor(private router: Router) {}\n\n openPopup(){ this.router.navigate([{ outlets: { popup : 'info' }}]) }\n}\n```", "```ts\n{\n path : 'info',\n component : PopupComponent,\n outlet : 'popup'\n},\n{\n path : 'error',\n component : ErrorComponent,\n outlet : 'popup'\n}\n```", "```ts\nthis.router.navigate([{ outlets: { popup : 'error' }])\n```", "```ts\n@Component({\n template : `\n <button (click)=\"openPopup()\"></button>\n `\n})\nexport class SomeComponent {\n constructor(private router: Router) {}\n\n openPopup(){ this.router.navigate([{ outlets: { popup : 'info'} }]) }\n\n closePopup() { this.router.navigate([{ outlets: { popup: null }}]) }\n}\n```", "```ts\nthis.router.navigate([ outlets: { popup: null } ])\n```", "```ts\nRouterModule.forRoot(routes,{ enableTracing:  true  })\n```", "```ts\n....\n@NgModule({\n imports : [\n RouterModule.forRoot(routes, { useHash : true })\n ]\n})\n```", "```ts\n@Injectable()\nexport class AuthGuard implements CanActivate {\n constructor(private authService: AuthService){ }\n\n  canActivate() {\n return this.authService.isAuthenticated();\n }\n}\n```", "```ts\n{\n path : 'products',\n component: ProductsShell,\n  canActivate: [ AuthGuard ]\n}\n```", "```ts\n@Injectable()\nexport class ProductResolver implement Resolve<Product> {\n constructor(\n private http:Http, \n private service: DataService,\n private router:Router\n ) {}\n\n resolve(route:  ActivatedRouteSnapshot) {\n    let id = route.paramMap.get('id');\n    return this.service.getProduct( id ).then( data => {\n if(data) { \n return data; \n }\n else { \n this.router.navigate(['/products']); \n }\n }, error => { this.router.navigate(['/errorPage']) });\n }\n}\n\n// product.service.ts\nexport class DataService {\n getProduct(id) {\n return http.get(`/products/${id}`)\n .map( r => r.json )\n .map(mapProduct)\n .toPromise()\n }\n}\n```", "```ts\n@NgModule({\n ...\n  providers: [ProductResolver]\n ...\n})\n```", "```ts\n{\n path: 'products/:id',\n  resolve: [ProductResolver],\n component: ProductDetail\n}\n```", "```ts\n@Injectable()\nexport class CanDeactivateService implements CanDeactivate {\n constructor(private component: ProductDetailComponent) {}\n\n canDeactivate(): boolean | Promise<boolean> {\n if( component.allFieldsAreFilledIn() ) {\n return true;\n }\n\n return this.showConfirm('Are you sure you want to navigate away,\n you will loose data');\n }\n\n showConfirm() {\n return new Promise(resolve => resolve( confirm(message) ))\n }\n}\n```", "```ts\n@NgModule({\n  providers: [CanDeactivateService]\n})\n```", "```ts\n{\n path : 'products/:id',\n component : ProductDetailComponent,\n canDeactivate : [ CanDeactivateService ]\n}\n```", "```ts\n@Component({})\n@Injectable()\nexport class ProductDetailComponent {}\n```", "```ts\n@NgModule({\n providers: [\n CanDeactivateService, ProductDetailComponent\n ]\n})\n```", "```ts\n// app/lazy/routes.ts\nlet routes = [{\n path : 'lazy',\n component : LazyComponent\n}]\n\n// app/lazy/lazy.module.ts\n@NgModule({\n imports: [RouterModule.forChild(routes)]\n})\nexport class LazyModule {}\n```", "```ts\n// app/routes.ts\nlet routes = [{\n path:  'lazy', loadChildren:  'app/lazy/lazy.module#LazyModule' }];\n```", "```ts\n@Injectable()\nexport class CanLoadService implements CanLoad {\n  canLoad(route: Route) {\n // replace this to check if user is authenticated/authorized\n return false;\n }\n}\n```", "```ts\n{\n path:  'lazy', loadChildren :  'app/lazy/lazy.module#LazyModule', canLoad: [CanLoadService**]** }  \n```", "```ts\n@NgModule({\n imports: [\n RouterModule.forRoot(routes, {\n      preloadingStrategy:  PreloadAllModules\n })\n ]\n})\n```", "```ts\n@Injectable() export  class  PreloadingStrategyService  implements PreloadingStrategy {  preload(route:  Route, load: () =>  Observable<any>):  Observable<any> { if(route.data.preload) {\n      **return** load**();** } else { return Observable.of(null**);** }\n }\n}\n```", "```ts\n{\n path:  'anotherlazy', loadChildren:  'app/anotherlazy/anotherlazy.module#AnotherLazyModule', data: { preload: true } }  \n```", "```ts\n@NgModule({\n imports: [\n RouterModule.forRoot(routes, {\n      preloadingStrategy: PreloadingStrategyService \n })\n ]\n})\n```"]