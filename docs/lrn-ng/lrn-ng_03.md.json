["```ts\nvar brand: string = 'Chevrolet';\n```", "```ts\nvar brand: string = 'Chevrolet';\nvar message: string = `Today it's a happy day! I just bought a new ${brand} car`;\n```", "```ts\nfunction test() {\n var a;\n}\n```", "```ts\nfor (int i = 0; i < arr.length; i++) {\n}\n```", "```ts\nint i = 3;\nfor (int i = 0; i < arr.length; i++) {\n}\n```", "```ts\nlet i = 3;\nfor (let i = 0; i < arr.length; i++) {\n}\n```", "```ts\nvar i = 3;\nfor (var i_1 = 0; i_1 < arr.length; i_1++) {\n}\n```", "```ts\nconst PI = 3.14;\nPI = 3 // not allowed\n```", "```ts\nCannot assign to PI because it is a constant or a read-only property\n```", "```ts\nconst obj = {\n a : 3\n}\nobj.a = 4; // actually allowed\n```", "```ts\nobj = {}\n```", "```ts\nvar age: number = 7;\nvar height: number = 5.6;\n```", "```ts\nvar isZeroGreaterThanOne: boolean = false;\n```", "```ts\nvar brand: string[] = ['Chevrolet', 'Ford', 'General Motors'];\nvar childrenAges: number[] = [8, 5, 12, 3, 1];\n```", "```ts\nvar distance: any;\n// Assigning different value types is perfectly fine\ndistance = '1000km':\ndistance = '1000'\n// Allows us to seamlessly combine different types\nvar distance: any[] = ['1000km', '1000'];\n```", "```ts\ntype Animal = 'Cheetah' | 'Lion';\n```", "```ts\nvar animal: Animal = 'Cheetah';\n```", "```ts\nvar animal: Animal = 'Turtle';\n```", "```ts\nerror TS2322: Type '\"Turtle\"' is not assignable to type 'Animal'.\n```", "```ts\nenum Brands { Chevrolet, Cadillac, Ford, Buick, Chrysler, Dodge };\nvar myCar: Brands = Brands.Cadillac;\n```", "```ts\nenum BrandsReduced { Tesla = 1, GMC, Jeep };\nvar myTruck: BrandsReduced = BrandsReduced.GMC;\n```", "```ts\nenum StackingIndex {\n None = 0,\n Dropdown = 1000,\n Overlay = 2000,\n Modal = 3000\n};\nvar mySelectBoxStacking: StackingIndex = LayerStackingIndex.Dropdown;\n```", "```ts\nenum Brands { Chevrolet, Cadillac, Ford, Buick, Chrysler, Dodge };\nvar MyCarBrandName: string = Brands[1];\n```", "```ts\nresetPomodoro(): void {\n this.minutes = 24;\n this.seconds = 59;\n}\n```", "```ts\nvar brand = 'Chevrolet';\n```", "```ts\nvar brand: string = 'Chevrolet';\nvar brand2 = 'Chevrolet';\nbrand = false; // compilation error\nbrand = 114; // compilation error\n```", "```ts\nfunction sayHello(name: string): string {\n return 'Hello, ' + name;\n}\n```", "```ts\nvar sayHello = function(name: string): string {\n return 'Hello, ' + name;\n}\n```", "```ts\nvar sayHello: (name: string) => string = function(name: string): string {\n return 'Hello, ' + name;\n}\n```", "```ts\n// Two functions with the same typing but different logic.\nfunction sayHello(input: string): string {\n return 'Hello, ' + input;\n}\n\nfunction sayHi(input: string): string{\n return 'Hi, ' + input;\n}\n\n// Here we declare the variable with is own function type\nvar greetMe: (name: string) => string;\ngreetMe = sayHello; \n```", "```ts\nfunction greetMe(name: string, greeting?: string): string {\n console.log(greeting);\n if(!greeting) { greeting = 'Hello'; }\n return greeting + ', ' + name;\n}\n\nconsole.log( greetMe('Chris') );\n```", "```ts\ngreetMe('Chris');\n```", "```ts\nundefined\nHello Chris\n```", "```ts\nfunction add(mandatory: string, optional?: number) {}\n```", "```ts\nadd('some string');\nadd('some string', 3.14);\n```", "```ts\nfunction add(optional?: number, mandatory: string) {}\n```", "```ts\nadd(11); // error. mandatory parameter missing\n```", "```ts\nA required parameter cannot follow an optional parameter\n```", "```ts\nfunction greetMe(name: string, greeting: string = 'Hello'): string {\n return `${greeting}, ${name}`;\n}\n```", "```ts\nfunction greetMe(name, greeting){\n if (greeting === void 0) { greeting = 'Hello'; }\n\n return greeting + ', ' + name;\n}\n```", "```ts\nfunction greetPeople(greeting: string, ...names: string[]): string{\n return greeting + ', ' + names.join(' and ') + '!';\n}\n\nalert(greetPeople('Hello', 'John', 'Ann', 'Fred'));\n```", "```ts\nfunction greetPeople(greeting) {\n var names = [];\n for (var _i = 1; _i < arguments.length; _i++) {\n names[_i - 1] = arguments[_i];\n }\n return greeting + ', ' + names.join(' and ') + '!';\n}\n\nalert(greetPeople('Hello', 'John', 'Ann', 'Fred'));\n```", "```ts\nfor (var _i = 1; _i < arguments.length; _i++) {\n names[_i -1] = arguments[_i];\n}\n```", "```ts\nfunction hello(name: string): string {}\nfunction hello(name: string[]): string {}\nfunction hello(name: any, greeting?: string): string {\n var namesArray: string[];\n if (Array.isArray(names)) {\n namesArray = names;\n } else {\n namesArray = [names];\n }\n if (!greeting) {\n greeting = 'Hello';\n }\n return greeting + ', ' + namesArray.join(' and ') + '!';\n}\n```", "```ts\nvar double = x => x * 2;\n```", "```ts\nvar add = (x, y) => x + y;\n```", "```ts\nvar reducedArray = [23, 5, 62, 16].reduce((a, b) => a + b, 0);\n```", "```ts\nvar addAndDouble = (x, y) => {\n var sum = x + y;\n return sum * 2;\n}\n```", "```ts\nfunction delayedGreeting(name): void {\n this.name = name;\n this.greet = function(){\n setTimeout(function() {\n alert('Hello ' + this.name);\n }, 0);\n }\n}\n\nvar greeting = new delayedGreeting('Peter');\ngreeting.greet(); // alert 'Hello undefined'\n```", "```ts\nfunction delayedGreeting(name): void {\n this.name = name;\n this.greet = function() {\n setTimeout(() => alert('Hello ' + this.name), 0);\n }\n}\n```", "```ts\nvar newItem = 3;\nvar oldArray = [ 1, 2 ];\nvar newArray = [\n ...oldArray,\n newItem\n];\nconsole.log( newArray )\n```", "```ts\n1,2,3\n```", "```ts\nvar oldPerson = { name : 'Chris' };\nvar newPerson = { ...oldPerson, age : 37 }; \nconsole.log( newPerson );\n```", "```ts\n{ name: 'Chris', age: 37 }\n```", "```ts\nvar __assign = ( this && this.__assign ) || Object.assign || function(t) {\n for (var s, i = n, n = arguments.length; i < n; i++) {\n s = arguments[i];\n for (var p in s) if (Object.prototype.hasOwnProperty.call( s, p )) {\n t[ p ] = s[ p ];\n }\n return t;\n };\n var oldPerson = { name : 'Chris' };\n var newPerson = __assign({}, oldPerson, { age: 37 });\n console.log( newPerson );\n}\n```", "```ts\nvar url = 'http://path_to_domain' + \n'path_to_resource' + \n'?param=' + parameter + \n'=' + 'param2=' + \nparameter2;\n```", "```ts\nvar url = `${baseUrl}/${path_to_resource}?param=\n ${parameter}&param2={parameter2}`;\n```", "```ts\nfunction method<T>(arg: T): T {\n return arg;\n}\nconsole.log(method<number>(1)); // works\nconsole.log(method<string>(1)); // doesn't work\n```", "```ts\nconsole.log(method<string>(1)); // doesn't work\n```", "```ts\nfunction method<T>(arg: T[]): T[] {\n console.log(arg.length); // Array has a .length, so no more error\n return arg;\n}\n\nclass A extends Array {\n}\n\nclass Person {\n}\n\nvar p = new Array<Person>();\nvar person = new Person();\nvar a = new A();\n\nmethod<Person>(p);\nmethod<A>(a);\nmethod<Person>(person);\n```", "```ts\nfunction method<T>(arg: T[]) {}\n```", "```ts\ninterface Shape {\n area(): number;\n}\n\nclass Square implements Shape {\n area() { return 1; }\n}\n\nclass Circle implements Shape {\n area() { return 2; }\n}\n\nfunction allAreas<T extends Shape>(...args: T[]): number {\n let total = 0;\n args.forEach (x => {\n total += x.area();\n });\n return total;\n}\n\nallAreas(new Square(), new Circle());\n```", "```ts\nT extends Shape\n```", "```ts\nclass Car {\n private distanceRun: number = 0;\n color: string;\n\n constructor(public isHybrid: boolean, color: string = 'red') {\n this.color = color;\n }\n\n getCasConsumsption(): string {\n return this.ishybrid ? 'Very low' : 'Too high!';\n }\n\n drive(distance: number): void {\n this.distanceRun += distance;\n }\n\n static honk(): string {\n return 'HOOONK!';\n }\n\n get distance(): number {\n return this.distanceRun;\n }\n}\n```", "```ts\nvar myCar = new Car(false);\nconsole.log(myCar.color);  // 'red'\n// Public accessor returns distanceRun:\nconsole.log(myCar.distance)  // 0\nmyCar.drive(15);\nconsole.log(myCar.distance);  // 15 (0 + 15)\nmyCar.drive(21);\nconsole.log(myCar.distance);  // 36 (15 + 21)\n// What's my carbon footprint according to my car type?\nmyCar.getGasConsumption();  // 'Too high!'\nCar.honk();  // 'HOOONK!' no object instance required\n```", "```ts\nconsole.log(myCar.distanceRun);\nmyCar.distance = 100;\n```", "```ts\nexample_26.ts(21,7): error TS1056: Accessors are only available when targeting ECMAScript 5 and higher example_26.ts(29,13): error TS2341: Property 'distanceRun' is private and only accessible within class 'Car'\n```", "```ts\nclass Car {\n make: string;\n model: string;\n constructor(make: string, model: string) {\n this.make = make;\n this.model = model;\n }\n}\n```", "```ts\nconstuctor( public make: string, private model: string ) {}\n```", "```ts\nclass Car {\n public make: string;  // creating backing field\n private model: string;\n\n constructor(make: string, model: string) {\n this.make = make;  //doing assignment\n this.model = model;\n }\n}\n```", "```ts\nvar car = new Car('Ferrari', 'F40');\ncar.make  // Ferrari\ncar.model  // not accessible as it is private\n```", "```ts\nfunction Car(make) {\n this.make = make;\n this.model = model;\n}\n```", "```ts\nclass Car {\n constructor(public make: string, public model: string) {}\n}\n```", "```ts\ninterface Vehicle {\n make: string;\n}\n```", "```ts\nclass Car implements Vehicle {\n // Compiler will raise a warning if 'make' is not defined\n make: string;\n}\n```", "```ts\ninterface Exception {\n message: string;\n id?: number;\n}\n```", "```ts\ninterface ExceptionArrayItem {\n [index: number]: IException;\n}\n```", "```ts\ninterface ErrorHandler {\n exception: ExceptionArrayItem[];\n logException(message: string; id?: number: void;)\n}\n```", "```ts\ninterface ExceptionHandlerSettings {\n logAllExceptions: boolean;\n}\n```", "```ts\nclass ErrorHandler implements ErrorHandler {\n exceptions: ExceptionArrayItem[];\n logAllExceptions: boolean;\n constructor(settings: ExceptionHandlerSettings) {\n this.logAllExceptions = settings.logAllExceptions;\n }\n\n logException(message: string, id?: number): void {\n this.exception.push({ message, id });\n }\n}\n```", "```ts\ninterface A {\n a\n}\n\nvar instance = <A>{ a: 3 };\ninstance.a = 5;\n```", "```ts\nvar instance = <A>{ a: 3 };\n```", "```ts\nclass OrderProcessor {\n constructor(private databaseService: DatabaseService) {}\n\n process(order) {\n this.databaseService.save(order);\n }\n}\n\ninterface DatabaseService {\n} \n\nlet orderProcessor = new OrderProcessor(mockLibrary.mock<DatabaseService>());\norderProcessor.process(new Order());\n```", "```ts\nvar databaseServiceInstance = <DatabaseService>{};\n```", "```ts\nclass Stuff {\n srv:AuthService = new AuthService();\n execute() {\n if (srv.isAuthenticated())  // do x\n else  // do y\n }\n}\n```", "```ts\ninterface AuthService {\n isAuthenticated(): boolean;\n}\n\nclass Stuff {\n constructor(srv:AuthService) {}\n execute() {\n if (srv.isAuthenticated()) { /* do x */ }\n else { /* do y */ }\n }\n}\n```", "```ts\nclass MockAuthService implements AuthService {\n isAuthenticated() { return true; }\n}\nvar srv = new AuthService();\nvar stuff = new Stuff(srv);\n```", "```ts\nvar instance = mock<Type>();\n```", "```ts\nvar instance = <A>{ a: 3 };\n```", "```ts\nfunction mock<T>(startData) {\n return <T>Object.assign({}, startData);\n}\n```", "```ts\ninterface IPoint {\n x;\n y;\n}\n\nclass Point implements IPoint {\n x;\n y;\n}\nvar point = mock<IPoint>({ x: 3 });\nconsole.log(point);\n```", "```ts\nclass Sedan extends Car {\n model: string;\n constructor(make: string, model: string) {\n super(maker);\n this.model = model;\n }\n}\n```", "```ts\ndeclare type ClassDecorator = <TFunction extends Function>(Target: TFunction) => TFunction | void;\n```", "```ts\nfunction Banana(target: Function): void {\n target.prototype.banana = function(): void {\n console.log('We have bananas!');\n }\n}\n\n@Banana\nclass FruitBasket {\n constructor() {\n // Implementation goes here...\n }\n}\nvar basket = new FruitBasket();\nbasket.banana();  // console will output 'We have bananas!'\n```", "```ts\nvar basket: any = new FruitBasket();\nbasket.banana();\n```", "```ts\nvar basket = new FruitBasket();\n(basket as any).banana();\n```", "```ts\nfunction Banana(message: string) {\n return function(target: Function) {\n target.prototype.banana = function(): void {\n console.log(message);\n }\n }\n}\n\n@Greeter('Bananas are yellow!')\nclass FruitBasket {\n constructor() {\n // Implementation goes here...\n }\n}\nvar basket = new FruitBasket();\nbasket.banana();  // console will output 'Bananas are yellow'\n```", "```ts\nfunction Jedi(target: Object, key: string) {\n var propertyValue: string = this[key];\n if (delete this[key]) {\n Object.defineProperty(target, key, {\n get: function() {\n return propertyValue;\n }, \n set: function(newValue){\n propertyValue = newValue;\n console.log(`${propertyValue} is a Jedi`);\n }\n });\n }\n}\n\nclass Character {\n @Jedi\n name: string;\n}\n\nvar character = new Character();\ncharacter.name = 'Luke';  // console outputs 'Luke is a Jedi'\ncharacter.name = 'Yoda';  // console outputs 'Yoda is a Jedi'\n```", "```ts\nfunction NameChanger(callbackObject: any): Function {\n return function(target: Object, key: string): void {\n var propertyValue: string = this[key];\n if (delete this[key]) {\n Object.defineProperty(target, key, {\n get: function() {\n return propertyValue;\n }, \n set: function(newValue) {\n propertyValue = newValue;\n callbackObject.changeName.call(this, propertyValue);\n }\n });\n }\n }\n}\n\nclass Fruit {\n @NameChanger ({\n changeName: function(string,newValue: string): void {\n console.log(`You are now known as ${newValue}`);\n }\n })\n name: string;\n}\n\nvar character = new Character();\ncharacter.name 'Anakin';  // console: 'You are now known as Anakin'\ncharacter.name = 'Lord Vader';  //console: 'You are now known as Lord Vader'\n```", "```ts\nfunction Log(){\n return function(target, propertyKey: string, \n descriptor: PropertyDescriptor) {\n var oldMethod = descriptor.value;\n descriptor.value = function newFunc( ...args:any[]){\n let result = oldMethod.apply(this, args);\n console.log(`${propertyKey} is called with ${args.join(',') and\n result ${result}`);\n return result;\n }\n }\n}\n\nclass Hero {\n @Log()\n attack(...args:[]) { return args.join(); }\n}\n\nvar hero = new Hero();\nhero.attack();\n```", "```ts\nfunction Timer(){\n return function(target, propertyKey: string, descriptor: PropertyDescriptor) {\n var oldMethod = descriptor.value;\n descriptor.value = function() {\n var start = new Date();\n let result = oldMethod.apply(this, args);\n var stop = new Date();\n console.log(`Method took ${stop.getMilliseconds() - \n start.getMilliseconds()}ms to run`);\n return result;\n }\n }\n}\n```", "```ts\nfunction Log(target: Function, key: string, parameterIndex: number) {\n var functionLogged = key || target.prototype.constructor.name;\n console.log(`\n The parameter in position \n ${parameterIndex} at ${functionLogged} has been decorated`\n );\n}\n\nclass Greeter {\n greeting: string;\n constructor (@Log phrase: string) {\n this.greeting = phrase;\n }\n}\n// The console will output right after the class above is defined:\n// 'The parameter in position 0 at Greeter has been decorated'\n```", "```ts\nmodule Greetings {\n export class Greeting {\n constructor(public name: string) {\n console.log(`Hello ${name}`);\n }\n }\n\n export class XmasGreeting {\n constructor(public name: string){\n console.log(`Merry Xmas ${name}`);\n }\n }\n}\n```", "```ts\nimport XmasGreeting = Greeting.XmasGreeting;\nvar xmasGreeting = XmasGreeting('Joe');\n// console outputs 'Merry Xmas Joe'\n```", "```ts\n/// <reference path=\"greetings/XmasGreeting.ts\" />\n```", "```ts\ntsc --outFile app.js module.ts\n```", "```ts\nexport class Greeting {\n constructor(public name: string) {\n console.log(`Hello ${name}`);\n }\n}\n\nexport class XmasGreeting {\n constructor(public name: string) {\n console.log(`Merry Xmas ${name}`);\n }\n}\n```", "```ts\nimport greetings = require('Greetings');\nvar XmasGreetings = greeting.XmasGreetings();\nvar xmasGreetings = new XmasGreetings('Pete');\n// console outputs 'Merry Xmas Pete'\n```", "```ts\ntsc --outFile app.js --module commonjs\n```", "```ts\n//service.ts\nexport class Service {\n getData() {} \n}\n\n//consumer.ts import {} from './service';\n```", "```ts\n//service-v2.ts\nexport class Service {\n getData(){}\n}\n\nexport const PI = 3.14\n```", "```ts\n//consumer-v2.ts\nimport { Service, PI } from './service-v2'\n```", "```ts\n//service-v3.ts\nclass Service {}\n\nconst PI = 3.14;\n\nexport { Service, PI }\n```", "```ts\n//service-v4.ts\nexport default function(a, b) {\n return a + b;\n}\n\n//consumer-v3.ts import service from './service-v4';\n\n```"]