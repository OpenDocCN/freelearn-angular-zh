["```ts\n<timer> [seconds]=\"timeout\"></timer>\n<p *ngIf=\"timeout === 0\">Time up!</p>\n```", "```ts\n<ul>\n <li *ngFor=\"let employee of employees\">\n Employee {{ employee.name }}, {{ employee.position }}\n </li>\n</ul>\n```", "```ts\n<div *ngFor=\"let items of items; let property = property\">{{ item }}</div>\n```", "```ts\n<div *ngFor=\"let item of items; let first = first\">\n <span [ngClass]=\"{ 'first-css-class': first, 'item-css-class' : !first }\">\n {{ item }}\n </span>\n</div>\n```", "```ts\n@Component({\n template : `\n <*ngFor=\"let item of items; trackBy: trackFunction\">{{ item }}</div>\n `\n})\nexport class SomeComponent {\n trackFunction(index, item) {\n return item ? item.id : undefined;\n }\n}\n```", "```ts\n<div *ngIf=\"hero\">\n {{ hero.name }}\n</div>\n<div *ngIf=\"!hero\">\n No hero set\n</div>\n```", "```ts\n<div *ngIf=\"person; else noperson\">{{person.name}}</div>\n<div #noperson>No person set</div>\n```", "```ts\nperson; else noperson\n```", "```ts\n<div class=\"item {{ item.selected ? 'selected' : ''}}\"\n```", "```ts\n<p [ngStyle]=\"{ 'color': myColor, 'font-weight': myFontWeight }\">\n I am red and bold\n</p>\n```", "```ts\n<p [ngStyle]=\"myCssConfig\">I am red and bold</p>\n```", "```ts\n<p [ngClass]=\"{{myClassNames}}\">Hello Angular!</p>\n```", "```ts\n[ngClass]=\"{ 'class' : boolean-condition, 'class2' : boolean-condition-two }\"\n```", "```ts\n<span [ngClass] =\"{\n 'light' : jedi.side === 'Light',\n 'dark' : jedi.side === 'Dark'\n}\">\n{{ jedi.name }}\n</span>\n```", "```ts\n<span class=\"light\">Luke</span>\n```", "```ts\n<div [ngSwitch]=\"weatherForecaseDay\">\n <ng-template ngSwitchCase=\"today\">{{weatherToday}}</ng-template>\n <ng-template ngSwitchCase=\"tomorrow\">{{weatherTomorrow}}</ng-template>\n <ng-template ngSwitchDefault>\n Pick a day to see the weather forecast\n <ng-template>\n</div>\n```", "```ts\n@Component({\n selector: 'greeting',\n template: 'Hello {{ name | uppercase }}'\n})\nexport class GreetingComponent{ name: string; }\n```", "```ts\n<p>{{ 'hello world' | uppercase}}</p>  // outputs HELLO WORLD\n<p>{{ 'wEIrD hElLo' | lowercase}}</p>  // outputs weird hello\n```", "```ts\nnumber_expression | number[:digitInfo[:locale]]\n```", "```ts\n{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\n```", "```ts\nimport { Component, OnInit } from  '@angular/core'; @Component({ selector:  'pipe-demo', template: ` <div>{{ no  |  number }}</div>   <!-- 3.141 --> <div>{{ no  |  number:'2.1-5' }}</div> <! -- 03.14114 --> <div>{{ no  |  number:'7.1-5' }}</div> <!-- 0,000,003.14114 -->\n <div>{{ no  |  number:'7.1-5':'sv' }}</div> <!-- 0 000 003,14114 -->\n ` }) export  class  PipeDemoComponent { no:  number  =  3.1411434344; constructor() { } }\n```", "```ts\nimport { BrowserModule } from  '@angular/platform-browser'; import { NgModule } from  '@angular/core'; import { AppComponent } from  './app.component'; import { PipeDemoComponent } from  \"./pipe.demo.component\"; \nimport { registerLocaleData } from  '@angular/common'; import localeSV from '@angular/common/locales/sv'; \nregisterLocaleData(localeSV**);** \n@NgModule({\n  declarations: [ AppComponent, PipeDemoComponent ],\n imports: [ BrowserModule\n ],\n providers: [], bootstrap: [AppComponent] })\nexport  class  AppModule { }\n```", "```ts\nnumber_expression | percent[:digitInfo[:locale]]\n```", "```ts\nnumber_expression | currency[:currencyCode[:display[:digitInfo[:locale]]]]\n```", "```ts\nimport { Component, OnInit } from  '@angular/core'; \n@Component({ selector:  'currency-demo', template: ` <p>{{ 11256.569  |  currency:\"SEK\":'symbol-narrow':'4.1-2' }}</p> <!--kr11,256.57 --> <p>{{ 11256.569  |  currency:\"SEK\":'symbol':'4.1-3' }}</p> <!--SEK11,256.569 --> <p>{{ 11256.569  |  currency:\"SEK\":'code' }}</p> <!--SEK11,256.57 --> `\n})\nexport  class  CurrencyDemoComponent { constructor() { } }  \n```", "```ts\nexpression | slice: start[:end]\n```", "```ts\ndate_expression | date[:format[:timezone[:locale]]]\n```", "```ts\nimport { Component } from  '@angular/core'; \n@Component({\n  selector:  'json-demo', template: ` {{ person | json **}}** \n **<!--{ \"name\": \"chris\", \"age\": 38, \"address\": { \"street\": \"Oxford Street\", \"city\": \"London\" }** } --> `\n})\nexport  class  JsonDemoComponent { person  = { name:  'chris', age:  38, address: { street:  'Oxford Street', city:  'London' }\n }\n\n constructor() { } }  \n```", "```ts\nexpression | i18nPlural:mapping[:locale]\n```", "```ts\n<h1> {{ jedis | i18nPlural:jediWarningMapping }} </h1>\n```", "```ts\nexport class i18DemoComponent {\n jedis: number = 11;\n jediWarningMapping: any = {\n '=0': 'No jedis',\n '=1' : 'One jedi present',\n 'other' : '# jedis in sight'\n }\n}\n```", "```ts\n<button (click)=\"togglePause()\">\n {{ languageCode | i18nSelect:localizedLabelsMap }}\n</button>\n```", "```ts\nexport class TimerComponent {\n languageCode: string ='fr';\n localizedLabelsMap: any = {\n 'en' : 'Start timer',\n 'es' : 'Comenzar temporizador',\n 'fr' : 'Demarrer une sequence',\n 'other' : 'Start timer' \n }\n}\n```", "```ts\n<nav class=\"navbar navbar-default navbar-static-top\">\n <div class=\"container\">\n <div class=\"navbar-header\">\n <strong class=\"navbar-brand\">My Tasks</strong>\n </div>\n </div>\n</nav>\n<tasks></tasks>\n```", "```ts\n@NgModule({\n  declarations : [ TasksComponent ],\n imports : [ ],\n providers : [],\n  exports : [ TasksComponent ]\n})\nexport class TaskModule{}\n```", "```ts\n@NgModule({\n imports : [\n BrowserModule,\n    TaskModule\n ]\n})\nexport class AppModule {}\n```", "```ts\nimport { \n Component,\n Input,\n Pipe,\n PipeTransform,\n Directive,\n OnInit,\n HostListener\n } from '@angular/core';\n```", "```ts\n/// Model interface\ninterface Task {\n name: string;\n deadline: Date;\n queued: boolean;\n hoursLeft: number;\n}\n```", "```ts\n/// Local Data Service\nclass TaskService {\n public taskStore: Array<Task> = [];\n constructor() {\n const tasks = [\n {\n name : 'Code and HTML table',\n deadline : 'Jun 23 2015',\n hoursLeft : 1\n }, \n {\n name : 'Sketch a wireframe for the new homepage',\n deadline : 'Jun 24 2016',\n hoursLeft : 2\n }, \n {\n name : 'Style table with bootstrap styles',\n deadline : 'Jun 25 2016',\n hoursLeft : 1\n }\n ];\n\n this.taskStore = tasks.map( task => {\n return {\n name : task.name,\n deadline : new Date(task.deadline),\n queued : false,\n hoursLeft : task.hoursLeft \n };\n })\n }\n}\n```", "```ts\n/// Component classes\n// - Main Parent Component\n@Component({\n selector : 'tasks',\n styleUrls : ['tasks.css'],\n templateUrl : 'tasks.html'\n})\nexport class TaskComponent {\n today: Date;\n tasks: Task[];\n constructor() {\n const TasksService: TaskService = new TasksService();\n this.tasks = tasksService.taskStore;\n this.today = new Date();\n }\n}\n```", "```ts\nh3, p {\n text-align : center;\n}\n\ntable {\n margin: auto;\n max-width: 760px;\n}\n```", "```ts\n<div class=\"container text-center\">\n <img src=\"assets/img/task.png\" alt=\"Task\" />\n <div class=\"container\">\n <h4>Tasks backlog</h4>\n <table class=\"table\">\n <thead>\n <tr>\n <th> Task ID</th>\n <th>Task name</th>\n <th>Deliver by</th>\n <th></th>\n <th>Actions</th>\n </tr>\n </thead>\n <tbody>\n <tr *ngFor=\"let task of tasks; let i = index\">\n <th scope=\"row\">{{i}}</th>\n <td>{{ task.name | slice:0:35 }}</td>\n <span [hidden]=\"task.name.length < 35\">...</span>\n </td>\n <td>\n {{ task.deadline | date:'fullDate' }}\n <span *ngIf=\"task.deadline < today\" \n class=\"label label-danger\">\n Due\n </span>\n </td>\n <td class=\"text-center\">\n {{ task.hoursLeft }}\n </td>\n <td>[Future options...]</td>\n </tbody>\n </table>\n</div> \n\n```", "```ts\ntoggleTask(task: Task): void {\n task.queued = !task.queued;\n}\n```", "```ts\n<table class=\"table\">\n <thead>\n <tr>\n <th>Task ID</th>\n <th>Task name</th>\n <th>Deliver by</th>\n <th>Units to ship</th>\n <th>Actions</th>\n </tr>\n </thead>\n <tbody>\n <tr *ngFor=\"let task of tasks; let i = index\">\n <th scope=\"row\">{{i}}\n <span *ngIf=\"task.queued\" class=\"label label-info\">Queued</span>\n </th>\n <td>{{task.name | slice:0:35}}\n <span [hidden]=\"task.name.length < 35\">...</span>\n </td>\n <td>{{ task.deadline | date:'fullDate'}}\n <span *ngIf=\"task.deadline < today\" class=\"label label-danger\">Due</span>\n </td>\n <td class=\"text-center\">{{task.hoursLeft}}</td>\n <td>\n <button type=\"button\" \n class=\"btn btn-default btn-xs\"\n (click)=\"toggleTask(task)\"\n [ngSwitch]=\"task.queued\">\n <ng-template ngSwitchCase=\"false\">\n <i class=\"glyphicon glyphicon-plus-sign\"></i>\n Add\n </ng-template>\n <ng-template ngSwitchCase=\"true\">\n <i class=\"glyphicon glyphicon-minus-sign\"></i>\n Remove\n <ng-template>\n <ng-template ngSwitchDefault>\n <i class=\"glyphicon glyphicon-plus-sign\"></i>\n Add\n </ng-template>\n </button>\n </td>\n </tbody>\n</table>\n```", "```ts\nclass TasksComponent {\n today: Date;\n tasks: Task[];\n queuedTasks: number;\n queuedHeaderMapping: any = {\n '=0': 'No tasks',\n '=1': 'One task',\n 'other' : '# tasks'\n };\n\n constructor() {\n const TasksService: TasksService = new TasksService();\n this.tasks = tasksService.tasksStore;\n this.today = new Date();\n this.updateQueuedTasks();\n }\n\n toggleTask(task: Task) {\n task.queued = !task.queued;\n this.updateQueuedTasks();\n }\n\n private updateQueuedTasks() {\n this.queuedTasks = this.tasks\n .filter( task:Task => task.queued )\n .reduce((hoursLeft: number, queuedTask: Task) => {\n return hoursLeft + queuedTask.hoursLeft;\n }, 0)\n }\n}\n```", "```ts\n<div>\n <h3>\n {{queuedTasks | i18nPlural:queueHeaderMapping}}\n for today\n <span class=\"small\" *ngIf=\"queuedTasks > 0\">\n (Estimated time: {{ queuedTasks > 0 }})\n </span>\n </h3>\n</div>\n<h4>Tasks backlog</h4>\n<!-- rest of the template remains the same -->\n```", "```ts\n@Component({\n selector : 'task-icons',\n template : `\n <img *ngFor=\"let icon of icons\"\n src=\"/assets/img/task.png\"\n width=\"50\">`\n})\nexport class TaskIconsComponent implements OnInit {\n @Input() task: Task;\n icons: Object[] = [];\n ngOnInit() {\n this.icons.length = this.task.hoursLeft;\n this.icons.fill({ name : this.task.name });\n }\n}\n```", "```ts\n@NgModule({\n imports : [ /* add needed imports here */ ]\n declarations : [ \n TasksComponent,\n   TaskIconsComponent  \n ]\n})\nexport class TaskModule {}\n```", "```ts\n@Component({\n selector : 'tasks',\n styleUrls : ['tasks.css'],\n templateUrl : 'tasks.html'\n})\n```", "```ts\n<div>\n <h3>\n {{ hoursLeft | i18nPlural:queueHeaderMapping }}\n for today\n <span class=\"small\" *ngIf=\"hoursLeft > 0\">\n (Estimated time : {{ hoursLeft * 25 }})\n </span>\n </h3> \n <p>\n <span *ngFor=\"let queuedTask of tasks\">\n      <task-icons\n [task]=\"queuedTask\"\n (mouseover)=\"tooltip.innerText = queuedTask.name\"\n (mouseout)=\"tooltip.innerText = 'Mouseover for details'\">\n </task-icons>\n </span>\n </p>\n <p #tooltip *ngIf=\"hoursLeft > 0\">Mouseover for details</p>\n</div>\n<h4>Tasks backlog</h4>\n<!-- rest of the template remains the same -->\n```", "```ts\n@Component({\n selector : 'task-icon',\n template : `\n <img *ngfor=\"let icon of icons\" \n src=\"/assets/img/task.png\" \n width=\"{{size}}\">`\n})\nexport class TaskIconsComponent implements OnInit {\n @Input() task: Task;\n icons : Object[] = [];\n  @Input() size: number;\n ngOnInit() {\n // initialise component here\n }\n}\n```", "```ts\n<span *ngFor=\"let queuedTask of tasks\">\n <task-icons \n [task]=\"queuedTask\" \n    size=\"50\" \n (mouseover)=\"tooltip.innerText = queuedTask.name\">\n </task-icons>\n</span>\n```", "```ts\nimport { Pipe, PipeTransform, Component } from '@angular/core';\n\n@Pipe({\n name : 'myPipeName'\n})\nexport class MyPipe implements PipeTransform {\n transform( value: any, ...args: any[]): any {\n // We apply transformations to the input value here\n return something;\n }\n}\n@Component({\n selector : 'my-selector',\n template : '<p>{{ myVariable | myPipeName: \"bar\"}}</p>'\n})\nexport class MyComponent {\n myVariable: string = 'Foo';\n}\n```", "```ts\nimport { Pipe, PipeTransform, Component }\n```", "```ts\n@Pipe({ name : 'myPipeName' })\n```", "```ts\n{{ value | myPipeName }}\n```", "```ts\n@Pipe({ name : 'myPipeName' })\nexport class MyPipeClass {\n transform( value: any, args: any[]) {\n // apply transformation here\n return 'add banana ' + value; \n }\n}\n```", "```ts\n{{ value | myPipeName:arg1:arg2 }}\n```", "```ts\n@NgModule({\n declarations : [ MyPipe ]\n})\nexport ModuleClass {}\n```", "```ts\n@Pipe({ name : 'myPipe', pure : false })\nexport class MyPipe implements PipeTransform {\n transform(value: any, ...args: any[]) {}\n}\n```", "```ts\n{{ \"decorate me\" |  myPipe }}\n```", "```ts\n{{ object | myPipe }}\n```", "```ts\nexport class Component {\n object = { name : 'chris', age : 37 }\n\n constructor() {\n setTimeout(() => this.object.age = 38 , 3000)\n }\n}\n```", "```ts\n@Pipe({ name : 'pipe' })\nexport class MyPipe implements PipeTransform {\n transform(value:any, ...args: any[]) {\n return `Person: ${value.name} ${value.age}` \n }\n}\n```", "```ts\nChris 37\n```", "```ts\n@Pipe({ name : 'pipe', pure: false })\nexport class MyPipe implements PipeTransform {\n transform(value: any, ...args:any[]) {\n return `Person: ${value.name} ${value.age}`\n }\n}\n```", "```ts\n// instead of altering the data like so\nthis.jedi.side = 'Dark'\n\n// instead do\nthis.jedi = Object.assign({}, this.jedi, { side : 'Dark' });\n```", "```ts\n@Pipe({\n name : 'formattedTime'\n})\nexport class FormattedTimePipe implements PipeTransform {\n transform(totalMinutes : number) {\n let minutes : number = totalMinutes % 60;\n let hours : numbers = Math.floor(totalMinutes / 60);\n return `${hours}h:{minutes}m`;\n }\n}\n```", "```ts\n@Component({\n selector : 'tasks',\n styleUrls : [ 'tasks.css' ],\n templateUrl : 'tasks.html'\n})\nexport class TasksComponent {}\n```", "```ts\n<span class=\"small\">\n (Estimated time: {{ queued * 25 | formattedTime }})\n</span>\n```", "```ts\n@NgModule({\n declarations: [TasksComponent, FormattedTimePipe]\n})\nexport class TasksModule {}\n```", "```ts\n@Pipe({\n name : 'queuedOnly'\n})\nexport class QueuedOnlyPipe implements PipeTransform {\n transform(tasks: Task[]), ...args:any[]): Task[] {\n return tasks.filter( task:Task => task.queued === args[0])\n }\n}\n```", "```ts\n@Component({\n selector : 'tasks',\n styleUrls : ['tasks.css'],\n templateUrl : 'tasks.html'\n})\nexport class TasksComponent {\n // Class implementation remains the same\n}\n```", "```ts\n<span *ngFor=\"queuedTask of tasks | queuedOnly:true\">\n <task-icons\n [task]=\"queuedTask\"\n (mouseover)=\"tooltip.innerText = queuedTask.name\"\n (mouseout)=\"tooltip.innerText = 'Mouseover for details'\">\n </task-icons>\n</span>\n```", "```ts\nimport { Directive } from '@angular/core';\n```", "```ts\nimport { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n selector : '[highlight]'\n})\nexport class HighLightDirective {\n constructor( private elementRef: ElementRef, private renderer : Renderer2 ) {\n var nativeElement = elementRef.nativeElement;\n this.renderer.setProperty( nativeElement,'backgroundColor', 'yellow');\n }\n}\n```", "```ts\n<h1 highlight></h1>\n```", "```ts\n@HostBinding('[class.valid]')\nisValid: boolean; // The host element will feature class=\"valid\"\n// is the value of 'isValid' is true.\n@HostListener('click', ['$event'])\nonClick(e) {\n // This function will be executed when the host \n  // component triggers a 'click' event.\n}\n```", "```ts\nimport { HostListener } from '@angular/core';\n```", "```ts\n@Directive({\n selector : '[highlight]'\n})\nexport class HighlightDirective {\n @HostListener('click')\n clicked() {\n alert('clicked') \n }\n}\n\n```", "```ts\n@Directive({\n selector : '[highlight]'\n})\nexport class HighlightDirective {\n private nativeElement;\n\n constructor(elementRef: ElementRef, renderer: Renderer2) {\n this.nativeElement = elementRef.nativeElement;\n }\n\n @HostListener('mousenter')\n onMouseEnter() {\n this.background('red');\n }\n\n onMouseLeave('mouseleave') {\n this.background('yellow');\n }\n\n private background(bg:string) {\n this.renderer.setAttribute(nativeElement,'backgroundColor', bg);\n }\n}\n```", "```ts\n<div highlight=\"orange\"></div>\n\n@Directive({ selector : '[highlight]' })\nexport class HighlightDirective \n private nativeElement;\n\n constructor(elementRef: ElementRef, renderer: Renderer2) {\n this.nativeElement = elementRef.nativeElement;\n }\n\n @Input('highlight') color:string;\n\n @HostListener('mousenter')\n onMouseEnter(){\n this.background(this.color);\n }\n\n onMouseLeave() {\n this.background('yellow'); \n }\n\n private background(bg: string) {\n this.renderer( nativeElement, 'background', bg );\n }\n}\n```", "```ts\n@Input('highlight') color: string;\n```", "```ts\n<div [highlight]=\"orange\" defaultColor=\"yellow\">\n```", "```ts\n@Directive({})\nexport class HighlightDirective {\n @Input() defaultColor\n constructor() {\n this.background(this.defaultColor);\n }\n // the rest omitted for brevity\n}\n```", "```ts\nprivate defaultColor: string;\n\n@Input()\nset defaultColor(value) { \n this.defaultColor = value;\n this.background(value); \n}\n\nget defaultColor(){ return this.defaultColor; }\n```", "```ts\nimport { Directive, ElementRef, Input } from '@angular/core';\n@Directive({\n selector: '[error]'\n})\nexport class ErrorDirective {\n error:boolean;\n private nativeElement;\n @Input errorText: string;\n @Input()\n set error(value: string) {\n let val = value === 'true' ? true : false;\n if(val){ this.setError(); }\n else { this.reset(); }\n }\n\n constructor(\n private elementRef: ElementRef, \n private renderer: Renderer2\n ) {\n this.nativeElement = elementRef.nativeElement;\n }\n\n private reset() { \n this.renderer.setProperty(nativeElement, 'innerHTML', '');\n this.renderer.setProperty(nativeElement, 'background', '') \n }\n\n private setError(){\n this.renderer.setProperty(nativeElement, 'innerHTML', this.errorText);\n this.renderer.setProperty(nativeElement, 'background', 'red');\n }\n}\n```", "```ts\n<div error=\"{{hasError}}\" errorText=\"display this error\">\n```", "```ts\n<div title=\"a tooltip\"></div>\n```", "```ts\n<task-icons [title]=\"task.name\"></task-icons>\n```", "```ts\n@Directive({ selector : '[task]' })\nexport class TooltipDirective {\n private nativeElement;\n @Input() task:Task;\n @Input() defaultTooltip: string;\n\n constructor(private elementRef: ElementRef, private renderer : Renderer2) {\n this.nativeElement = elementRef.nativeElement;\n }\n\n @HostListener('mouseover')\n onMouseOver() {\n let tooltip = this.task ? this.task.name : this.defaultTooltip;\n this.renderer.setProperty( this.nativeElement, 'title', tooltip );\n }\n}\n```", "```ts\n<div [task]=\"task\">\n```", "```ts\n<div [task]=\"task\" [elem]=\"otherElement\" defaultTooltip=\"default text\" >\n<div #otherElement>\n```", "```ts\n@Directive({ selector : '[task]' })\nexport class TooltipDirective {\n private nativeElement;\n @Input() task:Task;\n @Input() defaultTooltip: string;\n\n constructor(private elementRef: ElementRef, private renderer : Renderer2) {\n this.nativeElement = elementRef.nativeElement;\n }\n\n @HostListener('mouseover')\n onMouseOver() {\n let tooltip = this.task ? this.task.name : this.defaultTooltip;\n    this.renderer.setProperty( this.nativeElement, 'innerText', tooltip );\n }\n}\n```"]