["```ts\n<timer [seconds]=\"25\"></timer>\n```", "```ts\n<h1 [hidden]=\"hideMe\">\n This text will not be visible if 'hideMe' is true\n</h1>\n```", "```ts\n<div [attr.hidden]=\"isHidden\">...</div>\n<input [class.is-valid]=\"isValid\">\n<div [style.width.px]=\"myWidth\"></div>\n```", "```ts\n<timer (countdownComplete)=\"onCountdownCompleted()\"></timer>\n```", "```ts\n<button (click)=\"doSomething()\">click me</button>\n```", "```ts\nng new InputOutputDemo\n```", "```ts\n@NgModule({\n declarations: []\n})\nexport class InputModule {}\n```", "```ts\n@NgModule({\n declarations: [AppComponent],\n imports: [ BrowserModule,\n      InputModule\n ],\n providers: [], bootstrap: [AppComponent] })\nexport  class  AppModule { }\n```", "```ts\nimport { Component } from '@angular/core';\n\n@Component({\n selector : 'countdown-timer',\n template : '<h1>Time left: {{seconds}}</h1>'\n})\nexport class CountdownTimerComponent {\n seconds: number = 25;\n intervalId: any;\n\n constructor() {\n this.intervalId = setInterval(() => this.tick(), 1000);\n }\n\n private tick(): void {\n if(--this.seconds < 1) {\n clearInterval(this.intervalId);\n }\n }\n} \n```", "```ts\n@Component({\n selector: 'timer',\n template: '<countdown-timer></countdown-timer>'\n})\nexport class TimerComponent {}\n```", "```ts\n@NgModule({\n declarations: [CountdownTimerComponent, TimerComponent]\n})\nexport class InputModule {}\n```", "```ts\nimport { Component, Input } from '@angular/core';\n\n@Component({\n selector: 'countdown-timer',\n template: '<h1>Time left: {{ seconds }}</h1>'\n})\nexport class CountdownTimerComponent {\n  @Input() seconds : number;\n intervalId;\n // rest of the implementation remains the same\n}\n```", "```ts\n@Component({\n selector: 'timer',\n template: `\n <div class=\"container text-center\">\n <countdown-timer [seconds]=\"25\"></countdown-timer>\n </div>`\n})\n```", "```ts\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n```", "```ts\n@Component({\n selector : 'countdown-timer',\n template : '<h1>Time left: {{ seconds }}</h1>'\n})\nexport class CountdownTimerComponent {\n @Input() seconds : number;\n intervalId: any;\n  @Output() complete: EventEmitter<any> = new EventEmitter();\n constructor() {\n this.intervalId = setInterval( () => this.tick(), 1000 );\n }\n\n private tick(): void {\n if(--this.seconds < 1) {\n clearTimeout(this.intervalId);\n // an event is emitted upon finishing the countdown\n      this.complete.emit(null);\n }\n }\n}\n```", "```ts\n@Component({\n selector : 'timer',\n template : `\n <div class=\"container text-center\">\n <img src=\"assets/img/timer.png\" />\n <countdown-timer [seconds]=\"25\"\n                 (complete)=\"onCountdownCompleted()\">\n </countdown-timer>`\n})\nexport class TimerComponent {\n onCountdownCompleted(): void {\n alert('Time up !')\n }\n}\n```", "```ts\n<component [property]=\"propertyOnContainer\">\n```", "```ts\n@Component({\n selector : 'component'\n})\nexport class Component {\n  @Input() property;\n}\n```", "```ts\n<component (event)=\"methodOnContainer()\" [property]=\"propertyOnContainer\">\n```", "```ts\n@Component({\n selector : 'component'\n})\nexport class Component {\n  @Output() event = new EventEmitter<any>();\n}\n```", "```ts\nevent.emit();\n```", "```ts\nclass CountdownTimerComponent {\n @Input() seconds: number;\n  @Output() complete: EventEmitter<any> = new EventEmitter();\n @Output() progress: EventEmitter<number> = new EventEmitter();\n intervalId;\n\n constructor() {\n this.intervalId = setInterval(() => this.tick(), 1000);\n }\n\n private tick(): void {\n if(--this.seconds < 1) {\n clearTimeout(this.intervalId);\n      this.complete.emit(null);\n }\n    this.progress.emit(this.seconds);\n }\n}\n```", "```ts\n@Component({\n selector: 'timer',\n template: `\n <div class=\"container text-center\">\n <countdown-timer [seconds]=\"25\"\n                 (progress)=\"timeout = $event\"\n                 (complete)=\"onCountdownCompleted()\" >\n </countdown-timer>\n <p *ngIf=\"timeout < 10\">\n Beware! Only\n <strong>{{ timeout }} seconds</strong>\n </p>\n </div>` \n})\nexport class TimerComponent {\n timeout: number;\n onCountdownCompleted(): void {\n alert('Time up')\n }\n}\n```", "```ts\n<countdown-timer [seconds]=\"25\"\n           (progress)=\"timeout = $event\"\n           (complete)=\"onCountdownCompleted()\">\n</countdown-timer>\n```", "```ts\n<countdown [seconds]=\"25\" (progress)=\"timeout = $event\" >\n</countdown>\n```", "```ts\nprogress.emit(data);\n```", "```ts\n<countdown [seconds]=\"25\" (progress)=\"onProgress($event)\">\n</countdown>\n```", "```ts\nonProgress(data) {\n this.timeout = data;\n}\n```", "```ts\n@Component({\n selector: 'timer',\n template: `\n <div class=\"container text-center\">\n <countdown-timer [seconds]=\"25\"\n (complete)=\"onCountdownCompleted()\"\n                 #counter >\n </countdown-timer>\n <p>\n <button class=\"btn btn-default\"\n (click)=\"counter.seconds = 25\">\n reset\n </button>\n </p>\n <p *ngIf=\"counter.seconds < 10\">\n Beware, only !\n <strong>{{ counter.seconds }} seconds</strong>\n </p>\n </div>`\n})\nexport class TimerComponent {\n // timeout: any /* No longer required */\n onCountdownCompleted(): void {\n alert('Time up'); \n }\n}\n```", "```ts\n@Component({\n selector : 'countdown-timer',\n template : '<h1>Time left: {{seconds}}</h1>',\n  inputs : ['seconds'],\n  outputs : ['complete','progress']\n})\nexport class CountdownTimerComponent {\n  seconds: number;\n intervalId;\n  complete: EventEmitter<any> = new EventEmitter();\n progress: EventEmitter<any> = new EventEmitter();\n // And so on..\n}\n```", "```ts\n<div class=\"container text-center\">\n <countdown [seconds]=\"25\"\n (complete)=\"onCountdownCompleted()\"\n #counter >\n </countdown>\n <p>\n <button class=\"btn btn-default\"\n (click)=\"counter.seconds = 25\">\n Reset countdown to 25 seconds\n </button>\n </p>\n <p *ngIf=\"counter.seconds < 10\">\n Beware only !\n <strong>{{ seconds }} seconds</strong> left\n </p>\n</div>\n```", "```ts\n@Component({\n selector: 'timer',\n templateUrl: './timer.component.html'\n})\nexport class TimerComponent {\n // Class follows below\n}\n```", "```ts\n@Component({\n selector : 'my-component',\n styles : [`\n p {\n text-align: center;\n }\n table {\n margin: auto;\n }\n `]\n})\nexport class ExampleComponent {}\n```", "```ts\n@Component({\n selector: 'my-component',\n styleUrls: ['path/to/my-stylesheet.css'], // use this\n styles : [\n `\n p { text-align : center; }\n table { margin: auto; }\n `\n ]  // and this at the same time\n})\nexport class MyComponent {}\n```", "```ts\n@Component({\n selector: 'app',\n template: `\n <style> p { color : red; } </style>\n <p>I am a red paragraph </p>\n `\n})\nexport class AppComponent {}\n```", "```ts\nimport {\n Component,\n EventEmitter, \n Input,\n Output, \n ViewEncapsulation\n} from '@angular/core';\n@Component({\n selector: 'countdown-timer',\n template: '<h1>Time left: {{seconds}}</h1>',\n styles: ['h1 { color: #900}'],\n encapsulation: ViewEncapsulation.Emulated \n})\nexport class CountdownTimerCoponent { \n // Etc\n}\n```"]