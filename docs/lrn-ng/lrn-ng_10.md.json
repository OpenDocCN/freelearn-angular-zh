["```ts\n<form>\n <input id=\"name\" name=\"name\" placeholder=\"first name\" required>\n <input id=\"surname\" name=\"surname\" placeholder=\"surname\" required>\n <button>Save</button>\n</form>\n```", "```ts\n<form #formPerson=\"ngForm\">\n <input [(ngModel)]=\"person.firstName\"  id=\"name\"  name=\"name\"\n  placeholder=\"first name\"  required>\n <input [(ngModel)]=\"person.surname\"  id=\"surname\"  name=\"surname\"\n  placeholder=\"surname\"  required>\n <button (click)=\"submit()\" *ngIf=\"formPerson.form.valid\">Save</button> </form>\n```", "```ts\n<form (ngSubmit)=\"save()\" #formPerson=\"ngForm\">\n```", "```ts\n<input [(ngModel)]=\"person.name\"  id=\"name\"  name=\"name\"\n  placeholder=\"first name\"  required>\n```", "```ts\n<button *ngIf=\"formHero.form.valid\">Save</button>\n```", "```ts\n<input id=\"name\" name=\"name\" placeholder=\"first name\" required ng-reflect-required ng-reflect-name=\"name\" ng-reflect-model class=\"ng-untouched ng-pristine ng-invalid\">\n```", "```ts\n<form #formPerson=\"ngForm\">\n <input #firstName=\"ngModel\" [(ngModel)]=\"person.name\"  id=\"name\"\n  name=\"name\"  placeholder=\"first name\"  required>\n <input #surName=\"ngModel\" [(ngModel)]=\"person.surname\"  id=\"surname\"\n  name=\"surname\"  placeholder=\"surname\"  required>\n <button *ngIf=\"formPerson.form.valid\">Save</button> </form>\n```", "```ts\n<input #firstName=\"ngModel\" [(ngModel)]=\"person.name\"  id=\"name\"\n  name=\"name\"  placeholder=\"first name\"  required> {{ firstName.valid }} // an empty field sets this to false\n```", "```ts\n{{ firstName.errors | json }}  // outputs { required: true }\n```", "```ts\n<div *ngIf=\"firstName.errors && firstName.errors.required\">\n First name is a required field\n</div>\n```", "```ts\n<input minlength=\"3\" required #name=\"ngModel\" name=\"name\">\n{{ name.errors | json }}\n```", "```ts\n{\"minlength\": { \"requiredLength\": 3, \"actualLength\": 1 } }\n```", "```ts\n<div *ngIf=\"name.errors && name.errors.minlength\" >\n Name value is too short\n</div>\n```", "```ts\n<button *ngIf=\"form.valid\">Save</button>\n```", "```ts\n<button [disabled]=\"form.valid\">Save</button>\n```", "```ts\n<button (ngSubmit)=\"form.valid && submit()\">Save</button>\n```", "```ts\n@NgModule({\n imports: [ReactiveFormsModule]\n})\n```", "```ts\nconst control = new FormControl('some value');\nconst control2 = new FormControl('other value', Validators.required);\n```", "```ts\nconst group = {};\ngroup['ctrl1'] = control;\ngroup['ctrl2'] = control2;\n```", "```ts\nconst formGroup = new FormGroup(group);\n```", "```ts\nimport { FormControl, FormGroup } from  '@angular/forms'; import { Component, OnInit } from  '@angular/core'; \n@Component({\n  selector:  'dynamic', template: ` dynamic\n <div  [formGroup]=\"form\">\n dynamic <input  [formControl]=\"group['ctrl1']\"  placeholder=\"name\"> </div>`\n})\nexport  class  DynamicComponent  implements  OnInit { form:FormGroup; group; constructor() { this.group  = {}; this.group['ctrl1'] =  new  FormControl('start value'); this.form  =  new  FormGroup(this.group); }\n\n ngOnInit() { } }  \n```", "```ts\nthis.group['ctrl2'] = new FormControl('',Validators.required)\n```", "```ts\nctrl2 valid {{ form.controls['ctrl2'].valid }} {{ form.controls['ctrl2'].errors  |  json }}\n```", "```ts\n<div *ngIf=\"form.controls['ctrl2'].errors.required\">This field is required</div>\n```", "```ts\nthis.questions  = [{ Question :  'What is Supermans real name', Key :  '1' },{\n Question :  'Who is Lukes father', Key :  '2' }];\n\nthis.questionGroup  = {}; this.questions.forEach( qa  => { this.questionGroup[qa.Key] =  new  FormControl('',Validators.required) });\n\nthis.dynamicForm  =  new  FormGroup( this.questionGroup );\n```", "```ts\n<form (ngSubmit)=\"submit()\"  [formGroup]=\"dynamicForm\"> <div  *ngFor=\"let q of questions\"> {{ q.Question }} <input  [formControl]=\"questionGroup[q.Key]\"  placeholder=\"fill in answer\"> </div>\n <button>Save</button>\n</form>\n```", "```ts\nsubmit() {\n console.log( this.dynamicForm.value ) // { \"1\" : \"\", \"2\" : \"Darth\" }\n}\n```", "```ts\nconst form = new FormGroup({\n name: new FormControl(''),\n surname: new FormControl(''),\n age: new FormControl \n})\n```", "```ts\nform.setValue({\n name: 'chris',\n surname: 'noring',\n age: 37\n})\n```", "```ts\nform.setValue({\n name: 'chris',\n surname: 'noring'\n})\n```", "```ts\nform.patchValue({\n name: 'chris',\n surname: 'noring'\n})\n```", "```ts\n{\n name: 'christoffer',\n surname: 'n',\n age: 36\n}\n```", "```ts\n{\n name: 'chris',\n surname: 'noring',\n age: 36\n}\n```", "```ts\nconst form = new FormGroup({\n name: new FormControl(''),\n surname: new FormControl(''),\n age: new FormControl,\n address: new FormGroup({\n city: 'London',\n country: 'UK'\n }) \n})\n```", "```ts\nimport { FormBuilder } from '@angular/forms'\n\n@Component({\n})\nexport class FormComponent {\n formGroup: FormGroup;\n constructor(private formBuilder: FormBuilder) {\n this.formGroup = this.formBuilder.group({\n name :'',\n surname :'',\n age: 0,\n address : this.formBuilder.group({\n city: 'London',\n country : 'UK'\n })\n });\n }\n}\n```", "```ts\nthis.dynamicForm2  =  this.formBuilder.group({\n // set to a primitive fullname: 'chris'**,\n** // setting a default value age: { value : 37, disabled: true **},** // complex type 'address' address : this.formBuilder.group({\n // default value + x number of validators\n    **city: ['', Validators.required, Validators.minLength],** \n    **country: [''] // default value, no validators**\n })  });\n```", "```ts\n<form  (ngSubmit)=\"submit(dynamicForm2)\"  [formGroup]=\"dynamicForm2\"> <input  formControlName=\"fullname\"> <input  formControlName=\"age\"> <div formGroupName='address'>\n <input **formControlName=\"city\"**>\n <input f**ormControlName=\"country\"**>\n </div> <button>Save</button> </form>\n```", "```ts\n<div  *ngIf=\"dynamicForm2.get('address').hasError('required')\">\n```", "```ts\nimport { AbstractControl, ValidatorFn } from  '@angular/forms'; export  function  minValueValidator(compareToThisValue:  number):  ValidatorFn {  return (control:  AbstractControl): {[key:  string]:  any} => { const  lessThan  =  parseInt( control.value ) <  compareToThisValue; return  lessThan  ? {'minValue'</span>: {value:  control.value}} :  null; };\n}\n```", "```ts\nformBuilder.group({\n age : [0, minValueValidator(18)]\n})\n```", "```ts\n<div *ngIf=\"form.get('age').hasError('minValue')\">\n You must be at least 18\n</div>\n```", "```ts\n@Component({\n template: `\n <div class=\"form-group\" [formGroup]=\"loginForm\">\n <input type=\"text\"\n class=\"form-control\"\n placeholder=\"Your username\">\n <p *ngIf=\"showUsernameHint\"class=\"help-block\">\n That does not look like a proper username\n </p>\n </div>\n `\n})\nexport class LoginComponent {\n loginForm: FormGroup;\n notValidCredentials: boolean = false;\n showUsernameHint: boolean = false;\n\n constructor(\n formBuilder: FormBuilder,\n private router: Router\n ) {\n this.loginForm = formBuilder.group({\n username: ['', Validators.compose([\n Validators.required,\n Validators.email])],\n password: ['', Validators.required]\n });\n }\n}\n```", "```ts\n@Component({\n template : `\n <div class=\"form-group\">\n <input type=\"text\"\n class=\"form-control\"\n placeholder=\"Your username\"\n           [formControlName]=\"username\">\n <p *ngIf=\"showUsernameHint\"class=\"help-block\">\n That does not look like a proper username\n </p>\n </div>`\n})\nexport class LoginComponent {\n loginForm: FormGroup;\n notValidCredentials: boolean = false;\n showUsernameHint: boolean = false;\n\n constructor(\n formBuilder: FormBuilder,\n private router: Router\n ) {\n this.loginForm = formBuilder.group({\n username: ['', Validators.compose([\n Validators.required,\n Validators.email])],\n password: ['', Validators.required]\n });\n\n    const username:AbstractControl = this.loginForm.get('username');\n username.valueChanges.subscribe(value => {\n this.showUsernameHint = (username.dirty && \n value.indexOf('@') < 0);\n });\n }\n}\n```", "```ts\n<p *ngIf=\"showUsernameHint\"class=\"help-block\">\n That does not look like a proper username\n</p>\n```"]