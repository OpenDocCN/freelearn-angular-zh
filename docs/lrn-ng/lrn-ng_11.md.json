["```ts\nng new AngularMaterialDemo\n```", "```ts\nnpm install --save @angular/material @angular/cdk\n```", "```ts\nnpm install @angular/animations\n```", "```ts\nimport { \n BrowserAnimationsModule \n} from '@angular/platform-browser/animations';  @NgModule({\n  imports: [ BrowserAnimationsModule ]\n})\nexport class AppModule {}\n```", "```ts\nimport { BrowserAnimationsModule } from  '@angular/platform-browser/animations'; import { MatButtonModule } from  '@angular/material'; @NgModule({\n  imports: [ \n BrowserAnimationsModule, \n    MatButtonModule \n ]\n})\nexport class AppModule {}\n```", "```ts\n@import  \"~@angular/material/prebuilt-themes/indigo-pink.css\";\n```", "```ts\n@Component({\n template : `\n <button mat-button>Click me!</button>\n `\n})\n```", "```ts\n<button mat-button>simple button</button>\n```", "```ts\n<button  mat-button>Normal button</button> <button  mat-raised-button>Raised button</button> <button  mat-fab>Fab button</button> <button  mat-icon-button>\n <mat-icon  class=\"mat-icon material-icons\"  role=\"img\"  aria-hidden=\"true\">home</mat-icon>\n Icon button\n</button>\n<mat-button-toggle>Button toggle</mat-button-toggle>\n```", "```ts\nimport { BrowserModule } from  '@angular/platform-browser'; import { NgModule } from  '@angular/core';  import { BrowserAnimationsModule } from  '@angular/platform-browser/animations'; import { \n MatButtonModule, \n MatIconModule, \n MatButtonToggleModule \n} from '@angular/material'**;** import { AppComponent } from  './app.component'; \n@NgModule({\n  declarations: [ AppComponent\n ],\n imports: [ BrowserModule, BrowserAnimationsModule, MatButtonModule, MatIconModule,\n MatButtonToggleModule\n ],  bootstrap: [AppComponent] })\nexport  class  AppModule { }\n```", "```ts\n<mat-form-field>\n <input  matInput  placeholder=\"Name\" [formControl]=\"nameInput\">\n</mat-form-field>\n```", "```ts\nnameInput:FormControl;\n\nconstructor() {\n this.nameInput = new FormControl();\n}\n```", "```ts\n<mat-form-field>\n <input [formControl]=\"nameInput\" required matInput >\n</mat-form-field>\n```", "```ts\n<form name=\"person-form\">\n <mat-input-container>\n <input [formControl]=\"nameInput\" required matInput >\n    <mat-error *ngIf=\"nameInput.hasError('required')\">\n Name field is required\n </mat-error>\n </mat-input-container>\n</form>\n```", "```ts\nimport {FormsModule} from '@angular/forms';\n\n@NgModule({\n imports: [FormsModule]\n})\nexport class AppModule {}\n```", "```ts\nimport { BrowserModule } from  '@angular/platform-browser'; import { NgModule } from  '@angular/core'; import { AppComponent } from  './app.component'; import { MatButtonModule } from  '@angular/material'; import { BrowserAnimationsModule } from  '@angular/platform-browser/animations'; import { MatIconModule } from  '@angular/material/icon'; import { MatButtonToggleModule } from  '@angular/material/button-toggle'; import { MatAutocompleteModule } from  '@angular/material'; import { ReactiveFormsModule } from  '@angular/forms'; import { MatFormFieldModule } from  '@angular/material/form-field'; import { MatInputModule } from  '@angular/material/input'**;** \n@NgModule({\n  declarations: [ AppComponent\n ],\n imports: [ BrowserModule, BrowserAnimationsModule, MatButtonModule, MatIconModule, MatButtonToggleModule, MatAutocompleteModule, ReactiveFormsModule, MatFormFieldModule, MatInputModule\n ],\n providers: [], bootstrap: [AppComponent] })\nexport  class  AppModule { }\n```", "```ts\n<mat-form-field>\n <input  type=\"text\"  **matInput**  placeholder=\"jedis\" [formControl]=\"myControl\"  >\n</mat-form-field>\n```", "```ts\n<mat-autocomplete #auto=\"matAutocomplete\">\n <mat-option *ngFor=\"let jedi of jedis\" [value]=\"jedi\"> {{ jedi }}\n </mat-option>\n</mat-autocomplete>\n```", "```ts\nexport  class  AppComponent {  myControl:  FormControl; jedis  = [ 'Luke', 'Yoda', 'Darth Vader', 'Palpatine', 'Dooku', 'Darth Maul'\n ];\n\n constructor() { this.myControl  =  new  FormControl();\n }\n} \n```", "```ts\n<mat-autocomplete #auto=\"matAutocomplete\">\n <mat-option *ngFor=\"let jedi of jedis\" [value]=\"jedi\"> {{ jedi }}\n </mat-option>\n</mat-autocomplete>\n```", "```ts\n<form  action=\"\">\n <mat-input-container  name=\"container\">\n <mat-form-field hintLabel=\"Max 30 characters\"> <input  name=\"input\" type=\"text\"\n #input\n matInput\n placeholder=\"type the name of the jedi\" [formControl]=\"jediControl\"\n **[matAutocomplete]= \"auto\"**>\n <mat-hint align=\"end\">{{input.value?.length || 0}}/30</mat-hint> \n </mat-form-field> </mat-input-container>\n</form>\n```", "```ts\n<mat-form-field **hintLabel=\"Max 30 characters\"**>\n <input  name=\"input\" type=\"text\"\n #input\n matInput\n placeholder=\"type the name of the jedi\" [formControl]=\"jediControl\"\n [matAutocomplete]= \"auto\">\n  **<mat-hint align=\"end\">{{input.value?.length || 0}}/30</mat-hint>** \n</mat-form-field> \n```", "```ts\nmyControl.valueChanges\n```", "```ts\nimport { Component } from  '@angular/core'; import { FormControl } from  \"@angular/forms\"; import { Observable } from  \"rxjs/Observable\"; import  'rxjs/add/operator/map'; @Component({\n  selector:  'app-root', templateUrl:  './app.component.html', styleUrls: ['./app.component.css'] })\nexport  class  AppComponent { title  =  'app'; myControl:  FormControl; jedis  = [ 'Luke', 'Yoda', 'Darth Vader', 'Palpatine', 'Dooku', 'Darth Maul'\n ];\n\n filteredJedis$:  Observable<string[]>; constructor() { this.myControl  =  new  FormControl(); this.filteredJedis$  =  this.myControl .valueChanges .map(input  =>  this.filter(input**));** }\n\n  filter(key:  string):  Array<string> { return  this.jedis.filter(jedi  =>  jedi.startsWith(key)); }\n}\n```", "```ts\n<mat-autocomplete #auto=\"matAutocomplete\">\n <mat-option *ngFor=\"let jedi of **filteredJedis$ | async**\" [value]=\"jedi\"> {{ jedi }}\n </mat-option>\n</mat-autocomplete>\n```", "```ts\nimport { MatCheckboxModule } from @angular/material/checkbox;\n\n@NgModule({\n imports: [MatCheckboxModule]\n})\n```", "```ts\n<mat-checkbox [checked]=\"propertyOnTheComponent\" >Check me<mat-checkbox>\n```", "```ts\nimport { \n MatDatepickerModule, \nMatNativeDateModule } from  '@angular/material';\n\n@NgModule({\n imports: [MatDatepickerModule, MatNativeDateModule]\n})\n```", "```ts\n<mat-form-field>\n <input matInput  placeholder=\"Choose a date\">  </mat-form-field>  \n```", "```ts\n<mat-datepicker></mat-datepicker>\n```", "```ts\n<div>\n <mat-form-field>\n <input  matInput [matDatepicker]=\"picker\"> <mat-datepicker-toggle  matSuffix [for]=\"picker\">\n </mat-datepicker-toggle> <mat-datepicker #picker></mat-datepicker> </mat-form-field>\n</div>\n```", "```ts\n<mat-datepicker-toggle  matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n```", "```ts\nimport {MatMenuModule} from '@angular/material';\n\n@NgModule({\n imports: [MatMenuModule]\n})\n```", "```ts\n<mat-menu>\n</mat-menu>\n```", "```ts\n<mat-menu>\n <button mat-menu-item >Item1</button>\n <button mat-menu-item >Item2</button>\n</mat-menu>\n```", "```ts\n<button [matMenuTriggerFor]=\"menu\">Trigger menu</button>\n<mat-menu #menu>\n <button mat-menu-item >Item1</button>\n <button mat-menu-item >Item1</button>\n</mat-menu>\n```", "```ts\n<button [matMenuTriggerFor]=\"menu\">Trigger menu</button>\n<mat-menu #menu>\n <button mat-menu-item >File</button>\n <button mat-menu-item >Export</button>\n</mat-menu>\n```", "```ts\n<button [matMenuTriggerFor]=\"rootMenu\">Trigger menu</button>\n<mat-menu #rootMenu>\n <button mat-menu-item>File</button>\n <button mat-menu-item>Export</button>\n</mat-menu>\n\n<mat-menu #subMenu>\n <button mat-menu-item>CSV</button>\n <button mat-menu-item>PDF</button>\n</mat-menu>\n```", "```ts\n<button [matMenuTriggerFor]=\"rootMenu\">Trigger menu</button>\n<mat-menu #rootMenu>\n <button mat-menu-item >File</button>\n <button mat-menu-item [matMenuTriggerFor]=\"subMenu\">Export</button>\n</mat-menu>\n\n<mat-menu #subMenu>\n <button mat-menu-item>CSV</button>\n <button mat-menu-item>PDF</button>\n</mat-menu>\n```", "```ts\n<mat-list>\n <mat-list-item>Item1</mat-list-item>\n <mat-list-item>Item1</mat-list-item>\n</mat-list>\n```", "```ts\nimport { MatGridListModule } from '@angular/material';\n\n@NgModule({\n imports: [MatGridListModule]\n})\n```", "```ts\n<mat-grid-list cols=4 rowHeight=\"300px\">\n</mat-grid-list>\n```", "```ts\n<mat-grid-list cols=4 rowHeight=\"300px\">\n <mat-grid-tile *ngFor=\"let tile of tiles\" [colspan]=\"tile.cols\" [rowspan]=\"tile.rows\" [style.background]=\"tile.color\"> {{ tile.text }}\n </mat-grid-tile>\n</mat-grid-list>\n```", "```ts\ntiles  = [ {text:  'One', cols:  3, rows:  1, color:  'lightblue'}, {text:  'Two', cols:  1, rows:  2, color:  'lightgreen'}, {text:  'Three', cols:  1, rows:  1, color:  'lightpink'}, {text:  'Four', cols:  2, rows:  1, color:  '#DDBDF1'}, ];\n```", "```ts\nimport { MatDialogModule } from '@angular/material';\n\n@NgModule({\n imports: [MatDialogModule]\n})\n```", "```ts\nimport { MatDialogRef } from  \"@angular/material\"; import { Component } from  \"@angular/core\"; @Component({\n  selector:  'my-dialog', template: ` <h1  mat-dialog-title>Perform action?</h1> <mat-dialog-content>Save changes to Jedi?</mat-dialog-content> <mat-dialog-actions>\n <button  mat-button  [mat-dialog-close]=\"true\">Yes</button>\n <button  mat-button  mat-dialog-close>No</button> </mat-dialog-actions>\n`  })\nexport  class  DialogComponent { constructor(public  dialogRef:  MatDialogRef<DialogComponent>) { console.log('dialog opened'); }\n}\n```", "```ts\n<h1 mat-dialog-title>Save changes to Jedi?</h1>\n<mat-dialog-content>\n</mat-dialog-content>\n<mat-dialog-actions>\n <button mat-button [mat-dialog-close]>Yes</button>\n <button mat-button mat-dialog-close >No</button> \n</mat-dialog-actions>\n```", "```ts\nimport { Component } from  \"@angular/core\"; import { MatDialog } from  \"@angular/material/dialog\"; import { DialogComponent } from  \"./dialog.component\"; \n@Component({\n  selector:  'dialog-example', template: ` <button  (click)=\"openDialog()\">Open Dialog</button> `\n})\nexport  class  DialogExampleComponent { selectedOption; constructor(private  dialog:  MatDialog) { }\n\n  openDialog() { let  dialogRef  =  this.dialog.open(DialogComponent); dialogRef.afterClosed().subscribe(result  => {\n // do something with 'result'  });\n }\n}\n```", "```ts\n@NgModule({\n entryComponents: [DialogComponent]\n})\n```", "```ts\n// jedi.model.ts\ninterface  Jedi  {\n name:  string; }\n\nimport { Component } from  \"@angular/core\"; import { MatDialog } from  \"@angular/material/dialog\"; import { DialogComponent } from  \"./dialog.component\"; \n@Component({\n  selector:  'dialog-example', template: ` <button  (click)=\"openDialog()\">Open Dialog</button> `\n})\nexport  class  DialogExampleComponent { selectedOption; jedi:  Jedi;\n\n constructor(private  dialog:  MatDialog) {\n this.jedi  =  {  name:  'Luke'  };\n }\n\n openDialog() {\n  let dialogRef = this.dialog.open(DialogComponent, {\n data: { jedi: this.jedi }\n });\n\n dialogRef.afterClosed().subscribe(result  =>  {\n console.log(result);\n });\n }\n}  \n```", "```ts\nimport { MatDialogRef, MAT_DIALOG_DATA } from  \"@angular/material\"; import { Component, Inject } from  \"@angular/core\"; @Component({\n  selector:  'my-dialog',\n template: `\n <h1  mat-dialog-title>Save changes to jedi?</h1>\n <mat-dialog-content>\n      <input matInput [(ngModel)]=\"data.jedi.name\" **/>**\n </mat-dialog-content>\n <mat-dialog-actions>\n <button  mat-button  (click)=\"saveAndClose()\">Yes</button>  <button  mat-button  mat-dialog-close>No</button>\n </mat-dialog-actions>\n `, })\nexport  class  DialogComponent { constructor(\n public  dialogRef:  MatDialogRef<DialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data:  any\n ) {\n console.log('dialog opened');\n }\n\n saveAndClose() {\n this.dialogRef.close('save');\n }\n}\n```", "```ts\nexport  class  DialogComponent { constructor(\n public  dialogRef:  MatDialogRef<DialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data:  any\n ) {\n console.log('dialog opened');\n }\n\n saveAndClose() {\n    this.dialogRef.close('save'**);**\n }\n}\n```", "```ts\nimport { Component } from  \"@angular/core\"; import { MatDialog } from  \"@angular/material/dialog\"; import { DialogComponent } from  \"./dialog.component\"; \n@Component({\n  selector:  'dialog-example', template: ` <button  (click)=\"openDialog()\">Open Dialog</button> `\n})\nexport  class  DialogExampleComponent { selectedOption;\n jedi:  Jedi;\n\n constructor(private  dialog:  MatDialog) {\n this.jedi  = { name:  'Luke' }; }\n\n openDialog() {\n let  dialogRef  =  this.dialog.open(DialogComponent, {\n data: { jedi:  this.jedi } });\n\n   dialogRef\n .afterClosed()\n .subscribe(result => {\n // will print 'save' if we pressed 'Yes' button\n console.log(result);\n });\n}}\n```", "```ts\nimport {MatTableModule} from '@angular/material';\n\n@NgModule({\n imports: [MatTableModule]\n})\n```", "```ts\n// app/jedi.model.ts\nexport class interface Jedi {\n name: string;\n side: string;\n}\n\n// app/table.example.component.ts\n@Component({\n selector: 'example-table',\n template : `\n <div>\n <mat-table  #table  [dataSource]=\"tableSource\"  matSort>\n // header 'Name' <ng-container  matColumnDef=\"name\"> <mat-header-cell  *matHeaderCellDef  mat-sort-header> Name</mat-header-cell> <mat-cell  *matCellDef=\"let element\"> {{element.name}} \n </mat-cell>\n </ng-container>\n\n // header 'Side'\n <ng-container  matColumnDef=\"side\">\n <mat-header-cell  *matHeaderCellDef  mat-sort-header> Side </mat-header-cell>\n <mat-cell  *matCellDef=\"let element\"> {{element.side}} \n </mat-cell>\n </ng-container>\n\n <mat-header-row  *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n <mat-row  *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n </mat-table>\n <mat-paginator  #paginator  [pageSize]=\"2\"  [pageSizeOptions]=\"[1, 5, 10]\">\n </mat-paginator>\n</div>\n `\n})\nexport class ExampleTableComponent {\n jediSource:  Array<Jedi>; tableSource:  MatTableDataSource<Jedi>; displayedColumns:  string[];\n\n constructor() { this.displayedColumns  = ['name', 'side']; this.jediSource  = [{ name:  'Yoda', side:  'Good' }, {\n name:  'Darth', side:  'Evil' }, {\n name:  'Palpatine', side:  'Evil' }];\n\n   this.tableSource  =  new  MatTableDataSource<Jedi>(this.jediSource**);**\n } }\n\n```", "```ts\n<mat-table #table [dataSource]=\"tableSource\">\n // header 'Name'\n <ng-container  matColumnDef=\"name\"> <mat-header-cell *matHeaderCellDef> Name </mat-header-cell> <mat-cell *matCellDef=\"let element\"> {{element.name}} **</mat-cell>** </ng-container>\n\n // header 'Side'\n <ng-container  matColumnDef=\"side\"> <mat-header-cell *matHeaderCellDef> Side </mat-header-cell> <mat-cell *matCellDef=\"let element\"> {{element.side}} </mat-cell> </ng-container>\n\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row> <mat-row *matRowDef=\"let row; columns: displayedColumns;\"**></mat-row>** </mat-table>\n```", "```ts\nimport { MatSortModule } from  '@angular/material/sort'; @NgModule({\n imports: [MatSortModule]\n})\n```", "```ts\nimport { Component, ViewChild } from  '@angular/core'; import { MatTableDataSource, MatSort } from  \"@angular/material\"; \n@Component({\n  selector:  'table-demo', templateUrl:  './table.demo.component.html', styleUrls: ['./table.demo.component.css'] })\nexport  class  AppComponent {  @ViewChild(MatSort) sort:  MatSort**;** jediSource:  Array<Jedi>; tableSource:  MatTableDataSource<Jedi>; displayedColumns:  string[];\n\n constructor() { this.displayedColumns  = ['name', 'side']; this.jediSource  = [{ name:  'Yoda', side:  'Good' }, {\n name:  'Darth', side:  'Evil' },\n {\n name:  'Palpatine', side:  'Evil' }];\n\n this.tableSource  =  new  MatTableDataSource<Jedi>(this.jediSource);\n }\n\n  ngAfterViewInit() { this.tableSource.sort  =  this.sort; }\n```", "```ts\n<mat-table #table [dataSource]=\"tableSource\" **matSort**>\n // header 'Name'\n <ng-container  matColumnDef=\"name\"> <mat-header-cell *matHeaderCellDef mat-sort-header> Name </mat-header-cell> <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell**>** </ng-container>\n\n // header 'Side'\n <ng-container  matColumnDef=\"side\"> <mat-header-cell *matHeaderCellDef **mat-sort-header**> Side </mat-header-cell> <mat-cell *matCellDef=\"let element\"> {{element.side}} </mat-cell> </ng-container>\n\n <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row> </mat-table>\n```", "```ts\nimport {MatPaginatorModule} from '@angular/material/paginator';\n\n@NgModule({\n imports: [MatPaginatorModule]\n})\n```", "```ts\nimport { Component, ViewChild } from  '@angular/core'; import { MatTableDataSource, MatSort } from  \"@angular/material\"; \n@Component({\n  selector:  'table-demo', template: ` <mat-table #table [dataSource]=\"tableSource\" **matSort**>\n\n // header 'Name'\n <ng-container  matColumnDef=\"name\"> <mat-header-cell *matHeaderCellDef mat-sort-header> Name</mat-header-cell> <mat-cell *matCellDef=\"let element\"> {{element.name}} \n </mat-cell**>** </ng-container>\n\n // header 'Side'\n <ng-container  matColumnDef=\"side\"> <mat-header-cell *matHeaderCellDef **mat-sort-header**> Side</mat-header-cell> <mat-cell *matCellDef=\"let element\"> {{element.side}}</mat-cell> </ng-container>\n\n <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n </mat-table>\n `, styleUrls: ['./table.demo.component.css'] })\nexport  class  AppComponent { @ViewChild(MatSort) sort: MatSort;  **@ViewChild(MatPaginator) paginator: MatPaginator;** jediSource:  Array<Jedi>; tableSource:  MatTableDataSource<Jedi>; displayedColumns:  string[]; \n constructor() { this.displayedColumns  = ['name', 'side']; this.jediSource  = [{ name:  'Yoda', side:  'Good' }, {\n name:  'Darth', side:  'Evil' },\n {\n name:  'Palpatine', side:  'Evil' }];\n\n this.tableSource  =  new  MatTableDataSource<Jedi>(this.jediSource);\n }\n\n ngAfterViewInit() {\n this.tableSource.sort = this.sort; this.tableSource.paginator = paginator; }\n```", "```ts\n<div>\n <mat-table #table [dataSource]=\"tableSource\"  matSort>\n\n // header 'Name'\n <ng-container  matColumnDef=\"name\"> <mat-header-cell *matHeaderCellDef  mat-sort-header> Name</mat-header-cell> <mat-cell *matCellDef=\"let element\"> {{element.name}}</mat-cell> </ng-container>\n\n // header 'Side'\n <ng-container  matColumnDef=\"side\"> <mat-header-cell *matHeaderCellDef  mat-sort-header> Side</mat-header-cell> <mat-cell *matCellDef=\"let element\"> {{element.side}} </mat-cell> </ng-container>\n\n <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row> <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n </mat-table>\n\n <mat-paginator #paginator [pageSize]=\"2\" [pageSizeOptions]=\"[1, 5, 10]\">\n </mat-paginator>\n</div>  \n```"]