["```ts\n// Test suite\ndescribe('A math library', () => { \n // Test spec\n it('add(1,1,) should return 2', () => {\n // Test spec implementation goes here\n });\n});\n```", "```ts\n// Test suite\ndescribe('A math library', () => {\n // Test spec\n it('add(1,1) should return 2', () => {\n // Test assertion\n expect(add(1,1,)).toBe(2);\n });\n\n it('subtract(2,1)', () =>{\n //Test assertion\n expect(subtract(2,1)).toBe(1);\n })\n});\n```", "```ts\ndescribe('a Product service', () => {\n let productService;\n\n beforeEach(() => {\n productService = new ProductService(); \n });\n\n it('should return data', () => {\n let actual = productService.getData();\n assert(actual.length).toBe(1);\n });\n\n afterEach(() => {\n productService = null; \n });\n});\n```", "```ts\nng new AngularTestDemo\n// go make coffee :)\ncd AngularTestDemo\nng serve\n```", "```ts\napp.component.ts\napp.component.spec.ts\n```", "```ts\nimport { TestBed, async } from  '@angular/core/testing'; import { AppComponent } from  './app.component'; \ndescribe('AppComponent', () => {  beforeEach(async(() => { TestBed.configureTestingModule({ declarations: [ AppComponent\n ],\n }).compileComponents();\n }));\n\n it('should create the app', async(() => { const  fixture  =  TestBed.createComponent(AppComponent); const  app  =  fixture.debugElement.componentInstance; expect(app).toBeTruthy();\n }));\n\n it(`should have as title 'app works!'`, async(() => { const  fixture  =  TestBed.createComponent(AppComponent); const  app  =  fixture.debugElement.componentInstance; expect(app.title).toEqual('app works!'); }));\n\n it('should render title in a h1 tag', async(() => { const  fixture  =  TestBed.createComponent(AppComponent); fixture.detectChanges(); const  compiled  =  fixture.debugElement.nativeElement;\n const actual = compiled.querySelector('h1').textContent; expect(actual).toContain('app works!');\n  }));\n});\n```", "```ts\nbeforeEach(async(() => { TestBed.configureTestingModule({ declarations: [ AppComponent\n ],\n }).compileComponents(); }));\n```", "```ts\nit('should create the app', async(() => {\n&gt; const  fixture  =  TestBed.createComponent(AppComponent); const  app  =  fixture.componentInstance; expect(app).toBeTruthy(); }));\n```", "```ts\nconst  app  =  fixture.debugElement.componentInstance;\n```", "```ts\n@Component({})\nexport class AppComponent {\n title: string;\n}\n```", "```ts\nit(`should have as title 'app works!'`, async(() => { const  fixture  =  TestBed.createComponent(AppComponent); const  app  =  fixture.debugElement.componentInstance; expect(app.title).toEqual('app works!'); }));\n```", "```ts\n@Component({})\nexport class AppComponent {\n title: string = 'app works!'\n}\n```", "```ts\nexpect(app.title).toEqual('app works!');\n```", "```ts\n@Component({})\nexport class AppComponent {\n title: string;\n description: string;\n constructor() {\n this.title = 'app works'\n    this.description ='description';\n }\n}\n```", "```ts\nit(`should have as title 'app works!'`, async(() => { const  fixture  =  TestBed.createComponent(AppComponent); const  app  =  fixture.debugElement.componentInstance; expect(app.title).toEqual('app works!');\n   **expect(app.description).toEqual('description');** }));\n```", "```ts\nnpm test\n```", "```ts\nit('should render title in a h1 tag', async(() => { const  fixture  =  TestBed.createComponent(AppComponent); fixture.detectChanges(); const  compiled  =  fixture.debugElement.nativeElement; expect(compiled.querySelector('h1').textContent).toContain('app works!'); }));\n```", "```ts\n@Component({})\nexport class ExampleComponent {\n constructor(dependency:Dependency) {}\n}\n```", "```ts\nTestBed.configureTestingModule({\n declarations: [ExampleComponent]\n providers: [{ \n provide: DependencyService, \n useClass: DependencyServiceStub \n }]\n});\n```", "```ts\nclass DependencyServiceStub {\n getData() { return 'stub'; }\n}\n```", "```ts\nimport { Component } from  '@angular/core'; import { DependencyService } from  \"./dependency.service\"; \n@Component({\n selector:  'example',\n template: `\n <div>{{ title }}</div>\n `\n})\nexport  class  ExampleComponent { title:  string; \n constructor(private  dependency:  DependencyService) {\n this.title  =  this.dependency.getData();\n }\n}\n```", "```ts\nit(`should have as title 'stub'`, async(() => { const  fixture  =  TestBed.createComponent(AppComponent); const  app  =  fixture.debugElement.componentInstance; expect(app.title).toEqual('stub'**);** }));\n```", "```ts\nbeforeEach(() => {\n TestBed.configureTestingModule({\n declarations: [ExampleComponent],\n providers: [DependencyService]\n });\n\n dependency = TestBed.get(DependencyService);\n\n spy = spyOn( dependency,'getData');\n fixture = TestBed.createComponent(ExampleComponent);\n})\n\n```", "```ts\nspyOn(dependency,'getData').and.returnValue('spy value');\n```", "```ts\nit('test our spy dependency', () => {\n var component = fixture.debugElement.componentInstance;\n expect(component.title).toBe('spy value');\n});\n```", "```ts\nit('test our spy dependency', () => {\n var component = fixture.debugElement.componentInstance;\n expect(spy.calls.any()).toBeTruthy();\n})\n```", "```ts\nexport class AsyncDependencyService {\n getData(): Promise<string> {\n return new Promise((resolve, reject) => {\n setTimeout(() => { resolve('data') }, 3000);\n })\n }\n}\n```", "```ts\nspy = spyOn(dependency,'getData')\n.and.returnValue(Promise.resolve('spy data'));\n```", "```ts\nimport { Component, OnInit } from  '@angular/core'; import { AsyncDependencyService } from  \"./async.dependency.service\"; @Component({\n selector:  'async-example',\n template: `\n <div>{{ title }}</div>\n `\n})\nexport  class  AsyncExampleComponent { title:  string; \n constructor(private  service:  AsyncDependencyService) {\n this.service.getData().then(data  =>  this.title  =  data);\n }\n}\n```", "```ts\nit('async test', async() => {\n // the test body\n})\n```", "```ts\nimport { TestBed } from  \"@angular/core/testing\"; import { AsyncExampleComponent } from  \"./async.example.component\"; import { AsyncDependencyService } from  \"./async.dependency.service\"; \ndescribe('test an component with an async service', () => { let  fixture;\n\n beforeEach(() => { TestBed.configureTestingModule({\n declarations: [AsyncExampleComponent],\n providers: [AsyncDependencyService]\n });\n\n fixture  =  TestBed.createComponent(AsyncExampleComponent);\n });\n\n it('should contain async data', async () => { const  component  =  fixture.componentInstance;\n    fixture.whenStable.then(() => {\n fixture.detectChanges();\n expect(component.title).toBe('async data');\n });\n });\n});\n```", "```ts\nit('async test', fakeAsync() => {\n let component = fixture.componentInstance;\n fixture.detectChanges();\n fixture.tick();\n expect(component.title).toBe('spy data');\n});\n```", "```ts\nimport { Pipe, PipeTransform } from  '@angular/core'; \n@Pipe({\n  name:  'formattedpipe' })\nexport  class  FormattedPipe  implements  PipeTransform { transform(value:  any, ...args:  any[]):  any { return  \"banana\"  +  value; }\n}\n```", "```ts\nimport FormattedTimePipe from './formatted-time.pipe';\nimport { TestBed } from  '@angular/core/testing';\n\ndescribe('A formatted time pipe' , () => {\n let fixture;\n beforeEach(() => {\n fixture = new FormattedTimePipe();\n }) // Specs with assertions\n  it('should expose a transform() method', () => {\n expect(typeof formattedTimePipe.transform).toEqual('function');\n });\n\n  it('should produce expected result', () => {\n expect(fixture.transform( 'val' )).toBe('bananaval');\n })\n});\n```", "```ts\nimport { HttpClient } from  '@angular/common/http';  import { Injectable } from  '@angular/core'; @Injectable() export  class  JediService { apiUrl:  string  =  'something'; constructor(private  http:  HttpClient) {} getJedis() { return  this.http.get(`/api/jedis`); }\n}\n```", "```ts\nimport { \n HttpClientTestingModule, \n HttpTestingController \n} from '@angular/common/http/testing';\nimport { JediService } from  './jedi.service'; describe('testing our service', () => {\n beforeEach(() => {\n TestBed.configureTestingModule({\n     imports: [HttpClientTestingModule],\n providers: [JediService] \n });\n });\n});\n```", "```ts\nit('testing getJedis() and expect a list of jedis back', () => {\n // get an instance of a Jedi service and HttpTestingController\n  const jediService = TestBed.get(JediService);\n  const http = TestBed.get(HttpTestingController);\n\n // define our mock data\n const  expected  = [{ name:  'Luke' }, { name:  'Darth Vader' }]; let  actual  = [];\n\n // we actively call getJedis() on jediService, \n // we will set that response to our 'actual' variable jediService.getJedis().subscribe( data  => {  expect(data).toEqual(expected**);**  });\n\n /* \n when someone calls URL /api/jedis \n we will resolve that asynchronous operation \n with .flush() while also answering with \n 'expected' variable as response data\n */\n http.expectOne('/api/jedis').flush(expected);  });\n```", "```ts\nimport { HttpTestingController, \n HttpClientTestingModule } from  '@angular/common/http/testing/'; import { TestBed } from '@angular/core/testing'; import { JediService } from  './jedi-service';    describe('a jedi service', () => {  beforeEach(() =>  TestBed.configureTestingModule({ imports: [HttpClientTestingModule], providers: [JediService] }));\n\n it('should list the jedis', () => { const  jediService  =  TestBed.get(JediService); const  http  =  TestBed.get(HttpTestingController); // fake response\n const  expected  = [{ name:  'Luke' }, { name:  'Darth Vader' }]; let  actual  = []; jediService.getJedis().subscribe( data  => { expect(data).toEqual(expected); });\n\n http.expectOne('/api/jedis').flush(expected);  });\n});\n```", "```ts\n@Component({\n selector : 'jedi-detail'\n template : `\n <div class=\"jedi\" \n (click)=\"switchSide.emit(jedi)\">\n {{ jedi.name }} {{ jedi.side }}\n </div>\n `\n})\nexport class JediComponent {\n @Input() jedi:Jedi;\n @Output() switchSide = new EventEmitter<Jedi>(); \n}\n```", "```ts\ndescribe('A Jedi detail component', () => {\n it('should display the jedi name Luke when input is assigned a Jedi object', () => {\n const component = fixture.debugElement.componentInstance;\n component.jedi = new Jedi(1, 'Luke', 'Light');\n fixture.detectChanges();\n expect(component.jedi.name).toBe('Luke');\n });\n});\n\n```", "```ts\nconst elem = fixture.debugElement.query(By.css('.jedi'));\nelem.triggerEventHandler('click', null);\n```", "```ts\nit('should invoke switchSide with the correct Jedi instance, () => {\n let selectedJedi;\n // emitting data\n component.switchSide.subscribe(data => {\n expect(data.name).toBe('Luke');\n });\n const elem = fixture.debugElement.query(By.css('.jedi'));\n elem.triggerEventHandler('click', null);\n})\n```", "```ts\n@Component({})\nexport class ExampleComponent {\n constructor(private router: Router) {}\n\n back() {\n this.router.navigateByUrl('/list'); \n }\n}\n```", "```ts\ndescribe('Testing routing in a component using a Stub', () => {\n let component, fixture;\n\n class RouterStub {\n navigateByUrl() {}\n } \n\n beforeEach(() => {\n TestBed.configureTestingModule({\n declarations: [ExampleRoutingComponent],\n providers: [{\n // replace 'Router' with our Stub\n        provide: Router, useClass: RouterStub\n }]\n }).compileComponents();\n })\n\n beforeEach(() => {\n fixture  =  TestBed.createComponent(Component); component  =  fixture.debugElement.componentInstance;\n })\n // ... test to be defined here\n}\n\n```", "```ts\nimport { inject } from '@angular/core/testing';\n\nit('test back() method', inject([Router], router: Router) => {\n const spy = spyOn(router, 'navigateByUrl');\n // ... more to come here\n})\n```", "```ts\nimport { inject } from '@angular/core/testing';\n\nit('test back() method', inject([Router], (router: Router)) => {\n const spy = spyOn(router, 'navigateByUrl');\n // invoking  our back method that should call the spy in turn\n component.back();\n expect(spy.calls.any()).toBe(true);\n}))\n```", "```ts\ndescribe('Testing routing in a component', () => {\n class RouterStub {\n navigateByUrl() {}\n }\n\n beforeEach(() => {\n TestBed.configureTestingModule({\n providers: [{\n provide: Router, useClass: RouterStub\n }]\n }).compileComponents();\n });\n\n beforeEach(() => {\n fixture  =  TestBed.createComponent(Component); component  =  fixture.debugElement.componentInstance;\n });\n\n it('should call navigateToUrl with argument /list', () => {\n spyOn(router, 'navigateByUrl');\n /* \n invoking our back() method \n that should call the spy in turn\n */\n component.back();\n expect(router.navigateByUrl).toHaveBeenCalledWithArgs('/list');\n })\n})\n```", "```ts\nimport { Router } from  '@angular/router'; import { Component, OnInit } from  '@angular/core'; \n@Component({\n  selector:  'list-component', template : `` })\nexport  class  ListComponent {\n constructor(private  router:  Router) {}\n\n goToDetail() { this.router.navigateByUrl('detail/1'); }  }  \n```", "```ts\nconst  appRoutes:  Routes  = [ { path:  'detail/:id', component:  DetailComponent } ];\n\n@NgModule({\n ...\n imports: [ BrowserModule, FormsModule, HttpClientModule, RouterModule.forRoot(appRoutes**),** TestModule\n ],\n ...  })\nexport  class  AppModule { }\n```", "```ts\nbeforeEach(() => { TestBed.configureTestingModule({ imports: [ RouterTestingModule.withRoutes([{ \n path:  'detail/:id', \n component:  DetailComponent }]) \n ], declarations: [ListComponent, DetailComponent] });\n});\n```", "```ts\nit('should navigate to /detail/1 when invoking gotoDetail()', async() => { let  fixture  =  TestBed.createComponent(ListComponent); let  router =  TestBed.get(Router); let  component  =  fixture.debugElement.componentInstance;\n  fixture.whenStable().then(() => { expect(router.url).toBe('/detail/1');\n });\n  **component.goToDetail();** }) \n```", "```ts\ncomponent.goToDetail();\n```", "```ts\nexpect(router.url).toBe('/detail/1');\n```", "```ts\nimport { ActivatedRoute, Router } from  '@angular/router'; import { Component, OnInit } from  '@angular/core'; import { Observable } from  'rxjs/Rx'; import { Jedi } from  './jedi.model'; import { JediService } from  './jedi.service';   @Component({\n  selector:  'detail-component', templateUrl:  'detail.component.html' })\nexport  class ExampleRoutingParamsComponent{\n jedi: Jedi; constructor( private  router:  Router, private  route:  ActivatedRoute, private  jediService  :  JediService ) {\n route.paramMap.subscribe( p  => { const  id  =  p.get('id'); jediService.getJedi( id ).subscribe( data => this.jedi = data ); });\n }  }  \n```", "```ts\nroute.paramMap.subscribe( p  => { const  id  =  p.get('id'); jediService.getJedi(id).subscribe( data => this.jedi = data ) })\n```", "```ts\nimport  { convertToParamMap  }  from  '@angular/router';\n\nclass ActivatedRouteStub {\n private subject: Subject<any>;\n\n constructor() {\n this.subject = new Subject();\n }\n\n sendParameters( params : {}) {\n this.subject.next(convertToParamMap(params)); // emitting data\n }\n\n get paramMap() {\n return this.subject.asObservable();\n }\n}\n```", "```ts\ndescribe('A detail component', () => {\n let fixture, component, activatedRoute;\n\n beforeEach(() => {\n TestBed.configureTestingModule({\n      providers: [{ \n provide: ActivatedRoute, \n useClass: ActivatedRouteStub \n }, JediService] \n })\n })\n})\n```", "```ts\n@Component({})\nexport class ExampleRoutingParamsComponent {\n // will inject ActivatedRouteStub \n constructor(activatedRoute: ActivatedRoute) {} \n}\n```", "```ts\nbeforeEach(() => {\n fixture = TestBed.createComponent(ExampleRoutingParamsComponent);\n component  =  fixture.debugElement.componentInstance; activatedRoute  =  TestBed.get(ActivatedRoute); })\n```", "```ts\nit('should execute the ExampleRoutingParamsComponent', () => {\n // listen for the router parameter\n activatedRoute.paramMap.subscribe(para  => { const  id  =  para.get('id');\n // assert that the correct routing parameter is being emitted expect(id).toBe(1);\n });\n // send the route parameter \n activatedRoute.sendParameters({ id :  1 }); })\n```", "```ts\n@Component({})\nexport class ExampleRoutingParamsComponent {\n constructor( activatedRoute: ActivatedRoute ) {\n activatedRoute.paramMap.subscribe( paramMap => {\n const id = paramMap.get('id');\n // TODO call service with id parameter\n })\n }\n}\n```", "```ts\n@Component({})\nexport class ExampleRoutingParamsComponent implements OnInit {\n jedi: Jedi;\n constructor(\n private activatedRoute: ActivatedRoute, \n private jediService: JediService ) {}\n\n ngOnInit() { \n this.activatedRoute.paramMap.subscribe(route => {\n const id = route.get('id')\n this.jediService.getJedi(id).subscribe(data => this.jedi = data);\n });\n }\n}\n```", "```ts\nit('should call the Http service with link /api/jedis/1', () => {\n .. rest of the test remains the same\n\n const  jediService  =  TestBed.get(JediService); const  http  =  TestBed.get(HttpTestingController);\n\n  // fake response\n const  expected  = { name:  'Luke', id:  1 }; let  actual  = {}; http.expectOne('/api/jedis/1').flush(expected);\n\n ... rest of the test remains the same })\n```", "```ts\nimport { Subject } from  'rxjs/Rx'; import { ActivatedRoute, convertToParamMap } from  '@angular/router'; import { TestBed } from  '@angular/core/testing'; import { HttpClientTestingModule, \n HttpTestingController } from  \"@angular/common/http/testing\"; import { JediService } from  './jedi-service'; import { ExampleRoutingParamsComponent } from  './example.routing.params.component'; class  ActivatedRouteStub {  subject:  Subject<any>; constructor() { this.subject  =  new  Subject();\n }\n\n sendParameters(params: {}) {\n const  paramMap  =  convertToParamMap(params);  this.subject.next( paramMap ); }\n\n get  paramMap() { return  this.subject.asObservable(); }\n}\n\ndescribe('A detail component', () => { let  activatedRoute, fixture, component; beforeEach(async() => { TestBed.configureTestingModule({ imports: [HttpClientTestingModule ], declarations: [ ExampleRoutingParamsComponent ], providers: [\n { provide:  ActivatedRoute, useClass:  ActivatedRouteStub }, \n JediService ] });\n })\n\n beforeEach(() => { fixture  =  TestBed.createComponent(ExampleRoutingParamsComponent); component  =  fixture.componentInstance; activatedRoute  =  TestBed.get(ActivatedRoute); });\n\n it('should call the Http service with the route /api/jedis/1 and should display the jedi name corresponding to the id number in the route', async() => { activatedRoute.paramMap.subscribe((para) => { const  id  =  para.get('id'); expect(id).toBe(1); });\n\n activatedRoute.sendParameters({ id :  1 }); const  http  =  TestBed.get(HttpTestingController); // fake response\n const  expected  = { name:  'Luke', id:  1 }; let  actual  = {}; http.expectOne('/api/jedis/1').flush(expected); fixture.detectChanges(); fixture.whenStable().then(() => { expect(component.jedi.name).toBe('Luke'); });\n });\n});\n```", "```ts\n@Directive({\n selector: 'some-directive'\n})\nexport class SomeDirective {\n someMethod() {}\n}\n```", "```ts\nimport { Directive, \n ElementRef, \n HostListener } from  '@angular/core'; \n@Directive({ selector:  '[banana]' }) export  class  BananaDirective { constructor(private  elementRef:  ElementRef) { } @HostListener('mouseover') onMouseOver() { this.elementRef.nativeElement.style.color  =  'yellow'; }\n\n @HostListener('mouseout') onMouseOut() { this.elementRef.nativeElement.style.color  =  'inherit';\n }\n}\n```", "```ts\nimport { Component } from  '@angular/core'; @Component({\n  selector:  'banana', template: ` <p  class=\"banana\"  banana>hover me</p> `\n})\nexport  class  BananaComponent  {}  \n```", "```ts\nimport { By } from  '@angular/platform-browser'; import { TestBed } from  \"@angular/core/testing\"; import { BananaComponent } from  './banana.component'; import { BananaDirective } from  './banana.directive'; describe('A banana directive', () => {  beforeEach(() => { TestBed.configureTestingModule({ declarations: [BananaDirective, BananaComponent] }).compileComponents(); });\n\n it('should set color property to yellow when mouseover event happens', () => { const  fixture  =  TestBed.createComponent(BananaComponent); const  element  =  fixture.debugElement.query(By.css('.banana')); element.triggerEventHandler('mouseover', null); fixture.detectChanges(); expect(element.nativeElement.style.color).toBe('yellow'); });\n})\n```", "```ts\n  beforeEach(() => { TestBed.configureTestingModule({ declarations: [ BananaDirective, BananaComponent ] }).compileComponents(); });\n```", "```ts\nexpect(element.nativeElement.style.color).toBe('yellow');\n```"]