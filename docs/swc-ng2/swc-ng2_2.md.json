["```ts\n@Directive({\n  selector: '[tooltip]'\n})\nexport class Tooltip {\n  private overlay: Overlay;\n  @Input()\n  private tooltip: string;\n  constructor(private el: ElementRef, manager: OverlayManager) {\n    this.overlay = manager.get();\n  }\n  @HostListener('mouseenter')\n  onMouseEnter() {\n    this.overlay.open(this.el.nativeElement, this.tooltip);\n  }\n  @HostListener('mouseleave')\n  onMouseLeave() {\n    this.overlay.close();\n  }\n}\n```", "```ts\n<div tooltip=\"42\">Tell me the answer!</div>\n```", "```ts\nvar Tooltip = ng.core.Directive({\n  selector: '[tooltip]',\n  inputs: ['tooltip'],\n  host: {\n    '(mouseenter)': 'onMouseEnter()',\n    '(mouseleave)': 'onMouseLeave()'\n  }\n})\n.Class({\n  constructor: [ng.core.ElementRef, Overlay, function (tooltip, el, manager) {\n    this.el = el;\n    this.overlay = manager.get();\n  }],\n  onMouseEnter() {\n    this.overlay.open(this.el.nativeElement, this.tooltip);\n  },\n  onMouseLeave() {\n    this.overlay.close();\n  }\n});\n```", "```ts\nComposite c1 = new Composite();\nComposite c2 = new Composite();\nComposite c3 = new Composite();\n\nc1.components.push(c2);\nc1.components.push(c3);\n\nLeaf l1 = new Leaf();\nLeaf l2 = new Leaf();\nLeaf l3 = new Leaf();\n\nc2.components.push(l1);\nc2.components.push(l2);\n\nc3.components.push(l3);\n```", "```ts\n@Component({\n  selector: 'hello-world',\n  template: '<h1>Hello, {{this.target}}!</h1>'\n})\nclass HelloWorld {\n  target: string;\n  constructor() {\n    this.target = 'world';\n  }\n}\n```", "```ts\n<hello-world></hello-world>\n```", "```ts\nvar HelloWorld = ng.core.\n  Component({\n    selector: 'hello-world',\n    template: '<h1>Hello, {{target}}!</h1>'\n  })\n  .Class({\n    constructor: function () {\n      this.target = 'world';\n    }\n  });\n```", "```ts\n{{expression | decimal | currency}}\n```", "```ts\n@Pipe({ name: 'lowercase1' })\nclass LowerCasePipe1 implements PipeTransform {\n  transform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw new Error('Invalid pipe value', value);\n    }\n    return value.toLowerCase();\n  }\n}\n```", "```ts\nvar LowercasePipe1 = ng.core.\n  Pipe({\n    name: 'lowercase'\n  })\n  .Class({\n    constructor: function () {},\n    transform: function (value) {\n      if (!value) return value;\n      if (typeof value === 'string') {\n        throw new Error('Invalid pipe value', value);\n      }\n      return value.toLowerCase();\n    }\n  });\n```", "```ts\n@Component({\n  selector: 'app',\n  pipes: [LowercasePipe1],\n  template: '<h1>{{\"SAMPLE\" | lowercase1}}</h1>'\n})\nclass App {}\n```", "```ts\nvar App = ng.core.Component({\n  selector: 'app',\n  pipes: [LowercasePipe1],\n  template: '<h1>{{\"SAMPLE\" | lowercase1}}</h1>'\n})\n.Class({\n  constructor: function () {}\n});\n```", "```ts\n   <app></app>\n```", "```ts\nclass User extends EventEmitter {\n  private name: string;\n  setName(name: string) {\n    this.name = name;\n    this.emit('change');\n\t}\n  getName(): string {\n    return this.name;}\n}\n```", "```ts\nclass View {\n  constructor(user: User, el: Element /* a DOM element */) {\n    el.innerHTML = user.getName();\n\t}\n}\n```", "```ts\nlet user = new User();\nuser.setName('foo');\nlet view = new View(user, document.getElementById('label'));\n```", "```ts\nclass View {\n  constructor(user:User, el:any /* a DOM element */) {\n    el.innerHTML = user.getName();\n    user.on('change', () => {\n      el.innerHTML = user.getName();\n\t  });\n  }\n}\n```", "```ts\nfunction MainCtrl($scope) {\n  $scope.label = 'Hello world!';\n}\n\n<body ng-app ng-controller=\"MainCtrl\">\n  {{label}}\n</body>\n```", "```ts\n<body ng-controller=\"MainCtrl\">\n  <input ng-model=\"label\">\n  {{label}}\n</body>\n```", "```ts\n// The Factory method\nmodule.factory('ServiceName', function (dep1, dep2, \u2026) {\n  return {\n    // public API\n  };\n});\n\n// The Service method\nmodule.service('ServiceName', function (dep1, dep2, \u2026) {\n  // public API\n  this.publicProp = val;\n});\n\n// The Provider method\nmodule.provider('ServiceName', function () {\n  return {\n    $get: function (dep1, dep2, \u2026) {\n      return {\n        // public API\n      };\n    }\n  };\n});\n```", "```ts\nfunction UserTransactions(id) {\n  this.userId = id;\n}\nUserTransactions.prototype.makeTransaction = function (amount) {\n  // method logic\n};\n\nmodule.controller('MainCtrl', function () {\n  this.submitClick = function () {\n    new UserTransactions(this.userId).makeTransaction(this.amount);\n  };\n});\n```", "```ts\nimport {Inject, Injectable} from 'angular2/core';\n\n@Injectable()\nclass HttpService {\n  constructor() { /* \u2026 */ }\n}\n\n@Injectable()\nclass User {\n  constructor(private service: HttpService) {}\n  save() {\n    return this.service.post('/users')\n      .then(res => {\n        this.id = res.id;\n        return this;\n      });\n  }\n}\n```", "```ts\nvar HttpService = ng.core.Class({\n  constructor: function () {}\n});\nvar User = ng.core.Class({\n  constructor: [HttpService, function (service) {\n    this.service = service;\n  }],\n  save: function () {\n    return this.service.post('/users')\n      .then(function (res) {\n        this.id = res.id;\n        return this;\n      });\n  }\n});\n```", "```ts\nimport {Component} from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\nimport {RouteConfig, ROUTER_DIRECTIVES, ROUTER_BINDINGS} from 'angular2/router';\n\nimport {Home} from './components/home/home';\nimport {About} from './components/about/about';\n\n@Component({\n  selector: 'app',\n  templateUrl: './app.html',\n  directives: [ROUTER_DIRECTIVES]\n})\n@RouteConfig([\n  { path: '/', component: Home, name: 'home' },\n  { path: '/about', component: About, name: 'about' }\n])\nclass App {}\n\nbootstrap(App, [ROUTER_PROVIDERS]);\n```"]