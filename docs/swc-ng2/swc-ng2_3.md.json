["```ts\n**$ npm \u2013v**\n\n```", "```ts\n**$ npm install -g typescript@1.8**\n\n```", "```ts\n**$ tsc \u2013v**\n**Version 1.8.0**\n\n```", "```ts\n// ch3/hello-world/hello-world.ts\nconsole.log('Hello world!');\n```", "```ts\n**$ tsc hello.ts**\n\n```", "```ts\n**$ node hello.js**\n\n```", "```ts\n**$ npm install -t ts-node**\n\n```", "```ts\n**$ ts-node hello.ts**\n\n```", "```ts\n// ch3/arrow-functions/simple-reduce.ts\nvar result = [1, 2, 3].reduce(function (total, current) {\n  return total + current;\n}, 0); // 6\n```", "```ts\n// ch3/arrow-functions/arrow-functions.ts\n\n// example 1\nvar result = [1, 2, 3]\n  .reduce((total, current) => total + current, 0);\n\nconsole.log(result);\n\n// example 2\nvar even = [3, 1, 56, 7].filter(el => !(el % 2));\n\nconsole.log(even);\n\n// example 3\nvar sorted = data.sort((a, b) => {\n  var diff = a.price - b.price;\n  if (diff !== 0) {\n    return diff;\n  }\n  return a.total - b.total;\n});\n```", "```ts\n// ch3/arrow-functions/context-demo.ts\nfunction MyComponent() {\n  this.age = 42;\n  setTimeout(() => {\n    this.age += 1;\n    console.log(this.age);\n  }, 100);\n}\nnew MyComponent(); // 43 in 100ms.\n```", "```ts\n// ch3/es6-classes/sample-classes.ts\n\nclass Human {\n  static totalPeople = 0;\n  _name; // ES2016 property declaration syntax\n  constructor(name) {\n    this._name = name;\n    Human.totalPeople += 1;\n  }\n  get name() {\n    return this._name;\n  }\n  set name(val) {\n    this._name = val;\n  }\n  talk() {\n    return `Hi, I'm ${this.name}!`;\n  }\n}\n\nclass Developer extends Human {\n  _languages; // ES2016 property declaration syntax\n  constructor(name, languages) {\n    super(name);\n    this._languages = languages;\n  }\n  get languages() {\n    return this._languages;\n  }\n  talk() {\n    return `${super.talk()} And I know\n${this.languages.join(',')}.`;\n  }\n}\n```", "```ts\nvar human = new Human(\"foobar\");\nvar dev = new Developer(\"bar\", [\"JavaScript\"]);\nconsole.log(dev.talk());\n```", "```ts\n**$ ts-node sample-classes.ts**\n\n```", "```ts\n// ch3/let/var.ts\n\nvar fns = [];\nfor (var i = 0; i < 5; i += 1) {\n  fns.push(function() {\n    console.log(i);\n  })\n}\nfns.forEach(fn => fn());\n```", "```ts\n// ch3/let/let.ts\n\nvar fns = [];\nfor (let i = 0; i < 5; i += 1) {\n  fns.push(function() {\n    console.log(i);\n  })\n}\nfns.forEach(fn => fn());\n```", "```ts\n// ch3/decorators/nonenumerable.ts\n\nclass Person {\n  @nonenumerable\n  get kidCount() {\n    return 42;\n  }\n}\n\nfunction nonenumerable(target, name, descriptor) {\n  descriptor.enumerable = false;\n  return descriptor;\n}\n\nvar person = new Person();\n\nfor (let prop in person) {\n  console.log(prop);\n}\n```", "```ts\ndescriptor = nonenumerable (Person.prototype, 'kidCount', descriptor) || descriptor;\nObject.defineProperty(Person.prototype, 'kidCount', descriptor);\n```", "```ts\n@Component({\n  selector: 'app',\n  providers: [NamesList],\n  templateUrl: './app.html',\n  directives: [RouterOutlet, RouterLink]\n})\n@RouteConfig([\n  { path: '/', component: Home, name: 'home' },\n  { path: '/about', component: About, name: 'about' }\n])\nexport class App {}\n```", "```ts\nfunction Component(config) {\n  // validate properties\n  return (componentCtrl) => {\n    // apply decorator\n  };\n}\n```", "```ts\n// ch3/modules/math.ts\n\nexport function square(x) {\n  return Math.pow(x, 2);\n};\nexport function log10(x) {\n  return Math.log10(x);\n};\nexport const PI = Math.PI;\n```", "```ts\n// ch3/modules/math2.ts\n\nfunction square(x) {\n  return Math.pow(x, 2);\n};\nfunction log10(x) {\n  return Math.log10(x);\n};\nconst PI = Math.PI;\nexport { square, log10, PI };\n```", "```ts\n// ch3/modules/app.ts\n\nimport {square, log10} from './math';\nconsole.log(square(2)); // 4\nconsole.log(log10(10)); // 1\n```", "```ts\nimport {bootstrap as initialize} from 'angular2/platform/browser';\n```", "```ts\n// ch3/modules/app2.ts\n\nimport * as math from './math';\nconsole.log(math.square(2)); // 4\nconsole.log(math.log10(10)); // 1\nconsole.log(math.PI); // 3.141592653589793\n```", "```ts\n// ch3/modules/math3.ts\n\nexport default function cube(x) {\n  return Math.pow(x, 3);\n};\nexport function square(x) {\n  return Math.pow(x, 2);\n};\n```", "```ts\n// ch3/modules/app3.ts\n\nimport cube from './math3';\nconsole.log(cube(3)); // 27\n```", "```ts\n// ch3/modules/app4.ts\n\nimport cube, { square } from './math3';\nconsole.log(square(2)); // 4\nconsole.log(cube(3)); // 27\n```", "```ts\n// ch3/modules/app5.ts\n\nimport { default as cube } from './math3';\nconsole.log(cube(3)); // 27\n```", "```ts\nimport { square } from './math';\nexport function main() {\n  console.log(square(2)); // 4\n}\n```", "```ts\nSystem.import('./app')\n  .then(app => {\n    app.main();\n  })\n  .catch(error => {\n    console.log('Terrible error happened', error);\n  });\n```", "```ts\nlet foo: number = 42;\n```", "```ts\nlet foo: number = 42;\nfoo = '42';\n```", "```ts\n$ tsc basic.ts\nbasic.ts(2,1): error TS2322: Type 'string' is not assignable to type 'number'.\n```", "```ts\nlet foo = 42;\nfoo = '42';\n```", "```ts\nlet foo: any;\nfoo = {};\nfoo = 'bar ';\nfoo += 42;\nconsole.log(foo); // \"bar 42\"\n```", "```ts\nenum STATES {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTING,\n  WAITING,\n  DISCONNECTED\t\n};\n```", "```ts\nvar STATES;\n(function (STATES) {\n    STATES[STATES[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    STATES[STATES[\"CONNECTED\"] = 1] = \"CONNECTED\";\n    STATES[STATES[\"DISCONNECTING\"] = 2] = \"DISCONNECTING\";\n    STATES[STATES[\"WAITING\"] = 3] = \"WAITING\";\n    STATES[STATES[\"DISCONNECTED\"] = 4] = \"DISCONNECTED\";\n})(STATES || (STATES = {}));\n```", "```ts\nif (this.state === STATES.CONNECTING) {\n  console.log('The system is connecting');\n}\n```", "```ts\nlet primes: number[] = [];\nprimes.push(2);\nprimes.push(3);\n```", "```ts\nlet randomItems: any[] = [];\nrandomItems.push(1);\nrandomItems.push(\"foo\");\nrandomItems.push([]);\nrandomItems.push({});\n```", "```ts\nlet randomItems: any[] = [];\nrandomItems.push(\"foo\");\nrandomItems.push(\"bar\");\nrandomItems.join(''); // foobar\nrandomItems.splice(1, 0, \"baz\");\nrandomItems.join(''); // foobazbar\n```", "```ts\nlet randomItems: any[] = [];\nrandomItems.push(\"foo\");\nrandomItems.push(\"bar\");\nrandomItems[0] === \"foo\"\nrandomItems[1] === \"bar\"\n```", "```ts\n// function expression\nvar isPrime = function (n) {\n  // body\n};\n// function declaration\nfunction isPrime(n) {\n  // body\n};\n```", "```ts\nvar isPrime = n => {\n  // body\n};\n```", "```ts\nlet variable: (arg1: type1, arg2: type2, \u2026, argn: typen) => returnType\n```", "```ts\nlet isPrime: (n: number) => boolean = n => {\n  // body\n};\n```", "```ts\nfunction isPrime(n: number): boolean {\n  // body\n}\n```", "```ts\nlet math = {\n  squareRoot(n: number): number {\n    // \u2026\n  },\n};\n```", "```ts\nlet person = {\n  _name: null,\n  setName(name: string): void {\n    this._name = name;\n  }\n};\n```", "```ts\nclass Human {\n  static totalPeople = 0;\n  _name: string;\n  constructor(name) {\n    this._name = name;\n    Human.totalPeople += 1;\n  }\n  get name() {\n    return this._name;\n  }\n  set name(val) {\n    this._name = val;\n  }\n  talk() {\n    return `Hi, I'm ${this.name}!`;\n  }\n}\n```", "```ts\nlet human = new Human('foo');\nconsole.log(human._name);\n```", "```ts\nclass Human {\n  static totalPeople = 0;\n  private _name: string;\n  // \u2026\n}\n```", "```ts\nclass Human {\n  static totalPeople = 0;\n  constructor(protected name: string, private age: number) {\n    Human.totalPeople += 1;\n  }\n  talk() {\n    return `Hi, I'm ${this.name}!`;\n  }\n}\n\nclass Developer extends Human {\n  constructor(name: string, private languages: string[], age: number) {\n    super(name, age);\n  }\n  talk() {\n    return `${super.talk()} And I know ${this.languages.join(', ')}.`;\n  }\n}\n```", "```ts\nlet dev = new Developer(\"foo\", [\"JavaScript\", \"Go\"], 42);\ndev.languages = [\"Java\"];\n```", "```ts\nlet human = new Human(\"foo\", 42);\nhuman.age = 42;\nhuman.name = \"bar\";\n```", "```ts\nclass Human {\n  constructor(private name: string) {}\n}\n```", "```ts\nvar Human = (function () {\n    function Human(name) {\n        this.name = name;\n    }\n    return Human;\n})();\n```", "```ts\ninterface Accountable {\n  getIncome(): number;\n}\n```", "```ts\nclass Firm implements Accountable {\n  getIncome(): number {\n    // \u2026\n  }\n}\nclass Individual implements Accountable {\n  getIncome(): number {\n    // \u2026\n  }\n}\n```", "```ts\ninterface Accountable {\n  accountNumber: string;\n  getIncome(): number;\n}\n```", "```ts\ninterface Accountable {\n  accountNumber: string;\n  getIncome(): number;\n}\ninterface Individual extends Accountable {\n  ssn: string;\n}\n```", "```ts\ninterface Accountable {\n  accountNumber: string;\n  getIncome(): number;\n}\ninterface Human {\n  age: number;\n  name: number;\n}\ninterface Individual extends Accountable, Human {\n  ssn: string;\n}\n```", "```ts\nclass Person implements Human, Accountable {\n  age: number;\n  name: string;\n  accountNumber: string;\n  getIncome(): number {\n    // ...\n  }\n}\n```", "```ts\nclass Http {\n  // \u2026\n}\nclass GitHubApi {\n  constructor(@Inject(Http) http) {\n    // \u2026\n  }\n}\n```", "```ts\nclass Node {\n  value: any;\n  left: Node;\n  right: Node;\n}\n\nclass BinarySearchTree {\n  private root: Node;\n  insert(any: value): void { /* \u2026 */ }\n  remove(any: value): void { /* \u2026 */ }\n  exists(any: value): boolean { /* \u2026 */ }\n  inorder(callback: {(value: any): void}): void { /* \u2026 */ }\n}\n```", "```ts\nclass Node<T> {\n  value: T;\n  left: Node<T>;\n  right: Node<T>;\n}\n```", "```ts\nlet numberNode = new Node<number>();\nlet stringNode = new Node<string>();\nnumberNode.right = new Node<number>();\nnumberNode.value = 42;\nnumberNode.value = \"42\"; // Type \"string\" is not assignable to type \"number\"\nnumberNode.left = stringNode; // Type Node<string> is not assignable to type Node<number>\n```", "```ts\nfunction identity<T>(arg: T) {\n  return arg;\n}\n```", "```ts\ninterface Comparable {\n  compare(a: Comparable): number;\n}\nfunction sort<T extends Comparable>(arr: Comparable[]): Comparable[] {\n  // \u2026\n}\n```", "```ts\nclass Pair<K, V> {\n  key: K;\n  value: V;\n}\n```", "```ts\nlet pair = new Pair<string, number>();\npair.key = \"foo\";\npair.value = 42;\n```", "```ts\nlet answer = 42;\nanswer = \"42\"; // Type \"string\" is not assignable to type \"number\"\n```", "```ts\nlet answer;\nanswer = 42;\nanswer = \"42\";\n```", "```ts\nlet x = [\"42\", 42];\n```", "```ts\nlet x = [42, null, 32];\n```", "```ts\ndocument.body.addEventListener(\"mousedown\", e => {\n  e.foo(); // Property \"foo\" does not exists on a type \"MouseEvent\"\n}, false);\n```", "```ts\n**npm install \u2013g typings**\n\n```", "```ts\n**typings init**\n\n```", "```ts\n**typings install angularjs --ambient**\n\n```", "```ts\n**typings install angular --ambient --save**\n\n```", "```ts\n{\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  \"ambientDependencies\": {\n    \"angular\": \"github:DefinitelyTyped/DefinitelyTyped/angularjs/angular.d.ts#1c4a34873c9e70cce86edd0e61c559e43dfa5f75\"\n  }\n}\n```", "```ts\n/// <reference path=\"./typings/browser.d.ts\"/>\n\nvar module = angular.module(\"module\", []);\nmodule.controller(\"MainCtrl\",\n  function MainCtrl($scope: angular.IScope) {\n\n  });\n```", "```ts\n**tsc app.ts**\n\n```", "```ts\nvar DOM = {\n  // Returns a set of elements which match the passed selector\n  selectElements: function (selector) {\n    // \u2026\n  },\n  hide: function (element) {\n    // \u2026\n  },\n  show: function (element) {\n    // \u2026\n  }\n};\n```", "```ts\nvar DOM = {\n  // Returns a set of elements which match the passed selector\n  selectElements: function (selector: string): HTMLElement[] {\n    return [];\n  },\n  hide: function (element: HTMLElement): void {\n    element.hidden = true;\n  },\n  show: function (element: HTMLElement): void {\n    element.hidden = false;\n  }\n};\n```", "```ts\ninterface LibraryInterface {\n  selectElements(selector: string): HTMLElement[]\n  hide(element: HTMLElement): void\n  show(element: HTMLElement): void\n}\n```", "```ts\n// inside \"dom.d.ts\"\n\ninterface DOMLibraryInterface {\n  selectElements(selector: string): HTMLElement[]\n  hide(element: HTMLElement): void\n  show(element: HTMLElement): void\n}\n\ndeclare var DOM: DOMLibraryInterface;\n```", "```ts\n/// <reference path=\"dom.d.ts\"/>\n```"]