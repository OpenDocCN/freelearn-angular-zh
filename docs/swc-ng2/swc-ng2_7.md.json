["```ts\n<form class=\"form col-md-4\"\n      [ngFormModel]=\"addDevForm\" [hidden]=\"submitted\">\n  <!-- TODO -->\n</form>\n```", "```ts\n<form class=\"form col-md-4\"\n   [ngFormModel]=\"importDevForm\" [hidden]=\"submitted\">\n<!-- TODO -->\n</form>\n```", "```ts\nimport {ControlGroup} from 'angular2/common';\n@Component(\u2026)\nexport class AddDeveloper {\n  importDevForm: ControlGroup;\n  addDevForm: ControlGroup;\n  \u2026\n  constructor(private developers: DeveloperCollection,\n    fb: FormBuilder) {\u2026}\n  addDeveloper() {\u2026}\n}\n```", "```ts\n\u2026\nconstructor(private developers: DeveloperCollection,\n  fb: FormBuilder) {\n  this.importDevForm = fb.group({\n    githubHandle: ['', Validators.required],\n    fetchFromGitHub: [false]\n  });\n  this.addDevForm = fb.group({\n    realName: ['', Validators.required],\n    email: ['', validateEmail],\n    technology: ['', Validators.required],\n    popular: [false]\n  });\n}\n\u2026\n```", "```ts\nfunction validateEmail(emailControl) {\n  if (!emailControl.value ||\n     /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/.test(emailControl.value)) {\n    return null;\n  } else {\n    return { 'invalidEmail': true };\n  }\n}\n```", "```ts\nthis.addDevForm = fb.group({\n  \u2026\n  email: ['', Validators.compose([\n    Validators.required,\n    validateEmail]\n  )],\n  \u2026\n});\n```", "```ts\n<form class=\"form col-md-4\"\n   [ngFormModel]=\"importDevForm\" [hidden]=\"submitted\" >\n  <div class=\"form-group\">\n    <label class=\"control-label\"\n           for=\"githubHandleInput\">GitHub handle</label>\n    <div>\n      <input id=\"githubHandleInput\"\n             class=\"form-control\" type=\"text\"\n             [disabled]=\"!fetchFromGitHub\" \n             ngControl=\"githubHandle\">\n      <control-errors control=\"githubHandle\"\n        [errors]=\"{\n          'required': 'The GitHub handle is required'\n        }\"></control-errors>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label class=\"control-label\"\n           for=\"fetchFromGitHubCheckbox\">\n       Fetch from GitHub\n    </label>\n    <input class=\"checkbox-inline\" id=\"fetchFromGitHubCheckbox\"\n           type=\"checkbox\" ngControl=\"fetchFromGitHub\"\n           [(ngModel)]=\"fetchFromGitHub\">\n  </div>\n</form>\n```", "```ts\n<button class=\"btn btn-default\"\n        (click)=\"addDeveloper()\"\n        [disabled]=\"(fetchFromGitHub && !importDevForm.valid) ||\n                    (!fetchFromGitHub && !addDevForm.valid)\">\n  Add\n</button>\n```", "```ts\nimport {Injectable} from 'angular2/core';\nimport {Http} from 'angular2/http';\n\n@Injectable()\nexport class GitHubGateway {\n  constructor(private http: Http) {}\n  getUser(username: string) {\n    return this.http\n            .get(`https://api.github.com/users/${username}`);\n  }\n}\n```", "```ts\n    http.request('http://example.com/', {\n      method: 'get',\n      search: 'foo=bar',\n      headers: new Headers({\n        'X-Custom-Header': 'Hello'\n    \t})\n    });\n    ```", "```ts\nimport {Response, HTTP_PROVIDERS} from 'angular2/http';\nimport {GitHubGateway} from './github_gateway';\n```", "```ts\n@Component({\n  \u2026\n  providers: [GitHubGateway, FORM_PROVIDERS, HTTP_PROVIDERS]\n})\nclass AddDeveloper {\u2026}\n```", "```ts\nconstructor(private githubAPI: GitHubGateway,\n  private developers: DeveloperCollection,\n  fb: FormBuilder) {\n  //\u2026\n}\n```", "```ts\nif (this.importDevForm.controls['fetchFromGitHub'].value) {\n  // Import developer\n} else {\n  // Add new developer\n}\n```", "```ts\nthis.githubAPI.getUser(model.githubHandle)\n```", "```ts\nthis.githubAPI.getUser(model.githubHandle)\n  .map((r: Response) => r.json())\n  .subscribe((res: any) => {\n    // \"res\" contains the response of the GitHub's API \n  });\n```", "```ts\n**import 'rxjs/add/operator/map';**\n**import 'rxjs/add/operator/catch';**\n\n```", "```ts\nlet dev = new Developer();\ndev.githubHandle = res.login;\ndev.email = res.email;\ndev.popular = res.followers >= 1000;\ndev.realName = res.name;\ndev.id = res.id;\ndev.avatarUrl = res.avatar_url;\nthis.developers.addDeveloper(dev);\nthis.successMessage = `Developer ${dev.githubHandle} successfully imported from GitHub`;\n```", "```ts\n **this.githubAPI.getUser(model.githubHandle)**\n **.catch((error, source, caught) => {**\n **console.log(error)**\n **return error;**\n **})**\n\n```", "```ts\nimport {DeveloperDetails} from './developer_details';\n```", "```ts\n@RouteConfig([\n  //\u2026\n  new Route({\n    component: DeveloperDetails,\n    name: 'DeveloperDetails',\n    path: '/dev-details/:id/...'\n  }),\n  //\u2026\n])\nclass App {}\n```", "```ts\n<td>\n  <a [routerLink]=\"['/DeveloperDetails',\n      { 'id': dev.id }, 'DeveloperBasicInfo']\">\n    {{dev.realName}}\n  </a>\n</td>\n```", "```ts\nimport {Component} from 'angular2/core';\nimport {\n  ROUTER_DIRECTIVES,\n  RouteConfig,\n  RouteParams\n} from 'angular2/router';\nimport {Developer} from './developer';\nimport {DeveloperCollection} from './developer_collection';\n\n@Component({\n  selector: 'dev-details',\n  template: `\u2026`,\n})\n@RouteConfig(\u2026)\nexport class DeveloperDetails {\n  public dev: Developer;\n  constructor(routeParams: RouteParams,\n    developers: DeveloperCollection) {\n    this.dev = developers.getUserById(\n      parseInt(routeParams.params['id'])\n    );\n  }\n}\n```", "```ts\n@Component(\u2026)\n@RouteConfig([{\n    component: DeveloperBasicInfo,\n    name: 'DeveloperBasicInfo',\n    path: '/'\n  },\n  {\n    component: DeveloperAdvancedInfo,\n    name: 'DeveloperAdvancedInfo',\n    path: '/dev-details-advanced'\n  }])\nexport class DeveloperDetails {\u2026}\n```", "```ts\n@Component({\n  selector: 'dev-details',\n  directives: [ROUTER_DIRECTIVES],\n  template: `\n    <section class=\"col-md-4\">\n      <ul class=\"nav nav-tabs\">\n        <li>\n          <a [routerLink]=\"['./DeveloperBasicInfo']\">\n            Basic profile\n          </a>\n        </li>\n        <li>\n          <a [routerLink]=\"['./DeveloperAdvancedInfo']\">\n            Advanced details\n          </a>\n        </li>\n      </ul>\n      <router-outlet/>\n    </section>\n  `,\n})\n@RouteConfig(\u2026)\nexport class DeveloperDetails {\u2026}\n```", "```ts\nimport {\n  Component,\n  Inject,\n  forwardRef,\n  Host\n} from 'angular2/core';\nimport {DeveloperDetails} from './developer_details';\nimport {Developer} from './developer';\n\n@Component({\n  selector: 'dev-details-basic',\n  styles: [\u2026],\n  template: `\n    <h2>{{dev.realName}}</h2>\n    <img *ngIf=\"dev.avatarUrl == null\"\n      class=\"avatar\" src=\"./gravatar-60-grey.jpg\" width=\"150\">\n    <img *ngIf=\"dev.avatarUrl != null\"\n      class=\"avatar\" [src]=\"dev.avatarUrl\" width=\"150\">\n  `\n})\nexport class DeveloperBasicInfo {\n  dev: Developer;\n  constructor(@Inject(forwardRef(() => DeveloperDetails))\n    @Host() parent: DeveloperDetails) {\n    this.dev = parent.dev;\n  }\n}\n```", "```ts\n\u2026\n<td [ngSwitch]=\"dev.popular\">\n  <span *ngSwitch-when=\"true\">Yes</span>\n  <span *ngSwitch-when=\"false\">Not yet</span>\n</td>\n\u2026\n```", "```ts\n<td>{{dev.popular | boolean: 'Yes': 'No'}}</td>\n```", "```\n<td>{{dev.popular | boolean: '\ud83d\udc4d': '\ud83d\udc4e'}}</td>\n```", "```\nimport {Pipe, PipeTransform} from 'angular2/core';\n```", "```\nimport {Pipe, PipeTransform} from 'angular2/core';\n\n@Pipe({\n  name: 'boolean'\n})\nexport class BooleanPipe implements PipeTransform {\n  constructor() {}\n  transform(flag: boolean, args: string[]): string {\n    return flag ? args[0] : args[1];\n  }\n}\n```", "```\n@Component({\n  \u2026\n  pipes: [BooleanPipe],\n})\nexport class Home {\n  constructor(private developers: DeveloperCollection) {}\n  getDevelopers() {\u2026}\n}\n```", "```\n    {{ currencyValue | currency: 'USD' }} <!-- USD42 -->\n    ```", "```\n    {{ dateValue | date: 'shortTime'  }} <!-- 12:00 AM -->\n    ```", "```\n    {{ 42.1618 | number: '3.1-2' }} <!-- 042.16 -->\n    ```", "```\n    {{ { foo: 42 } | json }} <!-- { \"foo\": 42 } -->\n    ```", "```\n    {{ FOO | lowercase }} <!-- foo -->\n    ```", "```\n    {{ 'foo' | uppercase }} <!-- FOO -->\n    ```", "```\n    {{ 42 | percent: '2.1-2' }}  <!-- 4,200.0% -->\n    ```", "```\n    {{ [1, 2, 3] | slice: 1: 2 }} <!-- 2 -->\n    ```", "```\n{{ \"http://example.com/user.json\" | fetchJson | json }}\n```", "```\nimport {Pipe, PipeTransform} from 'angular2/core';\nimport {Http, Response} from 'angular2/http';\nimport 'rxjs/add/operator/toPromise';\n```", "```\n@Pipe({\n  name: 'fetchJson',\n  pure: false\n})\nexport class FetchJsonPipe implements PipeTransform {\n  private data: any;\n  private prevUrl: string;\n  constructor(private http: Http) {}\n  transform(url: string): any {\u2026}\n}\n```", "```\n\u2026\ntransform(url: string): any {\n  if (this.prevUrl !== url) {\n    this.http.get(url).toPromise(Promise)\n      .then((data: Response) => data.json())\n      .then(result => this.data = result);\n    this.prevUrl = url;\n  }\n  return this.data || {};\n}\n\u2026\n```", "```\n// ch7/ts/statful_pipe/app.ts\n\n@Component({\n  selector: 'app',\n  providers: [HTTP_PROVIDERS],\n  pipes: [FetchJsonPipe, ObjectGetPipe],\n  template: `\n    <input type=\"text\" #input>\n    <button (click)=\" setUsername(input.value)\">Get Avatar</button>\n`\n})\nclass App {\n  username: string;\n  setUsername(user: string) {\n    this.username = user;\n  }\n}\n```", "```\n<img width=\"160\" [src]=\"(('https://api.github.com/users/' + username) | fetchJson).avatar_url\">\n```", "```\n// ch7/ts/async-pipe/app.ts\n@Component({\n  selector: 'greeting',\n  template: 'Hello {{ greetingPromise | async }}'\n})\nclass Greeting {\n  greetingPromise = new Promise<string>(resolve => this.resolve = resolve);\n  resolve: Function;\n  constructor() {\n    setTimeout(_ => {\n      this.resolve('Foobar!');\n    }, 3000);\n  }\n}\n```", "```\nlet observer = new Observable<number>(observer => {\n  setInterval(() => {\n    observer.next(new Date().getTime());\n  }, 1000);\n});\nobserver.subscribe(date => console.log(date));\n```", "```\n// ch7/ts/async-pipe/app.ts\n@Component({\n  selector: 'timer'\n})\nclass Timer {\n  username: string;\n  timer: Observable<number>;\n  constructor() {\n    let counter = 0;\n    this.timer = new Observable<number>(observer => {\n      setInterval(() => {\n        observer.next(new Date().getTime());\n      }, 1000);\n    });\n  }\n}\n```", "```\n{{ timer | async | date: \"medium\" }}\n```"]