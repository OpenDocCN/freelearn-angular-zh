["```ts\n<!-- ch4/es5/hello-world/index.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title></title>\n</head>\n<body>\n  <script src=\"https://code.angularjs.org/2.0.0-beta.9/angular2-polyfills.min.js\"></script>\n  <script src=\"https://code.angularjs.org/2.0.0-beta.9/Rx.umd.min.js\"></script>\n  <script src=\"https://code.angularjs.org/2.0.0-beta.9/angular2-all.umd.min.js\"></script>\n  <script src=\"./app.js\"></script>\n</body>\n</html>\n```", "```ts\n// ch4/es5/hello-world/app.js\n\nvar App = ng.core.Component({\n  selector: 'app',\n  template: '<h1>Hello {{target}}!</h1>'\n})\n.Class({\n  constructor: function () {\n    this.target = 'world';\n  }\n});\n\nng.platform.browser.bootstrap(App);\n```", "```ts\n'<h1>Hello {{target}}!</h1>'\n```", "```ts\n<app></app>\n```", "```ts\n**# Will clone the repository and save it to directory called**\n**# switching-to-angular2**\n**git clone https://github.com/mgechev/switching-to-angular2.git**\n**cd switching-to-angular2**\n**npm install**\n\n```", "```ts\n**npm start** \n\n```", "```ts\n// ch4/ts/hello-world/app.ts\n\nimport {Component} from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\n\n@Component({\n  selector: 'app',\n  templateUrl: './app.html'\n})\nclass App {\n  target: string;\n  constructor() {\n    this.target = 'world';\n\t}\n}\n\nbootstrap(App);\n```", "```ts\nimport {Component} from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\n```", "```ts\n<!-- ch4/ts/hello-world/index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <title><%= TITLE %></title>\n  <meta name=\"description\" content=\"\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <!-- inject:css -->\n  <!-- endinject -->\n</head>\n<body>\n  <app>Loading...</app>\n  <!-- inject:js -->\n  <!-- endinject -->\n  <%= INIT %>\n</body>\n</html>\n```", "```ts\n// ch4/ts/ng-for/detailed-syntax/app.ts\n\nimport {Component} from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\n\n@Component({\n  selector: 'app',\n  templateUrl: './app.html',\n})\nclass App {\n  todos: string[];\n  name: string;\n  constructor() {\n    this.name = 'John';\n    this.todos = ['Buy milk', 'Save the world'];\n  }\n}\nbootstrap(App);\n```", "```ts\n<!-- ch4/ts/ng-for/detailed-syntax/app.html -->\n\n<h1>Hello {{name}}!</h1>\n<p>\n  Here's a list of the things you need to do:\n</p>\n<ul>\n  <template ngFor var-todo [ngForOf]=\"todos\">\n    <li>{{todo}}</li>\n  </template>\n</ul>\n```", "```ts\n<input [value]=\"foo\">\n```", "```ts\n<input bind-value=\"foo\">\n```", "```ts\n<button (click)=\"handle()\">Click me</button>\n```", "```ts\n<button on-click=\"handle()\">Click me</button>\n```", "```ts\n<!-- ch4/ts/ng-for/syntax-sugar/app.html -->\n\n<ul>\n  <li *ngFor=\"#todo of todos\">{{todo}}</li>\n</ul>\n```", "```ts\n<div saTooltip=\"Hello world!\"></div>\n```", "```ts\nimport {Directive, ElementRef, HostListener...} from 'angular2/core';\n```", "```ts\n// ch4/ts/tooltip/app.ts\n\n@Directive({\n  selector: '[saTooltip]'\n})\nexport class Tooltip {\n  @Input()\n  saTooltip: string;\n\n  constructor(private el: ElementRef, private overlay: Overlay) {\n    this.overlay.attach(el.nativeElement);\n  }\n  @HostListener('mouseenter')\n  onMouseEnter() {\n    this.overlay.open(this.el, this.saTooltip);\n  }\n  @HostListener('mouseleave')\n  onMouseLeave() {\n    this.overlay.close();\n  }\n}\n```", "```ts\n@Component({\n  selector: 'app',\n  templateUrl: './app.html',\n  providers: [Overlay],\n  // ...\n})\nclass App {}\n```", "```ts\n@Component({\n  selector: 'app',\n  templateUrl: './app.html',\n  providers: [Overlay],\n  directives: [Tooltip]\n})\nclass App {}\n```", "```ts\ninterface Todo {\n  completed: boolean;\n  label: string;\n}\n```", "```ts\nimport {Component, ViewEncapsulation} from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\n```", "```ts\n@Component({\n  selector: 'todo-app',\n  templateUrl: './app.html',\n  styles: [\n    `ul li {\n      list-style: none;\n    }\n    .completed {\n      text-decoration: line-through;\n    }`\n  ],\n  encapsulation: ViewEncapsulation.Emulated\n})\n```", "```ts\n// ch4/ts/todo-app/app.ts\nclass TodoCtrl {\n  todos: Todo[] = [{\n    label: 'Buy milk',\n    completed: false\n  }, {\n    label: 'Save the world',\n    completed: false\n  }];\n  name: string = 'John';\n  addTodo(label) { \u2026 }\n  removeTodo(idx) { \u2026 }\n  toggleCompletion(idx) { \u2026 }\n}\n```", "```ts\n{\n  label: 'Buy milk',\n  completed: false\n}, {\n  label: 'Save the world',\n  completed: false\n}\n```", "```ts\n<ul>\n  <li *ngFor=\"#todo of todos; var index = index\" [class.completed]=\"todo.completed\">\n    <input type=\"checkbox\" [checked]=\"todo.completed\"\n      (change)=\"toggleCompletion(index)\">\n    {{todo.label}}\n  </li>\n</ul>\n```", "```ts\n<td [attr.colspan]=\"colspanCount\"></td>\n```", "```ts\n<div [style.backgroundImage]=\"expression\"></td>\n```", "```ts\n  toggleCompletion(idx) {\n    let todo = this.todos[idx];\n    todo.completed = !todo.completed;\n  }\n```", "```ts\n<p>\n  Add a new todo:\n  <input #newtodo type=\"text\">\n  <button (click)=\"addTodo(newtodo.value); newtodo.value = ''\">\n    Add\n  </button>\n</p>\n```", "```ts\n  addTodo(label) {\n    this.todos.push({\n      label,\n      completed: false\n    });\n  }\n```", "```ts\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter\n} from 'angular2/core';\n```", "```ts\n// ch4/ts/inputs-outputs/app.ts\n\n@Component({\n  selector: 'text-input',\n  template: `\n    <input #todoInput [placeholder]=\"inputPlaceholder\">\n    <button (click)=\"emitText(todoInput.value);\n                     todoInput.value = '';\">\n      {{buttonLabel}}\n    </button>\n  `\n})\nclass InputBox {...}\n```", "```ts\nclass InputBox {\n  @Input() inputPlaceholder: string;\n  ...\n}\n```", "```ts\nclass InputBox {\n  @Input() inputPlaceholder: string;\n  @Input() buttonLabel: string;\n  ...\n}\n```", "```ts\nclass InputBox {\n  ...\n  @Output() inputText = new EventEmitter<string>();\n  emitText(text: string) {\n    this.inputText.emit(text);\n  }\n}\n```", "```ts\n@Component(...)\nclass TodoList {\n  @Input() todos: Todo[];\n  @Output() toggle = new EventEmitter<Todo>();\n  toggleCompletion(index: number) {\n    let todo = this.todos[index];\n    this.toggle.emit(todo);\n  }\n}\n```", "```ts\n@Component({\n  selector: 'todo-app',\n  directives: [TodoList, InputBox],\n  template: `\n    <h1>Hello {{name}}!</h1>\n\n    <p>\n      Add a new todo:\n      <input-box inputPlaceholder=\"New todo...\"\n        buttonLabel=\"Add\"\n        (inputText)=\"addTodo($event)\">\n      </input-box>\n    </p>\n\n    <p>Here's the list of pending todo items:</p>\n    <todo-list [todos]=\"todos\" (toggle)=\"toggleCompletion($event)\"></todo-list>\n  `\n})\nclass TodoApp {...}\n```", "```ts\n<input-box inputPlaceholder=\"New todo...\"\n  buttonLabel=\"Add\"\n  (inputText)=\"addTodo($event)\">\n</input-box>\n```", "```ts\nclass TodoApp {\n  todos: Todo[] = [];\n  name: string = 'John';\n  addTodo(label: string) {\n    this.todos.push({\n      label,\n      completed: false\n    });\n  }\n  toggleCompletion(todo: Todo) {\n    todo.completed = !todo.completed;\n  }\n}\n```", "```ts\n<input-box inputPlaceholder=\"New todo...\"\n  buttonLabel=\"Add\"\n  (click)=\"handleClick($event)\"\n  (inputText)=\"addTodo($event)\">\n</input-box>\n```", "```ts\n<input #todoInput [placeholder]=\"inputPlaceholder\">\n<button (click)=\"emitText(todoInput.value);\n                 todoInput.value = '';\">\n  {{buttonLabel}}\n</button>\n```", "```ts\nclass TodoList {\n  ...\n  @Output() toggle = new EventEmitter<Todo>();\n  toggle(index: number) {\n    ...\n  }\n}\n```", "```ts\n<todo-list [toggle]=\"foobar($event)\"...></todo-list>\n```", "```ts\nclass TodoList {\n  ...\n  @Output('toggle') toggleEvent = new EventEmitter<Todo>();\n  toggle(index: number) {\n    ...\n  }\n}\n```", "```ts\nclass TodoList {\n  @Input('todos') todoList: Todo[];\n  @Output('toggle') toggleEvent = new EventEmitter<Todo>();\n  toggle(index: number) {\n    ...\n  }\n}\n```", "```ts\n<todo-list [todos]=\"todos\"\n  (toggle)=\"toggleCompletion($event)\">\n</todo-list>\n```", "```ts\n@Directive({\n  outputs: ['outputName: outputAlias'],\n  inputs: ['inputName: inputAlias']\n})\nclass Dir {\n  outputName = new EventEmitter();\n}\n```", "```ts\n@Directive(...)\nclass Dir {\n  @Output('outputAlias') outputName = new EventEmitter();\n  @Input('inputAlias') inputName;\n}\n```", "```ts\n@Component({\n  selector: 'fancy-button',\n  template: '<button>Click me</button>'\n})\nclass FancyButton { \u2026 }\n```", "```ts\n<fancy-button></fancy-button>\n```", "```ts\n// AngularJS 1.x example\napp.directive('fancyButton', function () {\n  return {\n    restrict: 'E',\n    transclude: true,\n    template: '<button><ng-transclude></ng-transclude></button>'\n  };\n});\n```", "```ts\n// ch4/ts/ng-content/app.ts\n@Component({\n  selector: 'fancy-button',\n  template: '<button><ng-content></ng-content></button>'\n})\nclass FancyButton { /* Extra behavior */ }\n```", "```ts\n<fancy-button>Click <i>me</i> now!</fancy-button>\n```", "```ts\n<panel>\n  <panel-title>Sample title</panel-title>\n  <panel-content>Content</panel-content>\n</panel>\n```", "```ts\n<div class=\"panel\">\n  <div class=\"panel-title\">\n **<!-- Project the content of panel-title here -->**\n  </div>\n  <div class=\"panel-content\">\n **<!-- Project the content of panel-content here -->**\n  </div>\n</div>`\n```", "```ts\n// ch4/ts/ng-content/app.ts\n@Component({\n  selector: 'panel',\n  styles: [ \u2026 ],\n  template: `\n    <div class=\"panel\">\n      <div class=\"panel-title\">\n        <ng-content select=\"panel-title\"></ng-content>\n      </div>\n      <div class=\"panel-content\">\n        <ng-content select=\"panel-content\"></ng-content>\n      </div>\n    </div>`\n})\nclass Panel { }\n```", "```ts\n@Component({\n  selector: 'sample-component',\n  template: '<view-child></view-child>'\n})\nclass Sample {}\n```", "```ts\n<sample-component>\n  <content-child1></content-child1>\n  <content-child2></content-child2>\n</sample-component>\n```", "```ts\n    <tabs (changed)=\"tabChanged($event)\">\n      <tab-title>Tab 1</tab-title>\n      <tab-content>Content 1</tab-content>\n      <tab-title>Tab 2</tab-title>\n      <tab-content>Content 2</tab-content>\n    </tabs>\n```", "```ts\n@Component({\n  selector: 'tab-title',\n  styles: [\u2026],\n  template: `\n    <div class=\"tab-title\" (click)=\"handleClick()\">\n      <ng-content></ng-content>\n    </div>\n  `\n})\nclass TabTitle {\n  tabSelected: EventEmitter<TabTitle> =\n    new EventEmitter<TabTitle>();\n  handleClick() {\n    this.tabSelected.emit(this);\n  }\n}\n```", "```ts\n@Component({\n  selector: 'tab-content',\n  styles: [\u2026],\n  template: `\n    <div class=\"tab-content\" [hidden]=\"!isActive\">\n      <ng-content></ng-content>\n    </div>\n  `\n})\nclass TabContent {\n  isActive: boolean = false;\n}\n```", "```ts\n// ch4/ts/basic-tab-content-children/app.ts\n@Component({\n  selector: 'tabs',\n  styles: [\u2026],\n  template: `\n    <div class=\"tab\">\n      <div class=\"tab-nav\">\n        <ng-content select=\"tab-title\"></ng-content>\n      </div>\n      <ng-content select=\"tab-content\"></ng-content>\n    </div>\n  `\n})\nclass Tabs {\n  @Output('changed')\n  tabChanged: EventEmitter<number> = new EventEmitter<number>();\n\n  @ContentChildren(TabTitle)\n  tabTitles: QueryList<TabTitle>;\n\n  @ContentChildren(TabContent)\n  tabContents: QueryList<TabContent>;\n\n  active: number;\n  select(index: number) {\u2026}\n  ngAfterViewInit() {\u2026}\n}\n```", "```ts\n// ch4/ts/view-child-content-child/app.ts\n@Component({\n  selector: 'user-badge',\n  template: '\u2026'\n})\nclass UserBadge {}\n\n@Component({\n  selector: 'user-rating',\n  template: '\u2026'\n})\nclass UserRating {}\n```", "```ts\n@Component({\n  selector: 'user-panel',\n  template: '<user-badge></user-badge>',\n  directives: [UserBadge]\n})\nclass UserPanel {\u2026}\n```", "```ts\n@Component({\n  selector: 'app',\n  template: `<user-panel>\n    <user-rating></user-rating>\n  </user-panel>`,\n  directives: [CORE_DIRECTIVES, UserPanel, UserRating]\n})\nclass App {\n  constructor() {}\n}\n```", "```ts\nclass UserPanel {\n  @ViewChild(UserBadge)\n  badge: UserBadge;\n\n  @ContentChild(UserRating)\n  rating: UserRating;\n  constructor() {\n    //\n  }\n}\n```", "```ts\n@ContentChildren(TabTitle)\ntabTitles: QueryList<TabTitle>;\n\n@ContentChildren(TabContent)\ntabContents: QueryList<TabContent>;\n```", "```ts\nngAfterContentInit() {\n  this.tabTitles\n    .map(t => t.tabSelected)\n    .forEach((t, i) => {\n      t.subscribe(_ => {\n        this.select(i)\n      });\n    });\n  this.active = 0;\n  this.select(0);\n}\n```", "```ts\nselect(index: number) {\n  let contents: TabContent[] = this.tabContents.toArray();\n  contents[this.active].isActive = false;\n  this.active = index;\n  contents[this.active].isActive = true;\n  this.tabChanged.emit(index);\n}\n```", "```ts\n    @Component({\n      selector: 'panel',\n      inputs: ['title']\n    })\n    class Panel {\u2026}\n    ```", "```ts\n    <panel [title]=\"expression\"></panel>\n    ```", "```ts\n    @Component(\u2026)\n    class Panel {\n      ngOnChanges(changes) {\n        Object.keys(changes).forEach(prop => {\n          console.log(prop, 'changed. Previous value', changes[prop].previousValue);\n        });\n      }\n    }\n    ```", "```ts\n    import {Component, OnChanges} from 'angular2/core';\n    @Component(\u2026)\n    class Panel implements OnChanges {\n      ngOnChanges(changes) {\u2026}\n    }\n    ```", "```ts\n@Component({\n  selector: 'panel',\n  inputs: ['title', 'caption'],\n  template: '<ng-content></ng-content>'\n})\nclass Panel {\n  ngOnChanges(changes) {\u2026}\n  ngOnInit() {\u2026}\n  ngDoCheck() {\u2026}\n  ngOnDestroy() {\u2026}\n  ngAfterContentInit() {\u2026}\n  ngAfterContentChecked() {\u2026}\n  ngAfterViewInit() {\u2026}\n  ngAfterViewChecked() {\u2026}\n}\n```", "```ts\n<button (click)=\"toggle()\">Toggle</button>\n<div *ngIf=\"counter % 2 == 0\">\n  <panel caption=\"Sample caption\" title=\"Sample\">Hello world!</panel>\n</div>\n```", "```ts\n// ch4/ts/template-ref/app.ts\n<todo-app>\n  <template var-todo>\n    <input type=\"checkbox\" [checked]=\"todo.completed\"\n      (change)=\"todo.completed = !todo.completed;\">\n    <span [class.completed]=\"todo.completed\">\n      {{todo.label}}\n    </span><br>\n  </template>\n</todo-app>\n```", "```ts\n// ch4/ts/template-ref/app.ts\nclass TodoApp {\n  @ContentChild(TemplateRef)\n  private itemsTemplate: TemplateRef;\n  // \u2026\n}\n```", "```ts\n// ch4/ts/template-ref/app.ts\nclass TodoList {\n  @Input() todos: Todo[];\n  @Input() itemsTemplate: TemplateRef;\n  @Output() toggle = new EventEmitter<Todo>();\n}\n```", "```ts\n...\n<todo-list [todos]=\"todos\"\n  [itemsTemplate]=\"itemsTemplate\">\n</todo-list>\n```", "```ts\n<!-- \u2026 -->\n<template *ngFor=\"var todo of todos; template: itemsTemplate\"></template>\n```", "```ts\n// ch4/ts/change_detection_strategy_broken/app.ts\nimport {ChangeDetectionStrategy} from 'angular2/core';\n```", "```ts\n@Component({\n  selector: 'todo-list',\n  changeDetection: ChangeDetectionStrategy.Checked,\n  template: `...`,\n  styles: [\u2026]\n})\nclass TodoList { \u2026 }\n```", "```ts\nlet foo = List.of(1, 2, 3);\nlet changed = foo.push(4);\nfoo === changed // false\nconsole.log(foo.toJS()); // [ 1, 2, 3 ]\nconsole.log(changed.toJS()); // [ 1, 2, 3, 4 ]\n```", "```ts\nclass TodoApp {\n  todos: Todo[] = [...];\n  ...\n}\n```", "```ts\n// ch4/ts/change_detection_strategy/app.ts\nclass TodoApp {\n  todos: ImmutableList<Todo> = ImmutableList.of({\n    label: 'Buy milk',\n    completed: false\n  }, {\n    label: 'Save the world',\n    completed: false\n  });\n  ...\n}\n```", "```ts\n...\naddTodo(label: string) {\n  this.todos = this.todos.push({\n    label,\n    completed: false\n  });\n}\ntoggleCompletion(index: number) {\n  this.todos = this.todos.update(index, todo => {\n    let newTodo = {\n      label: todo.label,\n      completed: !todo.completed\n    };\n    return newTodo;\n  });\n}\n\u2026\n```", "```ts\n@Component({\n  selector: 'todo-list',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `...`,\n  styles: [...]\n})\nclass TodoList {\n  @Input() todos: ImmutableList<Todo>;\n  @Output() toggle = new EventEmitter<number>();\n  toggleCompletion(index: number) {\n    this.toggle.emit(index);\n  }\n}\n```"]