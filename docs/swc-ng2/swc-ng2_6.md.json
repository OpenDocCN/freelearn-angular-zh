["```ts\n// ch6/ts/multi-page-template-driven/developer.ts\nexport class Developer {\n  public id: number;\n  public githubHandle: string;\n  public avatarUrl: string;\n  public realName: string;\n  public email: string;\n  public technology: string;\n  public popular: boolean;\n}\n```", "```ts\n// ch6/ts/multi-page-template-driven/developer_collection.ts\nclass DeveloperCollection {\n  private developers: Developer[] = [];\n  getUserByGitHubHandle(username: string) {\n    return this.developers\n            .filter(u => u.githubHandle === username)\n            .pop();\n  }\n  getUserById(id: number) {\n    return this.developers\n             .filter(u => u.id === id)\n             .pop();\n  }\n  addDeveloper(dev: Developer) {\n    this.developers.push(dev);\n  }\n  getAll() {\n    return this.developers;\n  }\n}\n```", "```ts\n// ch6/ts/step-0/app.ts\nimport {\n  ROUTER_DIRECTIVES,\n  ROUTER_PROVIDERS,\n  Route,\n  Redirect,\n  RouteConfig,\n  LocationStrategy,\n  HashLocationStrategy\n} from 'angular2/router';\n```", "```ts\n// ch6/ts/step-0/app.ts\n@Component({\n  selector: 'app',\n  template: `\u2026`,\n  providers: [DeveloperCollection],\n  directives: [ROUTER_DIRECTIVES]\n})\n@RouteConfig([\u2026])\nclass App {}\n\nbootstrap(\u2026);\n```", "```ts\nbootstrap(App, [\n  ROUTER_PROVIDERS,\n  provide(LocationStrategy, { useClass: HashLocationStrategy })\n)]);\n```", "```ts\nimport {APP_BASE_HREF} from 'angular2/router';\n//...\nbootstrap(App, [\n  ROUTER_PROVIDERS,\n  // The following line is optional, since it's\n  // the default value for the LocationStrategy token\n  provide(LocationStrategy, { useClass: PathLocationStrategy }),\n  provide(APP_BASE_HREF, {\n    useValue: '/dist/dev/ch6/ts/multi-page-template-driven/'\n  }\n)]);\n```", "```ts\n// ch6/ts/step-0/app.ts\n@Component(\u2026)\n@RouteConfig([\n  new Route({ component: Home, name: 'Home', path: '/' }),\n  new Route({\n    component: AddDeveloper,\n    name: 'AddDeveloper',\n    path: '/dev-add'\n  }),\n  //\u2026\n  new Redirect({\n    path: '/add-dev',\n    redirectTo: ['/dev-add']\n  })\n]) \nclass App {}\n```", "```ts\nimport {Component} from 'angular2/core';\n@Component({\n  selector: 'home',\n  template: `Home`\n})\nexport class Home {}\n```", "```ts\nimport {Component} from 'angular2/core';\n\n@Component({\n  selector: 'dev-add',\n  template: `Add developer`\n})\nexport class AddDeveloper {}\n```", "```ts\n@Component({\n  //\u2026\n  template: `\n    <nav class=\"navbar navbar-default\">\n      <ul class=\"nav navbar-nav\">\n        <li><a [routerLink]=\"['/Home']\">Home</a></li>\n        <li><a [routerLink]=\"['/AddDeveloper']\">Add developer</a></li>\n      </ul>\n    </nav>\n    <router-outlet></router-outlet>\n  `,\n  //\u2026\n})\n```", "```ts\n// ch6/ts/step-1-async/app.ts\n\nimport {AsyncRoute} from 'angular2/router';\n@Component(\u2026)\n@RouteConfig([\n  new AsyncRoute({\n    loader: () =>\n      System.import('./home')\n        .then(m => m.Home),\n      name: 'Home',\n      path: '/'\n    }),\n  new AsyncRoute({\n    loader: () =>\n      System.import('./add_developer')\n        .then(m => m.AddDeveloper),\n      name: 'AddDeveloper',\n      path: '/dev-add'\n    }),\n    new Redirect({ path: '/add-dev', redirectTo: ['/dev-add'] })\n])\nclass App {}\n```", "```ts\nimport {\n  FORM_DIRECTIVES,\n  FORM_PROVIDERS\n} from 'angular2/common;\n```", "```ts\n@Component({\n  selector: 'dev-add',\n  templateUrl: './add_developer.html',\n  styles: [\u2026],\n  directives: [FORM_DIRECTIVES],\n  providers: [FORM_PROVIDERS]\n})\nexport class AddDeveloper {\n  developer = new Developer();\n  errorMessage: string;\n  successMessage: string;\n  submitted = false;\n  technologies: string[] = [\n    'JavaScript',\n    'C',\n    'C#',\n    'Clojure'\n  ];\n  constructor(private developers: DeveloperCollection) {}\n  addDeveloper() {}\n}\n```", "```ts\n<span *ngIf=\"errorMessage\"\n       class=\"alert alert-danger\">{{errorMessage}}</span>\n<span *ngIf=\"successMessage\"\n       class=\"alert alert-success\">{{successMessage}}</span>\n```", "```ts\n<form #f=\"ngForm\" (ngSubmit)=\"addDeveloper()\"\n      class=\"form col-md-4\" [hidden]=\"submitted\">\n  <div class=\"form-group\">\n    <label class=\"control-label\"\n           for=\"realNameInput\">Real name</label>\n    <div>\n      <input id=\"realNameInput\" class=\"form-control\"\n             type=\"text\" ngControl=\"realName\" required\n             [(ngModel)]=\"developer.realName\">\n    </div>\n  </div>\n  <button class=\"btn btn-default\"\n          type=\"submit\" [disabled]=\"!f.form.valid\">Add</button>\n  <!-- MORE CODE TO BE ADDED -->\n</form> \n```", "```ts\ninput.ng-dirty.ng-invalid {\n  border: 1px solid red;\n}\n```", "```ts\n<input id=\"realNameInput\" class=\"form-control\"\n       type=\"text\" ngControl=\"realName\"\n       minlength=\"2\"\n       maxlength=\"30\">\n```", "```ts\n<div class=\"form-group\">\n  <label class=\"control-label\" for=\"emailInput\">Email</label>\n  <div>\n    <input id=\"emailInput\"\n           class=\"form-control\"\n           type=\"text\" ngControl=\"email\"\n     [(ngModel)]=\"developer.email\"/>\n  </div>\n</div>\n```", "```ts\nfunction validateEmail(emailControl) {\n  if (!emailControl.value ||\n    /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/.test(emailControl.value)) {\n    return null;\n  } else {\n    return { 'invalidEmail': true };\n  }\n}\n```", "```ts\n@Directive({\n  selector: '[email-input]',\n  providers: [provide(NG_VALIDATORS, {\n    useValue: validateEmail, multi: true\n  })]\n})\nclass EmailValidator {}\n```", "```ts\n<input id=\"emailInput\"\n   class=\"form-control\"\n **email-input**\n   type=\"text\" ngControl=\"email\"\n   [(ngModel)]=\"developer.email\"/>\n```", "```ts\n@Component({\n  selector: 'dev-add',\n  templateUrl: './add_developer.html',\n  styles: [`\n    input.ng-touched.ng-invalid {\n      border: 1px solid red;\n    }\n  `],\n  directives: [FORM_DIRECTIVES, **EmailValidator**],\n  providers: [FORM_PROVIDERS]\n})\nclass AddDeveloper {\u2026}\n```", "```ts\nclass AddDeveloper {\n  \u2026\n  technologies: string[] = [\n    'JavaScript',\n    'C',\n    'C#',\n    'Clojure'\n  ];\n  \u2026\n}\n```", "```ts\n<div class=\"form-group\">\n  <label class=\"control-label\"\n         for=\"technologyInput\">Technology</label>\n  <div>\n    <select class=\"form-control\"\n            ngControl=\"technology\" required\n            [(ngModel)]=\"developer.technology\">\n        <option *ngFor=\"#t of technologies\"\n                [value]=\"t\">{{t}}</option>\n    </select>\n  </div>\n</div>\n```", "```ts\n@Component({\n  \u2026\n  styles: [\n    `input.ng-touched.ng-invalid,\n     select.ng-touched.ng-invalid {\n      border: 1px solid red;\n    }`\n  ],\n  \u2026\n})\nclass AddDeveloper {\u2026}\n```", "```ts\n<option *ngFor=\"#t of technologies\"\n        [value]=\"t\">{{t}}</option>\n```", "```ts\n<form #f=\"ngForm\" (ngSubmit)=\"addDeveloper()\"\n      class=\"form col-md-4\" [hidden]=\"submitted\">\n  \u2026\n</form>\n```", "```ts\n<label class=\"control-label\" for=\"realNameInput\">Real name</label>\n<div>\n  <input id=\"realNameInput\" class=\"form-control\" type=\"text\"\n     ngControl=\"realName\" [(ngModel)]=\"developer.realName\"\n         required maxlength=\"50\">\n  <control-errors control=\"realName\"\n    [errors]=\"{\n      'required': 'Real name is required',\n      'maxlength': 'The maximum length of the real name is 50 characters'\n      }\"\n   />\n</div>\n```", "```ts\nimport {NgControl, NgForm} from 'angular2/common';\nimport {Host} from 'angular2/core';\n```", "```ts\n@Component({\n  template: '<div>{{currentError}}</div>',\n  selector: 'control-errors',\n  inputs: ['control', 'errors']\n})\nclass ControlErrors {\n  errors: Object;\n  control: string;\n  constructor(@Host() private formDir: NgForm) {}\n  get currentError() {\u2026}\n}\n```", "```ts\n<input type=\"text\" ngControl=\"foobar\" required />\n```", "```ts\n<control-errors control=\"foobar\"\n      [errors]=\"{\n       'required': 'The value of foobar is required'\n      }\"></control-errors>\n```", "```ts\n@Component(\u2026)\nclass ControlErrors {\n  \u2026\n  get currentError() {\n    let control = this.formDir.controls[this.control];\n    let errorsMessages = [];\n    if (control && control.touched) {\n      errorsMessages = Object.keys(this.errors)\n        .map(k => control.hasError(k) ? this.errors[k] : null)\n        .filter(error => !!error);\n    }\n    return errorsMessages.pop();\n  }\n}\n```", "```ts\n  <control-errors control=\"email\"\n    [errors]=\"{ 'invalidEmail': 'Invalid email address' }\"/>\n```", "```ts\n// ch6/ts/simple-two-way-data-binding/app.ts\n\nimport {Component} from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\nimport {NgModel} from 'angular2/common';\n\n@Component({\n  selector: 'app',\n  directives: [NgModel],\n  template: `\n    <input type=\"text\" [(ngModel)]=\"name\"/>\n    <div>{{name}}</div>\n  `,\n})\nclass App {\n  name: string;\n}\n\nbootstrap(App, []);\n```", "```ts\n<input id=\"emailInput\"\n       class=\"form-control\" type=\"text\"\n       ngControl=\"email\" [(ngModel)]=\"developer.email\"\n       email-input/>\n```", "```ts\nexport class AddDeveloper {\n  submitted: false;\n  successMessage: string;\n  developer = new Developer();\n  //\u2026\n  constructor(private developers: DeveloperCollection) {}\n  addDeveloper(form) {\u2026}\n}\n```", "```ts\n<!-- ch6/ts/multi-page-template-driven/add_developer.html -->\n<form #f=\"form\" (ngSubmit)=\"addDeveloper()\"\n      class=\"form col-md-4\" [hidden]=\"submitted\">\n  \u2026\n  <button class=\"btn btn-default\"\n      type=\"submit\" [disabled]=\"!f.form.valid\">Add</button>\n</form>\n```", "```ts\nclass AddDeveloper {\n  //\u2026\naddDeveloper() {\n    this.developer.id = this.developers.getAll().length + 1;\n    this.developers.addDeveloper(this.developer);\n    this.successMessage = `Developer ${this.developer.realName} was successfully added`;\n    this.submitted = true;\n  }\n```", "```ts\nimport {Component} from 'angular2/core';\nimport {DeveloperCollection} from './developer_collection';\n\n@Component({\n  selector: 'home',\n  templateUrl: './home.html'\n})\nexport class Home {\n  constructor(private developers: DeveloperCollection) {}\n  getDevelopers() {\n    return this.developers.getAll();\n  }\n}\n```", "```ts\n<table class=\"table\" *ngIf=\"getDevelopers().length > 0\">\n  <thead>\n    <th>Email</th>\n    <th>Real name</th>\n    <th>Technology</th>\n    <th>Popular</th>\n  </thead>\n  <tr *ngFor=\"#dev of getDevelopers()\">\n    <td>{{dev.email}}</td>\n    <td>{{dev.realName}}</td>\n    <td>{{dev.technology}}</td>\n    <td [ngSwitch]=\"dev.popular\">\n      <span *ngSwitchWhen=\"true\">Yes</span>\n      <span *ngSwitchWhen=\"false\">Not yet</span>\n    </td>\n  </tr>\n</table>\n<div *ngIf=\"getDevelopers().length == 0\">\n  There are no any developers yet\n</div>\n```"]