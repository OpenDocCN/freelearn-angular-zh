["```ts\nclass Engine {\u2026}\nclass Transmission {\u2026}\nclass Car {\n  engine;\n  transmission;\n  constructor() {\n    this.engine = new Engine();\n    this.transmission = new Transmission();\n  }\n}\n```", "```ts\nclass Engine {\u2026}\nclass Transmission {\u2026}\n\n@Injectable()\nclass Car {\n  engine;\n  transmission;\n  constructor(engine: Engine, transmission: Transmission) {\n    this.engine = engine;\n    this.transmission = transmission;\n  }\n}\n```", "```ts\nimport 'reflect-metadata';\nimport {\n  Injector, Inject, Injectable,\n  OpaqueToken, provide\n} from 'angular2/core';\n\nconst BUFFER_SIZE = new OpaqueToken('buffer-size');\n\nclass Buffer {\n  constructor(@Inject(BUFFER_SIZE) private size: Number) {\n    console.log(this.size);\n  }\n}\n\n@Injectable()\nclass Socket {\n  constructor(private buffer: Buffer) {}\n}\n\nlet injector = Injector.resolveAndCreate([\n  provide(BUFFER_SIZE, { useValue: 42 }),\n  Buffer,\n  Socket\n]);\n\ninjector.get(Socket);\n```", "```ts\n**cd app**\n**ts-node ch5/ts/injector-basics/injector.ts**\n\n```", "```ts\nclass Socket {\n  constructor(@Inject(Buffer) private buffer: Buffer) {}\n}\n```", "```ts\nlet injector = Injector.resolveAndCreate([\n  provide(BUFFER_SIZE, { useValue: 42 }),\n  Buffer,\n  Socket\n]);\n```", "```ts\nclass Buffer {\n  constructor(@Inject(BUFFER_SIZE) private size: Number) {\n    console.log(this.size);\n  }\n}\n```", "```ts\n// ch5/ts/injector-basics/forward-ref.ts\n\n@Injectable()\nclass Socket {\n  constructor(private buffer: Buffer) {\u2026}\n}\n\n// undefined\nconsole.log(Buffer);\n\nclass Buffer {\n  constructor(@Inject(BUFFER_SIZE) private size: Number) {\u2026}\n}\n\n// [Function: Buffer]\nconsole.log(Buffer);\n```", "```ts\n**Error: Cannot resolve all parameters for Socket(undefined). Make sure they all have valid type or annotations.**\n\n```", "```ts\n\u2026\nimport {forwardRef} from 'angular2/core';\n\u2026\n@Injectable()\nclass Socket {\n  constructor(@Inject(forwardRef(() => Buffer))\n    private buffer: Buffer) {}\n}\nclass Buffer {\u2026}\n```", "```ts\nlet injector = Injector.resolveAndCreate([\n  provide(BUFFER_SIZE, { useValue: 42 }),\n  provide(Buffer, { useClass: Buffer }),\n  provide(Socket, { useClass: Socket })\n]);\n```", "```ts\nclass Http {\u2026}\n\n@Injectable()\nclass UserService {\n  constructor(private http: Http) {}\n}\n\nlet injector = Injector.resolveAndCreate([\n  UserService,\n  Http\n]);\n```", "```ts\nclass DummyHttp {\u2026}\n\n// ...\n\nlet injector = Injector.resolveAndCreate([\n  UserService,\n  provide(Http, { useClass: DummyHttp })\n]);\n```", "```ts\n// ch5/ts/configuring-providers/existing.ts\nlet injector = Injector.resolveAndCreate([\n  DummyService,\n  provide(Http, { useExisting: DummyService }),\n  UserService\n]);\n```", "```ts\nlet dummyHttp = {\n  get() {},\n  post() {}\n};\nlet injector = Injector.resolveAndCreate([\n  provide(DummyService, { useValue: dummyHttp }),\n  provide(Http, { useExisting: DummyService }),\n  UserService\n]);\nconsole.assert(injector.get(UserService).http === dummyHttp);\n```", "```ts\nlet injector = Injector.resolveAndCreate([\n  provide(TLSConnection, {\n    useFactory: (socket: Socket, certificate: Certificate, crypto: Crypto) =>  {\n      let connection = new TLSConnection();\n      connection.certificate = certificate;\n      connection.socket = socket;\n      connection.crypto = crypto;\n      socket.open();\n      return connection;\n    },\n    deps: [Socket, Certificate, Crypto]\n  }),\n  provide(BUFFER_SIZE, { useValue: 42 }),\n  Buffer,\n  Socket,\n  Certificate,\n  Crypto\n]);\n```", "```ts\nlet injector = Injector.resolveAndCreate([\n  ...\n  provide(BUFFER_SIZE, { useValue: 42 }),\n  Buffer,\n  Socket,\n  Certificate,\n  Crypto\n]);\n```", "```ts\n// buffer with size 42\nconsole.log(injector.get(Buffer));\n// socket with buffer with size 42\nconsole.log(injector.get(Socket));\n```", "```ts\nlet connection = new TLSConnection();\nconnection.certificate = certificate;\nconnection.socket = socket;\nconnection.crypto = crypto;\nsocket.open();\nreturn connection;\n```", "```ts\nprovide(TLSConnection, {\n  useFactory: (socket: Socket, certificate: Certificate, crypto: Crypto) =>  {\n    // ...\n  },\n  deps: [Socket, Certificate, Crypto]\n})\n```", "```ts\n// ch5/ts/parent-child/simple-example.ts\nclass Http {}\n\n@Injectable()\nclass UserService {\n  constructor(public http: Http) {}\n}\n\nlet parentInjector = Injector.resolveAndCreate([\n  Http\n]);\nlet childInjector = parentInjector.resolveAndCreateChild([\n  UserService\n]);\n\n// UserService { http: Http {} }\nconsole.log(childInjector.get(UserService));\n// true\nconsole.log(childInjector.get(Http) === parentInjector.get(Http));\n```", "```ts\nabstract class Channel {}\nclass Http extends Channel {}\nclass WebSocket extends Channel {}\n\n@Injectable()\nclass UserService {\n  constructor(public channel: Channel) {}\n}\n\nlet parentInjector = Injector.resolveAndCreate([\n  provide(Channel, { useClass: Http })\n]);\nlet childInjector = parentInjector.resolveAndCreateChild([\n  provide(Channel, { useClass: WebSocket }),\n  UserService\n]);\n```", "```ts\nchildInjector.get(UserService);\n```", "```ts\n@Injectable()\nclass UserService {\n  constructor(@Self() public channel: Channel) {}\n}\n```", "```ts\nlet parentInjector = Injector.resolveAndCreate([\n  provide(Channel, { useClass: Http })\n]);\nlet childInjector = parentInjector.resolveAndCreateChild([\n  UserService\n]);\n```", "```ts\nclass Context {\n  constructor(public parentContext: Context) {}\n}\n```", "```ts\nlet parentInjector = Injector.resolveAndCreate([\n  provide(Context, { useValue: new Context(null) })\n]);\nlet childInjector = parentInjector.resolveAndCreateChild([\n  Context\n]);\n```", "```ts\nchildInjector.get(Context);\n```", "```ts\nclass Context {\n  constructor(@SkipSelf() public parentContext: Context) {}\n}\n```", "```ts\nabstract class SortingAlgorithm {\n  abstract sort(collection: BaseCollection): BaseCollection;\n}\n\n@Injectable()\nclass Collection extends BaseCollection {\n  private sort: SortingAlgorithm;\n  constructor(sort: SortingAlgorithm) {\n    super();\n    this.sort = sort || this.getDefaultSort();\n  }\n}\n\nlet injector = Injector.resolveAndCreate([\n  Collection\n]);\n```", "```ts\n// ch5/ts/decorators/optional.ts\n@Injectable()\nclass Collection extends BaseCollection {\n  private sort: SortingAlgorithm;\n  constructor(@Optional() sort: SortingAlgorithm) {\n    super();\n    this.sort = sort || this.getDefaultSort();\n  }\n}\n```", "```ts\n// ch5/ts/configuring-providers/multi-providers.ts\nconst VALIDATOR = new OpaqueToken('validator');\n\ninterface EmployeeValidator {\n  (person: Employee): boolean;\n}\n\nclass Employee {...}\n\nlet injector = Injector.resolveAndCreate([\n  provide(VALIDATOR, { multi: true,\n    useValue: (person: Employee) => {\n      if (!person.name) {\n        return 'The name is required';\n      }\n    }\n  }),\n  provide(VALIDATOR, { multi: true,\n    useValue: (person: Employee) => {\n      if (!person.name || person.name.length < 1) {\n        return 'The name should be more than 1 symbol long';\n      }\n    }\n  }),\n  Employee\n]);\n```", "```ts\nclass Employee {\n  name: string;\n  constructor(@Inject(VALIDATOR) private validators: EmployeeValidator[]) {}\n  validate() {\n    return this.validators\n      .map(v => v(this))\n      .filter(value => !!value);\n  }\n}\n```", "```ts\n// ch4/ts/tooltip/app.ts\n// ...\n@Directive(...)\nexport class Tooltip {\n  @Input()\n  saTooltip:string;\n\n  constructor(private el: ElementRef, private overlay: Overlay) {\n    this.overlay.attach(el.nativeElement);\n  }\n  // ...\n}\n@Component({\n  // ...\n  providers: [Overlay],\n  directives: [Tooltip]\n})\nclass App {}\n```", "```ts\n@Component({\n  // ...\n  providers: [Overlay],\n  directives: [Tooltip]\u2029})\n\nclass App {}\n```", "```ts\n@Directive({\n  selector: '[saTooltip]',\n  providers: [OverlayMock]\n})\nexport class Tooltip {\n  @Input()\n  saTooltip: string;\n\n  constructor(private el: ElementRef, private overlay: Overlay) {\n    this.overlay.attach(el.nativeElement);\n  }\n  // ...\n}\n\n// ...\n\nbootstrap(App);\n```", "```ts\nbootstrap(AppMock, [provide(Overlay, {\n  useClass: OverlayMock\n})]);\n```", "```ts\n<markdown-panel>\n  <panel-title># Title</pane-title>\n  <panel-content>\n# Content of the panel\n* First point\n* Second point\n  </panel-content>\n</markdown-panel>\n```", "```ts\nimport * as markdown from 'markdown';\nclass Markdown {\n  toHTML(md) {\n    return markdown.toHTML(md);\n  }\n}\n```", "```ts\n// ch5/ts/directives/app.ts\n@Component({\n  selector: 'markdown-panel',\n  viewProviders: [Markdown],\n  styles: [...],\n  template: `\n    <div class=\"panel\">\n      <div class=\"panel-title\">\n        <ng-content select=\"panel-title\"></ng-content>\n      </div>\n      <div class=\"panel-content\">\n        <ng-content select=\"panel-content\"></ng-content>\n      </div>\n    </div>`\n})\nclass MarkdownPanel {\n  constructor(private el: ElementRef, private md: Markdown) {}\n  ngAfterContentInit() {\n    let el = this.el.nativeElement;\n    let title = el.querySelector('panel-title');\n    let content = el.querySelector('panel-content');\n    title.innerHTML = this.md.toHTML(title.innerHTML);\n    content.innerHTML = this.md.toHTML(content.innerHTML);\n  }\n}\n```", "```ts\n    <markdown-panel>\n      <panel-title>### Small title</panel-title>\n      <panel-content>\n      Some code\n      </panel-content>\n      <markdown-button>*Click to toggle*</markdown-button>\n   </markdown-panel>\n```", "```ts\n@Component({\n  selector: 'markdown-panel',\n  viewProviders: [Markdown],\n  directives: [MarkdownButton],\n  styles: [\u2026],\n  template: `\n    <div class=\"panel\">\n      <markdown-button>*Click to toggle*</markdown-button>\n      <div class=\"panel-title\">\n        <ng-content select=\"panel-title\"></ng-content>\n      </div>\n      <div class=\"panel-content\">\n        <ng-content select=\"panel-content\"></ng-content>\n      </div>\n    </div>`\n})\n```", "```ts\n// ch5/es5/simple-example/app.js\nvar Markdown = ng.core.Class({\n  constructor: function () {},\n  toHTML: function (md) {\n    return markdown.toHTML(md);\n  }\n});\n```", "```ts\n// ch5/es5/simple-example/app.js\n\nvar MarkdownPanel = ng.core.Component({\n  selector: 'markdown-panel',\n  viewProviders: [Markdown],\n  styles: [...],\n  template: '...'\n})\n.Class({\n  constructor: [Markdown, ng.core.ElementRef, function (md, el) {\n    this.md = md;\n    this.el = el;\n  }],\n  ngAfterContentInit: function () {\n    \u2026\n  }\n});\n```", "```ts\nModule.service('UserMapper',\n  ['User', '$http', function (User, $http) {\n    // \u2026\n  }]);\n```", "```ts\n\u2026\n.Class({\n  constructor: [[ng.core.Optional(), Markdown],\n    ng.core.ElementRef, function (md, el) {\n      this.md = md;\n      this.el = el;\n    }],\n  ngAfterContentInit: function () {\n    \u2026\n  }\n});\n\u2026\n```"]